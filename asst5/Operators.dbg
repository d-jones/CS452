.data # Program at 9.1	 	
5148:CLASS_Object: # ClassDecl at 0.0		
.word 0 # ClassDecl at 0.0		
5152:CLASS_Lib: # ClassDecl at 0.0   
.word CLASS_Object # ClassDecl at 0.0  
.word readLine # ClassDecl at 0.0 		
.word readInt # ClassDecl at 0.0			
.word readChar # ClassDecl at 0.0	 	
.word printStr # ClassDecl at 0.0	
.word printBool # ClassDecl at 0.0 	 
.word printInt # ClassDecl at 0.0   
.word intToString # ClassDecl at 0.0 	 
.word intToChar # ClassDecl at 0.0		
5188:CLASS_Main: # ClassDecl at 9.7	 
.word CLASS_Lib # ClassDecl at 9.7 
.word readLine # ClassDecl at 9.7	
.word readInt # ClassDecl at 9.7	 
.word readChar # ClassDecl at 9.7	
.word printStr # ClassDecl at 9.7 	
.word printBool # ClassDecl at 9.7	
.word printInt # ClassDecl at 9.7 		
.word intToString # ClassDecl at 9.7	 	
.word intToChar # ClassDecl at 9.7		 
.word fcn_202_main # ClassDecl at 9.7   
.word fcn_213_printIntVal # ClassDecl at 9.7  
.word fcn_228_printBoolVal # ClassDecl at 9.7 	
5236:CLASS_END_Main: # ClassDecl at 9.7		
5236:CLASS_END_Lib: # ClassDecl at 0.0	 
5236:CLASS_String: # ClassDecl at 0.0   
.word CLASS_Object # ClassDecl at 0.0 	
.word concat # ClassDecl at 0.0 		
.word substring # ClassDecl at 0.0	
.word length # ClassDecl at 0.0  	
.word charAt # ClassDecl at 0.0 	 
.word compareTo # ClassDecl at 0.0   
5260:CLASS_END_String: # ClassDecl at 0.0	 
5260:CLASS_RunMain: # ClassDecl at 0.0  
.word CLASS_Object # ClassDecl at 0.0 	
5264:CLASS_END_RunMain: # ClassDecl at 0.0	
5264:CLASS_END_Object: # ClassDecl at 0.0 
 .data # Program at 9.1  	
  .byte 10 # StringLiteral at 22.11 
  .byte 0 # StringLiteral at 22.11	
  .byte 0 # StringLiteral at 22.11   
  .byte 0 # StringLiteral at 22.11		
  .word CLASS_String # StringLiteral at 22.11 	 
  .word 2 # StringLiteral at 22.11 
  .word -1 # StringLiteral at 22.11 
5280:strLit_42: # StringLiteral at 22.11	
  .byte 10 # StringLiteral at 37.11  
  .byte 0 # StringLiteral at 37.11	 	
  .byte 0 # StringLiteral at 37.11  	
  .byte 0 # StringLiteral at 37.11		
  .word CLASS_String # StringLiteral at 37.11 		
  .word 2 # StringLiteral at 37.11 	 
  .word -1 # StringLiteral at 37.11	 
5296:strLit_124: # StringLiteral at 37.11 
  .byte 10 # StringLiteral at 52.11 	
  .byte 0 # StringLiteral at 52.11		
  .byte 0 # StringLiteral at 52.11   
  .byte 0 # StringLiteral at 52.11 		
  .word CLASS_String # StringLiteral at 52.11			
  .word 2 # StringLiteral at 52.11 
  .word -1 # StringLiteral at 52.11	
5312:strLit_198: # StringLiteral at 52.11   
  .byte 32 # StringLiteral at 58.11	  
  .byte 0 # StringLiteral at 58.11 	
  .byte 0 # StringLiteral at 58.11 	 
  .byte 0 # StringLiteral at 58.11   
  .word CLASS_String # StringLiteral at 58.11	 	
  .word 2 # StringLiteral at 58.11 
  .word -1 # StringLiteral at 58.11  
5328:strLit_209: # StringLiteral at 58.11		 
  .byte 84 # StringLiteral at 64.16 	 
  .byte 32 # StringLiteral at 64.16  
  .byte 0 # StringLiteral at 64.16 	
  .byte 0 # StringLiteral at 64.16	 
  .word CLASS_String # StringLiteral at 64.16  
  .word 2 # StringLiteral at 64.16		
  .word -2 # StringLiteral at 64.16			
5344:strLit_217: # StringLiteral at 64.16  	
  .byte 70 # StringLiteral at 67.16 	
  .byte 32 # StringLiteral at 67.16 	
  .byte 0 # StringLiteral at 67.16 	 
  .byte 0 # StringLiteral at 67.16  	
  .word CLASS_String # StringLiteral at 67.16 		
  .word 2 # StringLiteral at 67.16  	
  .word -2 # StringLiteral at 67.16	  
5360:strLit_222: # StringLiteral at 67.16		 
  # ENTER NODE # Program at 9.1 
  .text # Program at 9.1		
  .globl main # Program at 9.1 		
0:  main: # Program at 9.1 		
0#  jal vm_init # Program at 9.1	
    # ENTER NODE # ExpStatement at 0.0  
      # ENTER NODE # Call at 0.0			
        # ENTER NODE # NewObject at 0.0	 
4#        li $s6, 1 # NewObject at 0.0   
8#        li $s7, 0 # NewObject at 0.0 	 
12#        jal newObject # NewObject at 0.0  	
16#        la $t0, CLASS_Main # NewObject at 0.0 	
20#        sw $t0, -12($s7) # NewObject at 0.0  	
        # EXIT NODE # NewObject at 0.0 	 
24#      lw $t0, 0($sp) # Call at 0.0	
28#      beq $t0, $zero, nullPtrException # Call at 0.0	 	
32#      lw $t0, -12($t0) # Call at 0.0	  
36#      lw $t0, 36($t0) # Call at 0.0   
40#      jalr $t0 # Call at 0.0			
      # EXIT NODE # Call at 0.0		 
    # EXIT NODE # ExpStatement at 0.0	
44#  li $v0, 10 # Program at 9.1		 
48#  syscall # Program at 9.1		
    # ENTER NODE # MethodDeclVoid at 12.17 	
    .globl fcn_202_main # MethodDeclVoid at 12.17   
52:    fcn_202_main: # MethodDeclVoid at 12.17 
52#    subu $sp, $sp, 8 # MethodDeclVoid at 12.17 
56#    sw $ra, 4($sp) # MethodDeclVoid at 12.17  
60#    sw $s2, ($sp) # MethodDeclVoid at 12.17   
64#    lw $s2, 8($sp) # MethodDeclVoid at 12.17  	
      # ENTER NODE # ExpStatement at 15.2 	
        # ENTER NODE # Call at 15.2	  
          # ENTER NODE # This at 15.2 		
68#          subu $sp, $sp, 4 # This at 15.2  
72#          sw $s2, ($sp) # This at 15.2	  
          # EXIT NODE # This at 15.2 
          # ENTER NODE # Plus at 15.16   
            # ENTER NODE # IntegerLiteral at 15.14		 
76#            subu $sp, $sp, 8 # IntegerLiteral at 15.14	 	
80#            sw $s5, 4($sp) # IntegerLiteral at 15.14  	
84#            li $t0, 83 # IntegerLiteral at 15.14   
88#            sw $t0, ($sp) # IntegerLiteral at 15.14 	 
            # EXIT NODE # IntegerLiteral at 15.14	 
            # ENTER NODE # IntegerLiteral at 15.17 		
92#            subu $sp, $sp, 8 # IntegerLiteral at 15.17   
96#            sw $s5, 4($sp) # IntegerLiteral at 15.17  	
100#            li $t0, 7 # IntegerLiteral at 15.17 
104#            sw $t0, ($sp) # IntegerLiteral at 15.17		
            # EXIT NODE # IntegerLiteral at 15.17	 	
108#          lw $t0, ($sp) # Plus at 15.16		 
112#          lw $t1, 8($sp) # Plus at 15.16	 	
116#          addu $t0, $t0, $t1 # Plus at 15.16		
120#          addu $sp, $sp, 8 # Plus at 15.16		
124#          sw $t0, ($sp) # Plus at 15.16			
          # EXIT NODE # Plus at 15.16		
128#        lw $t0, 8($sp) # Call at 15.2 
132#        beq $t0, $zero, nullPtrException # Call at 15.2 	
136#        lw $t0, -12($t0) # Call at 15.2	 
140#        lw $t0, 40($t0) # Call at 15.2 		
144#        jalr $t0 # Call at 15.2	 	
        # EXIT NODE # Call at 15.2		
      # EXIT NODE # ExpStatement at 15.2  	
      # ENTER NODE # ExpStatement at 16.2 	 
        # ENTER NODE # Call at 16.2	  
          # ENTER NODE # This at 16.2 
148#          subu $sp, $sp, 4 # This at 16.2	  
152#          sw $s2, ($sp) # This at 16.2 		
          # EXIT NODE # This at 16.2 	 
          # ENTER NODE # Minus at 16.16  	
            # ENTER NODE # IntegerLiteral at 16.14 		
156#            subu $sp, $sp, 8 # IntegerLiteral at 16.14 	 
160#            sw $s5, 4($sp) # IntegerLiteral at 16.14	
164#            li $t0, 83 # IntegerLiteral at 16.14		
168#            sw $t0, ($sp) # IntegerLiteral at 16.14	  
            # EXIT NODE # IntegerLiteral at 16.14 	
            # ENTER NODE # IntegerLiteral at 16.17	  
172#            subu $sp, $sp, 8 # IntegerLiteral at 16.17   
176#            sw $s5, 4($sp) # IntegerLiteral at 16.17 	
180#            li $t0, 7 # IntegerLiteral at 16.17  	
184#            sw $t0, ($sp) # IntegerLiteral at 16.17 	 
            # EXIT NODE # IntegerLiteral at 16.17 		
188#          lw $t0, ($sp) # Minus at 16.16 
192#          lw $t1, 8($sp) # Minus at 16.16	  
196#          subu $t0, $t1, $t0 # Minus at 16.16			
200#          addu $sp, $sp, 8 # Minus at 16.16 		
204#          sw $t0, ($sp) # Minus at 16.16		
            # ENTER NODE # Minus at 16.16	  
208#            lw $t0, 8($sp) # Call at 16.2		
212#            beq $t0, $zero, nullPtrException # Call at 16.2			
216#            lw $t0, -12($t0) # Call at 16.2	
220#            lw $t0, 40($t0) # Call at 16.2		 
224#            jalr $t0 # Call at 16.2	 
            # EXIT NODE # Call at 16.2  
          # EXIT NODE # ExpStatement at 16.2		
          # ENTER NODE # ExpStatement at 17.2 	
            # ENTER NODE # Call at 17.2			
              # ENTER NODE # This at 17.2		 
228#              subu $sp, $sp, 4 # This at 17.2   
232#              sw $s2, ($sp) # This at 17.2	  
              # EXIT NODE # This at 17.2	  
              # ENTER NODE # Times at 17.16 		
                # ENTER NODE # IntegerLiteral at 17.14	 
236#                subu $sp, $sp, 8 # IntegerLiteral at 17.14	 	
240#                sw $s5, 4($sp) # IntegerLiteral at 17.14	
244#                li $t0, 83 # IntegerLiteral at 17.14 	
248#                sw $t0, ($sp) # IntegerLiteral at 17.14	 	
                # EXIT NODE # IntegerLiteral at 17.14	  
                # ENTER NODE # IntegerLiteral at 17.17 
252#                subu $sp, $sp, 8 # IntegerLiteral at 17.17 	
256#                sw $s5, 4($sp) # IntegerLiteral at 17.17	 	
260#                li $t0, 7 # IntegerLiteral at 17.17  	
264#                sw $t0, ($sp) # IntegerLiteral at 17.17 
                # EXIT NODE # IntegerLiteral at 17.17  
268#              lw $t0, ($sp) # Times at 17.16  
272#              lw $t1, 8($sp) # Times at 17.16	  
276#              mult $t0, $t1 # Times at 17.16   
280#              mflo $t0 # Times at 17.16   
284#              addu $sp, $sp, 8 # Times at 17.16   
288#              sw $t0, ($sp) # Times at 17.16   
              # EXIT NODE # Times at 17.16		
292#            lw $t0, 8($sp) # Call at 17.2			
296#            beq $t0, $zero, nullPtrException # Call at 17.2 
300#            lw $t0, -12($t0) # Call at 17.2		 
304#            lw $t0, 40($t0) # Call at 17.2	
308#            jalr $t0 # Call at 17.2	  
            # EXIT NODE # Call at 17.2	 	
          # EXIT NODE # ExpStatement at 17.2	
          # ENTER NODE # ExpStatement at 18.2		 
            # ENTER NODE # Call at 18.2		 
              # ENTER NODE # This at 18.2		 
312#              subu $sp, $sp, 4 # This at 18.2   
316#              sw $s2, ($sp) # This at 18.2   
              # EXIT NODE # This at 18.2		
              # ENTER NODE # Divide at 18.16	 	
                # ENTER NODE # IntegerLiteral at 18.14  	
320#                subu $sp, $sp, 8 # IntegerLiteral at 18.14		
324#                sw $s5, 4($sp) # IntegerLiteral at 18.14			
328#                li $t0, 83 # IntegerLiteral at 18.14  	
332#                sw $t0, ($sp) # IntegerLiteral at 18.14 
                # EXIT NODE # IntegerLiteral at 18.14 	 
                # ENTER NODE # IntegerLiteral at 18.17		
336#                subu $sp, $sp, 8 # IntegerLiteral at 18.17	 
340#                sw $s5, 4($sp) # IntegerLiteral at 18.17 	 
344#                li $t0, 7 # IntegerLiteral at 18.17		 
348#                sw $t0, ($sp) # IntegerLiteral at 18.17 	
                # EXIT NODE # IntegerLiteral at 18.17	 
352#              jal divide # Divide at 18.16	 	
              # EXIT NODE # Divide at 18.16 		
356#            lw $t0, 8($sp) # Call at 18.2 
360#            beq $t0, $zero, nullPtrException # Call at 18.2 	
364#            lw $t0, -12($t0) # Call at 18.2  
368#            lw $t0, 40($t0) # Call at 18.2  
372#            jalr $t0 # Call at 18.2		 
            # EXIT NODE # Call at 18.2	 
          # EXIT NODE # ExpStatement at 18.2 	
          # ENTER NODE # ExpStatement at 19.2 		
            # ENTER NODE # Call at 19.2			
              # ENTER NODE # This at 19.2  	
376#              subu $sp, $sp, 4 # This at 19.2  
380#              sw $s2, ($sp) # This at 19.2 	
              # EXIT NODE # This at 19.2 		
              # ENTER NODE # Remainder at 19.16		
                # ENTER NODE # IntegerLiteral at 19.14 	
384#                subu $sp, $sp, 8 # IntegerLiteral at 19.14	 	
388#                sw $s5, 4($sp) # IntegerLiteral at 19.14   
392#                li $t0, 83 # IntegerLiteral at 19.14 		
396#                sw $t0, ($sp) # IntegerLiteral at 19.14 	 
                # EXIT NODE # IntegerLiteral at 19.14		
                # ENTER NODE # IntegerLiteral at 19.17		
400#                subu $sp, $sp, 8 # IntegerLiteral at 19.17 		
404#                sw $s5, 4($sp) # IntegerLiteral at 19.17   
408#                li $t0, 7 # IntegerLiteral at 19.17 
412#                sw $t0, ($sp) # IntegerLiteral at 19.17 	 
                # EXIT NODE # IntegerLiteral at 19.17  	
416#              jal remainder # Remainder at 19.16  	
              # EXIT NODE # Remainder at 19.16  
420#            lw $t0, 8($sp) # Call at 19.2	 	
424#            beq $t0, $zero, nullPtrException # Call at 19.2  	
428#            lw $t0, -12($t0) # Call at 19.2  	
432#            lw $t0, 40($t0) # Call at 19.2	 	
436#            jalr $t0 # Call at 19.2	  
            # EXIT NODE # Call at 19.2 	
          # EXIT NODE # ExpStatement at 19.2 	
          # ENTER NODE # ExpStatement at 20.2 		
            # ENTER NODE # Call at 20.2	
              # ENTER NODE # This at 20.2	 
440#              subu $sp, $sp, 4 # This at 20.2	 
444#              sw $s2, ($sp) # This at 20.2 	
              # EXIT NODE # This at 20.2	 	
              # ENTER NODE # Plus at 20.14   
                # ENTER NODE # IntegerLiteral at 20.14 	
448#                subu $sp, $sp, 8 # IntegerLiteral at 20.14		
452#                sw $s5, 4($sp) # IntegerLiteral at 20.14			
456#                li $t0, 0 # IntegerLiteral at 20.14	
460#                sw $t0, ($sp) # IntegerLiteral at 20.14 		
                # EXIT NODE # IntegerLiteral at 20.14 	
                # ENTER NODE # IntegerLiteral at 20.15	 	
464#                subu $sp, $sp, 8 # IntegerLiteral at 20.15			
468#                sw $s5, 4($sp) # IntegerLiteral at 20.15  
472#                li $t0, 53 # IntegerLiteral at 20.15 	
476#                sw $t0, ($sp) # IntegerLiteral at 20.15 
                # EXIT NODE # IntegerLiteral at 20.15 	 
480#              lw $t0, ($sp) # Plus at 20.14 	 
484#              lw $t1, 8($sp) # Plus at 20.14		
488#              addu $t0, $t0, $t1 # Plus at 20.14			
492#              addu $sp, $sp, 8 # Plus at 20.14	 	
496#              sw $t0, ($sp) # Plus at 20.14  	
              # EXIT NODE # Plus at 20.14	
500#            lw $t0, 8($sp) # Call at 20.2  	
504#            beq $t0, $zero, nullPtrException # Call at 20.2 
508#            lw $t0, -12($t0) # Call at 20.2		 
512#            lw $t0, 40($t0) # Call at 20.2	 	
516#            jalr $t0 # Call at 20.2 
            # EXIT NODE # Call at 20.2	
          # EXIT NODE # ExpStatement at 20.2			
          # ENTER NODE # ExpStatement at 21.2	  
            # ENTER NODE # Call at 21.2	
              # ENTER NODE # This at 21.2   
520#              subu $sp, $sp, 4 # This at 21.2 
524#              sw $s2, ($sp) # This at 21.2 	 
              # EXIT NODE # This at 21.2 	
              # ENTER NODE # Minus at 21.14	  
                # ENTER NODE # IntegerLiteral at 21.14			
528#                subu $sp, $sp, 8 # IntegerLiteral at 21.14		 
532#                sw $s5, 4($sp) # IntegerLiteral at 21.14	 
536#                li $t0, 0 # IntegerLiteral at 21.14 	 
540#                sw $t0, ($sp) # IntegerLiteral at 21.14 		
                # EXIT NODE # IntegerLiteral at 21.14   
                # ENTER NODE # IntegerLiteral at 21.15 		
544#                subu $sp, $sp, 8 # IntegerLiteral at 21.15 
548#                sw $s5, 4($sp) # IntegerLiteral at 21.15	  
552#                li $t0, 53 # IntegerLiteral at 21.15   
556#                sw $t0, ($sp) # IntegerLiteral at 21.15	 	
                # EXIT NODE # IntegerLiteral at 21.15 	 
560#              lw $t0, ($sp) # Minus at 21.14 		
564#              lw $t1, 8($sp) # Minus at 21.14		
568#              subu $t0, $t1, $t0 # Minus at 21.14 
572#              addu $sp, $sp, 8 # Minus at 21.14			
576#              sw $t0, ($sp) # Minus at 21.14  	
                # ENTER NODE # Minus at 21.14	 	
580#                lw $t0, 8($sp) # Call at 21.2	
584#                beq $t0, $zero, nullPtrException # Call at 21.2 		
588#                lw $t0, -12($t0) # Call at 21.2 	
592#                lw $t0, 40($t0) # Call at 21.2  	
596#                jalr $t0 # Call at 21.2 
                # EXIT NODE # Call at 21.2 		
              # EXIT NODE # ExpStatement at 21.2	 	
              # ENTER NODE # ExpStatement at 22.2		 
                # ENTER NODE # Call at 22.2  
                  # ENTER NODE # This at 22.2   
600#                  subu $sp, $sp, 4 # This at 22.2  	
604#                  sw $s2, ($sp) # This at 22.2		
                  # EXIT NODE # This at 22.2  	
                  # ENTER NODE # StringLiteral at 22.11 
608#                  subu $sp, $sp, 4 # StringLiteral at 22.11 		
612#                  la $t0, strLit_42 # StringLiteral at 22.11	 
616#                  sw $t0, ($sp) # StringLiteral at 22.11 		
                  # EXIT NODE # StringLiteral at 22.11		 
620#                lw $t0, 4($sp) # Call at 22.2 	
624#                beq $t0, $zero, nullPtrException # Call at 22.2	 
628#                lw $t0, -12($t0) # Call at 22.2  
632#                lw $t0, 16($t0) # Call at 22.2 		
636#                jalr $t0 # Call at 22.2 	 
                # EXIT NODE # Call at 22.2 	
              # EXIT NODE # ExpStatement at 22.2   
              # ENTER NODE # ExpStatement at 25.2 
                # ENTER NODE # Call at 25.2		
                  # ENTER NODE # This at 25.2 	 
640#                  subu $sp, $sp, 4 # This at 25.2 	 
644#                  sw $s2, ($sp) # This at 25.2		 
                  # EXIT NODE # This at 25.2		
                  # ENTER NODE # GreaterThan at 25.17 		
                    # ENTER NODE # IntegerLiteral at 25.15		
648#                    subu $sp, $sp, 8 # IntegerLiteral at 25.15 	
652#                    sw $s5, 4($sp) # IntegerLiteral at 25.15   
656#                    li $t0, 83 # IntegerLiteral at 25.15 	 
660#                    sw $t0, ($sp) # IntegerLiteral at 25.15 	 
                    # EXIT NODE # IntegerLiteral at 25.15 	 
                    # ENTER NODE # IntegerLiteral at 25.18 
664#                    subu $sp, $sp, 8 # IntegerLiteral at 25.18  
668#                    sw $s5, 4($sp) # IntegerLiteral at 25.18	 	
672#                    li $t0, 7 # IntegerLiteral at 25.18			
676#                    sw $t0, ($sp) # IntegerLiteral at 25.18	
                    # EXIT NODE # IntegerLiteral at 25.18  	
680#                  lw $t0, ($sp) # GreaterThan at 25.17  
684#                  lw $t1, 8($sp) # GreaterThan at 25.17	 
688#                  sgt $t0, $t1, $t0 # GreaterThan at 25.17		
692#                  addu $sp, $sp, 12 # GreaterThan at 25.17  	
696#                  sw $t0, ($sp) # GreaterThan at 25.17 	 
                  # EXIT NODE # GreaterThan at 25.17 		
700#                lw $t0, 4($sp) # Call at 25.2 	
704#                beq $t0, $zero, nullPtrException # Call at 25.2	
708#                lw $t0, -12($t0) # Call at 25.2   
712#                lw $t0, 44($t0) # Call at 25.2		 
716#                jalr $t0 # Call at 25.2	  
                # EXIT NODE # Call at 25.2 	 
              # EXIT NODE # ExpStatement at 25.2   
              # ENTER NODE # ExpStatement at 26.2  
                # ENTER NODE # Call at 26.2	 
                  # ENTER NODE # This at 26.2 
720#                  subu $sp, $sp, 4 # This at 26.2 	
724#                  sw $s2, ($sp) # This at 26.2 
                  # EXIT NODE # This at 26.2	 	
                  # ENTER NODE # LessThan at 26.17	 	
                    # ENTER NODE # IntegerLiteral at 26.15  	
728#                    subu $sp, $sp, 8 # IntegerLiteral at 26.15 
732#                    sw $s5, 4($sp) # IntegerLiteral at 26.15   
736#                    li $t0, 83 # IntegerLiteral at 26.15 
740#                    sw $t0, ($sp) # IntegerLiteral at 26.15 	
                    # EXIT NODE # IntegerLiteral at 26.15  	
                    # ENTER NODE # IntegerLiteral at 26.18	  
744#                    subu $sp, $sp, 8 # IntegerLiteral at 26.18	  
748#                    sw $s5, 4($sp) # IntegerLiteral at 26.18 
752#                    li $t0, 7 # IntegerLiteral at 26.18 
756#                    sw $t0, ($sp) # IntegerLiteral at 26.18	  
                    # EXIT NODE # IntegerLiteral at 26.18	 	
760#                  lw $t0, ($sp) # LessThan at 26.17		
764#                  lw $t1, 8($sp) # LessThan at 26.17	 	
768#                  slt $t0, $t1, $t0 # LessThan at 26.17  
772#                  addu $sp, $sp, 12 # LessThan at 26.17	  
776#                  sw $t0, ($sp) # LessThan at 26.17 	 
                  # EXIT NODE # LessThan at 26.17	
780#                lw $t0, 4($sp) # Call at 26.2 	 
784#                beq $t0, $zero, nullPtrException # Call at 26.2			
788#                lw $t0, -12($t0) # Call at 26.2 
792#                lw $t0, 44($t0) # Call at 26.2 
796#                jalr $t0 # Call at 26.2			
                # EXIT NODE # Call at 26.2		
              # EXIT NODE # ExpStatement at 26.2	 	
              # ENTER NODE # ExpStatement at 27.2	 	
                # ENTER NODE # Call at 27.2  
                  # ENTER NODE # This at 27.2		 
800#                  subu $sp, $sp, 4 # This at 27.2		
804#                  sw $s2, ($sp) # This at 27.2			
                  # EXIT NODE # This at 27.2 	 
                  # ENTER NODE # Not at 27.17 	
                    # ENTER NODE # LessThan at 27.17  	
                      # ENTER NODE # IntegerLiteral at 27.15  
808#                      subu $sp, $sp, 8 # IntegerLiteral at 27.15	
812#                      sw $s5, 4($sp) # IntegerLiteral at 27.15	  
816#                      li $t0, 83 # IntegerLiteral at 27.15		
820#                      sw $t0, ($sp) # IntegerLiteral at 27.15 	
                      # EXIT NODE # IntegerLiteral at 27.15	 	
                      # ENTER NODE # IntegerLiteral at 27.19	 	
824#                      subu $sp, $sp, 8 # IntegerLiteral at 27.19	
828#                      sw $s5, 4($sp) # IntegerLiteral at 27.19   
832#                      li $t0, 7 # IntegerLiteral at 27.19   
836#                      sw $t0, ($sp) # IntegerLiteral at 27.19 
                      # EXIT NODE # IntegerLiteral at 27.19 		
840#                    lw $t0, ($sp) # LessThan at 27.17	 	
844#                    lw $t1, 8($sp) # LessThan at 27.17	
848#                    slt $t0, $t1, $t0 # LessThan at 27.17 	
852#                    addu $sp, $sp, 12 # LessThan at 27.17 	
856#                    sw $t0, ($sp) # LessThan at 27.17 	
                    # EXIT NODE # LessThan at 27.17	  
860#                  lw $t0, ($sp) # Not at 27.17	  
864#                  xor $t0, $t0, 1 # Not at 27.17 		
868#                  sw $t0, ($sp) # Not at 27.17		
                  # EXIT NODE # Not at 27.17 		
872#                lw $t0, 4($sp) # Call at 27.2	  
876#                beq $t0, $zero, nullPtrException # Call at 27.2			
880#                lw $t0, -12($t0) # Call at 27.2 	 
884#                lw $t0, 44($t0) # Call at 27.2   
888#                jalr $t0 # Call at 27.2		 
                # EXIT NODE # Call at 27.2		
              # EXIT NODE # ExpStatement at 27.2 
              # ENTER NODE # ExpStatement at 28.2   
                # ENTER NODE # Call at 28.2		
                  # ENTER NODE # This at 28.2   
892#                  subu $sp, $sp, 4 # This at 28.2 
896#                  sw $s2, ($sp) # This at 28.2	 	
                  # EXIT NODE # This at 28.2	 
                  # ENTER NODE # Not at 28.17 
                    # ENTER NODE # GreaterThan at 28.17  	
                      # ENTER NODE # IntegerLiteral at 28.15 		
900#                      subu $sp, $sp, 8 # IntegerLiteral at 28.15   
904#                      sw $s5, 4($sp) # IntegerLiteral at 28.15 		
908#                      li $t0, 83 # IntegerLiteral at 28.15 		
912#                      sw $t0, ($sp) # IntegerLiteral at 28.15 	
                      # EXIT NODE # IntegerLiteral at 28.15	  
                      # ENTER NODE # IntegerLiteral at 28.19		 
916#                      subu $sp, $sp, 8 # IntegerLiteral at 28.19		
920#                      sw $s5, 4($sp) # IntegerLiteral at 28.19   
924#                      li $t0, 7 # IntegerLiteral at 28.19		
928#                      sw $t0, ($sp) # IntegerLiteral at 28.19  	
                      # EXIT NODE # IntegerLiteral at 28.19 	 
932#                    lw $t0, ($sp) # GreaterThan at 28.17			
936#                    lw $t1, 8($sp) # GreaterThan at 28.17  
940#                    sgt $t0, $t1, $t0 # GreaterThan at 28.17	  
944#                    addu $sp, $sp, 12 # GreaterThan at 28.17		 
948#                    sw $t0, ($sp) # GreaterThan at 28.17  
                    # EXIT NODE # GreaterThan at 28.17		 
952#                  lw $t0, ($sp) # Not at 28.17			
956#                  xor $t0, $t0, 1 # Not at 28.17 
960#                  sw $t0, ($sp) # Not at 28.17	  
                  # EXIT NODE # Not at 28.17	
964#                lw $t0, 4($sp) # Call at 28.2   
968#                beq $t0, $zero, nullPtrException # Call at 28.2   
972#                lw $t0, -12($t0) # Call at 28.2 		
976#                lw $t0, 44($t0) # Call at 28.2 		
980#                jalr $t0 # Call at 28.2		 
                # EXIT NODE # Call at 28.2			
              # EXIT NODE # ExpStatement at 28.2	 
              # ENTER NODE # ExpStatement at 29.2	 
                # ENTER NODE # Call at 29.2   
                  # ENTER NODE # This at 29.2  	
984#                  subu $sp, $sp, 4 # This at 29.2   
988#                  sw $s2, ($sp) # This at 29.2 
                  # EXIT NODE # This at 29.2			
                  # ENTER NODE # Not at 29.17	 
                    # ENTER NODE # Equals at 29.17 
                      # ENTER NODE # IntegerLiteral at 29.15   
992#                      subu $sp, $sp, 8 # IntegerLiteral at 29.15	 	
996#                      sw $s5, 4($sp) # IntegerLiteral at 29.15 
1000#                      li $t0, 83 # IntegerLiteral at 29.15  	
1004#                      sw $t0, ($sp) # IntegerLiteral at 29.15	 
                      # EXIT NODE # IntegerLiteral at 29.15  	
                      # ENTER NODE # IntegerLiteral at 29.19	 	
1008#                      subu $sp, $sp, 8 # IntegerLiteral at 29.19   
1012#                      sw $s5, 4($sp) # IntegerLiteral at 29.19 		
1016#                      li $t0, 7 # IntegerLiteral at 29.19 	 
1020#                      sw $t0, ($sp) # IntegerLiteral at 29.19			
                      # EXIT NODE # IntegerLiteral at 29.19 		
1024#                    lw $t0, ($sp) # Equals at 29.17 		
1028#                    lw $t1, 8($sp) # Equals at 29.17  	
1032#                    seq $t0, $t0, $t1 # Equals at 29.17	 	
1033##...subu $at,$t0,$t1
1037##...sltiu $t0,$at,1
1040#                    addu $sp, $sp, 12 # Equals at 29.17  
1044#                    sw $t0, ($sp) # Equals at 29.17			
                    # EXIT NODE # Equals at 29.17			
1048#                  lw $t0, ($sp) # Not at 29.17   
1052#                  xor $t0, $t0, 1 # Not at 29.17	
1056#                  sw $t0, ($sp) # Not at 29.17		
                  # EXIT NODE # Not at 29.17	  
1060#                lw $t0, 4($sp) # Call at 29.2	  
1064#                beq $t0, $zero, nullPtrException # Call at 29.2 		
1068#                lw $t0, -12($t0) # Call at 29.2 		
1072#                lw $t0, 44($t0) # Call at 29.2  	
1076#                jalr $t0 # Call at 29.2   
                # EXIT NODE # Call at 29.2 	
              # EXIT NODE # ExpStatement at 29.2	  
              # ENTER NODE # ExpStatement at 30.2	 	
                # ENTER NODE # Call at 30.2	
                  # ENTER NODE # This at 30.2	
1080#                  subu $sp, $sp, 4 # This at 30.2   
1084#                  sw $s2, ($sp) # This at 30.2   
                  # EXIT NODE # This at 30.2  
                  # ENTER NODE # Equals at 30.17		 
                    # ENTER NODE # IntegerLiteral at 30.15	 	
1088#                    subu $sp, $sp, 8 # IntegerLiteral at 30.15			
1092#                    sw $s5, 4($sp) # IntegerLiteral at 30.15 		
1096#                    li $t0, 83 # IntegerLiteral at 30.15		
1100#                    sw $t0, ($sp) # IntegerLiteral at 30.15	
                    # EXIT NODE # IntegerLiteral at 30.15 	
                    # ENTER NODE # IntegerLiteral at 30.19 		
1104#                    subu $sp, $sp, 8 # IntegerLiteral at 30.19	 	
1108#                    sw $s5, 4($sp) # IntegerLiteral at 30.19  
1112#                    li $t0, 7 # IntegerLiteral at 30.19	 	
1116#                    sw $t0, ($sp) # IntegerLiteral at 30.19 	 
                    # EXIT NODE # IntegerLiteral at 30.19 	 
1120#                  lw $t0, ($sp) # Equals at 30.17	  
1124#                  lw $t1, 8($sp) # Equals at 30.17	 	
1128#                  seq $t0, $t0, $t1 # Equals at 30.17			
1129##...subu $at,$t0,$t1
1133##...sltiu $t0,$at,1
1136#                  addu $sp, $sp, 12 # Equals at 30.17	  
1140#                  sw $t0, ($sp) # Equals at 30.17  	
                  # EXIT NODE # Equals at 30.17 		
1144#                lw $t0, 4($sp) # Call at 30.2	  
1148#                beq $t0, $zero, nullPtrException # Call at 30.2  
1152#                lw $t0, -12($t0) # Call at 30.2	 	
1156#                lw $t0, 44($t0) # Call at 30.2 		
1160#                jalr $t0 # Call at 30.2 	
                # EXIT NODE # Call at 30.2 
              # EXIT NODE # ExpStatement at 30.2	
              # ENTER NODE # ExpStatement at 31.2  
                # ENTER NODE # Call at 31.2 		
                  # ENTER NODE # This at 31.2   
1164#                  subu $sp, $sp, 4 # This at 31.2	 
1168#                  sw $s2, ($sp) # This at 31.2 		
                  # EXIT NODE # This at 31.2	  
                  # ENTER NODE # GreaterThan at 31.17		
                    # ENTER NODE # IntegerLiteral at 31.15 	
1172#                    subu $sp, $sp, 8 # IntegerLiteral at 31.15  
1176#                    sw $s5, 4($sp) # IntegerLiteral at 31.15 		
1180#                    li $t0, 83 # IntegerLiteral at 31.15		
1184#                    sw $t0, ($sp) # IntegerLiteral at 31.15  	
                    # EXIT NODE # IntegerLiteral at 31.15	 
                    # ENTER NODE # IntegerLiteral at 31.18		
1188#                    subu $sp, $sp, 8 # IntegerLiteral at 31.18 	 
1192#                    sw $s5, 4($sp) # IntegerLiteral at 31.18	  
1196#                    li $t0, 83 # IntegerLiteral at 31.18	 
1200#                    sw $t0, ($sp) # IntegerLiteral at 31.18 	
                    # EXIT NODE # IntegerLiteral at 31.18	 	
1204#                  lw $t0, ($sp) # GreaterThan at 31.17			
1208#                  lw $t1, 8($sp) # GreaterThan at 31.17		
1212#                  sgt $t0, $t1, $t0 # GreaterThan at 31.17  
1216#                  addu $sp, $sp, 12 # GreaterThan at 31.17  
1220#                  sw $t0, ($sp) # GreaterThan at 31.17	
                  # EXIT NODE # GreaterThan at 31.17 
1224#                lw $t0, 4($sp) # Call at 31.2	
1228#                beq $t0, $zero, nullPtrException # Call at 31.2 	 
1232#                lw $t0, -12($t0) # Call at 31.2   
1236#                lw $t0, 44($t0) # Call at 31.2	  
1240#                jalr $t0 # Call at 31.2	 	
                # EXIT NODE # Call at 31.2		
              # EXIT NODE # ExpStatement at 31.2 	 
              # ENTER NODE # ExpStatement at 32.2   
                # ENTER NODE # Call at 32.2		 
                  # ENTER NODE # This at 32.2	 	
1244#                  subu $sp, $sp, 4 # This at 32.2			
1248#                  sw $s2, ($sp) # This at 32.2		 
                  # EXIT NODE # This at 32.2		
                  # ENTER NODE # LessThan at 32.17	  
                    # ENTER NODE # IntegerLiteral at 32.15	
1252#                    subu $sp, $sp, 8 # IntegerLiteral at 32.15	 	
1256#                    sw $s5, 4($sp) # IntegerLiteral at 32.15 	
1260#                    li $t0, 83 # IntegerLiteral at 32.15		 
1264#                    sw $t0, ($sp) # IntegerLiteral at 32.15 	
                    # EXIT NODE # IntegerLiteral at 32.15	 
                    # ENTER NODE # IntegerLiteral at 32.18	 
1268#                    subu $sp, $sp, 8 # IntegerLiteral at 32.18   
1272#                    sw $s5, 4($sp) # IntegerLiteral at 32.18		 
1276#                    li $t0, 83 # IntegerLiteral at 32.18			
1280#                    sw $t0, ($sp) # IntegerLiteral at 32.18	 
                    # EXIT NODE # IntegerLiteral at 32.18 		
1284#                  lw $t0, ($sp) # LessThan at 32.17	 
1288#                  lw $t1, 8($sp) # LessThan at 32.17  
1292#                  slt $t0, $t1, $t0 # LessThan at 32.17	  
1296#                  addu $sp, $sp, 12 # LessThan at 32.17		
1300#                  sw $t0, ($sp) # LessThan at 32.17		
                  # EXIT NODE # LessThan at 32.17		
1304#                lw $t0, 4($sp) # Call at 32.2  	
1308#                beq $t0, $zero, nullPtrException # Call at 32.2		 
1312#                lw $t0, -12($t0) # Call at 32.2	  
1316#                lw $t0, 44($t0) # Call at 32.2 		
1320#                jalr $t0 # Call at 32.2 	
                # EXIT NODE # Call at 32.2	  
              # EXIT NODE # ExpStatement at 32.2  
              # ENTER NODE # ExpStatement at 33.2 
                # ENTER NODE # Call at 33.2	 
                  # ENTER NODE # This at 33.2   
1324#                  subu $sp, $sp, 4 # This at 33.2		 
1328#                  sw $s2, ($sp) # This at 33.2 	 
                  # EXIT NODE # This at 33.2 
                  # ENTER NODE # Not at 33.17 		
                    # ENTER NODE # LessThan at 33.17  	
                      # ENTER NODE # IntegerLiteral at 33.15	 	
1332#                      subu $sp, $sp, 8 # IntegerLiteral at 33.15	  
1336#                      sw $s5, 4($sp) # IntegerLiteral at 33.15 	
1340#                      li $t0, 83 # IntegerLiteral at 33.15		 
1344#                      sw $t0, ($sp) # IntegerLiteral at 33.15		 
                      # EXIT NODE # IntegerLiteral at 33.15  	
                      # ENTER NODE # IntegerLiteral at 33.19	
1348#                      subu $sp, $sp, 8 # IntegerLiteral at 33.19			
1352#                      sw $s5, 4($sp) # IntegerLiteral at 33.19 	
1356#                      li $t0, 83 # IntegerLiteral at 33.19  
1360#                      sw $t0, ($sp) # IntegerLiteral at 33.19	
                      # EXIT NODE # IntegerLiteral at 33.19  	
1364#                    lw $t0, ($sp) # LessThan at 33.17 		
1368#                    lw $t1, 8($sp) # LessThan at 33.17 
1372#                    slt $t0, $t1, $t0 # LessThan at 33.17		 
1376#                    addu $sp, $sp, 12 # LessThan at 33.17			
1380#                    sw $t0, ($sp) # LessThan at 33.17	
                    # EXIT NODE # LessThan at 33.17	 
1384#                  lw $t0, ($sp) # Not at 33.17 	
1388#                  xor $t0, $t0, 1 # Not at 33.17   
1392#                  sw $t0, ($sp) # Not at 33.17 		
                  # EXIT NODE # Not at 33.17	 
1396#                lw $t0, 4($sp) # Call at 33.2   
1400#                beq $t0, $zero, nullPtrException # Call at 33.2   
1404#                lw $t0, -12($t0) # Call at 33.2  	
1408#                lw $t0, 44($t0) # Call at 33.2	  
1412#                jalr $t0 # Call at 33.2		 
                # EXIT NODE # Call at 33.2 
              # EXIT NODE # ExpStatement at 33.2 	
              # ENTER NODE # ExpStatement at 34.2		 
                # ENTER NODE # Call at 34.2   
                  # ENTER NODE # This at 34.2	
1416#                  subu $sp, $sp, 4 # This at 34.2	 	
1420#                  sw $s2, ($sp) # This at 34.2   
                  # EXIT NODE # This at 34.2	  
                  # ENTER NODE # Not at 34.17 
                    # ENTER NODE # GreaterThan at 34.17	  
                      # ENTER NODE # IntegerLiteral at 34.15	
1424#                      subu $sp, $sp, 8 # IntegerLiteral at 34.15  	
1428#                      sw $s5, 4($sp) # IntegerLiteral at 34.15  	
1432#                      li $t0, 83 # IntegerLiteral at 34.15  
1436#                      sw $t0, ($sp) # IntegerLiteral at 34.15  	
                      # EXIT NODE # IntegerLiteral at 34.15	 	
                      # ENTER NODE # IntegerLiteral at 34.19 
1440#                      subu $sp, $sp, 8 # IntegerLiteral at 34.19	
1444#                      sw $s5, 4($sp) # IntegerLiteral at 34.19	 
1448#                      li $t0, 83 # IntegerLiteral at 34.19	
1452#                      sw $t0, ($sp) # IntegerLiteral at 34.19   
                      # EXIT NODE # IntegerLiteral at 34.19 	
1456#                    lw $t0, ($sp) # GreaterThan at 34.17  
1460#                    lw $t1, 8($sp) # GreaterThan at 34.17   
1464#                    sgt $t0, $t1, $t0 # GreaterThan at 34.17	 	
1468#                    addu $sp, $sp, 12 # GreaterThan at 34.17	 
1472#                    sw $t0, ($sp) # GreaterThan at 34.17   
                    # EXIT NODE # GreaterThan at 34.17 
1476#                  lw $t0, ($sp) # Not at 34.17 
1480#                  xor $t0, $t0, 1 # Not at 34.17			
1484#                  sw $t0, ($sp) # Not at 34.17 	 
                  # EXIT NODE # Not at 34.17			
1488#                lw $t0, 4($sp) # Call at 34.2			
1492#                beq $t0, $zero, nullPtrException # Call at 34.2		
1496#                lw $t0, -12($t0) # Call at 34.2  	
1500#                lw $t0, 44($t0) # Call at 34.2  	
1504#                jalr $t0 # Call at 34.2	 	
                # EXIT NODE # Call at 34.2 	 
              # EXIT NODE # ExpStatement at 34.2	 	
              # ENTER NODE # ExpStatement at 35.2 
                # ENTER NODE # Call at 35.2	 	
                  # ENTER NODE # This at 35.2   
1508#                  subu $sp, $sp, 4 # This at 35.2 	 
1512#                  sw $s2, ($sp) # This at 35.2 		
                  # EXIT NODE # This at 35.2	  
                  # ENTER NODE # Not at 35.17 		
                    # ENTER NODE # Equals at 35.17		 
                      # ENTER NODE # IntegerLiteral at 35.15 	 
1516#                      subu $sp, $sp, 8 # IntegerLiteral at 35.15			
1520#                      sw $s5, 4($sp) # IntegerLiteral at 35.15		 
1524#                      li $t0, 83 # IntegerLiteral at 35.15 
1528#                      sw $t0, ($sp) # IntegerLiteral at 35.15		 
                      # EXIT NODE # IntegerLiteral at 35.15	  
                      # ENTER NODE # IntegerLiteral at 35.19	 	
1532#                      subu $sp, $sp, 8 # IntegerLiteral at 35.19 	
1536#                      sw $s5, 4($sp) # IntegerLiteral at 35.19 
1540#                      li $t0, 83 # IntegerLiteral at 35.19 	
1544#                      sw $t0, ($sp) # IntegerLiteral at 35.19   
                      # EXIT NODE # IntegerLiteral at 35.19	 	
1548#                    lw $t0, ($sp) # Equals at 35.17		
1552#                    lw $t1, 8($sp) # Equals at 35.17		 
1556#                    seq $t0, $t0, $t1 # Equals at 35.17			
1557##...subu $at,$t0,$t1
1561##...sltiu $t0,$at,1
1564#                    addu $sp, $sp, 12 # Equals at 35.17	  
1568#                    sw $t0, ($sp) # Equals at 35.17	 	
                    # EXIT NODE # Equals at 35.17	 
1572#                  lw $t0, ($sp) # Not at 35.17  
1576#                  xor $t0, $t0, 1 # Not at 35.17		
1580#                  sw $t0, ($sp) # Not at 35.17	 	
                  # EXIT NODE # Not at 35.17	  
1584#                lw $t0, 4($sp) # Call at 35.2	 	
1588#                beq $t0, $zero, nullPtrException # Call at 35.2			
1592#                lw $t0, -12($t0) # Call at 35.2  	
1596#                lw $t0, 44($t0) # Call at 35.2  
1600#                jalr $t0 # Call at 35.2 	 
                # EXIT NODE # Call at 35.2	 	
              # EXIT NODE # ExpStatement at 35.2	
              # ENTER NODE # ExpStatement at 36.2	  
                # ENTER NODE # Call at 36.2	 
                  # ENTER NODE # This at 36.2		
1604#                  subu $sp, $sp, 4 # This at 36.2 	 
1608#                  sw $s2, ($sp) # This at 36.2 	 
                  # EXIT NODE # This at 36.2 	
                  # ENTER NODE # Equals at 36.17		
                    # ENTER NODE # IntegerLiteral at 36.15 	
1612#                    subu $sp, $sp, 8 # IntegerLiteral at 36.15 		
1616#                    sw $s5, 4($sp) # IntegerLiteral at 36.15	
1620#                    li $t0, 83 # IntegerLiteral at 36.15			
1624#                    sw $t0, ($sp) # IntegerLiteral at 36.15		
                    # EXIT NODE # IntegerLiteral at 36.15	  
                    # ENTER NODE # IntegerLiteral at 36.19 	 
1628#                    subu $sp, $sp, 8 # IntegerLiteral at 36.19  	
1632#                    sw $s5, 4($sp) # IntegerLiteral at 36.19  	
1636#                    li $t0, 83 # IntegerLiteral at 36.19 	
1640#                    sw $t0, ($sp) # IntegerLiteral at 36.19		 
                    # EXIT NODE # IntegerLiteral at 36.19 	
1644#                  lw $t0, ($sp) # Equals at 36.17  
1648#                  lw $t1, 8($sp) # Equals at 36.17	
1652#                  seq $t0, $t0, $t1 # Equals at 36.17 	 
1653##...subu $at,$t0,$t1
1657##...sltiu $t0,$at,1
1660#                  addu $sp, $sp, 12 # Equals at 36.17  
1664#                  sw $t0, ($sp) # Equals at 36.17 
                  # EXIT NODE # Equals at 36.17		
1668#                lw $t0, 4($sp) # Call at 36.2  
1672#                beq $t0, $zero, nullPtrException # Call at 36.2	 	
1676#                lw $t0, -12($t0) # Call at 36.2  	
1680#                lw $t0, 44($t0) # Call at 36.2	 	
1684#                jalr $t0 # Call at 36.2		
                # EXIT NODE # Call at 36.2  	
              # EXIT NODE # ExpStatement at 36.2 		
              # ENTER NODE # ExpStatement at 37.2		 
                # ENTER NODE # Call at 37.2		 
                  # ENTER NODE # This at 37.2  
1688#                  subu $sp, $sp, 4 # This at 37.2 	
1692#                  sw $s2, ($sp) # This at 37.2 
                  # EXIT NODE # This at 37.2   
                  # ENTER NODE # StringLiteral at 37.11			
1696#                  subu $sp, $sp, 4 # StringLiteral at 37.11 	 
1700#                  la $t0, strLit_124 # StringLiteral at 37.11	 
1704#                  sw $t0, ($sp) # StringLiteral at 37.11		
                  # EXIT NODE # StringLiteral at 37.11		 
1708#                lw $t0, 4($sp) # Call at 37.2  	
1712#                beq $t0, $zero, nullPtrException # Call at 37.2 	 
1716#                lw $t0, -12($t0) # Call at 37.2  	
1720#                lw $t0, 16($t0) # Call at 37.2	 
1724#                jalr $t0 # Call at 37.2  	
                # EXIT NODE # Call at 37.2  	
              # EXIT NODE # ExpStatement at 37.2  	
              # ENTER NODE # ExpStatement at 40.2 
                # ENTER NODE # Call at 40.2	 
                  # ENTER NODE # This at 40.2 		
1728#                  subu $sp, $sp, 4 # This at 40.2			
1732#                  sw $s2, ($sp) # This at 40.2		 
                  # EXIT NODE # This at 40.2	 	
                  # ENTER NODE # Not at 40.15 	 
                    # ENTER NODE # True at 40.16  	
1736#                    subu $sp, $sp, 4 # True at 40.16  	
1740#                    li $t0, 1 # True at 40.16	 
1744#                    sw $t0, ($sp) # True at 40.16		 
                    # EXIT NODE # True at 40.16  
1748#                  lw $t0, ($sp) # Not at 40.15	
1752#                  xor $t0, $t0, 1 # Not at 40.15 
1756#                  sw $t0, ($sp) # Not at 40.15	  
                  # EXIT NODE # Not at 40.15	  
1760#                lw $t0, 4($sp) # Call at 40.2   
1764#                beq $t0, $zero, nullPtrException # Call at 40.2		 
1768#                lw $t0, -12($t0) # Call at 40.2  	
1772#                lw $t0, 44($t0) # Call at 40.2   
1776#                jalr $t0 # Call at 40.2	 	
                # EXIT NODE # Call at 40.2 	
              # EXIT NODE # ExpStatement at 40.2  	
              # ENTER NODE # ExpStatement at 41.2	  
                # ENTER NODE # Call at 41.2 
                  # ENTER NODE # This at 41.2		
1780#                  subu $sp, $sp, 4 # This at 41.2			
1784#                  sw $s2, ($sp) # This at 41.2			
                  # EXIT NODE # This at 41.2 	
                  # ENTER NODE # Not at 41.15 		
                    # ENTER NODE # False at 41.16	 	
1788#                    subu $sp, $sp, 4 # False at 41.16   
1792#                    sw $zero, ($sp) # False at 41.16 		
                    # EXIT NODE # False at 41.16	  
1796#                  lw $t0, ($sp) # Not at 41.15	 
1800#                  xor $t0, $t0, 1 # Not at 41.15		
1804#                  sw $t0, ($sp) # Not at 41.15	
                  # EXIT NODE # Not at 41.15	 	
1808#                lw $t0, 4($sp) # Call at 41.2 	 
1812#                beq $t0, $zero, nullPtrException # Call at 41.2	  
1816#                lw $t0, -12($t0) # Call at 41.2		
1820#                lw $t0, 44($t0) # Call at 41.2 	
1824#                jalr $t0 # Call at 41.2	  
                # EXIT NODE # Call at 41.2   
              # EXIT NODE # ExpStatement at 41.2   
              # ENTER NODE # ExpStatement at 42.2	
                # ENTER NODE # Call at 42.2   
                  # ENTER NODE # This at 42.2 
1828#                  subu $sp, $sp, 4 # This at 42.2	
1832#                  sw $s2, ($sp) # This at 42.2  
                  # EXIT NODE # This at 42.2 
                  # ENTER NODE # Not at 42.15	  
                    # ENTER NODE # Not at 42.16 		
                      # ENTER NODE # True at 42.17		
1836#                      subu $sp, $sp, 4 # True at 42.17  	
1840#                      li $t0, 1 # True at 42.17		
1844#                      sw $t0, ($sp) # True at 42.17			
                      # EXIT NODE # True at 42.17		
1848#                    lw $t0, ($sp) # Not at 42.16	 	
1852#                    xor $t0, $t0, 1 # Not at 42.16 		
1856#                    sw $t0, ($sp) # Not at 42.16			
                    # EXIT NODE # Not at 42.16 	 
1860#                  lw $t0, ($sp) # Not at 42.15	
1864#                  xor $t0, $t0, 1 # Not at 42.15   
1868#                  sw $t0, ($sp) # Not at 42.15			
                  # EXIT NODE # Not at 42.15	
1872#                lw $t0, 4($sp) # Call at 42.2	  
1876#                beq $t0, $zero, nullPtrException # Call at 42.2	  
1880#                lw $t0, -12($t0) # Call at 42.2 
1884#                lw $t0, 44($t0) # Call at 42.2  
1888#                jalr $t0 # Call at 42.2	 
                # EXIT NODE # Call at 42.2 
              # EXIT NODE # ExpStatement at 42.2	
              # ENTER NODE # ExpStatement at 43.2 		
                # ENTER NODE # Call at 43.2	 	
                  # ENTER NODE # This at 43.2 	
1892#                  subu $sp, $sp, 4 # This at 43.2  
1896#                  sw $s2, ($sp) # This at 43.2	 
                  # EXIT NODE # This at 43.2 		
                  # ENTER NODE # Not at 43.15 	
                    # ENTER NODE # Not at 43.16	  
                      # ENTER NODE # False at 43.17   
1900#                      subu $sp, $sp, 4 # False at 43.17   
1904#                      sw $zero, ($sp) # False at 43.17 
                      # EXIT NODE # False at 43.17 	 
1908#                    lw $t0, ($sp) # Not at 43.16 		
1912#                    xor $t0, $t0, 1 # Not at 43.16			
1916#                    sw $t0, ($sp) # Not at 43.16 
                    # EXIT NODE # Not at 43.16	  
1920#                  lw $t0, ($sp) # Not at 43.15 
1924#                  xor $t0, $t0, 1 # Not at 43.15			
1928#                  sw $t0, ($sp) # Not at 43.15	
                  # EXIT NODE # Not at 43.15	  
1932#                lw $t0, 4($sp) # Call at 43.2	 
1936#                beq $t0, $zero, nullPtrException # Call at 43.2		
1940#                lw $t0, -12($t0) # Call at 43.2  
1944#                lw $t0, 44($t0) # Call at 43.2	
1948#                jalr $t0 # Call at 43.2	
                # EXIT NODE # Call at 43.2	
              # EXIT NODE # ExpStatement at 43.2	 	
              # ENTER NODE # ExpStatement at 44.2 	 
                # ENTER NODE # Call at 44.2  	
                  # ENTER NODE # This at 44.2 	
1952#                  subu $sp, $sp, 4 # This at 44.2  	
1956#                  sw $s2, ($sp) # This at 44.2   
                  # EXIT NODE # This at 44.2	  
                  # ENTER NODE # And at 44.19		 
                    # ENTER NODE # True at 44.15	
1960#                    subu $sp, $sp, 4 # True at 44.15	
1964#                    li $t0, 1 # True at 44.15	 	
1968#                    sw $t0, ($sp) # True at 44.15		 
                    # EXIT NODE # True at 44.15		
1972#                  lw $t0, ($sp) # And at 44.19	 	
1976#                  beq $t0, $zero, skip_152 # And at 44.19	 
1980#                  addu $sp, $sp, 4 # And at 44.19		 
                    # ENTER NODE # True at 44.21	 	
1984#                    subu $sp, $sp, 4 # True at 44.21  	
1988#                    li $t0, 1 # True at 44.21 		
1992#                    sw $t0, ($sp) # True at 44.21	
                    # EXIT NODE # True at 44.21 	
1996:                  skip_152: # And at 44.19	 	
                  # EXIT NODE # And at 44.19		 
1996#                lw $t0, 4($sp) # Call at 44.2	 
2000#                beq $t0, $zero, nullPtrException # Call at 44.2   
2004#                lw $t0, -12($t0) # Call at 44.2  	
2008#                lw $t0, 44($t0) # Call at 44.2	 	
2012#                jalr $t0 # Call at 44.2 	
                # EXIT NODE # Call at 44.2	 
              # EXIT NODE # ExpStatement at 44.2 	 
              # ENTER NODE # ExpStatement at 45.2	 	
                # ENTER NODE # Call at 45.2	 
                  # ENTER NODE # This at 45.2 		
2016#                  subu $sp, $sp, 4 # This at 45.2	  
2020#                  sw $s2, ($sp) # This at 45.2  
                  # EXIT NODE # This at 45.2	  
                  # ENTER NODE # And at 45.19		 
                    # ENTER NODE # True at 45.15  	
2024#                    subu $sp, $sp, 4 # True at 45.15	 
2028#                    li $t0, 1 # True at 45.15 		
2032#                    sw $t0, ($sp) # True at 45.15	 
                    # EXIT NODE # True at 45.15	 	
2036#                  lw $t0, ($sp) # And at 45.19	
2040#                  beq $t0, $zero, skip_158 # And at 45.19  
2044#                  addu $sp, $sp, 4 # And at 45.19   
                    # ENTER NODE # False at 45.21 	 
2048#                    subu $sp, $sp, 4 # False at 45.21	 	
2052#                    sw $zero, ($sp) # False at 45.21 		
                    # EXIT NODE # False at 45.21 		
2056:                  skip_158: # And at 45.19  	
                  # EXIT NODE # And at 45.19	  
2056#                lw $t0, 4($sp) # Call at 45.2		
2060#                beq $t0, $zero, nullPtrException # Call at 45.2		 
2064#                lw $t0, -12($t0) # Call at 45.2	
2068#                lw $t0, 44($t0) # Call at 45.2  
2072#                jalr $t0 # Call at 45.2	 	
                # EXIT NODE # Call at 45.2	  
              # EXIT NODE # ExpStatement at 45.2  
              # ENTER NODE # ExpStatement at 46.2   
                # ENTER NODE # Call at 46.2	  
                  # ENTER NODE # This at 46.2  	
2076#                  subu $sp, $sp, 4 # This at 46.2	 
2080#                  sw $s2, ($sp) # This at 46.2	 
                  # EXIT NODE # This at 46.2	 
                  # ENTER NODE # And at 46.20  
                    # ENTER NODE # False at 46.15	
2084#                    subu $sp, $sp, 4 # False at 46.15	  
2088#                    sw $zero, ($sp) # False at 46.15	 	
                    # EXIT NODE # False at 46.15 	 
2092#                  lw $t0, ($sp) # And at 46.20	
2096#                  beq $t0, $zero, skip_164 # And at 46.20 	 
2100#                  addu $sp, $sp, 4 # And at 46.20 	 
                    # ENTER NODE # True at 46.22		
2104#                    subu $sp, $sp, 4 # True at 46.22 
2108#                    li $t0, 1 # True at 46.22  	
2112#                    sw $t0, ($sp) # True at 46.22		
                    # EXIT NODE # True at 46.22   
2116:                  skip_164: # And at 46.20	 
                  # EXIT NODE # And at 46.20  
2116#                lw $t0, 4($sp) # Call at 46.2  	
2120#                beq $t0, $zero, nullPtrException # Call at 46.2 	
2124#                lw $t0, -12($t0) # Call at 46.2	 	
2128#                lw $t0, 44($t0) # Call at 46.2 
2132#                jalr $t0 # Call at 46.2	 	
                # EXIT NODE # Call at 46.2		 
              # EXIT NODE # ExpStatement at 46.2		
              # ENTER NODE # ExpStatement at 47.2 		
                # ENTER NODE # Call at 47.2 
                  # ENTER NODE # This at 47.2			
2136#                  subu $sp, $sp, 4 # This at 47.2			
2140#                  sw $s2, ($sp) # This at 47.2 
                  # EXIT NODE # This at 47.2 	
                  # ENTER NODE # And at 47.20  
                    # ENTER NODE # False at 47.15		
2144#                    subu $sp, $sp, 4 # False at 47.15	 
2148#                    sw $zero, ($sp) # False at 47.15 		
                    # EXIT NODE # False at 47.15 
2152#                  lw $t0, ($sp) # And at 47.20  
2156#                  beq $t0, $zero, skip_170 # And at 47.20	 
2160#                  addu $sp, $sp, 4 # And at 47.20		 
                    # ENTER NODE # False at 47.22	
2164#                    subu $sp, $sp, 4 # False at 47.22		 
2168#                    sw $zero, ($sp) # False at 47.22  	
                    # EXIT NODE # False at 47.22  	
2172:                  skip_170: # And at 47.20 	 
                  # EXIT NODE # And at 47.20  
2172#                lw $t0, 4($sp) # Call at 47.2	  
2176#                beq $t0, $zero, nullPtrException # Call at 47.2 	 
2180#                lw $t0, -12($t0) # Call at 47.2  	
2184#                lw $t0, 44($t0) # Call at 47.2 		
2188#                jalr $t0 # Call at 47.2 		
                # EXIT NODE # Call at 47.2 	 
              # EXIT NODE # ExpStatement at 47.2			
              # ENTER NODE # ExpStatement at 48.2   
                # ENTER NODE # Call at 48.2		 
                  # ENTER NODE # This at 48.2		
2192#                  subu $sp, $sp, 4 # This at 48.2	  
2196#                  sw $s2, ($sp) # This at 48.2  
                  # EXIT NODE # This at 48.2			
                  # ENTER NODE # Or at 48.19 	
                    # ENTER NODE # True at 48.15	 
2200#                    subu $sp, $sp, 4 # True at 48.15	 	
2204#                    li $t0, 1 # True at 48.15	 	
2208#                    sw $t0, ($sp) # True at 48.15 
                    # EXIT NODE # True at 48.15		 
2212#                  lw $t0, ($sp) # Or at 48.19 
2216#                  bne $t0, $zero, skip_176 # Or at 48.19   
2220#                  addu $sp, $sp, 4 # Or at 48.19		 
                    # ENTER NODE # True at 48.21	 	
2224#                    subu $sp, $sp, 4 # True at 48.21	 	
2228#                    li $t0, 1 # True at 48.21	 
2232#                    sw $t0, ($sp) # True at 48.21  	
                    # EXIT NODE # True at 48.21	 
2236:                  skip_176: # Or at 48.19  	
                  # EXIT NODE # Or at 48.19	 	
2236#                lw $t0, 4($sp) # Call at 48.2		
2240#                beq $t0, $zero, nullPtrException # Call at 48.2 	
2244#                lw $t0, -12($t0) # Call at 48.2		
2248#                lw $t0, 44($t0) # Call at 48.2   
2252#                jalr $t0 # Call at 48.2		
                # EXIT NODE # Call at 48.2 	
              # EXIT NODE # ExpStatement at 48.2			
              # ENTER NODE # ExpStatement at 49.2	
                # ENTER NODE # Call at 49.2 	
                  # ENTER NODE # This at 49.2  	
2256#                  subu $sp, $sp, 4 # This at 49.2 
2260#                  sw $s2, ($sp) # This at 49.2  	
                  # EXIT NODE # This at 49.2		 
                  # ENTER NODE # Or at 49.19	 
                    # ENTER NODE # True at 49.15 	
2264#                    subu $sp, $sp, 4 # True at 49.15	
2268#                    li $t0, 1 # True at 49.15	 
2272#                    sw $t0, ($sp) # True at 49.15   
                    # EXIT NODE # True at 49.15	  
2276#                  lw $t0, ($sp) # Or at 49.19 
2280#                  bne $t0, $zero, skip_182 # Or at 49.19		
2284#                  addu $sp, $sp, 4 # Or at 49.19	  
                    # ENTER NODE # False at 49.21 
2288#                    subu $sp, $sp, 4 # False at 49.21   
2292#                    sw $zero, ($sp) # False at 49.21  
                    # EXIT NODE # False at 49.21		
2296:                  skip_182: # Or at 49.19  	
                  # EXIT NODE # Or at 49.19	  
2296#                lw $t0, 4($sp) # Call at 49.2   
2300#                beq $t0, $zero, nullPtrException # Call at 49.2   
2304#                lw $t0, -12($t0) # Call at 49.2 		
2308#                lw $t0, 44($t0) # Call at 49.2			
2312#                jalr $t0 # Call at 49.2	 
                # EXIT NODE # Call at 49.2	 
              # EXIT NODE # ExpStatement at 49.2		 
              # ENTER NODE # ExpStatement at 50.2		
                # ENTER NODE # Call at 50.2 		
                  # ENTER NODE # This at 50.2 
2316#                  subu $sp, $sp, 4 # This at 50.2 	 
2320#                  sw $s2, ($sp) # This at 50.2	  
                  # EXIT NODE # This at 50.2	  
                  # ENTER NODE # Or at 50.20 	
                    # ENTER NODE # False at 50.15	  
2324#                    subu $sp, $sp, 4 # False at 50.15 	 
2328#                    sw $zero, ($sp) # False at 50.15	  
                    # EXIT NODE # False at 50.15  	
2332#                  lw $t0, ($sp) # Or at 50.20	 
2336#                  bne $t0, $zero, skip_188 # Or at 50.20 	
2340#                  addu $sp, $sp, 4 # Or at 50.20  	
                    # ENTER NODE # True at 50.22	
2344#                    subu $sp, $sp, 4 # True at 50.22	  
2348#                    li $t0, 1 # True at 50.22   
2352#                    sw $t0, ($sp) # True at 50.22	  
                    # EXIT NODE # True at 50.22 	
2356:                  skip_188: # Or at 50.20 
                  # EXIT NODE # Or at 50.20	  
2356#                lw $t0, 4($sp) # Call at 50.2 
2360#                beq $t0, $zero, nullPtrException # Call at 50.2 	 
2364#                lw $t0, -12($t0) # Call at 50.2  
2368#                lw $t0, 44($t0) # Call at 50.2		
2372#                jalr $t0 # Call at 50.2 		
                # EXIT NODE # Call at 50.2  
              # EXIT NODE # ExpStatement at 50.2  
              # ENTER NODE # ExpStatement at 51.2 		
                # ENTER NODE # Call at 51.2	  
                  # ENTER NODE # This at 51.2 	 
2376#                  subu $sp, $sp, 4 # This at 51.2 
2380#                  sw $s2, ($sp) # This at 51.2	  
                  # EXIT NODE # This at 51.2 	
                  # ENTER NODE # Or at 51.20 	
                    # ENTER NODE # False at 51.15  	
2384#                    subu $sp, $sp, 4 # False at 51.15  	
2388#                    sw $zero, ($sp) # False at 51.15		
                    # EXIT NODE # False at 51.15		 
2392#                  lw $t0, ($sp) # Or at 51.20  	
2396#                  bne $t0, $zero, skip_194 # Or at 51.20 	 
2400#                  addu $sp, $sp, 4 # Or at 51.20   
                    # ENTER NODE # False at 51.22 		
2404#                    subu $sp, $sp, 4 # False at 51.22 
2408#                    sw $zero, ($sp) # False at 51.22   
                    # EXIT NODE # False at 51.22	 
2412:                  skip_194: # Or at 51.20	
                  # EXIT NODE # Or at 51.20 
2412#                lw $t0, 4($sp) # Call at 51.2		
2416#                beq $t0, $zero, nullPtrException # Call at 51.2		
2420#                lw $t0, -12($t0) # Call at 51.2		 
2424#                lw $t0, 44($t0) # Call at 51.2		
2428#                jalr $t0 # Call at 51.2 
                # EXIT NODE # Call at 51.2  
              # EXIT NODE # ExpStatement at 51.2			
              # ENTER NODE # ExpStatement at 52.2  	
                # ENTER NODE # Call at 52.2	
                  # ENTER NODE # This at 52.2		
2432#                  subu $sp, $sp, 4 # This at 52.2 	 
2436#                  sw $s2, ($sp) # This at 52.2 	 
                  # EXIT NODE # This at 52.2		
                  # ENTER NODE # StringLiteral at 52.11 
2440#                  subu $sp, $sp, 4 # StringLiteral at 52.11	  
2444#                  la $t0, strLit_198 # StringLiteral at 52.11  	
2448#                  sw $t0, ($sp) # StringLiteral at 52.11   
                  # EXIT NODE # StringLiteral at 52.11   
2452#                lw $t0, 4($sp) # Call at 52.2 	
2456#                beq $t0, $zero, nullPtrException # Call at 52.2	 
2460#                lw $t0, -12($t0) # Call at 52.2		
2464#                lw $t0, 16($t0) # Call at 52.2	 	
2468#                jalr $t0 # Call at 52.2	  
                # EXIT NODE # Call at 52.2	 	
              # EXIT NODE # ExpStatement at 52.2		 
2472#            lw $ra, 4($sp) # MethodDeclVoid at 12.17  	
2476#            lw $s2, 0($sp) # MethodDeclVoid at 12.17	  
2480#            addu $sp, $sp, 12 # MethodDeclVoid at 12.17			
2484#            jr $ra # MethodDeclVoid at 12.17 	
            # EXIT NODE # MethodDeclVoid at 12.17		
            # ENTER NODE # MethodDeclVoid at 56.17	  
            .globl fcn_213_printIntVal # MethodDeclVoid at 56.17  
2488:            fcn_213_printIntVal: # MethodDeclVoid at 56.17 		
2488#            subu $sp, $sp, 8 # MethodDeclVoid at 56.17  
2492#            sw $ra, 4($sp) # MethodDeclVoid at 56.17	 	
2496#            sw $s2, ($sp) # MethodDeclVoid at 56.17		 
2500#            lw $s2, 16($sp) # MethodDeclVoid at 56.17 		
              # ENTER NODE # ExpStatement at 57.2 
                # ENTER NODE # Call at 57.2		 
                  # ENTER NODE # This at 57.2			
2504#                  subu $sp, $sp, 4 # This at 57.2		 
2508#                  sw $s2, ($sp) # This at 57.2 
                  # EXIT NODE # This at 57.2 	
                  # ENTER NODE # IdentifierExp at 57.11  
2512#                  lw $t0, 12($sp) # IdentifierExp at 57.11	 
2516#                  subu $sp, $sp, 8 # IdentifierExp at 57.11	
2520#                  sw $s5, 4($sp) # IdentifierExp at 57.11	  
2524#                  sw $t0, ($sp) # IdentifierExp at 57.11			
                  # EXIT NODE # IdentifierExp at 57.11	 
2528#                lw $t0, 8($sp) # Call at 57.2 
2532#                beq $t0, $zero, nullPtrException # Call at 57.2 		
2536#                lw $t0, -12($t0) # Call at 57.2		 
2540#                lw $t0, 24($t0) # Call at 57.2  
2544#                jalr $t0 # Call at 57.2   
                # EXIT NODE # Call at 57.2 		
              # EXIT NODE # ExpStatement at 57.2	  
              # ENTER NODE # ExpStatement at 58.2 	 
                # ENTER NODE # Call at 58.2			
                  # ENTER NODE # This at 58.2 	
2548#                  subu $sp, $sp, 4 # This at 58.2  
2552#                  sw $s2, ($sp) # This at 58.2			
                  # EXIT NODE # This at 58.2	 
                  # ENTER NODE # StringLiteral at 58.11	 
2556#                  subu $sp, $sp, 4 # StringLiteral at 58.11 	 
2560#                  la $t0, strLit_209 # StringLiteral at 58.11  
2564#                  sw $t0, ($sp) # StringLiteral at 58.11 	 
                  # EXIT NODE # StringLiteral at 58.11	
2568#                lw $t0, 4($sp) # Call at 58.2   
2572#                beq $t0, $zero, nullPtrException # Call at 58.2	 	
2576#                lw $t0, -12($t0) # Call at 58.2 	
2580#                lw $t0, 16($t0) # Call at 58.2 	
2584#                jalr $t0 # Call at 58.2 	
                # EXIT NODE # Call at 58.2	
              # EXIT NODE # ExpStatement at 58.2 
2588#            lw $ra, 4($sp) # MethodDeclVoid at 56.17	 
2592#            lw $s2, 0($sp) # MethodDeclVoid at 56.17 		
2596#            addu $sp, $sp, 20 # MethodDeclVoid at 56.17 	
2600#            jr $ra # MethodDeclVoid at 56.17  	
            # EXIT NODE # MethodDeclVoid at 56.17   
            # ENTER NODE # MethodDeclVoid at 62.17 	
            .globl fcn_228_printBoolVal # MethodDeclVoid at 62.17 	 
2604:            fcn_228_printBoolVal: # MethodDeclVoid at 62.17 	
2604#            subu $sp, $sp, 8 # MethodDeclVoid at 62.17	
2608#            sw $ra, 4($sp) # MethodDeclVoid at 62.17		
2612#            sw $s2, ($sp) # MethodDeclVoid at 62.17  
2616#            lw $s2, 12($sp) # MethodDeclVoid at 62.17   
              # ENTER NODE # If at 63.6			
                # ENTER NODE # IdentifierExp at 63.10	
2620#                lw $t0, 8($sp) # IdentifierExp at 63.10	
2624#                subu $sp, $sp, 4 # IdentifierExp at 63.10  	
2628#                sw $t0, ($sp) # IdentifierExp at 63.10	 	
                # EXIT NODE # IdentifierExp at 63.10 		
2632#              lw $t0, ($sp) # If at 63.6		
2636#              addu $sp, $sp, 4 # If at 63.6		 
2640#              beq $t0, $zero, if_else_227 # If at 63.6			
                # ENTER NODE # Block at 63.15 		
                  # ENTER NODE # ExpStatement at 64.7	 
                    # ENTER NODE # Call at 64.7		 
                      # ENTER NODE # This at 64.7   
2644#                      subu $sp, $sp, 4 # This at 64.7	
2648#                      sw $s2, ($sp) # This at 64.7 
                      # EXIT NODE # This at 64.7 
                      # ENTER NODE # StringLiteral at 64.16	  
2652#                      subu $sp, $sp, 4 # StringLiteral at 64.16		 
2656#                      la $t0, strLit_217 # StringLiteral at 64.16 
2660#                      sw $t0, ($sp) # StringLiteral at 64.16	  
                      # EXIT NODE # StringLiteral at 64.16  
2664#                    lw $t0, 4($sp) # Call at 64.7	 	
2668#                    beq $t0, $zero, nullPtrException # Call at 64.7 	
2672#                    lw $t0, -12($t0) # Call at 64.7 		
2676#                    lw $t0, 16($t0) # Call at 64.7 
2680#                    jalr $t0 # Call at 64.7		 
                    # EXIT NODE # Call at 64.7 	 
                  # EXIT NODE # ExpStatement at 64.7  	
                # EXIT NODE # Block at 63.15	  
2684#              j if_done_227 # If at 63.6	 
2688:              if_else_227: # If at 63.6	  
                # ENTER NODE # Block at 66.11	  
                  # ENTER NODE # ExpStatement at 67.7 		
                    # ENTER NODE # Call at 67.7 	 
                      # ENTER NODE # This at 67.7   
2688#                      subu $sp, $sp, 4 # This at 67.7   
2692#                      sw $s2, ($sp) # This at 67.7	  
                      # EXIT NODE # This at 67.7	 	
                      # ENTER NODE # StringLiteral at 67.16			
2696#                      subu $sp, $sp, 4 # StringLiteral at 67.16 
2700#                      la $t0, strLit_222 # StringLiteral at 67.16		 
2704#                      sw $t0, ($sp) # StringLiteral at 67.16 	 
                      # EXIT NODE # StringLiteral at 67.16	 
2708#                    lw $t0, 4($sp) # Call at 67.7	  
2712#                    beq $t0, $zero, nullPtrException # Call at 67.7 	
2716#                    lw $t0, -12($t0) # Call at 67.7 	
2720#                    lw $t0, 16($t0) # Call at 67.7		 
2724#                    jalr $t0 # Call at 67.7	 	
                    # EXIT NODE # Call at 67.7	 	
                  # EXIT NODE # ExpStatement at 67.7  
                # EXIT NODE # Block at 66.11	 
2728:              if_done_227: # If at 63.6	  
              # EXIT NODE # If at 63.6		
2728#            lw $ra, 4($sp) # MethodDeclVoid at 62.17 		
2732#            lw $s2, 0($sp) # MethodDeclVoid at 62.17	
2736#            addu $sp, $sp, 16 # MethodDeclVoid at 62.17		
2740#            jr $ra # MethodDeclVoid at 62.17  	
            # EXIT NODE # MethodDeclVoid at 62.17	 	
          # EXIT NODE # Program at 9.1			
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
2744:readLine:
	
2744#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
2748#	sw $ra, 4($sp) # save $ra
2752#	move $t1,$sp # save "original" sp

2756:  doRead:

	# read the character
2756#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
2760#	subu $t2,$v0,13
2764#	bne $t2,$zero,notReturnRL
2768#	jal readLogicalChar
2772#	subu $t2,$v0,10 # check for newline
2776#	beq $t2,$zero,foundNewLine
2780#	sw $v0,lastCharRead # push back character into queue
2784#	j foundNewLine # go process the line

2788:  notReturnRL:

	# at this point, $v0 has our character

2788#	subu $t0,$v0,10
2792#	beq $t0,$zero,foundNewLine
2796#	blt $v0,$zero,foundEof
2797##...slt $at,$v0,$zero
2801##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
2804#	subu $sp,$sp,4
2808#	sw $v0,($sp)

	# loop back up to get next character
2812#	j doRead

2816:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2816#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
2820#	sw $zero,8($sp) # return-value: null
2824#	j rlReturn # return

2828:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
2828#	subu $t0,$t1,$sp # number of chars we read (times 4)
2832#	srl $s6,$t0,2 # number of words on stack with chars
2836#	subu $sp,$sp,4 # push char-count ...
2840#	sw $s6,($sp) # ... onto stack
2844#	addu $t2,$t0,5 # GC tag, incl. for count-word
2848#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
2852#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2856#	srl $s6,$s6,2 # data words in object
2860#	move $s7,$zero # # object words in object
2864#	jal newObject # allocate space
	
	# store header words
2868#	la $t0,CLASS_String
2872#	sw $t0,-12($s7) # store class tag (String) into object
2876#	lw $t2,4($sp) # char-count
2880#	sll $t1,$t2,2 # 4 times number of chars
2884#	subu $t2,$zero,$t2 # negative of char-count
2888#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
2892#	lw $t0,-8($s7) # data words in object
2896#	sll $t0,$t0,2 # data bytes in object
2900#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
2904#	subu $t0,$t0,$t2 # place to store last character (plus 9)
2908#	addu $sp,$sp,8 # pop redundant object-pointer and count
2912#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

2916#	beq $sp,$t1,doneCharCopy
2920:  charCopyLoop:
2920#	lw $t2,($sp)
2924#	sb $t2,-9($t0)
2928#	addu $sp,$sp,4
2932#	subu $t0,$t0,1
2936#	bne $sp,$t1,charCopyLoop
2940:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
2940#	sw $s7,8($sp)
	
2944:  rlReturn:
	# restore return address and return
2944#	lw $ra,4($sp) # restore return address, ...
2948#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
2952#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2956:readInt:

	# save $ra by pushing onto stack
2956#	subu $sp,$sp,4
2960#	sw $ra,($sp)

2964:  riSkipWhiteLoop:
	# read a character
2964#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
2968#	subu $t0,$v0,32
2972#	bgt $t0,$zero,nonWhite
2973##...slt $at,$zero,$t0
2977##...bne $at,$zero,$+44
2980#	beq $t0,$zero,riSkipWhiteLoop # start over if space
2984#	subu $t0,$v0,10
2988#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
2992#	subu $t0,$v0,9
2996#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
3000#	subu $t0,$v0,13
3004#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
3008#	subu $t0,$v0,12
3012#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
3016#	j badIntegerFormat # illegal integer char: abort program

3020:  nonWhite:
3020#	subu $t0,$v0,'-'
3024#	li $t4,1 # final multiplier
3028#	bne $t0,$zero,helpReadInt # go read
3032#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
3036#	jal readLogicalChar

3040:  helpReadInt:
3040#	li $t2,10
3044#	subu $t1,$v0,'0' # convert digit to 0-9 value
3048#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
3049##...sltu $at,$t1,$t2
3053##...beq $at,$zero,$+2080
3056#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

3060:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

3060#	jal readLogicalChar # read next character
3064#	subu $t1,$v0,'0' # convert digit to 0-9 value
3068#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
3069##...sltu $at,$t1,$t2
3073##...beq $at,$zero,$+20

3076#	mul $t3,$t3,$t2 # multiply old value by 10
3077##...mult $t3,$t2
3081##...mflo $t3
3084#	addu $t3,$t3,$t1 # add in value of new digit
3088#	j digitLoop

3092:  doneDigitLoop:

	# "push back" unused character into queue
3092#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
3096#	lw $ra,($sp)
3100#	mult $t3,$t4 # multiply to account for poss. minus sign
3104#	mflo $t3
3108#	sw $t3,($sp) # result
3112#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
3116#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
3120:readChar:

	# save $ra by pushing onto stack
3120#	subu $sp,$sp,4
3124#	sw $ra,($sp)

  	# read the character
3128#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
3132#	lw $ra,($sp)
3136#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
3140#	sw $v0,($sp)

	# return
3144#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
3148:printStr:
	# check for null, printing "(null)", if so
3148#	lw $t0,($sp)
3152#	bne $t0,$zero,psNotNull

	# print "(null)"
3156#	la $a0,nullStr
3160#	li $v0,4
3164#	syscall
3168#	j donePrintStr
	
3172:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
3172#	subu $t0,$t0,8
3176#	lw $t1,($t0) # word just beyond end of string
3180#	sll $t1,$t1,2
3184#	subu $t1,$t0,$t1 # first word in string
3188#	lw $t0,4($t0) # negative of string-length
3192#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
3196#	beq $t0,$t1,donePrintStr
3200:  psLoop:
3200#	lb $a0,($t1) # next byte
3204#	li $v0,11 # code for printing char
3208#        syscall # print the char
3212#	addu $t1,$t1,1 # go to next char
3216#	blt $t1,$t0,psLoop
3217##...slt $at,$t1,$t0
3221##...bne $at,$zero,$-20

3224:  donePrintStr:
	# pop stack and return
3224#	addu $sp,$sp,8
3228#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
3232:printInt:
	# pop value off stack, along with 'this'
3232#	lw $a0,($sp)
3236#	addu $sp,$sp,12

	# print it
3240#	li $v0,1 # code for print-int
3244#	syscall

	# return
3248#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
3252:printBool:
	# pop value off stack, along with 'this'
3252#	lw $t0,($sp)
3256#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
3260#	la $a0,falseString
3264#	beq $t0,$zero,skipPB
3268#	la $a0,trueString
3272:  skipPB:
3272#	li $v0,4 # code for print-string
3276#	syscall

	# return
3280#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
3284:substring:

	# save $ra by pushing onto stack
3284#	subu $sp,$sp,4
3288#	sw $ra,($sp)

	# get string value off stack, test for null
3292#	lw $t0,20($sp)
3296#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
3300#	lw $t0,-4($t0) # negative of string length
3304#	subu $t0,$zero,$t0 # string length
3308#	lw $t1,4($sp) # k
3312#	lw $t2,12($sp) # n
3316#	bgt $zero,$t2,strIndexOutOfBounds
3317##...slt $at,$t2,$zero
3321##...bne $at,$zero,$+1780
3324#	bgt $t2,$t1,strIndexOutOfBounds
3325##...slt $at,$t1,$t2
3329##...bne $at,$zero,$+1772
3332#	bgt $t1,$t0,strIndexOutOfBounds
3333##...slt $at,$t0,$t1
3337##...bne $at,$zero,$+1764

	# allocate memory
3340#	subu $s6,$t1,$t2 # # chars in target-string
3344#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
3348#	srl $s6,$s6,2 # convert bytes-count to word-count
3352#	move $s7,$zero # (no object-bytes in string)
3356#	jal newObject

	# store "String" tag in object-type field
3360#	la $t0,CLASS_String
3364#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
3368#	lw $t1,8($sp) # k
3372#	lw $t2,16($sp) # n
3376#	subu $t0,$t2,$t1 # value to store
3380#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
3384#	lw $t3,24($sp) # source string pointer
3388#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
3392#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
3396#	lw $t4,-8($t3) # # data words in source string
3400#	sll $t4,$t4,2 # # data bytes in source string
3404#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
3408#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
3412#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
3416#	lw $t2,-8($s7) # # data words in target string
3420#	sll $t2,$t2,2 # # data bytes in target string
3424#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
3428:  subCopyLoopzz:
3428#	lb $t4,-8($t3)
3432#	sb $t4,-8($t2)
3436#	addu $t2,$t2,1
3440#	addu $t3,$t3,1
3444#	blt $t3,$t1,subCopyLoopzz
3445##...slt $at,$t3,$t1
3449##...bne $at,$zero,$-20
	
3452:  doneSubCopyzz:
	# restore return address, store return value, pop stack
3452#	lw $ra,4($sp) # restore $ra
3456#	addu $sp,$sp,24 # pop stack
	
	# return
3460#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
3464:length:

	# get string pointer
3464#	lw $t0,($sp)
	
	# grow stack
3468#	subu $sp,$sp,4

	# store GC tag
3472#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
3476#	lw $t0,-4($t0) # -length
3480#	subu $t0,$zero,$t0
3484#	sw $t0,($sp) #store length

	# return
3488#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
3492:concat:
 	# save $ra by pushing onto stack
3492#	subu $sp,$sp,4
3496#	sw $ra($sp)

	# get string pointers and check parameter for null
3500#	lw $t0,4($sp)
3504#	beq $t0,$zero,nullPtrException
3508#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
3512#	lw $t0,-4($t0) # negative size of second object
3516#	lw $t1,-4($t1) # negative size of first object
3520#	addu $s6,$t0,$t1 # sum of negative sizes
3524#	sra $s6,$s6,2 # negative word-size of char part
3528#	subu $s6,$zero,$s6 # word size of char part
3532#	addu $s6,$s6,1 # data word size, including v-table word
3536#	move $s7,$zero
3540#	jal newObject

	# store "String" tag in object-type field
3544#	la $t0,CLASS_String
3548#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
3552#	lw $ra,4($sp) # return address
3556#	lw $t0,8($sp) # second object
3560#	lw $t1,12($sp) # first object
3564#	addu $sp,$sp,12 # pop
3568#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
3572#	lw $t2,-4($t0) # negative length of second object
3576#	lw $t3,-4($t1) # negative length of first object
3580#	addu $t4,$t2,$t3 # sum of negative lengths
3584#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
3588#	lw $t4,-8($t1) # # data words in first string
3592#	sll $t4,$t4,2 # # data bytes in first string
3596#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
3600#	lw $t4,-8($s7) # # data words in new string
3604#	sll $t4,$t4,2 # # data bytes in new string
3608#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
3612#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
3616#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
3620:  concatLoop1zz:
3620#	lb $t4,-8($t1)
3624#	sb $t4,-8($s7)
3628#	addu $s7,$s7,1
3632#	addu $t1,$t1,1
3636#	blt $t1,$t3,concatLoop1zz
3637##...slt $at,$t1,$t3
3641##...bne $at,$zero,$-20
3644:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
3644#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
3648#	lw $t4,-8($t0) # # data words in second string
3652#	sll $t4,$t4,2 # # data bytes in second string
3656#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
3660#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
3664:  concatLoop2zz:
3664#	lb $t4,-8($t1)
3668#	sb $t4,-8($s7)
3672#	addu $s7,$s7,1
3676#	addu $t1,$t1,1
3680#	blt $t1,$t3,concatLoop2zz
3681##...slt $at,$t1,$t3
3685##...bne $at,$zero,$-20
3688:  doneConcatLoop2zz:
 
3688:  concatRtnzz:
	# return
3688#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
3692:charAt:
	# get string
3692#	lw $t0,8($sp)

	# check that index is in bounds
3696#	lw $t1,-4($t0) # negative of # data words in string
3700#	subu $t3,$zero,$t1 # # chars in string
3704#	lw $t2,($sp) # index
3708#	bgeu $t2,$t3,strIndexOutOfBounds
3709##...sltu $at,$t2,$t3
3713##...beq $at,$zero,$+1388

	# access element
3716#	lw $t1,-8($t0) # # data words in object
3720#	sll $t1,$t1,2 # - byte-offset from end of chars
3724#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3728#	addu $t0,$t0,$t1 # - address of our char, offset by 8
3732#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
3736#	addu $sp,$sp,4
3740#	sw $t0,($sp)
3744#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
3748#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
3752:intToString:

	# save return address on stack; allocate space for dummy GC tag
3752#	subu $sp,$sp,8
3756#	sw $ra,4($sp)

	# save current sp
3760#	move $t0,$sp

	# move constant 10 into $t3
3764#	li $t3,10

	# get argument, negate if negative
3768#	lw $t1,8($sp)
3772#	bge $t1,$zero,itsNonNegLoop
3773##...slt $at,$t1,$zero
3777##...beq $at,$zero,$+8
3780#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
3784:  itsNonNegLoop:
3784#	divu $t1,$t3
3788#	mflo $t1 # quotient
3792#	mfhi $t4 # remainder
3796#	addu $t4,$t4,'0' # turn remainder into digit
3800#	subu $sp,$sp,4
3804#	sw $t4,($sp) # push digit onto stack
3808#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
3812#	lw $t4,8($t0)
3816#	bge $t4,$zero,itsSkipNeg
3817##...slt $at,$t4,$zero
3821##...beq $at,$zero,$+16
3824#	li $t4,'-'
3828#	subu $sp,$sp,4
3832#	sw $t4,($sp)
3836:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
3836#	subu $s6,$t0,$sp
3840#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
3844#	sw $t3,($t0)
3848#	srl $s6,$s6,2
3852#	subu $sp,$sp,4
3856#	sw $s6,($sp)
	
	# allocate memory
3860#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3864#	srl $s6,$s6,2
3868#	move $s7,$zero # no "object" words in object
3872#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
3876#	lw $t0,4($sp)
3880#	addu $sp,$sp,8

	# store "String" tag into class field
3884#	subu $s7,$s7,8 # address of header-1 word
3888#	la $t1,CLASS_String
3892#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
3896#	subu $t0,$zero,$t0
3900#	sw $t0,4($s7)

3904#	lw $t1,($s7) # number of data words in string
3908#	sll $t1,$t1,2 # number data bytes in string
3912#	subu $t1,$s7,$t1 # first location to store chars in string
3916#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
3920:  itsLoop:
3920#	lw $t2,($sp)
3924#	addu $sp,$sp,4
3928#	sb $t2,($t1)
3932#	addu $t1,$t1,1
3936#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
3940#	lw $ra,4($sp)
3944#	addu $sp,$sp,16
3948#	addu $t0,$t0,15
3952#	and $t0,$t0,0xfffffffc
3953##...lui $at,65535
3957##...ori $at,$at,0xfffc
3961##...and $t0,$t0,$at
3964#	sw $t0,($sp)
3968#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3972:intToChar:
	# save return address
3972#	subu $sp,$sp,4
3976#	sw $ra,($sp)

	# allocate object
3980#	li $s6,2
3984#	move $s7,$zero
3988#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
3992#	lw $ra,4($sp)
3996#	lw $t1,8($sp)
4000#	addu $sp,$sp,16

	# store "String" tag into class field
4004#	la $t0,CLASS_String
4008#	sw $t0,-12($s7)

	# store data in string
4012#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
4016#	li $t0,-1
4020#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
4024#	sw $s7,($sp)

	# return
4028#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
4032:compareTo:
	# get string pointers and check parameter for null
4032#	lw $t0,($sp) # second string
4036#	beq $t0,$zero,nullPtrException
4040#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
4044#	lw $t2,-4($t0) # negative length of second string
4048#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
4052#	slt $t4,$t3,$t2
4056#	slt $t5,$t2,$t3
4060#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
4064#	lw $t2,-8($t0) # # data words in second string
4068#	lw $t3,-8($t1) # # data words in first string
4072#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
4076#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
4080#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
4084#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
4088#	beq $zero,$t5,skipStrCmpLenzz
4092#	move $t2,$t3
4096:  skipStrCmpLenzz:
4096#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
4100:  cmpLoopzz:
4100#	lw $t3,-8($t1) # word from str2
4104#	lw $t4,-8($t0) # word from str1
4108#	bne $t3,$t4,cmpNotEqualzz
4112#	addu $t1,$t1,4
4116#	addu $t0,$t0,4
4120#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
4124#	j cmpHitLimitzz

4128:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
4128#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
4132#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
4136#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
4140:  cmpHitLimitzz:
4140#	sw $t5,($sp) # store value
4144#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
4148#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
4152:readLogicalChar:

	# check if we already have a character
4152#	lw $v0,lastCharRead
4156#	li $t0,-2
4160#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
4164#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
4168#	jr $ra # return
	
4172:  doReadCh:
	# we need to actually read a character: read and return
4172#	li $v0,12 # use system call to read a character
4176#	syscall
4180#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
4184:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
4184#	blt $s7,$zero arraySizeOutOfBounds
4185##...slt $at,$s7,$zero
4189##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
4192#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

4196:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
4196#	move $t3,$s6
4200#	bge $t3,$zero,newSkip
4201##...slt $at,$t3,$zero
4205##...beq $at,$zero,$+8
4208#	move $t3,$zero

4212:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
4212#	addu $t0,$t3,$s7
4216#	sll $t0,$t0,2
4220#	addu $t0,$t0,8 # amount of memory needed
4224#	addu $t1,$t0,$s3
4228#	bgtu $t1,$s4,doGC
4229##...sltu $at,$s4,$t1
4233##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
4236#	move $t2,$s3
4240:  zeroObjLoop:
4240#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

4244#	addu $s3,4
4248#	bltu $s3,$t1,zeroObjLoop
4249##...sltu $at,$s3,$t1
4253##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
4256#	sll $t0,$s7,2    # number of post-header bytes
4260#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
4264#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
4268#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
4272#	move $s7,$t0
4276#	subu $sp,$sp,4
4280#	sw $t0,($sp)

4284#	jr $ra
	
4288:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
4288#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
4292#	subu $sp,$sp,4
4296#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
4300#	lw $t0,cur_seg
4304#	move $t7,$s4
4308#	la $t6,seg1_start
4309##...lui $t6,16
4313##...addiu $t6,$t6,5668
4316#	la $s3,seg0_start
4320#	la $s4,seg0_end
4321##...lui $s4,16
4325##...addiu $s4,$s4,5668
4328#	sw $zero,cur_seg
4332#	bne $t0,$zero,skipGc1
4336#	la $t6,seg0_start
4340#	la $s3,seg1_start
4341##...lui $s3,16
4345##...addiu $s3,$s3,5668
4348#	la $s4,seg1_end
4349##...lui $s4,32
4353##...addiu $s4,$s4,5668
4356#	sw $s5,cur_seg
4360:  skipGc1:
4360#	li $t5,-2
4364#	lw $t0,stack_bottom
4368#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

4372:  gcStackCopyLoop:
4372#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
4376#	sll $t2,$t1,31 # zero iff low bit was zero
4380#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
4384#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
4388#	bleu $t1,$t6,gcTestIterDone1
4389##...sltu $at,$t6,$t1
4393##...beq $at,$zero,$+148
4396#	bgtu $t1,$t7,gcTestIterDone1
4397##...sltu $at,$t7,$t1
4401##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4404#	lw $t2,-8($t1) # possible forwarding tag
4408#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
4412#	lw $t2,-4($t1) # forwarding pointer: object's new address
4416#	sw $t2,4($t0) # update stack value
4420#	j gcTestIterDone1 # do next iteration

4424:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
4424#	bge $t2,$zero,gcSkip2
4425##...slt $at,$t2,$zero
4429##...beq $at,$zero,$+8
4432#	move $t2,$zero # set to zero if -1 (number of data words)

4436:  gcSkip2:
4436#	sll $t2,$t2,2
4440#	addu $t2,$t2,8
4444#	subu $t4,$t1,$t2 # address of first word of source
4448#	lw $t3,-4($t1) # number of object words (negative treated as zero)
4452#	bge $t3,$zero,gcH2Neg1
4453##...slt $at,$t3,$zero
4457##...beq $at,$zero,$+8
4460#	move $t3,$zero
4464:  gcH2Neg1:
4464#	sll $t3,$t3,2
4468#	addu $t3,$t3,$t1 # address one word past last word of source

4472#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
4476#	lw $s0,($t4)
4480#	lw $s1,-8($t1)
4484#	sw $s1,($t4)
4488#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
4492:  gCinnerCopy1:
4492#	lw $s0,($t4)
4496#	sw $s0,($s3)
4500#	addu $t4,$t4,4
4504#	addu $s3,$s3,4
4508#	bltu $t4,$t3,gCinnerCopy1
4509##...sltu $at,$t4,$t3
4513##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4516#	sw $t5,-8($t1) # -2 in first header-slot
4520#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
4524#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
4528#	j gcTestIterDone1

4532:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
4532#	subu $t0,$t0,$t1
4536#	subu $t0,$t0,3

4540:  gcTestIterDone1:
4540#	bgeu $t0,$sp,gcStackCopyLoop
4541##...sltu $at,$t0,$sp
4545##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
4548#	lw $t1,cur_seg
4552#	la $t0,seg0_start
4556#	beq $t1,$zero,gcSkip4
4560#	la $t0,seg1_start
4561##...lui $t0,16
4565##...addiu $t0,$t0,5668

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

4568:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
4568#	bgeu $t0,$s3,gcFinishUp
4569##...sltu $at,$t0,$s3
4573##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

4576:  gcHeapCopyLoop:
	# check if we have a data array
4576#	lw $t1,($t0) # first header word for current object
4580#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
4581##...slt $at,$t1,$zero
4585##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
4588#	lw $t1,4($t0) # data words
4592#	addu $t1,$t1,2 # add in # header words
4596#	sll $t1,$t1,2 # convert to byte-count
4600#	addu $t0,$t0,$t1 # skip over object
4604#	j gcTestIterDone2 # go do next object, if any

4608:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
4608#	sll $t2,$t1,2 # # data bytes
4612#	addu $t2,$t2,8 # to skip header word
4616#	addu $t2,$t0,$t2 # pointer to new object
4620#	lw $t3,-8($t2) # word to swap
4624#	sw $t1,-8($t2) # store header word
4628#	sw $t3,($t0) # restore first word of object

4632#	lw $t3,-4($t2) # # object words (negative treated as zero)
4636#	bge $t3,$zero,gcH2Neg2
4637##...slt $at,$t3,$zero
4641##...beq $at,$zero,$+8
4644#	move $t3,$zero
4648:  gcH2Neg2:
4648#	sll $t3,$t3,2 # # object bytes
4652#	move $t0,$t2 # address of first pointer in object
4656#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
4660#	beq $t0,$s1,gcTestIterDone2
	
4664:  gcNextPointerInObject:
	# get pointer from object
4664#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
4668#	bleu $t1,$t6,gcGoNextPointerSlot
4669##...sltu $at,$t6,$t1
4673##...beq $at,$zero,$+136
4676#	bgtu $t1,$t7,gcGoNextPointerSlot
4677##...sltu $at,$t7,$t1
4681##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4684#	lw $t8,-8($t1) # possible forwarding tag
4688#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
4692#	lw $t8,-4($t1) # forwarding pointer: object's new address
4696#	sw $t8,($t0) # update pointer in object
4700#	j gcGoNextPointerSlot # do next iteration

4704:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
4704#	bge $t8,$zero,gcSkip5
4705##...slt $at,$t8,$zero
4709##...beq $at,$zero,$+8
4712#	move $t8,$zero # set to zero if -1

4716:  gcSkip5:
4716#	sll $t8,$t8,2
4720#	addu $t8,$t8,8
4724#	subu $t4,$t1,$t8 # address of first word of source
4728#	lw $t3,-4($t1)
4732#	bge $t3,$zero,gcNoNeg
4733##...slt $at,$t3,$zero
4737##...beq $at,$zero,$+8
4740#	move $t3,$zero
4744:  gcNoNeg:
4744#	sll $t3,$t3,2
4748#	addu $t3,$t3,$t1 # address one word past last word of source

4752#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
4756#	lw $s0,($t4)
4760#	lw $t9,-8($t1)
4764#	sw $t9,($t4)
4768#	sw $s0,-8($t1)

	# copy all source bytes to the target
4772:  gCinnerCopy2:
4772#	lw $s0,($t4)
4776#	sw $s0,($s3)
4780#	addu $t4,$t4,4
4784#	addu $s3,$s3,4
4788#	bltu $t4,$t3,gCinnerCopy2
4789##...sltu $at,$t4,$t3
4793##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4796#	sw $t5,-8($t1) # -2 in first header-slot
4800#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
4804#	sw $t8,($t0)

4808:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
4808#	addu $t0,$t0,4
4812#	bltu $t0,$s1,gcNextPointerInObject
4813##...sltu $at,$t0,$s1
4817##...bne $at,$zero,$-152

4820:  gcTestIterDone2:
4820#	bltu $t0,$s3,gcHeapCopyLoop
4821##...sltu $at,$t0,$s3
4825##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

4828:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
4828#	lw $s2,($sp)
4832#	addu $sp,$sp,4

	# mark us as having already GC'd
4836#	move $t5,$s5

	# go try and allocate again
4840#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4844:vm_init:

	# mark bottom of stack
4844#	sw $sp,stack_bottom
4848#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
4852#	move $s2,$zero
4856#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
4860#	li $s5,5
4864#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

4868#	la $s3,seg0_start
4872#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
4876#	la $s4,seg0_end
4877##...lui $s4,16
4881##...addiu $s4,$s4,5668
4884#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
4888#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4892:divide:
	# get parameters; abort if divisor zero
4892#	lw $t0,($sp)
4896#	lw $t1,8($sp)
4900#	beq $t0,$zero,divByZeroError
	
	# perform division
4904#	div $t1,$t0
4908#	mflo $t0

	# store result, adjust stack and return
4912#	addu $sp,$sp,8 # adjust stack
4916#	sw $t0,($sp) # store result
4920#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4924:remainder:
	# get parameters; abort if divisor zero
4924#	lw $t0,($sp)
4928#	lw $t1,8($sp)
4932#	beq $t0,$zero,divByZeroError
	
	# perform division
4936#	div $t1,$t0
4940#	mfhi $t0

	# store result, adjust stack and return
4944#	addu $sp,$sp,8 # adjust stack
4948#	sw $t0,($sp) # store result
4952#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4956:checkCast:
	# get object, allow immediately if null
4956#	lw $t2,($sp)
4960#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
4964#	lw $t3,-8($t2) # <= 0 if array
4968#	lw $t2,-12($t2) # vtable address (unless array)
4972#	bgt $t3,$zero,skipArrayCast
4973##...slt $at,$zero,$t3
4977##...bne $at,$zero,$+8
4980#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4984:  skipArrayCast:
4984#	bge $t2,$t1,castException
4985##...slt $at,$t2,$t1
4989##...beq $at,$zero,$+152
4992#	blt $t2,$t0,castException
4993##...slt $at,$t2,$t0
4997##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
5000:  checkCastReturn:	
5000#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
5004:instanceOf:
	# get object, go return false if null
5004#	lw $t2,($sp)
5008#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
5012#	lw $t3,-8($t2) # <= 0 if array
5016#	lw $t2,-12($t2) # vtable address (unless array)
5020#	bgt $t3,$zero,skipArrayInstanceOf
5021##...slt $at,$zero,$t3
5025##...bne $at,$zero,$+8
5028#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
5032:  skipArrayInstanceOf:
5032#	sge $t0,$t2,$t0
5033##...slt $t0,$t2,$t0
5037##...xori $t0,$t0,0x1
5040#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
5044#	and $t2,$t0,$t1
5048:  doneInstanceOf: # if we reach here via branch, we know $t2=0
5048#	sw $t2,($sp)
5052#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

5056:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
5056#	li $v0,4 # syscall-code for print-string
5060#	syscall
5064:exit:
	# print termination message
5064#	li $v0,4
5068#	la $a0,exitString
5072#	syscall

	# terminate execution
5076#	li $v0,10 #syscall-code for "exit"
5080#	syscall

5084:outOfHeapMemory:
5084#	la $a0,heapMemoryMsg
5088#	j exitError
5092:divByZeroError:
5092#	la $a0,divByZeroMsg
5096#	j exitError
5100:strIndexOutOfBounds:
5100#	la $a0,strIndexOutOfBoundsMsg
5104#	j exitError
5108:arrayIndexOutOfBounds:
5108#	la $a0,arrayIndexOutOfBoundsMsg
5112#	j exitError
5116:arraySizeOutOfBounds:
5116#	la $a0,arraySizeOutOfBoundsMsg
5120#	j exitError
5124:nullPtrException:
5124#	la $a0,nullPtrExceptionMsg
5128#	j exitError
5132:badIntegerFormat:
5132#	la $a0,badIntegerFormatMsg
5136#	j exitError
5140:castException:
5140#	la $a0,castExceptionMsg
5144#	j exitError

############## data section ################
	.data
	.align 2

5360:cur_seg:
	.word 0

5364:lastCharRead:
	.word -2 # -2 => no buffered character

5368:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
5395:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
5418:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
5453:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
5487:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
5520:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
5551:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
5599:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
5620:gcMsg: 
      .asciiz "\nGC!\n"

5626:nullStr:
	.asciiz "null"
5631:trueString:
	.asciiz "true"
5636:falseString:
	.asciiz "false"
5642:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
5664:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

5668:seg0_start:
	.space 0x100000
1054244:seg0_end:
1054244:seg1_start:
	.space 0x100000
2102820:seg1_end:



