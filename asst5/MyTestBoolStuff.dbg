 .data # Program at 1.1 	
  .byte 49 # StringLiteral at 22.19 	
  .byte 32 # StringLiteral at 22.19	
  .byte 61 # StringLiteral at 22.19 		
  .byte 61 # StringLiteral at 22.19  
  .byte 32 # StringLiteral at 22.19 		
  .byte 49 # StringLiteral at 22.19  	
  .byte 32 # StringLiteral at 22.19			
  .byte 61 # StringLiteral at 22.19 	 
  .byte 61 # StringLiteral at 22.19 	
  .byte 62 # StringLiteral at 22.19  	
  .byte 32 # StringLiteral at 22.19			
  .byte 80 # StringLiteral at 22.19   
  .byte 65 # StringLiteral at 22.19		
  .byte 83 # StringLiteral at 22.19 	 
  .byte 83 # StringLiteral at 22.19  
  .byte 10 # StringLiteral at 22.19 
  .word CLASS_String # StringLiteral at 22.19	
  .word 5 # StringLiteral at 22.19   
  .word -16 # StringLiteral at 22.19 		
6284:strLit_78: # StringLiteral at 22.19		 
  .byte 49 # StringLiteral at 26.19	
  .byte 32 # StringLiteral at 26.19	 	
  .byte 33 # StringLiteral at 26.19			
  .byte 61 # StringLiteral at 26.19 	
  .byte 32 # StringLiteral at 26.19	  
  .byte 50 # StringLiteral at 26.19	
  .byte 32 # StringLiteral at 26.19		
  .byte 61 # StringLiteral at 26.19 		
  .byte 61 # StringLiteral at 26.19  	
  .byte 62 # StringLiteral at 26.19	  
  .byte 32 # StringLiteral at 26.19			
  .byte 80 # StringLiteral at 26.19	 	
  .byte 65 # StringLiteral at 26.19		
  .byte 83 # StringLiteral at 26.19  	
  .byte 83 # StringLiteral at 26.19   
  .byte 10 # StringLiteral at 26.19		 
  .word CLASS_String # StringLiteral at 26.19			
  .word 5 # StringLiteral at 26.19   
  .word -16 # StringLiteral at 26.19 		
6312:strLit_89: # StringLiteral at 26.19			
  .byte 98 # StringLiteral at 29.19	 	
  .byte 49 # StringLiteral at 29.19		
  .byte 32 # StringLiteral at 29.19	
  .byte 61 # StringLiteral at 29.19	  
  .byte 61 # StringLiteral at 29.19			
  .byte 32 # StringLiteral at 29.19		
  .byte 116 # StringLiteral at 29.19   
  .byte 114 # StringLiteral at 29.19	 
  .byte 117 # StringLiteral at 29.19			
  .byte 101 # StringLiteral at 29.19		
  .byte 32 # StringLiteral at 29.19		 
  .byte 61 # StringLiteral at 29.19   
  .byte 61 # StringLiteral at 29.19 	
  .byte 62 # StringLiteral at 29.19 	
  .byte 32 # StringLiteral at 29.19	 
  .byte 80 # StringLiteral at 29.19  	
  .byte 65 # StringLiteral at 29.19 		
  .byte 83 # StringLiteral at 29.19 	
  .byte 83 # StringLiteral at 29.19	  
  .byte 10 # StringLiteral at 29.19	 
  .word CLASS_String # StringLiteral at 29.19   
  .word 6 # StringLiteral at 29.19 	
  .word -20 # StringLiteral at 29.19 	
6344:strLit_99: # StringLiteral at 29.19  
  .byte 98 # StringLiteral at 32.19			
  .byte 50 # StringLiteral at 32.19  	
  .byte 32 # StringLiteral at 32.19  	
  .byte 61 # StringLiteral at 32.19		 
  .byte 61 # StringLiteral at 32.19  	
  .byte 32 # StringLiteral at 32.19	 
  .byte 102 # StringLiteral at 32.19  	
  .byte 97 # StringLiteral at 32.19 
  .byte 108 # StringLiteral at 32.19  	
  .byte 115 # StringLiteral at 32.19		
  .byte 101 # StringLiteral at 32.19	
  .byte 32 # StringLiteral at 32.19		 
  .byte 61 # StringLiteral at 32.19 
  .byte 61 # StringLiteral at 32.19  
  .byte 62 # StringLiteral at 32.19	
  .byte 32 # StringLiteral at 32.19  
  .byte 80 # StringLiteral at 32.19		
  .byte 65 # StringLiteral at 32.19	 
  .byte 83 # StringLiteral at 32.19  
  .byte 83 # StringLiteral at 32.19	  
  .byte 10 # StringLiteral at 32.19  
  .byte 0 # StringLiteral at 32.19  
  .byte 0 # StringLiteral at 32.19 	 
  .byte 0 # StringLiteral at 32.19		
  .word CLASS_String # StringLiteral at 32.19  
  .word 7 # StringLiteral at 32.19  	
  .word -21 # StringLiteral at 32.19 
6380:strLit_109: # StringLiteral at 32.19	  
  .byte 98 # StringLiteral at 35.19 		
  .byte 51 # StringLiteral at 35.19			
  .byte 32 # StringLiteral at 35.19   
  .byte 61 # StringLiteral at 35.19		
  .byte 61 # StringLiteral at 35.19  
  .byte 32 # StringLiteral at 35.19			
  .byte 116 # StringLiteral at 35.19  
  .byte 114 # StringLiteral at 35.19	  
  .byte 117 # StringLiteral at 35.19			
  .byte 101 # StringLiteral at 35.19   
  .byte 32 # StringLiteral at 35.19			
  .byte 61 # StringLiteral at 35.19			
  .byte 61 # StringLiteral at 35.19	
  .byte 62 # StringLiteral at 35.19  
  .byte 32 # StringLiteral at 35.19	 
  .byte 80 # StringLiteral at 35.19	
  .byte 65 # StringLiteral at 35.19		 
  .byte 83 # StringLiteral at 35.19   
  .byte 83 # StringLiteral at 35.19  	
  .byte 10 # StringLiteral at 35.19	
  .word CLASS_String # StringLiteral at 35.19  
  .word 6 # StringLiteral at 35.19	 	
  .word -20 # StringLiteral at 35.19 	
6412:strLit_119: # StringLiteral at 35.19		 
  .byte 98 # StringLiteral at 38.19	  
  .byte 52 # StringLiteral at 38.19 	 
  .byte 32 # StringLiteral at 38.19  	
  .byte 61 # StringLiteral at 38.19	
  .byte 61 # StringLiteral at 38.19	 	
  .byte 32 # StringLiteral at 38.19		 
  .byte 116 # StringLiteral at 38.19  
  .byte 114 # StringLiteral at 38.19   
  .byte 117 # StringLiteral at 38.19  	
  .byte 101 # StringLiteral at 38.19	
  .byte 32 # StringLiteral at 38.19		 
  .byte 61 # StringLiteral at 38.19	  
  .byte 61 # StringLiteral at 38.19		 
  .byte 62 # StringLiteral at 38.19   
  .byte 32 # StringLiteral at 38.19		
  .byte 80 # StringLiteral at 38.19		 
  .byte 65 # StringLiteral at 38.19 	
  .byte 83 # StringLiteral at 38.19 	
  .byte 83 # StringLiteral at 38.19  
  .byte 10 # StringLiteral at 38.19  
  .word CLASS_String # StringLiteral at 38.19	 	
  .word 6 # StringLiteral at 38.19 		
  .word -20 # StringLiteral at 38.19		
6444:strLit_129: # StringLiteral at 38.19		
  .byte 98 # StringLiteral at 41.19	
  .byte 53 # StringLiteral at 41.19		 
  .byte 32 # StringLiteral at 41.19  	
  .byte 61 # StringLiteral at 41.19  	
  .byte 61 # StringLiteral at 41.19	 	
  .byte 32 # StringLiteral at 41.19	 	
  .byte 116 # StringLiteral at 41.19 		
  .byte 114 # StringLiteral at 41.19 		
  .byte 117 # StringLiteral at 41.19  
  .byte 101 # StringLiteral at 41.19 
  .byte 32 # StringLiteral at 41.19		 
  .byte 61 # StringLiteral at 41.19	 	
  .byte 61 # StringLiteral at 41.19 
  .byte 62 # StringLiteral at 41.19	  
  .byte 32 # StringLiteral at 41.19 	
  .byte 80 # StringLiteral at 41.19   
  .byte 65 # StringLiteral at 41.19		
  .byte 83 # StringLiteral at 41.19 	 
  .byte 83 # StringLiteral at 41.19   
  .byte 10 # StringLiteral at 41.19   
  .word CLASS_String # StringLiteral at 41.19 	 
  .word 6 # StringLiteral at 41.19 	
  .word -20 # StringLiteral at 41.19  	
6476:strLit_139: # StringLiteral at 41.19		
  .byte 98 # StringLiteral at 44.19   
  .byte 54 # StringLiteral at 44.19	
  .byte 32 # StringLiteral at 44.19   
  .byte 61 # StringLiteral at 44.19 		
  .byte 61 # StringLiteral at 44.19		 
  .byte 32 # StringLiteral at 44.19 	
  .byte 116 # StringLiteral at 44.19 	
  .byte 114 # StringLiteral at 44.19  	
  .byte 117 # StringLiteral at 44.19	  
  .byte 101 # StringLiteral at 44.19	
  .byte 32 # StringLiteral at 44.19  	
  .byte 61 # StringLiteral at 44.19 	 
  .byte 61 # StringLiteral at 44.19  
  .byte 62 # StringLiteral at 44.19  	
  .byte 32 # StringLiteral at 44.19 		
  .byte 80 # StringLiteral at 44.19	
  .byte 65 # StringLiteral at 44.19	  
  .byte 83 # StringLiteral at 44.19  
  .byte 83 # StringLiteral at 44.19		
  .byte 10 # StringLiteral at 44.19		
  .word CLASS_String # StringLiteral at 44.19  
  .word 6 # StringLiteral at 44.19  	
  .word -20 # StringLiteral at 44.19  	
6508:strLit_149: # StringLiteral at 44.19  	
  .byte 98 # StringLiteral at 47.19  	
  .byte 55 # StringLiteral at 47.19	  
  .byte 32 # StringLiteral at 47.19		
  .byte 61 # StringLiteral at 47.19			
  .byte 61 # StringLiteral at 47.19	  
  .byte 32 # StringLiteral at 47.19 
  .byte 116 # StringLiteral at 47.19	 	
  .byte 114 # StringLiteral at 47.19  
  .byte 117 # StringLiteral at 47.19  
  .byte 101 # StringLiteral at 47.19			
  .byte 32 # StringLiteral at 47.19	
  .byte 61 # StringLiteral at 47.19	  
  .byte 61 # StringLiteral at 47.19 	 
  .byte 62 # StringLiteral at 47.19  
  .byte 32 # StringLiteral at 47.19   
  .byte 80 # StringLiteral at 47.19		 
  .byte 65 # StringLiteral at 47.19   
  .byte 83 # StringLiteral at 47.19  
  .byte 83 # StringLiteral at 47.19		
  .byte 10 # StringLiteral at 47.19 		
  .word CLASS_String # StringLiteral at 47.19	 	
  .word 6 # StringLiteral at 47.19  	
  .word -20 # StringLiteral at 47.19 		
6540:strLit_159: # StringLiteral at 47.19 		
  .byte 98 # StringLiteral at 50.19		 
  .byte 56 # StringLiteral at 50.19	  
  .byte 32 # StringLiteral at 50.19 
  .byte 61 # StringLiteral at 50.19		
  .byte 61 # StringLiteral at 50.19	 	
  .byte 32 # StringLiteral at 50.19 
  .byte 116 # StringLiteral at 50.19			
  .byte 114 # StringLiteral at 50.19 	
  .byte 117 # StringLiteral at 50.19		 
  .byte 32 # StringLiteral at 50.19  
  .byte 61 # StringLiteral at 50.19 
  .byte 61 # StringLiteral at 50.19		
  .byte 62 # StringLiteral at 50.19			
  .byte 32 # StringLiteral at 50.19  
  .byte 80 # StringLiteral at 50.19  
  .byte 65 # StringLiteral at 50.19	  
  .byte 83 # StringLiteral at 50.19	 
  .byte 83 # StringLiteral at 50.19  
  .byte 10 # StringLiteral at 50.19		 
  .byte 0 # StringLiteral at 50.19 
  .word CLASS_String # StringLiteral at 50.19 
  .word 6 # StringLiteral at 50.19   
  .word -19 # StringLiteral at 50.19	  
6572:strLit_169: # StringLiteral at 50.19  
  .byte 98 # StringLiteral at 53.19 	 
  .byte 57 # StringLiteral at 53.19	  
  .byte 32 # StringLiteral at 53.19		
  .byte 61 # StringLiteral at 53.19	  
  .byte 61 # StringLiteral at 53.19  	
  .byte 32 # StringLiteral at 53.19	 	
  .byte 116 # StringLiteral at 53.19 	 
  .byte 114 # StringLiteral at 53.19	  
  .byte 117 # StringLiteral at 53.19 	
  .byte 101 # StringLiteral at 53.19  	
  .byte 32 # StringLiteral at 53.19	 	
  .byte 61 # StringLiteral at 53.19 
  .byte 61 # StringLiteral at 53.19	 	
  .byte 62 # StringLiteral at 53.19	  
  .byte 32 # StringLiteral at 53.19   
  .byte 80 # StringLiteral at 53.19  	
  .byte 65 # StringLiteral at 53.19  	
  .byte 83 # StringLiteral at 53.19	
  .byte 83 # StringLiteral at 53.19 	
  .byte 10 # StringLiteral at 53.19  
  .word CLASS_String # StringLiteral at 53.19   
  .word 6 # StringLiteral at 53.19 	
  .word -20 # StringLiteral at 53.19 		
6604:strLit_179: # StringLiteral at 53.19	
  .byte 98 # StringLiteral at 56.19   
  .byte 49 # StringLiteral at 56.19		 
  .byte 48 # StringLiteral at 56.19  
  .byte 32 # StringLiteral at 56.19		 
  .byte 61 # StringLiteral at 56.19 		
  .byte 61 # StringLiteral at 56.19		 
  .byte 32 # StringLiteral at 56.19 	 
  .byte 116 # StringLiteral at 56.19  
  .byte 114 # StringLiteral at 56.19  	
  .byte 117 # StringLiteral at 56.19  	
  .byte 101 # StringLiteral at 56.19	  
  .byte 32 # StringLiteral at 56.19		
  .byte 61 # StringLiteral at 56.19	 
  .byte 61 # StringLiteral at 56.19	 	
  .byte 62 # StringLiteral at 56.19	 	
  .byte 32 # StringLiteral at 56.19  
  .byte 80 # StringLiteral at 56.19 
  .byte 65 # StringLiteral at 56.19		 
  .byte 83 # StringLiteral at 56.19		
  .byte 83 # StringLiteral at 56.19  	
  .byte 10 # StringLiteral at 56.19	
  .byte 0 # StringLiteral at 56.19  	
  .byte 0 # StringLiteral at 56.19	 
  .byte 0 # StringLiteral at 56.19	
  .word CLASS_String # StringLiteral at 56.19 	
  .word 7 # StringLiteral at 56.19  	
  .word -21 # StringLiteral at 56.19		
6640:strLit_189: # StringLiteral at 56.19 
  .byte 98 # StringLiteral at 59.19		
  .byte 49 # StringLiteral at 59.19 	 
  .byte 49 # StringLiteral at 59.19	 	
  .byte 32 # StringLiteral at 59.19	 
  .byte 61 # StringLiteral at 59.19		
  .byte 61 # StringLiteral at 59.19 		
  .byte 32 # StringLiteral at 59.19 	
  .byte 116 # StringLiteral at 59.19	  
  .byte 114 # StringLiteral at 59.19		 
  .byte 117 # StringLiteral at 59.19 	
  .byte 101 # StringLiteral at 59.19		
  .byte 32 # StringLiteral at 59.19		
  .byte 61 # StringLiteral at 59.19 	
  .byte 61 # StringLiteral at 59.19	  
  .byte 62 # StringLiteral at 59.19	  
  .byte 32 # StringLiteral at 59.19	  
  .byte 80 # StringLiteral at 59.19  	
  .byte 65 # StringLiteral at 59.19			
  .byte 83 # StringLiteral at 59.19 	
  .byte 83 # StringLiteral at 59.19		 
  .byte 10 # StringLiteral at 59.19	
  .byte 0 # StringLiteral at 59.19	
  .byte 0 # StringLiteral at 59.19  
  .byte 0 # StringLiteral at 59.19		 
  .word CLASS_String # StringLiteral at 59.19			
  .word 7 # StringLiteral at 59.19		
  .word -21 # StringLiteral at 59.19 	 
6676:strLit_199: # StringLiteral at 59.19 		
  .byte 98 # StringLiteral at 62.19 
  .byte 49 # StringLiteral at 62.19  
  .byte 50 # StringLiteral at 62.19  	
  .byte 32 # StringLiteral at 62.19	
  .byte 61 # StringLiteral at 62.19 	 
  .byte 61 # StringLiteral at 62.19  	
  .byte 32 # StringLiteral at 62.19 
  .byte 116 # StringLiteral at 62.19	 
  .byte 114 # StringLiteral at 62.19	
  .byte 117 # StringLiteral at 62.19	 	
  .byte 101 # StringLiteral at 62.19 
  .byte 32 # StringLiteral at 62.19	 	
  .byte 61 # StringLiteral at 62.19	
  .byte 61 # StringLiteral at 62.19 		
  .byte 62 # StringLiteral at 62.19		
  .byte 32 # StringLiteral at 62.19  	
  .byte 80 # StringLiteral at 62.19  	
  .byte 65 # StringLiteral at 62.19	  
  .byte 83 # StringLiteral at 62.19 
  .byte 83 # StringLiteral at 62.19			
  .byte 10 # StringLiteral at 62.19   
  .byte 0 # StringLiteral at 62.19	  
  .byte 0 # StringLiteral at 62.19 		
  .byte 0 # StringLiteral at 62.19 	
  .word CLASS_String # StringLiteral at 62.19 	
  .word 7 # StringLiteral at 62.19 	 
  .word -21 # StringLiteral at 62.19			
6712:strLit_209: # StringLiteral at 62.19 		
  .byte 98 # StringLiteral at 65.19   
  .byte 49 # StringLiteral at 65.19		 
  .byte 51 # StringLiteral at 65.19 	
  .byte 32 # StringLiteral at 65.19	  
  .byte 61 # StringLiteral at 65.19 	
  .byte 61 # StringLiteral at 65.19  
  .byte 32 # StringLiteral at 65.19 	 
  .byte 116 # StringLiteral at 65.19   
  .byte 114 # StringLiteral at 65.19  
  .byte 117 # StringLiteral at 65.19	
  .byte 101 # StringLiteral at 65.19			
  .byte 32 # StringLiteral at 65.19  	
  .byte 61 # StringLiteral at 65.19 	 
  .byte 61 # StringLiteral at 65.19	 	
  .byte 62 # StringLiteral at 65.19   
  .byte 32 # StringLiteral at 65.19 	
  .byte 80 # StringLiteral at 65.19  
  .byte 65 # StringLiteral at 65.19		 
  .byte 83 # StringLiteral at 65.19	  
  .byte 83 # StringLiteral at 65.19 
  .byte 10 # StringLiteral at 65.19 	 
  .byte 0 # StringLiteral at 65.19 	
  .byte 0 # StringLiteral at 65.19			
  .byte 0 # StringLiteral at 65.19   
  .word CLASS_String # StringLiteral at 65.19 		
  .word 7 # StringLiteral at 65.19 	
  .word -21 # StringLiteral at 65.19			
6748:strLit_219: # StringLiteral at 65.19		
  .byte 42 # StringLiteral at 69.18 	
  .byte 42 # StringLiteral at 69.18	  
  .byte 42 # StringLiteral at 69.18	
  .byte 42 # StringLiteral at 69.18  
  .byte 42 # StringLiteral at 69.18  
  .byte 42 # StringLiteral at 69.18	
  .byte 42 # StringLiteral at 69.18 
  .byte 42 # StringLiteral at 69.18 	
  .byte 42 # StringLiteral at 69.18			
  .byte 42 # StringLiteral at 69.18		
  .byte 42 # StringLiteral at 69.18		
  .byte 42 # StringLiteral at 69.18	 	
  .byte 42 # StringLiteral at 69.18	 	
  .byte 42 # StringLiteral at 69.18	
  .byte 42 # StringLiteral at 69.18  	
  .byte 42 # StringLiteral at 69.18	  
  .byte 42 # StringLiteral at 69.18   
  .byte 42 # StringLiteral at 69.18	 
  .byte 42 # StringLiteral at 69.18		 
  .byte 42 # StringLiteral at 69.18	 
  .byte 42 # StringLiteral at 69.18 		
  .byte 42 # StringLiteral at 69.18	  
  .byte 42 # StringLiteral at 69.18 	 
  .byte 42 # StringLiteral at 69.18	 
  .byte 42 # StringLiteral at 69.18			
  .byte 42 # StringLiteral at 69.18 		
  .byte 42 # StringLiteral at 69.18  	
  .byte 42 # StringLiteral at 69.18 
  .byte 10 # StringLiteral at 69.18 	
  .byte 0 # StringLiteral at 69.18		
  .byte 0 # StringLiteral at 69.18  	
  .byte 0 # StringLiteral at 69.18   
  .word CLASS_String # StringLiteral at 69.18  	
  .word 9 # StringLiteral at 69.18   
  .word -29 # StringLiteral at 69.18 	 
6792:strLit_226: # StringLiteral at 69.18 	 
  .byte 98 # StringLiteral at 73.19	 
  .byte 49 # StringLiteral at 73.19	  
  .byte 32 # StringLiteral at 73.19 	
  .byte 33 # StringLiteral at 73.19  
  .byte 61 # StringLiteral at 73.19 	
  .byte 32 # StringLiteral at 73.19		 
  .byte 102 # StringLiteral at 73.19 	
  .byte 97 # StringLiteral at 73.19	 
  .byte 108 # StringLiteral at 73.19		
  .byte 115 # StringLiteral at 73.19	 
  .byte 101 # StringLiteral at 73.19	
  .byte 32 # StringLiteral at 73.19   
  .byte 61 # StringLiteral at 73.19  
  .byte 61 # StringLiteral at 73.19  	
  .byte 62 # StringLiteral at 73.19  	
  .byte 32 # StringLiteral at 73.19	 	
  .byte 80 # StringLiteral at 73.19 		
  .byte 65 # StringLiteral at 73.19 	 
  .byte 83 # StringLiteral at 73.19	  
  .byte 83 # StringLiteral at 73.19	
  .byte 10 # StringLiteral at 73.19	  
  .byte 0 # StringLiteral at 73.19  	
  .byte 0 # StringLiteral at 73.19   
  .byte 0 # StringLiteral at 73.19	 	
  .word CLASS_String # StringLiteral at 73.19 		
  .word 7 # StringLiteral at 73.19	
  .word -21 # StringLiteral at 73.19 		
6828:strLit_234: # StringLiteral at 73.19  
  .byte 98 # StringLiteral at 76.19	 
  .byte 50 # StringLiteral at 76.19  	
  .byte 32 # StringLiteral at 76.19  
  .byte 33 # StringLiteral at 76.19  
  .byte 61 # StringLiteral at 76.19	  
  .byte 32 # StringLiteral at 76.19 	 
  .byte 116 # StringLiteral at 76.19 		
  .byte 114 # StringLiteral at 76.19   
  .byte 117 # StringLiteral at 76.19 	
  .byte 101 # StringLiteral at 76.19		
  .byte 32 # StringLiteral at 76.19 	
  .byte 61 # StringLiteral at 76.19	 	
  .byte 61 # StringLiteral at 76.19	 	
  .byte 62 # StringLiteral at 76.19	  
  .byte 32 # StringLiteral at 76.19 	 
  .byte 80 # StringLiteral at 76.19  	
  .byte 65 # StringLiteral at 76.19		
  .byte 83 # StringLiteral at 76.19	 
  .byte 83 # StringLiteral at 76.19	
  .byte 10 # StringLiteral at 76.19 
  .word CLASS_String # StringLiteral at 76.19  
  .word 6 # StringLiteral at 76.19 
  .word -20 # StringLiteral at 76.19 
6860:strLit_245: # StringLiteral at 76.19 		
  .byte 98 # StringLiteral at 79.19	 	
  .byte 51 # StringLiteral at 79.19	 
  .byte 32 # StringLiteral at 79.19	 
  .byte 33 # StringLiteral at 79.19 		
  .byte 61 # StringLiteral at 79.19 	 
  .byte 32 # StringLiteral at 79.19 	
  .byte 102 # StringLiteral at 79.19   
  .byte 97 # StringLiteral at 79.19 
  .byte 108 # StringLiteral at 79.19		
  .byte 115 # StringLiteral at 79.19	  
  .byte 101 # StringLiteral at 79.19 	 
  .byte 32 # StringLiteral at 79.19  	
  .byte 61 # StringLiteral at 79.19  	
  .byte 61 # StringLiteral at 79.19  
  .byte 62 # StringLiteral at 79.19 	
  .byte 32 # StringLiteral at 79.19  
  .byte 80 # StringLiteral at 79.19	 	
  .byte 65 # StringLiteral at 79.19		
  .byte 83 # StringLiteral at 79.19   
  .byte 83 # StringLiteral at 79.19  	
  .byte 10 # StringLiteral at 79.19	 	
  .byte 0 # StringLiteral at 79.19 		
  .byte 0 # StringLiteral at 79.19 
  .byte 0 # StringLiteral at 79.19		
  .word CLASS_String # StringLiteral at 79.19 	
  .word 7 # StringLiteral at 79.19	 	
  .word -21 # StringLiteral at 79.19			
6896:strLit_256: # StringLiteral at 79.19   
  .byte 98 # StringLiteral at 82.19		 
  .byte 52 # StringLiteral at 82.19  	
  .byte 32 # StringLiteral at 82.19		 
  .byte 33 # StringLiteral at 82.19 
  .byte 61 # StringLiteral at 82.19  	
  .byte 32 # StringLiteral at 82.19  	
  .byte 102 # StringLiteral at 82.19 
  .byte 97 # StringLiteral at 82.19  	
  .byte 108 # StringLiteral at 82.19 
  .byte 115 # StringLiteral at 82.19			
  .byte 101 # StringLiteral at 82.19	  
  .byte 32 # StringLiteral at 82.19		
  .byte 61 # StringLiteral at 82.19  	
  .byte 61 # StringLiteral at 82.19	  
  .byte 62 # StringLiteral at 82.19	
  .byte 32 # StringLiteral at 82.19		 
  .byte 80 # StringLiteral at 82.19	 	
  .byte 65 # StringLiteral at 82.19   
  .byte 83 # StringLiteral at 82.19 	 
  .byte 83 # StringLiteral at 82.19	 	
  .byte 10 # StringLiteral at 82.19 
  .byte 0 # StringLiteral at 82.19	 
  .byte 0 # StringLiteral at 82.19 
  .byte 0 # StringLiteral at 82.19 	
  .word CLASS_String # StringLiteral at 82.19 		
  .word 7 # StringLiteral at 82.19  
  .word -21 # StringLiteral at 82.19			
6932:strLit_267: # StringLiteral at 82.19		
  .byte 98 # StringLiteral at 85.19  	
  .byte 53 # StringLiteral at 85.19	  
  .byte 32 # StringLiteral at 85.19	
  .byte 33 # StringLiteral at 85.19   
  .byte 61 # StringLiteral at 85.19 		
  .byte 32 # StringLiteral at 85.19 	
  .byte 102 # StringLiteral at 85.19	
  .byte 97 # StringLiteral at 85.19 	 
  .byte 108 # StringLiteral at 85.19 		
  .byte 115 # StringLiteral at 85.19	
  .byte 101 # StringLiteral at 85.19	 	
  .byte 32 # StringLiteral at 85.19   
  .byte 61 # StringLiteral at 85.19	  
  .byte 61 # StringLiteral at 85.19  
  .byte 62 # StringLiteral at 85.19 	 
  .byte 32 # StringLiteral at 85.19 		
  .byte 80 # StringLiteral at 85.19   
  .byte 65 # StringLiteral at 85.19		 
  .byte 83 # StringLiteral at 85.19		
  .byte 83 # StringLiteral at 85.19	  
  .byte 10 # StringLiteral at 85.19   
  .byte 0 # StringLiteral at 85.19		
  .byte 0 # StringLiteral at 85.19  	
  .byte 0 # StringLiteral at 85.19	
  .word CLASS_String # StringLiteral at 85.19 	 
  .word 7 # StringLiteral at 85.19	  
  .word -21 # StringLiteral at 85.19  	
6968:strLit_278: # StringLiteral at 85.19 		
  .byte 98 # StringLiteral at 88.19 	
  .byte 54 # StringLiteral at 88.19	 	
  .byte 32 # StringLiteral at 88.19	 	
  .byte 33 # StringLiteral at 88.19 
  .byte 61 # StringLiteral at 88.19 	 
  .byte 32 # StringLiteral at 88.19 	
  .byte 102 # StringLiteral at 88.19	  
  .byte 97 # StringLiteral at 88.19  
  .byte 108 # StringLiteral at 88.19  
  .byte 115 # StringLiteral at 88.19  	
  .byte 101 # StringLiteral at 88.19 	 
  .byte 32 # StringLiteral at 88.19 		
  .byte 61 # StringLiteral at 88.19   
  .byte 61 # StringLiteral at 88.19  	
  .byte 62 # StringLiteral at 88.19  
  .byte 32 # StringLiteral at 88.19 	 
  .byte 80 # StringLiteral at 88.19	
  .byte 65 # StringLiteral at 88.19  	
  .byte 83 # StringLiteral at 88.19	  
  .byte 83 # StringLiteral at 88.19		
  .byte 10 # StringLiteral at 88.19 	
  .byte 0 # StringLiteral at 88.19 
  .byte 0 # StringLiteral at 88.19	 	
  .byte 0 # StringLiteral at 88.19	 
  .word CLASS_String # StringLiteral at 88.19 		
  .word 7 # StringLiteral at 88.19 		
  .word -21 # StringLiteral at 88.19	 	
7004:strLit_289: # StringLiteral at 88.19	 	
  .byte 98 # StringLiteral at 91.19	 	
  .byte 55 # StringLiteral at 91.19		
  .byte 32 # StringLiteral at 91.19  	
  .byte 33 # StringLiteral at 91.19   
  .byte 61 # StringLiteral at 91.19	 
  .byte 32 # StringLiteral at 91.19  	
  .byte 102 # StringLiteral at 91.19  	
  .byte 97 # StringLiteral at 91.19	 
  .byte 108 # StringLiteral at 91.19	  
  .byte 115 # StringLiteral at 91.19		 
  .byte 101 # StringLiteral at 91.19	
  .byte 32 # StringLiteral at 91.19			
  .byte 61 # StringLiteral at 91.19	  
  .byte 61 # StringLiteral at 91.19 	 
  .byte 62 # StringLiteral at 91.19		 
  .byte 32 # StringLiteral at 91.19		 
  .byte 80 # StringLiteral at 91.19  
  .byte 65 # StringLiteral at 91.19		
  .byte 83 # StringLiteral at 91.19 
  .byte 83 # StringLiteral at 91.19   
  .byte 10 # StringLiteral at 91.19  	
  .byte 0 # StringLiteral at 91.19		
  .byte 0 # StringLiteral at 91.19		
  .byte 0 # StringLiteral at 91.19			
  .word CLASS_String # StringLiteral at 91.19		
  .word 7 # StringLiteral at 91.19	 
  .word -21 # StringLiteral at 91.19   
7040:strLit_300: # StringLiteral at 91.19 	
  .byte 98 # StringLiteral at 94.19 	
  .byte 56 # StringLiteral at 94.19 
  .byte 32 # StringLiteral at 94.19 
  .byte 33 # StringLiteral at 94.19			
  .byte 61 # StringLiteral at 94.19	
  .byte 32 # StringLiteral at 94.19	 	
  .byte 102 # StringLiteral at 94.19 		
  .byte 97 # StringLiteral at 94.19 		
  .byte 108 # StringLiteral at 94.19 
  .byte 115 # StringLiteral at 94.19 
  .byte 101 # StringLiteral at 94.19 		
  .byte 32 # StringLiteral at 94.19		
  .byte 61 # StringLiteral at 94.19 	 
  .byte 61 # StringLiteral at 94.19 		
  .byte 62 # StringLiteral at 94.19 
  .byte 32 # StringLiteral at 94.19	 	
  .byte 80 # StringLiteral at 94.19  
  .byte 65 # StringLiteral at 94.19	 	
  .byte 83 # StringLiteral at 94.19		
  .byte 83 # StringLiteral at 94.19  
  .byte 10 # StringLiteral at 94.19   
  .byte 0 # StringLiteral at 94.19  	
  .byte 0 # StringLiteral at 94.19 	
  .byte 0 # StringLiteral at 94.19 	 
  .word CLASS_String # StringLiteral at 94.19		
  .word 7 # StringLiteral at 94.19	 
  .word -21 # StringLiteral at 94.19	 
7076:strLit_311: # StringLiteral at 94.19   
  .byte 98 # StringLiteral at 97.19 
  .byte 57 # StringLiteral at 97.19		
  .byte 32 # StringLiteral at 97.19			
  .byte 33 # StringLiteral at 97.19 
  .byte 61 # StringLiteral at 97.19 	
  .byte 32 # StringLiteral at 97.19	 	
  .byte 102 # StringLiteral at 97.19   
  .byte 97 # StringLiteral at 97.19 	
  .byte 108 # StringLiteral at 97.19	 	
  .byte 115 # StringLiteral at 97.19 	 
  .byte 101 # StringLiteral at 97.19 		
  .byte 32 # StringLiteral at 97.19  	
  .byte 61 # StringLiteral at 97.19	 	
  .byte 61 # StringLiteral at 97.19	
  .byte 62 # StringLiteral at 97.19 	
  .byte 32 # StringLiteral at 97.19	  
  .byte 80 # StringLiteral at 97.19 	
  .byte 65 # StringLiteral at 97.19	
  .byte 83 # StringLiteral at 97.19	 	
  .byte 83 # StringLiteral at 97.19		 
  .byte 10 # StringLiteral at 97.19 	 
  .byte 0 # StringLiteral at 97.19	
  .byte 0 # StringLiteral at 97.19 	 
  .byte 0 # StringLiteral at 97.19   
  .word CLASS_String # StringLiteral at 97.19   
  .word 7 # StringLiteral at 97.19  
  .word -21 # StringLiteral at 97.19 	 
7112:strLit_322: # StringLiteral at 97.19 	
  .byte 98 # StringLiteral at 100.19 	 
  .byte 49 # StringLiteral at 100.19   
  .byte 48 # StringLiteral at 100.19	
  .byte 32 # StringLiteral at 100.19			
  .byte 33 # StringLiteral at 100.19	 
  .byte 61 # StringLiteral at 100.19 		
  .byte 32 # StringLiteral at 100.19  
  .byte 102 # StringLiteral at 100.19  
  .byte 97 # StringLiteral at 100.19  
  .byte 108 # StringLiteral at 100.19	
  .byte 115 # StringLiteral at 100.19 	 
  .byte 101 # StringLiteral at 100.19  	
  .byte 32 # StringLiteral at 100.19		
  .byte 61 # StringLiteral at 100.19		 
  .byte 61 # StringLiteral at 100.19		 
  .byte 62 # StringLiteral at 100.19  
  .byte 32 # StringLiteral at 100.19  
  .byte 80 # StringLiteral at 100.19  
  .byte 65 # StringLiteral at 100.19 	 
  .byte 83 # StringLiteral at 100.19  
  .byte 83 # StringLiteral at 100.19			
  .byte 10 # StringLiteral at 100.19	  
  .byte 0 # StringLiteral at 100.19			
  .byte 0 # StringLiteral at 100.19			
  .word CLASS_String # StringLiteral at 100.19	  
  .word 7 # StringLiteral at 100.19	
  .word -22 # StringLiteral at 100.19 	
7148:strLit_333: # StringLiteral at 100.19 	
  .byte 98 # StringLiteral at 103.19 		
  .byte 49 # StringLiteral at 103.19	 	
  .byte 49 # StringLiteral at 103.19	 	
  .byte 32 # StringLiteral at 103.19 	 
  .byte 33 # StringLiteral at 103.19 
  .byte 61 # StringLiteral at 103.19  	
  .byte 32 # StringLiteral at 103.19	 	
  .byte 102 # StringLiteral at 103.19		
  .byte 97 # StringLiteral at 103.19	
  .byte 108 # StringLiteral at 103.19	
  .byte 115 # StringLiteral at 103.19 	
  .byte 101 # StringLiteral at 103.19 
  .byte 32 # StringLiteral at 103.19	
  .byte 61 # StringLiteral at 103.19	
  .byte 61 # StringLiteral at 103.19 
  .byte 62 # StringLiteral at 103.19 
  .byte 32 # StringLiteral at 103.19	 
  .byte 80 # StringLiteral at 103.19 
  .byte 65 # StringLiteral at 103.19	  
  .byte 83 # StringLiteral at 103.19 
  .byte 83 # StringLiteral at 103.19 	
  .byte 10 # StringLiteral at 103.19 	 
  .byte 0 # StringLiteral at 103.19 		
  .byte 0 # StringLiteral at 103.19 	 
  .word CLASS_String # StringLiteral at 103.19	 	
  .word 7 # StringLiteral at 103.19  
  .word -22 # StringLiteral at 103.19  	
7184:strLit_344: # StringLiteral at 103.19	 
  .byte 98 # StringLiteral at 106.19		 
  .byte 49 # StringLiteral at 106.19 	 
  .byte 50 # StringLiteral at 106.19 	 
  .byte 32 # StringLiteral at 106.19 
  .byte 33 # StringLiteral at 106.19		 
  .byte 61 # StringLiteral at 106.19   
  .byte 32 # StringLiteral at 106.19   
  .byte 102 # StringLiteral at 106.19 
  .byte 97 # StringLiteral at 106.19	  
  .byte 108 # StringLiteral at 106.19 		
  .byte 115 # StringLiteral at 106.19 		
  .byte 101 # StringLiteral at 106.19 	 
  .byte 32 # StringLiteral at 106.19	
  .byte 61 # StringLiteral at 106.19 		
  .byte 61 # StringLiteral at 106.19 	
  .byte 62 # StringLiteral at 106.19	 
  .byte 32 # StringLiteral at 106.19	
  .byte 80 # StringLiteral at 106.19			
  .byte 65 # StringLiteral at 106.19 		
  .byte 83 # StringLiteral at 106.19 	
  .byte 83 # StringLiteral at 106.19		 
  .byte 10 # StringLiteral at 106.19		
  .byte 0 # StringLiteral at 106.19	 	
  .byte 0 # StringLiteral at 106.19 	
  .word CLASS_String # StringLiteral at 106.19		
  .word 7 # StringLiteral at 106.19 		
  .word -22 # StringLiteral at 106.19 	
7220:strLit_355: # StringLiteral at 106.19 	
  .byte 98 # StringLiteral at 109.19  
  .byte 49 # StringLiteral at 109.19		
  .byte 51 # StringLiteral at 109.19  	
  .byte 32 # StringLiteral at 109.19   
  .byte 33 # StringLiteral at 109.19	  
  .byte 61 # StringLiteral at 109.19  	
  .byte 32 # StringLiteral at 109.19			
  .byte 102 # StringLiteral at 109.19	
  .byte 97 # StringLiteral at 109.19  
  .byte 108 # StringLiteral at 109.19   
  .byte 115 # StringLiteral at 109.19		 
  .byte 101 # StringLiteral at 109.19		
  .byte 32 # StringLiteral at 109.19	 	
  .byte 61 # StringLiteral at 109.19 
  .byte 61 # StringLiteral at 109.19  
  .byte 62 # StringLiteral at 109.19			
  .byte 32 # StringLiteral at 109.19 		
  .byte 80 # StringLiteral at 109.19 
  .byte 65 # StringLiteral at 109.19	 
  .byte 83 # StringLiteral at 109.19 		
  .byte 83 # StringLiteral at 109.19 
  .byte 10 # StringLiteral at 109.19  	
  .byte 0 # StringLiteral at 109.19 	 
  .byte 0 # StringLiteral at 109.19   
  .word CLASS_String # StringLiteral at 109.19	 	
  .word 7 # StringLiteral at 109.19  	
  .word -22 # StringLiteral at 109.19	 	
7256:strLit_366: # StringLiteral at 109.19  
  .byte 42 # StringLiteral at 113.18 	 
  .byte 42 # StringLiteral at 113.18 
  .byte 42 # StringLiteral at 113.18			
  .byte 42 # StringLiteral at 113.18 	
  .byte 42 # StringLiteral at 113.18		
  .byte 42 # StringLiteral at 113.18		 
  .byte 42 # StringLiteral at 113.18 	 
  .byte 42 # StringLiteral at 113.18 	 
  .byte 42 # StringLiteral at 113.18	 
  .byte 42 # StringLiteral at 113.18 		
  .byte 42 # StringLiteral at 113.18  
  .byte 42 # StringLiteral at 113.18   
  .byte 42 # StringLiteral at 113.18 
  .byte 42 # StringLiteral at 113.18			
  .byte 42 # StringLiteral at 113.18		 
  .byte 42 # StringLiteral at 113.18   
  .byte 42 # StringLiteral at 113.18	
  .byte 42 # StringLiteral at 113.18	 
  .byte 42 # StringLiteral at 113.18   
  .byte 42 # StringLiteral at 113.18  	
  .byte 42 # StringLiteral at 113.18	  
  .byte 42 # StringLiteral at 113.18 	
  .byte 42 # StringLiteral at 113.18		 
  .byte 42 # StringLiteral at 113.18	 	
  .byte 42 # StringLiteral at 113.18   
  .byte 42 # StringLiteral at 113.18		
  .byte 42 # StringLiteral at 113.18		 
  .byte 42 # StringLiteral at 113.18 	
  .byte 10 # StringLiteral at 113.18		
  .byte 0 # StringLiteral at 113.18			
  .byte 0 # StringLiteral at 113.18	 
  .byte 0 # StringLiteral at 113.18  	
  .word CLASS_String # StringLiteral at 113.18		 
  .word 9 # StringLiteral at 113.18   
  .word -29 # StringLiteral at 113.18	  
7300:strLit_373: # StringLiteral at 113.18	 
  .byte 33 # StringLiteral at 117.19		 
  .byte 40 # StringLiteral at 117.19 	
  .byte 49 # StringLiteral at 117.19  
  .byte 32 # StringLiteral at 117.19			
  .byte 61 # StringLiteral at 117.19		 
  .byte 61 # StringLiteral at 117.19	
  .byte 32 # StringLiteral at 117.19	
  .byte 50 # StringLiteral at 117.19		
  .byte 41 # StringLiteral at 117.19	  
  .byte 32 # StringLiteral at 117.19	
  .byte 61 # StringLiteral at 117.19   
  .byte 61 # StringLiteral at 117.19 	
  .byte 62 # StringLiteral at 117.19 	 
  .byte 32 # StringLiteral at 117.19		
  .byte 80 # StringLiteral at 117.19 		
  .byte 65 # StringLiteral at 117.19		
  .byte 83 # StringLiteral at 117.19			
  .byte 83 # StringLiteral at 117.19  
  .byte 10 # StringLiteral at 117.19  	
  .byte 0 # StringLiteral at 117.19 
  .word CLASS_String # StringLiteral at 117.19			
  .word 6 # StringLiteral at 117.19  	
  .word -19 # StringLiteral at 117.19   
7332:strLit_381: # StringLiteral at 117.19		 
  .byte 33 # StringLiteral at 120.19  	
  .byte 40 # StringLiteral at 120.19 	
  .byte 33 # StringLiteral at 120.19	  
  .byte 40 # StringLiteral at 120.19 	 
  .byte 33 # StringLiteral at 120.19  	
  .byte 40 # StringLiteral at 120.19		 
  .byte 49 # StringLiteral at 120.19  	
  .byte 32 # StringLiteral at 120.19	  
  .byte 61 # StringLiteral at 120.19		 
  .byte 61 # StringLiteral at 120.19 		
  .byte 32 # StringLiteral at 120.19	 
  .byte 50 # StringLiteral at 120.19	  
  .byte 41 # StringLiteral at 120.19   
  .byte 41 # StringLiteral at 120.19 		
  .byte 41 # StringLiteral at 120.19 	
  .byte 32 # StringLiteral at 120.19 	 
  .byte 61 # StringLiteral at 120.19		
  .byte 61 # StringLiteral at 120.19		
  .byte 62 # StringLiteral at 120.19 	 
  .byte 32 # StringLiteral at 120.19			
  .byte 80 # StringLiteral at 120.19 		
  .byte 65 # StringLiteral at 120.19 		
  .byte 83 # StringLiteral at 120.19	
  .byte 83 # StringLiteral at 120.19  
  .byte 10 # StringLiteral at 120.19	 
  .byte 0 # StringLiteral at 120.19   
  .byte 0 # StringLiteral at 120.19   
  .byte 0 # StringLiteral at 120.19	 
  .word CLASS_String # StringLiteral at 120.19  	
  .word 8 # StringLiteral at 120.19 		
  .word -25 # StringLiteral at 120.19			
7372:strLit_394: # StringLiteral at 120.19 		
  .byte 33 # StringLiteral at 123.19   
  .byte 40 # StringLiteral at 123.19   
  .byte 33 # StringLiteral at 123.19	 
  .byte 40 # StringLiteral at 123.19  	
  .byte 33 # StringLiteral at 123.19		
  .byte 40 # StringLiteral at 123.19	 
  .byte 33 # StringLiteral at 123.19  
  .byte 40 # StringLiteral at 123.19		
  .byte 49 # StringLiteral at 123.19 	
  .byte 32 # StringLiteral at 123.19	 
  .byte 61 # StringLiteral at 123.19 	 
  .byte 61 # StringLiteral at 123.19 
  .byte 32 # StringLiteral at 123.19 	
  .byte 49 # StringLiteral at 123.19			
  .byte 41 # StringLiteral at 123.19	  
  .byte 41 # StringLiteral at 123.19	 
  .byte 41 # StringLiteral at 123.19	  
  .byte 41 # StringLiteral at 123.19	
  .byte 32 # StringLiteral at 123.19	 
  .byte 61 # StringLiteral at 123.19  
  .byte 61 # StringLiteral at 123.19 		
  .byte 62 # StringLiteral at 123.19  
  .byte 32 # StringLiteral at 123.19	 	
  .byte 80 # StringLiteral at 123.19 
  .byte 65 # StringLiteral at 123.19 		
  .byte 83 # StringLiteral at 123.19	 
  .byte 83 # StringLiteral at 123.19			
  .byte 10 # StringLiteral at 123.19   
  .word CLASS_String # StringLiteral at 123.19  	
  .word 8 # StringLiteral at 123.19  	
  .word -28 # StringLiteral at 123.19	  
7412:strLit_408: # StringLiteral at 123.19  
7412:CLASS_Object: # Program at 1.1		
7412:CLASS_String: # Program at 1.1			
.text # Program at 1.1		 
.global main # Program at 1.1		 
0:main: # Program at 1.1		 
0#jal vm_init # Program at 1.1	 	
4#subu $sp, $sp, 4 # NewObject at 0.0	 	
8#sw $zero, ($sp) # NewObject at 0.0   
12#jal fcn_415_main # Call at 0.0		 
16#li $v0, 10 # Program at 1.1	
20#syscall # Program at 1.1 	 
.globl fcn_415_main # MethodDeclVoid at 2.14 
24:fcn_415_main: # MethodDeclVoid at 2.14	  
24#subu $sp, $sp, 8 # MethodDeclVoid at 2.14	 	
28#sw $ra, 4($sp) # MethodDeclVoid at 2.14			
32#sw $s2, ($sp) # MethodDeclVoid at 2.14 	
36#lw $s2, 4($sp) # MethodDeclVoid at 2.14 
40#subu $sp, $sp, 8 # IntegerLiteral at 3.12  
44#sw $s5, 4($sp) # IntegerLiteral at 3.12 	 
48#li $t0, 1 # IntegerLiteral at 3.12 	 
52#sw $t0, ($sp) # IntegerLiteral at 3.12  
56#subu $sp, $sp, 8 # IntegerLiteral at 4.12 	
60#sw $s5, 4($sp) # IntegerLiteral at 4.12	 
64#li $t0, 2 # IntegerLiteral at 4.12	  
68#sw $t0, ($sp) # IntegerLiteral at 4.12 		
72#subu $sp, $sp, 4 # True at 6.16 	 
76#li $t0, 1 # True at 6.16 	
80#sw $t0, ($sp) # True at 6.16	
84#subu $sp, $sp, 4 # False at 7.16  
88#sw $zero, ($sp) # False at 7.16   
92#subu $sp, $sp, 8 # IntegerLiteral at 8.16  	
96#sw $s5, 4($sp) # IntegerLiteral at 8.16  
100#li $t0, 2 # IntegerLiteral at 8.16 	 
104#sw $t0, ($sp) # IntegerLiteral at 8.16  
108#subu $sp, $sp, 8 # IntegerLiteral at 8.20	  
112#sw $s5, 4($sp) # IntegerLiteral at 8.20	
116#li $t0, 1 # IntegerLiteral at 8.20  
120#sw $t0, ($sp) # IntegerLiteral at 8.20  	
124#lw $t0, ($sp) # GreaterThan at 8.18	 	
128#lw $t1, 8($sp) # GreaterThan at 8.18  
132#sgt $t0, $t1, $t0 # GreaterThan at 8.18	  
136#addu $sp, $sp, 12 # GreaterThan at 8.18  	
140#sw $t0, ($sp) # GreaterThan at 8.18	  
144#subu $sp, $sp, 8 # IntegerLiteral at 9.16  	
148#sw $s5, 4($sp) # IntegerLiteral at 9.16   
152#li $t0, 2 # IntegerLiteral at 9.16 	
156#sw $t0, ($sp) # IntegerLiteral at 9.16		
160#lw $t0, 28($sp) # IdentifierExp at 9.20	  
164#subu $sp, $sp, 8 # IdentifierExp at 9.20			
168#sw $s5, 4($sp) # IdentifierExp at 9.20	 
172#sw $t0, ($sp) # IdentifierExp at 9.20 		
176#lw $t0, ($sp) # GreaterThan at 9.18 		
180#lw $t1, 8($sp) # GreaterThan at 9.18	  
184#sgt $t0, $t1, $t0 # GreaterThan at 9.18		
188#addu $sp, $sp, 12 # GreaterThan at 9.18			
192#sw $t0, ($sp) # GreaterThan at 9.18	  
196#lw $t0, 16($sp) # IdentifierExp at 10.16  
200#subu $sp, $sp, 8 # IdentifierExp at 10.16  	
204#sw $s5, 4($sp) # IdentifierExp at 10.16 		
208#sw $t0, ($sp) # IdentifierExp at 10.16		 
212#subu $sp, $sp, 8 # IntegerLiteral at 10.21	 
216#sw $s5, 4($sp) # IntegerLiteral at 10.21		
220#li $t0, 1 # IntegerLiteral at 10.21  	
224#sw $t0, ($sp) # IntegerLiteral at 10.21		
228#lw $t0, ($sp) # GreaterThan at 10.19  	
232#lw $t1, 8($sp) # GreaterThan at 10.19			
236#sgt $t0, $t1, $t0 # GreaterThan at 10.19		 
240#addu $sp, $sp, 12 # GreaterThan at 10.19	
244#sw $t0, ($sp) # GreaterThan at 10.19 
248#lw $t0, 20($sp) # IdentifierExp at 11.16  
252#subu $sp, $sp, 8 # IdentifierExp at 11.16  
256#sw $s5, 4($sp) # IdentifierExp at 11.16 	 
260#sw $t0, ($sp) # IdentifierExp at 11.16	 	
264#lw $t0, 36($sp) # IdentifierExp at 11.21  
268#subu $sp, $sp, 8 # IdentifierExp at 11.21			
272#sw $s5, 4($sp) # IdentifierExp at 11.21	  
276#sw $t0, ($sp) # IdentifierExp at 11.21	  
280#lw $t0, ($sp) # GreaterThan at 11.19	 
284#lw $t1, 8($sp) # GreaterThan at 11.19			
288#sgt $t0, $t1, $t0 # GreaterThan at 11.19   
292#addu $sp, $sp, 12 # GreaterThan at 11.19   
296#sw $t0, ($sp) # GreaterThan at 11.19			
300#lw $t0, 24($sp) # IdentifierExp at 12.16	 	
304#subu $sp, $sp, 8 # IdentifierExp at 12.16	
308#sw $s5, 4($sp) # IdentifierExp at 12.16	  
312#sw $t0, ($sp) # IdentifierExp at 12.16	 
316#subu $sp, $sp, 8 # IntegerLiteral at 12.21 	 
320#sw $s5, 4($sp) # IntegerLiteral at 12.21	 
324#li $t0, 0 # IntegerLiteral at 12.21  	
328#sw $t0, ($sp) # IntegerLiteral at 12.21	 
332#lw $t0, 48($sp) # IdentifierExp at 12.22	
336#subu $sp, $sp, 8 # IdentifierExp at 12.22		 
340#sw $s5, 4($sp) # IdentifierExp at 12.22  	
344#sw $t0, ($sp) # IdentifierExp at 12.22	
348#lw $t0, ($sp) # Minus at 12.21	 	
352#lw $t1, 8($sp) # Minus at 12.21 	 
356#subu $t0, $t1, $t0 # Minus at 12.21  	
360#addu $sp, $sp, 8 # Minus at 12.21 	 
364#sw $t0, ($sp) # Minus at 12.21	
368#lw $t0, ($sp) # GreaterThan at 12.19	
372#lw $t1, 8($sp) # GreaterThan at 12.19	  
376#sgt $t0, $t1, $t0 # GreaterThan at 12.19	
380#addu $sp, $sp, 12 # GreaterThan at 12.19 		
384#sw $t0, ($sp) # GreaterThan at 12.19	 	
388#subu $sp, $sp, 8 # IntegerLiteral at 13.16 
392#sw $s5, 4($sp) # IntegerLiteral at 13.16 
396#li $t0, 1 # IntegerLiteral at 13.16  	
400#sw $t0, ($sp) # IntegerLiteral at 13.16  
404#subu $sp, $sp, 8 # IntegerLiteral at 13.20			
408#sw $s5, 4($sp) # IntegerLiteral at 13.20   
412#li $t0, 2 # IntegerLiteral at 13.20  	
416#sw $t0, ($sp) # IntegerLiteral at 13.20	
420#lw $t0, ($sp) # LessThan at 13.18 
424#lw $t1, 8($sp) # LessThan at 13.18   
428#slt $t0, $t1, $t0 # LessThan at 13.18	 
432#addu $sp, $sp, 12 # LessThan at 13.18  
436#sw $t0, ($sp) # LessThan at 13.18 	 
440#lw $t0, 40($sp) # IdentifierExp at 14.16	 
444#subu $sp, $sp, 8 # IdentifierExp at 14.16 
448#sw $s5, 4($sp) # IdentifierExp at 14.16 		
452#sw $t0, ($sp) # IdentifierExp at 14.16	
456#subu $sp, $sp, 8 # IntegerLiteral at 14.21 	 
460#sw $s5, 4($sp) # IntegerLiteral at 14.21	
464#li $t0, 2 # IntegerLiteral at 14.21			
468#sw $t0, ($sp) # IntegerLiteral at 14.21 
472#lw $t0, ($sp) # LessThan at 14.19  
476#lw $t1, 8($sp) # LessThan at 14.19 	
480#slt $t0, $t1, $t0 # LessThan at 14.19 
484#addu $sp, $sp, 12 # LessThan at 14.19   
488#sw $t0, ($sp) # LessThan at 14.19  
492#subu $sp, $sp, 8 # IntegerLiteral at 15.17	 
496#sw $s5, 4($sp) # IntegerLiteral at 15.17 
500#li $t0, 1 # IntegerLiteral at 15.17		 
504#sw $t0, ($sp) # IntegerLiteral at 15.17 		
508#lw $t0, 44($sp) # IdentifierExp at 15.21 	 
512#subu $sp, $sp, 8 # IdentifierExp at 15.21	  
516#sw $s5, 4($sp) # IdentifierExp at 15.21 
520#sw $t0, ($sp) # IdentifierExp at 15.21 	
524#lw $t0, ($sp) # LessThan at 15.19  
528#lw $t1, 8($sp) # LessThan at 15.19  
532#slt $t0, $t1, $t0 # LessThan at 15.19 	 
536#addu $sp, $sp, 12 # LessThan at 15.19	
540#sw $t0, ($sp) # LessThan at 15.19 		
544#lw $t0, 48($sp) # IdentifierExp at 16.17		
548#subu $sp, $sp, 8 # IdentifierExp at 16.17  	
552#sw $s5, 4($sp) # IdentifierExp at 16.17	
556#sw $t0, ($sp) # IdentifierExp at 16.17			
560#lw $t0, 48($sp) # IdentifierExp at 16.22		 
564#subu $sp, $sp, 8 # IdentifierExp at 16.22	
568#sw $s5, 4($sp) # IdentifierExp at 16.22 		
572#sw $t0, ($sp) # IdentifierExp at 16.22		 
576#lw $t0, ($sp) # LessThan at 16.20		 
580#lw $t1, 8($sp) # LessThan at 16.20 	 
584#slt $t0, $t1, $t0 # LessThan at 16.20  	
588#addu $sp, $sp, 12 # LessThan at 16.20		
592#sw $t0, ($sp) # LessThan at 16.20	
596#subu $sp, $sp, 8 # IntegerLiteral at 17.17 	 
600#sw $s5, 4($sp) # IntegerLiteral at 17.17 	
604#li $t0, 0 # IntegerLiteral at 17.17 	 
608#sw $t0, ($sp) # IntegerLiteral at 17.17	 
612#lw $t0, 60($sp) # IdentifierExp at 17.18 		
616#subu $sp, $sp, 8 # IdentifierExp at 17.18	  
620#sw $s5, 4($sp) # IdentifierExp at 17.18		
624#sw $t0, ($sp) # IdentifierExp at 17.18	 	
628#lw $t0, ($sp) # Minus at 17.17	
632#lw $t1, 8($sp) # Minus at 17.17	 	
636#subu $t0, $t1, $t0 # Minus at 17.17	
640#addu $sp, $sp, 8 # Minus at 17.17   
644#sw $t0, ($sp) # Minus at 17.17 
648#lw $t0, 52($sp) # IdentifierExp at 17.23	
652#subu $sp, $sp, 8 # IdentifierExp at 17.23 	
656#sw $s5, 4($sp) # IdentifierExp at 17.23			
660#sw $t0, ($sp) # IdentifierExp at 17.23		
664#lw $t0, ($sp) # LessThan at 17.21	
668#lw $t1, 8($sp) # LessThan at 17.21 	 
672#slt $t0, $t1, $t0 # LessThan at 17.21		
676#addu $sp, $sp, 12 # LessThan at 17.21	  
680#sw $t0, ($sp) # LessThan at 17.21			
684#subu $sp, $sp, 8 # IntegerLiteral at 18.17	
688#sw $s5, 4($sp) # IntegerLiteral at 18.17 		
692#li $t0, 0 # IntegerLiteral at 18.17  
696#sw $t0, ($sp) # IntegerLiteral at 18.17 		
700#lw $t0, 56($sp) # IdentifierExp at 18.18 	 
704#subu $sp, $sp, 8 # IdentifierExp at 18.18		
708#sw $s5, 4($sp) # IdentifierExp at 18.18 
712#sw $t0, ($sp) # IdentifierExp at 18.18 	 
716#lw $t0, ($sp) # Minus at 18.17   
720#lw $t1, 8($sp) # Minus at 18.17		 
724#subu $t0, $t1, $t0 # Minus at 18.17	 	
728#addu $sp, $sp, 8 # Minus at 18.17 	
732#sw $t0, ($sp) # Minus at 18.17 		
736#subu $sp, $sp, 8 # IntegerLiteral at 18.23			
740#sw $s5, 4($sp) # IntegerLiteral at 18.23		
744#li $t0, 0 # IntegerLiteral at 18.23	
748#sw $t0, ($sp) # IntegerLiteral at 18.23 		
752#lw $t0, 72($sp) # IdentifierExp at 18.24	 
756#subu $sp, $sp, 8 # IdentifierExp at 18.24  	
760#sw $s5, 4($sp) # IdentifierExp at 18.24  	
764#sw $t0, ($sp) # IdentifierExp at 18.24 	 
768#lw $t0, ($sp) # Minus at 18.23		
772#lw $t1, 8($sp) # Minus at 18.23	 
776#subu $t0, $t1, $t0 # Minus at 18.23	 
780#addu $sp, $sp, 8 # Minus at 18.23  
784#sw $t0, ($sp) # Minus at 18.23	 	
788#lw $t0, ($sp) # LessThan at 18.21		
792#lw $t1, 8($sp) # LessThan at 18.21 	
796#slt $t0, $t1, $t0 # LessThan at 18.21	 
800#addu $sp, $sp, 12 # LessThan at 18.21  
804#sw $t0, ($sp) # LessThan at 18.21  
808#subu $sp, $sp, 8 # IntegerLiteral at 21.6 	
812#sw $s5, 4($sp) # IntegerLiteral at 21.6  
816#li $t0, 1 # IntegerLiteral at 21.6  
820#sw $t0, ($sp) # IntegerLiteral at 21.6 		
824#subu $sp, $sp, 8 # IntegerLiteral at 21.11 		
828#sw $s5, 4($sp) # IntegerLiteral at 21.11 		
832#li $t0, 1 # IntegerLiteral at 21.11 	
836#sw $t0, ($sp) # IntegerLiteral at 21.11  
840#lw $t0, ($sp) # Equals at 21.8	 
844#lw $t1, 8($sp) # Equals at 21.8		 
848#seq $t0, $t0, $t1 # Equals at 21.8	  
849##...subu $at,$t0,$t1
853##...sltiu $t0,$at,1
856#addu $sp, $sp, 12 # Equals at 21.8  	
860#sw $t0, ($sp) # Equals at 21.8	 
864#lw $t0, ($sp) # If at 21.3	  
868#addu $sp, $sp, 4 # If at 21.3			
872#beq $t0, $zero, if_else_84 # If at 21.3  
876#subu $sp, $sp, 4 # Super at 22.10	  
880#sw $s2, ($sp) # Super at 22.10		 
884#subu $sp, $sp, 4 # StringLiteral at 22.19 	 
888#la $t0, strLit_78 # StringLiteral at 22.19 	 
892#sw $t0, ($sp) # StringLiteral at 22.19	 
896#jal printStr # Call at 22.10			
900#j if_done_84 # If at 21.3		
904:if_else_84: # If at 21.3			
904:if_done_84: # If at 21.3   
904#subu $sp, $sp, 8 # IntegerLiteral at 25.6	 	
908#sw $s5, 4($sp) # IntegerLiteral at 25.6	 	
912#li $t0, 1 # IntegerLiteral at 25.6	 	
916#sw $t0, ($sp) # IntegerLiteral at 25.6 
920#subu $sp, $sp, 8 # IntegerLiteral at 25.11  	
924#sw $s5, 4($sp) # IntegerLiteral at 25.11		
928#li $t0, 2 # IntegerLiteral at 25.11 	
932#sw $t0, ($sp) # IntegerLiteral at 25.11 
936#lw $t0, ($sp) # Equals at 25.8	 	
940#lw $t1, 8($sp) # Equals at 25.8	
944#seq $t0, $t0, $t1 # Equals at 25.8	  
945##...subu $at,$t0,$t1
949##...sltiu $t0,$at,1
952#addu $sp, $sp, 12 # Equals at 25.8		
956#sw $t0, ($sp) # Equals at 25.8		
960#lw $t0, ($sp) # Not at 25.8	  
964#xor $t0, $t0, 1 # Not at 25.8	 
968#sw $t0, ($sp) # Not at 25.8  	
972#lw $t0, ($sp) # If at 25.3   
976#addu $sp, $sp, 4 # If at 25.3  	
980#beq $t0, $zero, if_else_95 # If at 25.3 		
984#subu $sp, $sp, 4 # Super at 26.10	 
988#sw $s2, ($sp) # Super at 26.10		 
992#subu $sp, $sp, 4 # StringLiteral at 26.19  	
996#la $t0, strLit_89 # StringLiteral at 26.19 	 
1000#sw $t0, ($sp) # StringLiteral at 26.19 
1004#jal printStr # Call at 26.10  
1008#j if_done_95 # If at 25.3  
1012:if_else_95: # If at 25.3	 
1012:if_done_95: # If at 25.3		
1012#lw $t0, 48($sp) # IdentifierExp at 28.6 	 
1016#subu $sp, $sp, 4 # IdentifierExp at 28.6   
1020#sw $t0, ($sp) # IdentifierExp at 28.6  
1024#subu $sp, $sp, 4 # True at 28.12 	 
1028#li $t0, 1 # True at 28.12  	
1032#sw $t0, ($sp) # True at 28.12	 
1036#lw $t0, ($sp) # Equals at 28.9			
1040#lw $t1, 4($sp) # Equals at 28.9 	 
1044#seq $t0, $t0, $t1 # Equals at 28.9	  
1045##...subu $at,$t0,$t1
1049##...sltiu $t0,$at,1
1052#addu $sp, $sp, 4 # Equals at 28.9	 
1056#sw $t0, ($sp) # Equals at 28.9	  
1060#lw $t0, ($sp) # If at 28.3	 	
1064#addu $sp, $sp, 4 # If at 28.3 
1068#beq $t0, $zero, if_else_105 # If at 28.3		 
1072#subu $sp, $sp, 4 # Super at 29.10			
1076#sw $s2, ($sp) # Super at 29.10   
1080#subu $sp, $sp, 4 # StringLiteral at 29.19  	
1084#la $t0, strLit_99 # StringLiteral at 29.19	 
1088#sw $t0, ($sp) # StringLiteral at 29.19  
1092#jal printStr # Call at 29.10		
1096#j if_done_105 # If at 28.3 	
1100:if_else_105: # If at 28.3   
1100:if_done_105: # If at 28.3		 
1100#lw $t0, 44($sp) # IdentifierExp at 31.6 	
1104#subu $sp, $sp, 4 # IdentifierExp at 31.6  
1108#sw $t0, ($sp) # IdentifierExp at 31.6	  
1112#subu $sp, $sp, 4 # False at 31.12	 
1116#sw $zero, ($sp) # False at 31.12   
1120#lw $t0, ($sp) # Equals at 31.9	 	
1124#lw $t1, 4($sp) # Equals at 31.9		
1128#seq $t0, $t0, $t1 # Equals at 31.9 		
1129##...subu $at,$t0,$t1
1133##...sltiu $t0,$at,1
1136#addu $sp, $sp, 4 # Equals at 31.9	 	
1140#sw $t0, ($sp) # Equals at 31.9 
1144#lw $t0, ($sp) # If at 31.3  
1148#addu $sp, $sp, 4 # If at 31.3			
1152#beq $t0, $zero, if_else_115 # If at 31.3 	 
1156#subu $sp, $sp, 4 # Super at 32.10   
1160#sw $s2, ($sp) # Super at 32.10	
1164#subu $sp, $sp, 4 # StringLiteral at 32.19 
1168#la $t0, strLit_109 # StringLiteral at 32.19  
1172#sw $t0, ($sp) # StringLiteral at 32.19			
1176#jal printStr # Call at 32.10   
1180#j if_done_115 # If at 31.3		
1184:if_else_115: # If at 31.3  	
1184:if_done_115: # If at 31.3		 
1184#lw $t0, 40($sp) # IdentifierExp at 34.6			
1188#subu $sp, $sp, 4 # IdentifierExp at 34.6		
1192#sw $t0, ($sp) # IdentifierExp at 34.6  
1196#subu $sp, $sp, 4 # True at 34.12 	
1200#li $t0, 1 # True at 34.12  
1204#sw $t0, ($sp) # True at 34.12	
1208#lw $t0, ($sp) # Equals at 34.9 	 
1212#lw $t1, 4($sp) # Equals at 34.9   
1216#seq $t0, $t0, $t1 # Equals at 34.9	 
1217##...subu $at,$t0,$t1
1221##...sltiu $t0,$at,1
1224#addu $sp, $sp, 4 # Equals at 34.9		
1228#sw $t0, ($sp) # Equals at 34.9 	 
1232#lw $t0, ($sp) # If at 34.3 	 
1236#addu $sp, $sp, 4 # If at 34.3  	
1240#beq $t0, $zero, if_else_125 # If at 34.3   
1244#subu $sp, $sp, 4 # Super at 35.10 		
1248#sw $s2, ($sp) # Super at 35.10	 
1252#subu $sp, $sp, 4 # StringLiteral at 35.19		 
1256#la $t0, strLit_119 # StringLiteral at 35.19			
1260#sw $t0, ($sp) # StringLiteral at 35.19	 	
1264#jal printStr # Call at 35.10	 
1268#j if_done_125 # If at 34.3	 	
1272:if_else_125: # If at 34.3			
1272:if_done_125: # If at 34.3 
1272#lw $t0, 36($sp) # IdentifierExp at 37.6 	 
1276#subu $sp, $sp, 4 # IdentifierExp at 37.6   
1280#sw $t0, ($sp) # IdentifierExp at 37.6 		
1284#subu $sp, $sp, 4 # True at 37.12 	
1288#li $t0, 1 # True at 37.12	
1292#sw $t0, ($sp) # True at 37.12  	
1296#lw $t0, ($sp) # Equals at 37.9	  
1300#lw $t1, 4($sp) # Equals at 37.9		
1304#seq $t0, $t0, $t1 # Equals at 37.9  
1305##...subu $at,$t0,$t1
1309##...sltiu $t0,$at,1
1312#addu $sp, $sp, 4 # Equals at 37.9		 
1316#sw $t0, ($sp) # Equals at 37.9			
1320#lw $t0, ($sp) # If at 37.3	 	
1324#addu $sp, $sp, 4 # If at 37.3		 
1328#beq $t0, $zero, if_else_135 # If at 37.3	 	
1332#subu $sp, $sp, 4 # Super at 38.10  	
1336#sw $s2, ($sp) # Super at 38.10  	
1340#subu $sp, $sp, 4 # StringLiteral at 38.19 
1344#la $t0, strLit_129 # StringLiteral at 38.19 	 
1348#sw $t0, ($sp) # StringLiteral at 38.19		 
1352#jal printStr # Call at 38.10	  
1356#j if_done_135 # If at 37.3 	 
1360:if_else_135: # If at 37.3 	
1360:if_done_135: # If at 37.3		 
1360#lw $t0, 32($sp) # IdentifierExp at 40.6			
1364#subu $sp, $sp, 4 # IdentifierExp at 40.6	
1368#sw $t0, ($sp) # IdentifierExp at 40.6			
1372#subu $sp, $sp, 4 # True at 40.12 
1376#li $t0, 1 # True at 40.12 		
1380#sw $t0, ($sp) # True at 40.12  
1384#lw $t0, ($sp) # Equals at 40.9  	
1388#lw $t1, 4($sp) # Equals at 40.9  
1392#seq $t0, $t0, $t1 # Equals at 40.9	 	
1393##...subu $at,$t0,$t1
1397##...sltiu $t0,$at,1
1400#addu $sp, $sp, 4 # Equals at 40.9		
1404#sw $t0, ($sp) # Equals at 40.9  
1408#lw $t0, ($sp) # If at 40.3	  
1412#addu $sp, $sp, 4 # If at 40.3	 	
1416#beq $t0, $zero, if_else_145 # If at 40.3  	
1420#subu $sp, $sp, 4 # Super at 41.10	 	
1424#sw $s2, ($sp) # Super at 41.10	
1428#subu $sp, $sp, 4 # StringLiteral at 41.19  	
1432#la $t0, strLit_139 # StringLiteral at 41.19		
1436#sw $t0, ($sp) # StringLiteral at 41.19		 
1440#jal printStr # Call at 41.10	 
1444#j if_done_145 # If at 40.3	 	
1448:if_else_145: # If at 40.3	 	
1448:if_done_145: # If at 40.3 		
1448#lw $t0, 28($sp) # IdentifierExp at 43.6 		
1452#subu $sp, $sp, 4 # IdentifierExp at 43.6	
1456#sw $t0, ($sp) # IdentifierExp at 43.6		 
1460#subu $sp, $sp, 4 # True at 43.12  	
1464#li $t0, 1 # True at 43.12		
1468#sw $t0, ($sp) # True at 43.12		
1472#lw $t0, ($sp) # Equals at 43.9	 
1476#lw $t1, 4($sp) # Equals at 43.9	
1480#seq $t0, $t0, $t1 # Equals at 43.9 
1481##...subu $at,$t0,$t1
1485##...sltiu $t0,$at,1
1488#addu $sp, $sp, 4 # Equals at 43.9	 	
1492#sw $t0, ($sp) # Equals at 43.9	 	
1496#lw $t0, ($sp) # If at 43.3		
1500#addu $sp, $sp, 4 # If at 43.3 	
1504#beq $t0, $zero, if_else_155 # If at 43.3   
1508#subu $sp, $sp, 4 # Super at 44.10 
1512#sw $s2, ($sp) # Super at 44.10		 
1516#subu $sp, $sp, 4 # StringLiteral at 44.19	
1520#la $t0, strLit_149 # StringLiteral at 44.19	 	
1524#sw $t0, ($sp) # StringLiteral at 44.19	
1528#jal printStr # Call at 44.10		
1532#j if_done_155 # If at 43.3 	 
1536:if_else_155: # If at 43.3 
1536:if_done_155: # If at 43.3 	 
1536#lw $t0, 24($sp) # IdentifierExp at 46.6	  
1540#subu $sp, $sp, 4 # IdentifierExp at 46.6   
1544#sw $t0, ($sp) # IdentifierExp at 46.6	  
1548#subu $sp, $sp, 4 # True at 46.12 
1552#li $t0, 1 # True at 46.12	  
1556#sw $t0, ($sp) # True at 46.12	 
1560#lw $t0, ($sp) # Equals at 46.9 	
1564#lw $t1, 4($sp) # Equals at 46.9			
1568#seq $t0, $t0, $t1 # Equals at 46.9 	 
1569##...subu $at,$t0,$t1
1573##...sltiu $t0,$at,1
1576#addu $sp, $sp, 4 # Equals at 46.9   
1580#sw $t0, ($sp) # Equals at 46.9	 
1584#lw $t0, ($sp) # If at 46.3 	
1588#addu $sp, $sp, 4 # If at 46.3	 
1592#beq $t0, $zero, if_else_165 # If at 46.3  	
1596#subu $sp, $sp, 4 # Super at 47.10			
1600#sw $s2, ($sp) # Super at 47.10  
1604#subu $sp, $sp, 4 # StringLiteral at 47.19	  
1608#la $t0, strLit_159 # StringLiteral at 47.19	
1612#sw $t0, ($sp) # StringLiteral at 47.19			
1616#jal printStr # Call at 47.10   
1620#j if_done_165 # If at 46.3 
1624:if_else_165: # If at 46.3 	 
1624:if_done_165: # If at 46.3 		
1624#lw $t0, 20($sp) # IdentifierExp at 49.6 		
1628#subu $sp, $sp, 4 # IdentifierExp at 49.6   
1632#sw $t0, ($sp) # IdentifierExp at 49.6  
1636#subu $sp, $sp, 4 # True at 49.12 	
1640#li $t0, 1 # True at 49.12		
1644#sw $t0, ($sp) # True at 49.12 	 
1648#lw $t0, ($sp) # Equals at 49.9		 
1652#lw $t1, 4($sp) # Equals at 49.9 	 
1656#seq $t0, $t0, $t1 # Equals at 49.9		 
1657##...subu $at,$t0,$t1
1661##...sltiu $t0,$at,1
1664#addu $sp, $sp, 4 # Equals at 49.9		
1668#sw $t0, ($sp) # Equals at 49.9   
1672#lw $t0, ($sp) # If at 49.3 	 
1676#addu $sp, $sp, 4 # If at 49.3		
1680#beq $t0, $zero, if_else_175 # If at 49.3 
1684#subu $sp, $sp, 4 # Super at 50.10	 	
1688#sw $s2, ($sp) # Super at 50.10		 
1692#subu $sp, $sp, 4 # StringLiteral at 50.19 	
1696#la $t0, strLit_169 # StringLiteral at 50.19 		
1700#sw $t0, ($sp) # StringLiteral at 50.19	  
1704#jal printStr # Call at 50.10 		
1708#j if_done_175 # If at 49.3 	
1712:if_else_175: # If at 49.3	
1712:if_done_175: # If at 49.3   
1712#lw $t0, 16($sp) # IdentifierExp at 52.6	  
1716#subu $sp, $sp, 4 # IdentifierExp at 52.6 
1720#sw $t0, ($sp) # IdentifierExp at 52.6	
1724#subu $sp, $sp, 4 # True at 52.12  
1728#li $t0, 1 # True at 52.12 	 
1732#sw $t0, ($sp) # True at 52.12		
1736#lw $t0, ($sp) # Equals at 52.9  	
1740#lw $t1, 4($sp) # Equals at 52.9		 
1744#seq $t0, $t0, $t1 # Equals at 52.9	
1745##...subu $at,$t0,$t1
1749##...sltiu $t0,$at,1
1752#addu $sp, $sp, 4 # Equals at 52.9	  
1756#sw $t0, ($sp) # Equals at 52.9			
1760#lw $t0, ($sp) # If at 52.3 		
1764#addu $sp, $sp, 4 # If at 52.3  
1768#beq $t0, $zero, if_else_185 # If at 52.3			
1772#subu $sp, $sp, 4 # Super at 53.10 	
1776#sw $s2, ($sp) # Super at 53.10   
1780#subu $sp, $sp, 4 # StringLiteral at 53.19 	
1784#la $t0, strLit_179 # StringLiteral at 53.19		
1788#sw $t0, ($sp) # StringLiteral at 53.19 
1792#jal printStr # Call at 53.10	 	
1796#j if_done_185 # If at 52.3 		
1800:if_else_185: # If at 52.3	 	
1800:if_done_185: # If at 52.3	
1800#lw $t0, 12($sp) # IdentifierExp at 55.6   
1804#subu $sp, $sp, 4 # IdentifierExp at 55.6	
1808#sw $t0, ($sp) # IdentifierExp at 55.6		
1812#subu $sp, $sp, 4 # True at 55.13		
1816#li $t0, 1 # True at 55.13	  
1820#sw $t0, ($sp) # True at 55.13		
1824#lw $t0, ($sp) # Equals at 55.10  	
1828#lw $t1, 4($sp) # Equals at 55.10   
1832#seq $t0, $t0, $t1 # Equals at 55.10	 
1833##...subu $at,$t0,$t1
1837##...sltiu $t0,$at,1
1840#addu $sp, $sp, 4 # Equals at 55.10 
1844#sw $t0, ($sp) # Equals at 55.10   
1848#lw $t0, ($sp) # If at 55.3	  
1852#addu $sp, $sp, 4 # If at 55.3   
1856#beq $t0, $zero, if_else_195 # If at 55.3 	 
1860#subu $sp, $sp, 4 # Super at 56.10	  
1864#sw $s2, ($sp) # Super at 56.10  
1868#subu $sp, $sp, 4 # StringLiteral at 56.19	 
1872#la $t0, strLit_189 # StringLiteral at 56.19 
1876#sw $t0, ($sp) # StringLiteral at 56.19  	
1880#jal printStr # Call at 56.10	 
1884#j if_done_195 # If at 55.3 
1888:if_else_195: # If at 55.3 		
1888:if_done_195: # If at 55.3  
1888#lw $t0, 8($sp) # IdentifierExp at 58.6   
1892#subu $sp, $sp, 4 # IdentifierExp at 58.6	
1896#sw $t0, ($sp) # IdentifierExp at 58.6   
1900#subu $sp, $sp, 4 # True at 58.13 		
1904#li $t0, 1 # True at 58.13		 
1908#sw $t0, ($sp) # True at 58.13	
1912#lw $t0, ($sp) # Equals at 58.10		
1916#lw $t1, 4($sp) # Equals at 58.10	 
1920#seq $t0, $t0, $t1 # Equals at 58.10	  
1921##...subu $at,$t0,$t1
1925##...sltiu $t0,$at,1
1928#addu $sp, $sp, 4 # Equals at 58.10		 
1932#sw $t0, ($sp) # Equals at 58.10	 
1936#lw $t0, ($sp) # If at 58.3	
1940#addu $sp, $sp, 4 # If at 58.3 
1944#beq $t0, $zero, if_else_205 # If at 58.3 		
1948#subu $sp, $sp, 4 # Super at 59.10 
1952#sw $s2, ($sp) # Super at 59.10	  
1956#subu $sp, $sp, 4 # StringLiteral at 59.19	  
1960#la $t0, strLit_199 # StringLiteral at 59.19  
1964#sw $t0, ($sp) # StringLiteral at 59.19 
1968#jal printStr # Call at 59.10	 	
1972#j if_done_205 # If at 58.3		 
1976:if_else_205: # If at 58.3	  
1976:if_done_205: # If at 58.3	 
1976#lw $t0, 4($sp) # IdentifierExp at 61.6	 
1980#subu $sp, $sp, 4 # IdentifierExp at 61.6 
1984#sw $t0, ($sp) # IdentifierExp at 61.6 	
1988#subu $sp, $sp, 4 # True at 61.13	  
1992#li $t0, 1 # True at 61.13  	
1996#sw $t0, ($sp) # True at 61.13  
2000#lw $t0, ($sp) # Equals at 61.10  	
2004#lw $t1, 4($sp) # Equals at 61.10	 
2008#seq $t0, $t0, $t1 # Equals at 61.10			
2009##...subu $at,$t0,$t1
2013##...sltiu $t0,$at,1
2016#addu $sp, $sp, 4 # Equals at 61.10 	 
2020#sw $t0, ($sp) # Equals at 61.10		
2024#lw $t0, ($sp) # If at 61.3	  
2028#addu $sp, $sp, 4 # If at 61.3 	
2032#beq $t0, $zero, if_else_215 # If at 61.3	
2036#subu $sp, $sp, 4 # Super at 62.10	 
2040#sw $s2, ($sp) # Super at 62.10  
2044#subu $sp, $sp, 4 # StringLiteral at 62.19  
2048#la $t0, strLit_209 # StringLiteral at 62.19 	
2052#sw $t0, ($sp) # StringLiteral at 62.19 	
2056#jal printStr # Call at 62.10		
2060#j if_done_215 # If at 61.3  
2064:if_else_215: # If at 61.3  
2064:if_done_215: # If at 61.3		 
2064#lw $t0, 0($sp) # IdentifierExp at 64.6  
2068#subu $sp, $sp, 4 # IdentifierExp at 64.6   
2072#sw $t0, ($sp) # IdentifierExp at 64.6 	 
2076#subu $sp, $sp, 4 # True at 64.13			
2080#li $t0, 1 # True at 64.13   
2084#sw $t0, ($sp) # True at 64.13 	
2088#lw $t0, ($sp) # Equals at 64.10 		
2092#lw $t1, 4($sp) # Equals at 64.10  	
2096#seq $t0, $t0, $t1 # Equals at 64.10 		
2097##...subu $at,$t0,$t1
2101##...sltiu $t0,$at,1
2104#addu $sp, $sp, 4 # Equals at 64.10	
2108#sw $t0, ($sp) # Equals at 64.10	  
2112#lw $t0, ($sp) # If at 64.3	
2116#addu $sp, $sp, 4 # If at 64.3	 
2120#beq $t0, $zero, if_else_225 # If at 64.3 	 
2124#subu $sp, $sp, 4 # Super at 65.10 		
2128#sw $s2, ($sp) # Super at 65.10	  
2132#subu $sp, $sp, 4 # StringLiteral at 65.19	
2136#la $t0, strLit_219 # StringLiteral at 65.19  	
2140#sw $t0, ($sp) # StringLiteral at 65.19	 	
2144#jal printStr # Call at 65.10	  
2148#j if_done_225 # If at 64.3 	 
2152:if_else_225: # If at 64.3		 
2152:if_done_225: # If at 64.3		 
2152#subu $sp, $sp, 4 # Super at 69.9		
2156#sw $s2, ($sp) # Super at 69.9	 
2160#subu $sp, $sp, 4 # StringLiteral at 69.18  
2164#la $t0, strLit_226 # StringLiteral at 69.18	
2168#sw $t0, ($sp) # StringLiteral at 69.18  	
2172#jal printStr # Call at 69.9	  
2176#lw $t0, 48($sp) # IdentifierExp at 72.6 	
2180#subu $sp, $sp, 4 # IdentifierExp at 72.6		
2184#sw $t0, ($sp) # IdentifierExp at 72.6		 
2188#subu $sp, $sp, 4 # False at 72.12	
2192#sw $zero, ($sp) # False at 72.12  
2196#lw $t0, ($sp) # Equals at 72.9	
2200#lw $t1, 4($sp) # Equals at 72.9  	
2204#seq $t0, $t0, $t1 # Equals at 72.9 	
2205##...subu $at,$t0,$t1
2209##...sltiu $t0,$at,1
2212#addu $sp, $sp, 4 # Equals at 72.9		 
2216#sw $t0, ($sp) # Equals at 72.9		
2220#lw $t0, ($sp) # Not at 72.9	
2224#xor $t0, $t0, 1 # Not at 72.9	 	
2228#sw $t0, ($sp) # Not at 72.9 		
2232#lw $t0, ($sp) # If at 72.3 		
2236#addu $sp, $sp, 4 # If at 72.3 
2240#beq $t0, $zero, if_else_240 # If at 72.3   
2244#subu $sp, $sp, 4 # Super at 73.10	  
2248#sw $s2, ($sp) # Super at 73.10		
2252#subu $sp, $sp, 4 # StringLiteral at 73.19   
2256#la $t0, strLit_234 # StringLiteral at 73.19 		
2260#sw $t0, ($sp) # StringLiteral at 73.19	  
2264#jal printStr # Call at 73.10		
2268#j if_done_240 # If at 72.3		 
2272:if_else_240: # If at 72.3  
2272:if_done_240: # If at 72.3   
2272#lw $t0, 44($sp) # IdentifierExp at 75.6 	 
2276#subu $sp, $sp, 4 # IdentifierExp at 75.6		
2280#sw $t0, ($sp) # IdentifierExp at 75.6   
2284#subu $sp, $sp, 4 # True at 75.12	 	
2288#li $t0, 1 # True at 75.12  	
2292#sw $t0, ($sp) # True at 75.12		 
2296#lw $t0, ($sp) # Equals at 75.9	
2300#lw $t1, 4($sp) # Equals at 75.9		
2304#seq $t0, $t0, $t1 # Equals at 75.9	 	
2305##...subu $at,$t0,$t1
2309##...sltiu $t0,$at,1
2312#addu $sp, $sp, 4 # Equals at 75.9	  
2316#sw $t0, ($sp) # Equals at 75.9		
2320#lw $t0, ($sp) # Not at 75.9	  
2324#xor $t0, $t0, 1 # Not at 75.9 	
2328#sw $t0, ($sp) # Not at 75.9 	
2332#lw $t0, ($sp) # If at 75.3		 
2336#addu $sp, $sp, 4 # If at 75.3	
2340#beq $t0, $zero, if_else_251 # If at 75.3  
2344#subu $sp, $sp, 4 # Super at 76.10		
2348#sw $s2, ($sp) # Super at 76.10	 
2352#subu $sp, $sp, 4 # StringLiteral at 76.19  	
2356#la $t0, strLit_245 # StringLiteral at 76.19	 
2360#sw $t0, ($sp) # StringLiteral at 76.19  
2364#jal printStr # Call at 76.10 	 
2368#j if_done_251 # If at 75.3 
2372:if_else_251: # If at 75.3  	
2372:if_done_251: # If at 75.3  	
2372#lw $t0, 40($sp) # IdentifierExp at 78.6			
2376#subu $sp, $sp, 4 # IdentifierExp at 78.6   
2380#sw $t0, ($sp) # IdentifierExp at 78.6 	
2384#subu $sp, $sp, 4 # False at 78.12	 
2388#sw $zero, ($sp) # False at 78.12		 
2392#lw $t0, ($sp) # Equals at 78.9		 
2396#lw $t1, 4($sp) # Equals at 78.9	 	
2400#seq $t0, $t0, $t1 # Equals at 78.9			
2401##...subu $at,$t0,$t1
2405##...sltiu $t0,$at,1
2408#addu $sp, $sp, 4 # Equals at 78.9			
2412#sw $t0, ($sp) # Equals at 78.9	 	
2416#lw $t0, ($sp) # Not at 78.9  
2420#xor $t0, $t0, 1 # Not at 78.9 	 
2424#sw $t0, ($sp) # Not at 78.9	
2428#lw $t0, ($sp) # If at 78.3	 
2432#addu $sp, $sp, 4 # If at 78.3			
2436#beq $t0, $zero, if_else_262 # If at 78.3		 
2440#subu $sp, $sp, 4 # Super at 79.10  
2444#sw $s2, ($sp) # Super at 79.10 		
2448#subu $sp, $sp, 4 # StringLiteral at 79.19   
2452#la $t0, strLit_256 # StringLiteral at 79.19	 	
2456#sw $t0, ($sp) # StringLiteral at 79.19	  
2460#jal printStr # Call at 79.10  
2464#j if_done_262 # If at 78.3	
2468:if_else_262: # If at 78.3  
2468:if_done_262: # If at 78.3			
2468#lw $t0, 36($sp) # IdentifierExp at 81.6 		
2472#subu $sp, $sp, 4 # IdentifierExp at 81.6 
2476#sw $t0, ($sp) # IdentifierExp at 81.6 	
2480#subu $sp, $sp, 4 # False at 81.12 		
2484#sw $zero, ($sp) # False at 81.12 		
2488#lw $t0, ($sp) # Equals at 81.9   
2492#lw $t1, 4($sp) # Equals at 81.9 	 
2496#seq $t0, $t0, $t1 # Equals at 81.9		 
2497##...subu $at,$t0,$t1
2501##...sltiu $t0,$at,1
2504#addu $sp, $sp, 4 # Equals at 81.9   
2508#sw $t0, ($sp) # Equals at 81.9	 	
2512#lw $t0, ($sp) # Not at 81.9	 
2516#xor $t0, $t0, 1 # Not at 81.9 		
2520#sw $t0, ($sp) # Not at 81.9   
2524#lw $t0, ($sp) # If at 81.3		 
2528#addu $sp, $sp, 4 # If at 81.3 		
2532#beq $t0, $zero, if_else_273 # If at 81.3			
2536#subu $sp, $sp, 4 # Super at 82.10	  
2540#sw $s2, ($sp) # Super at 82.10		
2544#subu $sp, $sp, 4 # StringLiteral at 82.19   
2548#la $t0, strLit_267 # StringLiteral at 82.19	 	
2552#sw $t0, ($sp) # StringLiteral at 82.19 		
2556#jal printStr # Call at 82.10  	
2560#j if_done_273 # If at 81.3 	
2564:if_else_273: # If at 81.3  	
2564:if_done_273: # If at 81.3 	 
2564#lw $t0, 32($sp) # IdentifierExp at 84.6 	 
2568#subu $sp, $sp, 4 # IdentifierExp at 84.6		 
2572#sw $t0, ($sp) # IdentifierExp at 84.6   
2576#subu $sp, $sp, 4 # False at 84.12 	
2580#sw $zero, ($sp) # False at 84.12			
2584#lw $t0, ($sp) # Equals at 84.9			
2588#lw $t1, 4($sp) # Equals at 84.9 	 
2592#seq $t0, $t0, $t1 # Equals at 84.9 		
2593##...subu $at,$t0,$t1
2597##...sltiu $t0,$at,1
2600#addu $sp, $sp, 4 # Equals at 84.9	
2604#sw $t0, ($sp) # Equals at 84.9 	
2608#lw $t0, ($sp) # Not at 84.9   
2612#xor $t0, $t0, 1 # Not at 84.9 	 
2616#sw $t0, ($sp) # Not at 84.9	 
2620#lw $t0, ($sp) # If at 84.3  
2624#addu $sp, $sp, 4 # If at 84.3	
2628#beq $t0, $zero, if_else_284 # If at 84.3 
2632#subu $sp, $sp, 4 # Super at 85.10	  
2636#sw $s2, ($sp) # Super at 85.10	  
2640#subu $sp, $sp, 4 # StringLiteral at 85.19  
2644#la $t0, strLit_278 # StringLiteral at 85.19 	
2648#sw $t0, ($sp) # StringLiteral at 85.19			
2652#jal printStr # Call at 85.10 		
2656#j if_done_284 # If at 84.3	 	
2660:if_else_284: # If at 84.3 	
2660:if_done_284: # If at 84.3 
2660#lw $t0, 28($sp) # IdentifierExp at 87.6  	
2664#subu $sp, $sp, 4 # IdentifierExp at 87.6		
2668#sw $t0, ($sp) # IdentifierExp at 87.6 		
2672#subu $sp, $sp, 4 # False at 87.12   
2676#sw $zero, ($sp) # False at 87.12			
2680#lw $t0, ($sp) # Equals at 87.9		 
2684#lw $t1, 4($sp) # Equals at 87.9   
2688#seq $t0, $t0, $t1 # Equals at 87.9	
2689##...subu $at,$t0,$t1
2693##...sltiu $t0,$at,1
2696#addu $sp, $sp, 4 # Equals at 87.9		 
2700#sw $t0, ($sp) # Equals at 87.9  	
2704#lw $t0, ($sp) # Not at 87.9  
2708#xor $t0, $t0, 1 # Not at 87.9  
2712#sw $t0, ($sp) # Not at 87.9 
2716#lw $t0, ($sp) # If at 87.3	 
2720#addu $sp, $sp, 4 # If at 87.3 		
2724#beq $t0, $zero, if_else_295 # If at 87.3	  
2728#subu $sp, $sp, 4 # Super at 88.10			
2732#sw $s2, ($sp) # Super at 88.10		 
2736#subu $sp, $sp, 4 # StringLiteral at 88.19	
2740#la $t0, strLit_289 # StringLiteral at 88.19	
2744#sw $t0, ($sp) # StringLiteral at 88.19	 	
2748#jal printStr # Call at 88.10 	 
2752#j if_done_295 # If at 87.3 	 
2756:if_else_295: # If at 87.3   
2756:if_done_295: # If at 87.3	 	
2756#lw $t0, 24($sp) # IdentifierExp at 90.6	
2760#subu $sp, $sp, 4 # IdentifierExp at 90.6		 
2764#sw $t0, ($sp) # IdentifierExp at 90.6 	 
2768#subu $sp, $sp, 4 # False at 90.12   
2772#sw $zero, ($sp) # False at 90.12		
2776#lw $t0, ($sp) # Equals at 90.9		
2780#lw $t1, 4($sp) # Equals at 90.9  
2784#seq $t0, $t0, $t1 # Equals at 90.9	
2785##...subu $at,$t0,$t1
2789##...sltiu $t0,$at,1
2792#addu $sp, $sp, 4 # Equals at 90.9		
2796#sw $t0, ($sp) # Equals at 90.9 		
2800#lw $t0, ($sp) # Not at 90.9 	 
2804#xor $t0, $t0, 1 # Not at 90.9 	
2808#sw $t0, ($sp) # Not at 90.9	 
2812#lw $t0, ($sp) # If at 90.3			
2816#addu $sp, $sp, 4 # If at 90.3			
2820#beq $t0, $zero, if_else_306 # If at 90.3		 
2824#subu $sp, $sp, 4 # Super at 91.10   
2828#sw $s2, ($sp) # Super at 91.10		
2832#subu $sp, $sp, 4 # StringLiteral at 91.19			
2836#la $t0, strLit_300 # StringLiteral at 91.19 	
2840#sw $t0, ($sp) # StringLiteral at 91.19		 
2844#jal printStr # Call at 91.10	 	
2848#j if_done_306 # If at 90.3 		
2852:if_else_306: # If at 90.3  
2852:if_done_306: # If at 90.3		 
2852#lw $t0, 20($sp) # IdentifierExp at 93.6	  
2856#subu $sp, $sp, 4 # IdentifierExp at 93.6	  
2860#sw $t0, ($sp) # IdentifierExp at 93.6 
2864#subu $sp, $sp, 4 # False at 93.12		 
2868#sw $zero, ($sp) # False at 93.12	 	
2872#lw $t0, ($sp) # Equals at 93.9		
2876#lw $t1, 4($sp) # Equals at 93.9   
2880#seq $t0, $t0, $t1 # Equals at 93.9 	
2881##...subu $at,$t0,$t1
2885##...sltiu $t0,$at,1
2888#addu $sp, $sp, 4 # Equals at 93.9   
2892#sw $t0, ($sp) # Equals at 93.9  	
2896#lw $t0, ($sp) # Not at 93.9  
2900#xor $t0, $t0, 1 # Not at 93.9   
2904#sw $t0, ($sp) # Not at 93.9		 
2908#lw $t0, ($sp) # If at 93.3		 
2912#addu $sp, $sp, 4 # If at 93.3  	
2916#beq $t0, $zero, if_else_317 # If at 93.3		 
2920#subu $sp, $sp, 4 # Super at 94.10		
2924#sw $s2, ($sp) # Super at 94.10   
2928#subu $sp, $sp, 4 # StringLiteral at 94.19			
2932#la $t0, strLit_311 # StringLiteral at 94.19	
2936#sw $t0, ($sp) # StringLiteral at 94.19	  
2940#jal printStr # Call at 94.10	
2944#j if_done_317 # If at 93.3	 	
2948:if_else_317: # If at 93.3	
2948:if_done_317: # If at 93.3		 
2948#lw $t0, 16($sp) # IdentifierExp at 96.6 	 
2952#subu $sp, $sp, 4 # IdentifierExp at 96.6 		
2956#sw $t0, ($sp) # IdentifierExp at 96.6 	 
2960#subu $sp, $sp, 4 # False at 96.12		 
2964#sw $zero, ($sp) # False at 96.12 	 
2968#lw $t0, ($sp) # Equals at 96.9	 	
2972#lw $t1, 4($sp) # Equals at 96.9  
2976#seq $t0, $t0, $t1 # Equals at 96.9   
2977##...subu $at,$t0,$t1
2981##...sltiu $t0,$at,1
2984#addu $sp, $sp, 4 # Equals at 96.9	 	
2988#sw $t0, ($sp) # Equals at 96.9 		
2992#lw $t0, ($sp) # Not at 96.9			
2996#xor $t0, $t0, 1 # Not at 96.9 	 
3000#sw $t0, ($sp) # Not at 96.9 	
3004#lw $t0, ($sp) # If at 96.3	
3008#addu $sp, $sp, 4 # If at 96.3 	
3012#beq $t0, $zero, if_else_328 # If at 96.3		 
3016#subu $sp, $sp, 4 # Super at 97.10	  
3020#sw $s2, ($sp) # Super at 97.10	  
3024#subu $sp, $sp, 4 # StringLiteral at 97.19 	 
3028#la $t0, strLit_322 # StringLiteral at 97.19 
3032#sw $t0, ($sp) # StringLiteral at 97.19	
3036#jal printStr # Call at 97.10 	
3040#j if_done_328 # If at 96.3  
3044:if_else_328: # If at 96.3  
3044:if_done_328: # If at 96.3   
3044#lw $t0, 12($sp) # IdentifierExp at 99.6  	
3048#subu $sp, $sp, 4 # IdentifierExp at 99.6  	
3052#sw $t0, ($sp) # IdentifierExp at 99.6		 
3056#subu $sp, $sp, 4 # False at 99.13		
3060#sw $zero, ($sp) # False at 99.13 
3064#lw $t0, ($sp) # Equals at 99.10 	 
3068#lw $t1, 4($sp) # Equals at 99.10 	 
3072#seq $t0, $t0, $t1 # Equals at 99.10 	
3073##...subu $at,$t0,$t1
3077##...sltiu $t0,$at,1
3080#addu $sp, $sp, 4 # Equals at 99.10 		
3084#sw $t0, ($sp) # Equals at 99.10 		
3088#lw $t0, ($sp) # Not at 99.10	 
3092#xor $t0, $t0, 1 # Not at 99.10		
3096#sw $t0, ($sp) # Not at 99.10	  
3100#lw $t0, ($sp) # If at 99.3 		
3104#addu $sp, $sp, 4 # If at 99.3  
3108#beq $t0, $zero, if_else_339 # If at 99.3	
3112#subu $sp, $sp, 4 # Super at 100.10  	
3116#sw $s2, ($sp) # Super at 100.10	
3120#subu $sp, $sp, 4 # StringLiteral at 100.19			
3124#la $t0, strLit_333 # StringLiteral at 100.19	
3128#sw $t0, ($sp) # StringLiteral at 100.19 
3132#jal printStr # Call at 100.10	
3136#j if_done_339 # If at 99.3  	
3140:if_else_339: # If at 99.3 		
3140:if_done_339: # If at 99.3		 
3140#lw $t0, 8($sp) # IdentifierExp at 102.6 	
3144#subu $sp, $sp, 4 # IdentifierExp at 102.6		 
3148#sw $t0, ($sp) # IdentifierExp at 102.6	  
3152#subu $sp, $sp, 4 # False at 102.13 		
3156#sw $zero, ($sp) # False at 102.13 		
3160#lw $t0, ($sp) # Equals at 102.10  	
3164#lw $t1, 4($sp) # Equals at 102.10	
3168#seq $t0, $t0, $t1 # Equals at 102.10	
3169##...subu $at,$t0,$t1
3173##...sltiu $t0,$at,1
3176#addu $sp, $sp, 4 # Equals at 102.10	
3180#sw $t0, ($sp) # Equals at 102.10	 
3184#lw $t0, ($sp) # Not at 102.10  	
3188#xor $t0, $t0, 1 # Not at 102.10	 	
3192#sw $t0, ($sp) # Not at 102.10		 
3196#lw $t0, ($sp) # If at 102.3  
3200#addu $sp, $sp, 4 # If at 102.3	 	
3204#beq $t0, $zero, if_else_350 # If at 102.3		 
3208#subu $sp, $sp, 4 # Super at 103.10	
3212#sw $s2, ($sp) # Super at 103.10  
3216#subu $sp, $sp, 4 # StringLiteral at 103.19  
3220#la $t0, strLit_344 # StringLiteral at 103.19 	
3224#sw $t0, ($sp) # StringLiteral at 103.19 	 
3228#jal printStr # Call at 103.10 	
3232#j if_done_350 # If at 102.3		
3236:if_else_350: # If at 102.3	
3236:if_done_350: # If at 102.3	
3236#lw $t0, 4($sp) # IdentifierExp at 105.6	
3240#subu $sp, $sp, 4 # IdentifierExp at 105.6 	 
3244#sw $t0, ($sp) # IdentifierExp at 105.6		
3248#subu $sp, $sp, 4 # False at 105.13		
3252#sw $zero, ($sp) # False at 105.13  	
3256#lw $t0, ($sp) # Equals at 105.10		 
3260#lw $t1, 4($sp) # Equals at 105.10 	 
3264#seq $t0, $t0, $t1 # Equals at 105.10 
3265##...subu $at,$t0,$t1
3269##...sltiu $t0,$at,1
3272#addu $sp, $sp, 4 # Equals at 105.10 	
3276#sw $t0, ($sp) # Equals at 105.10	  
3280#lw $t0, ($sp) # Not at 105.10			
3284#xor $t0, $t0, 1 # Not at 105.10		 
3288#sw $t0, ($sp) # Not at 105.10	
3292#lw $t0, ($sp) # If at 105.3	 	
3296#addu $sp, $sp, 4 # If at 105.3 
3300#beq $t0, $zero, if_else_361 # If at 105.3	
3304#subu $sp, $sp, 4 # Super at 106.10 	 
3308#sw $s2, ($sp) # Super at 106.10		 
3312#subu $sp, $sp, 4 # StringLiteral at 106.19		 
3316#la $t0, strLit_355 # StringLiteral at 106.19			
3320#sw $t0, ($sp) # StringLiteral at 106.19	 	
3324#jal printStr # Call at 106.10  
3328#j if_done_361 # If at 105.3  
3332:if_else_361: # If at 105.3 	 
3332:if_done_361: # If at 105.3 		
3332#lw $t0, 0($sp) # IdentifierExp at 108.6	  
3336#subu $sp, $sp, 4 # IdentifierExp at 108.6 	
3340#sw $t0, ($sp) # IdentifierExp at 108.6	 	
3344#subu $sp, $sp, 4 # False at 108.13	  
3348#sw $zero, ($sp) # False at 108.13 
3352#lw $t0, ($sp) # Equals at 108.10  	
3356#lw $t1, 4($sp) # Equals at 108.10 
3360#seq $t0, $t0, $t1 # Equals at 108.10		 
3361##...subu $at,$t0,$t1
3365##...sltiu $t0,$at,1
3368#addu $sp, $sp, 4 # Equals at 108.10		 
3372#sw $t0, ($sp) # Equals at 108.10  
3376#lw $t0, ($sp) # Not at 108.10	 
3380#xor $t0, $t0, 1 # Not at 108.10	
3384#sw $t0, ($sp) # Not at 108.10 	 
3388#lw $t0, ($sp) # If at 108.3 	 
3392#addu $sp, $sp, 4 # If at 108.3	
3396#beq $t0, $zero, if_else_372 # If at 108.3 	
3400#subu $sp, $sp, 4 # Super at 109.10		 
3404#sw $s2, ($sp) # Super at 109.10		
3408#subu $sp, $sp, 4 # StringLiteral at 109.19 	 
3412#la $t0, strLit_366 # StringLiteral at 109.19   
3416#sw $t0, ($sp) # StringLiteral at 109.19	 
3420#jal printStr # Call at 109.10 		
3424#j if_done_372 # If at 108.3 	 
3428:if_else_372: # If at 108.3		
3428:if_done_372: # If at 108.3   
3428#subu $sp, $sp, 4 # Super at 113.9	 	
3432#sw $s2, ($sp) # Super at 113.9   
3436#subu $sp, $sp, 4 # StringLiteral at 113.18	
3440#la $t0, strLit_373 # StringLiteral at 113.18 	
3444#sw $t0, ($sp) # StringLiteral at 113.18	
3448#jal printStr # Call at 113.9  	
3452#subu $sp, $sp, 8 # IntegerLiteral at 116.8	 	
3456#sw $s5, 4($sp) # IntegerLiteral at 116.8	 
3460#li $t0, 1 # IntegerLiteral at 116.8	  
3464#sw $t0, ($sp) # IntegerLiteral at 116.8		 
3468#subu $sp, $sp, 8 # IntegerLiteral at 116.13	
3472#sw $s5, 4($sp) # IntegerLiteral at 116.13	 
3476#li $t0, 2 # IntegerLiteral at 116.13 	
3480#sw $t0, ($sp) # IntegerLiteral at 116.13 		
3484#lw $t0, ($sp) # Equals at 116.10			
3488#lw $t1, 8($sp) # Equals at 116.10  	
3492#seq $t0, $t0, $t1 # Equals at 116.10	  
3493##...subu $at,$t0,$t1
3497##...sltiu $t0,$at,1
3500#addu $sp, $sp, 12 # Equals at 116.10	  
3504#sw $t0, ($sp) # Equals at 116.10		 
3508#lw $t0, ($sp) # Not at 116.6	
3512#xor $t0, $t0, 1 # Not at 116.6   
3516#sw $t0, ($sp) # Not at 116.6  
3520#lw $t0, ($sp) # If at 116.3  	
3524#addu $sp, $sp, 4 # If at 116.3  	
3528#beq $t0, $zero, if_else_387 # If at 116.3	 
3532#subu $sp, $sp, 4 # Super at 117.10	  
3536#sw $s2, ($sp) # Super at 117.10 	 
3540#subu $sp, $sp, 4 # StringLiteral at 117.19  	
3544#la $t0, strLit_381 # StringLiteral at 117.19 	
3548#sw $t0, ($sp) # StringLiteral at 117.19 
3552#jal printStr # Call at 117.10  
3556#j if_done_387 # If at 116.3   
3560:if_else_387: # If at 116.3 	
3560:if_done_387: # If at 116.3  
3560#subu $sp, $sp, 8 # IntegerLiteral at 119.12	 	
3564#sw $s5, 4($sp) # IntegerLiteral at 119.12 	
3568#li $t0, 1 # IntegerLiteral at 119.12	 	
3572#sw $t0, ($sp) # IntegerLiteral at 119.12  	
3576#subu $sp, $sp, 8 # IntegerLiteral at 119.17  
3580#sw $s5, 4($sp) # IntegerLiteral at 119.17		
3584#li $t0, 2 # IntegerLiteral at 119.17		 
3588#sw $t0, ($sp) # IntegerLiteral at 119.17 	
3592#lw $t0, ($sp) # Equals at 119.14	
3596#lw $t1, 8($sp) # Equals at 119.14		 
3600#seq $t0, $t0, $t1 # Equals at 119.14	 
3601##...subu $at,$t0,$t1
3605##...sltiu $t0,$at,1
3608#addu $sp, $sp, 12 # Equals at 119.14  	
3612#sw $t0, ($sp) # Equals at 119.14	
3616#lw $t0, ($sp) # Not at 119.10		
3620#xor $t0, $t0, 1 # Not at 119.10  
3624#sw $t0, ($sp) # Not at 119.10 
3628#lw $t0, ($sp) # Not at 119.8	
3632#xor $t0, $t0, 1 # Not at 119.8  	
3636#sw $t0, ($sp) # Not at 119.8  	
3640#lw $t0, ($sp) # Not at 119.6 	 
3644#xor $t0, $t0, 1 # Not at 119.6 	 
3648#sw $t0, ($sp) # Not at 119.6 		
3652#lw $t0, ($sp) # If at 119.3  	
3656#addu $sp, $sp, 4 # If at 119.3  
3660#beq $t0, $zero, if_else_400 # If at 119.3	 
3664#subu $sp, $sp, 4 # Super at 120.10		 
3668#sw $s2, ($sp) # Super at 120.10			
3672#subu $sp, $sp, 4 # StringLiteral at 120.19	 	
3676#la $t0, strLit_394 # StringLiteral at 120.19  	
3680#sw $t0, ($sp) # StringLiteral at 120.19		 
3684#jal printStr # Call at 120.10	 
3688#j if_done_400 # If at 119.3 		
3692:if_else_400: # If at 119.3 	
3692:if_done_400: # If at 119.3			
3692#subu $sp, $sp, 8 # IntegerLiteral at 122.14	  
3696#sw $s5, 4($sp) # IntegerLiteral at 122.14  
3700#li $t0, 1 # IntegerLiteral at 122.14	 
3704#sw $t0, ($sp) # IntegerLiteral at 122.14			
3708#subu $sp, $sp, 8 # IntegerLiteral at 122.19	 
3712#sw $s5, 4($sp) # IntegerLiteral at 122.19	 	
3716#li $t0, 1 # IntegerLiteral at 122.19	 
3720#sw $t0, ($sp) # IntegerLiteral at 122.19  
3724#lw $t0, ($sp) # Equals at 122.16 	
3728#lw $t1, 8($sp) # Equals at 122.16	 
3732#seq $t0, $t0, $t1 # Equals at 122.16	 	
3733##...subu $at,$t0,$t1
3737##...sltiu $t0,$at,1
3740#addu $sp, $sp, 12 # Equals at 122.16	 
3744#sw $t0, ($sp) # Equals at 122.16   
3748#lw $t0, ($sp) # Not at 122.12  
3752#xor $t0, $t0, 1 # Not at 122.12   
3756#sw $t0, ($sp) # Not at 122.12		 
3760#lw $t0, ($sp) # Not at 122.10   
3764#xor $t0, $t0, 1 # Not at 122.10 	
3768#sw $t0, ($sp) # Not at 122.10  	
3772#lw $t0, ($sp) # Not at 122.8 	
3776#xor $t0, $t0, 1 # Not at 122.8   
3780#sw $t0, ($sp) # Not at 122.8   
3784#lw $t0, ($sp) # Not at 122.6	 
3788#xor $t0, $t0, 1 # Not at 122.6		 
3792#sw $t0, ($sp) # Not at 122.6  	
3796#lw $t0, ($sp) # If at 122.3	 	
3800#addu $sp, $sp, 4 # If at 122.3	 
3804#beq $t0, $zero, if_else_414 # If at 122.3  
3808#subu $sp, $sp, 4 # Super at 123.10  	
3812#sw $s2, ($sp) # Super at 123.10 
3816#subu $sp, $sp, 4 # StringLiteral at 123.19 
3820#la $t0, strLit_408 # StringLiteral at 123.19		
3824#sw $t0, ($sp) # StringLiteral at 123.19	  
3828#jal printStr # Call at 123.10	 	
3832#j if_done_414 # If at 122.3	 	
3836:if_else_414: # If at 122.3 
3836:if_done_414: # If at 122.3 	 
3836#lw $ra, 72($sp) # MethodDeclVoid at 2.14	 
3840#lw $s2, 4($sp) # MethodDeclVoid at 2.14	 	
3844#addu $sp, $sp, 80 # MethodDeclVoid at 2.14	 
3848#jr $ra # MethodDeclVoid at 2.14  
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
3852:readLine:
	
3852#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
3856#	sw $ra, 4($sp) # save $ra
3860#	move $t1,$sp # save "original" sp

3864:  doRead:

	# read the character
3864#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
3868#	subu $t2,$v0,13
3872#	bne $t2,$zero,notReturnRL
3876#	jal readLogicalChar
3880#	subu $t2,$v0,10 # check for newline
3884#	beq $t2,$zero,foundNewLine
3888#	sw $v0,lastCharRead # push back character into queue
3892#	j foundNewLine # go process the line

3896:  notReturnRL:

	# at this point, $v0 has our character

3896#	subu $t0,$v0,10
3900#	beq $t0,$zero,foundNewLine
3904#	blt $v0,$zero,foundEof
3905##...slt $at,$v0,$zero
3909##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
3912#	subu $sp,$sp,4
3916#	sw $v0,($sp)

	# loop back up to get next character
3920#	j doRead

3924:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
3924#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
3928#	sw $zero,8($sp) # return-value: null
3932#	j rlReturn # return

3936:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
3936#	subu $t0,$t1,$sp # number of chars we read (times 4)
3940#	srl $s6,$t0,2 # number of words on stack with chars
3944#	subu $sp,$sp,4 # push char-count ...
3948#	sw $s6,($sp) # ... onto stack
3952#	addu $t2,$t0,5 # GC tag, incl. for count-word
3956#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
3960#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
3964#	srl $s6,$s6,2 # data words in object
3968#	move $s7,$zero # # object words in object
3972#	jal newObject # allocate space
	
	# store header words
3976#	la $t0,CLASS_String
3980#	sw $t0,-12($s7) # store class tag (String) into object
3984#	lw $t2,4($sp) # char-count
3988#	sll $t1,$t2,2 # 4 times number of chars
3992#	subu $t2,$zero,$t2 # negative of char-count
3996#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
4000#	lw $t0,-8($s7) # data words in object
4004#	sll $t0,$t0,2 # data bytes in object
4008#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
4012#	subu $t0,$t0,$t2 # place to store last character (plus 9)
4016#	addu $sp,$sp,8 # pop redundant object-pointer and count
4020#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

4024#	beq $sp,$t1,doneCharCopy
4028:  charCopyLoop:
4028#	lw $t2,($sp)
4032#	sb $t2,-9($t0)
4036#	addu $sp,$sp,4
4040#	subu $t0,$t0,1
4044#	bne $sp,$t1,charCopyLoop
4048:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
4048#	sw $s7,8($sp)
	
4052:  rlReturn:
	# restore return address and return
4052#	lw $ra,4($sp) # restore return address, ...
4056#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
4060#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
4064:readInt:

	# save $ra by pushing onto stack
4064#	subu $sp,$sp,4
4068#	sw $ra,($sp)

4072:  riSkipWhiteLoop:
	# read a character
4072#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
4076#	subu $t0,$v0,32
4080#	bgt $t0,$zero,nonWhite
4081##...slt $at,$zero,$t0
4085##...bne $at,$zero,$+44
4088#	beq $t0,$zero,riSkipWhiteLoop # start over if space
4092#	subu $t0,$v0,10
4096#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
4100#	subu $t0,$v0,9
4104#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
4108#	subu $t0,$v0,13
4112#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
4116#	subu $t0,$v0,12
4120#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
4124#	j badIntegerFormat # illegal integer char: abort program

4128:  nonWhite:
4128#	subu $t0,$v0,'-'
4132#	li $t4,1 # final multiplier
4136#	bne $t0,$zero,helpReadInt # go read
4140#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
4144#	jal readLogicalChar

4148:  helpReadInt:
4148#	li $t2,10
4152#	subu $t1,$v0,'0' # convert digit to 0-9 value
4156#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
4157##...sltu $at,$t1,$t2
4161##...beq $at,$zero,$+2080
4164#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

4168:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

4168#	jal readLogicalChar # read next character
4172#	subu $t1,$v0,'0' # convert digit to 0-9 value
4176#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
4177##...sltu $at,$t1,$t2
4181##...beq $at,$zero,$+20

4184#	mul $t3,$t3,$t2 # multiply old value by 10
4185##...mult $t3,$t2
4189##...mflo $t3
4192#	addu $t3,$t3,$t1 # add in value of new digit
4196#	j digitLoop

4200:  doneDigitLoop:

	# "push back" unused character into queue
4200#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
4204#	lw $ra,($sp)
4208#	mult $t3,$t4 # multiply to account for poss. minus sign
4212#	mflo $t3
4216#	sw $t3,($sp) # result
4220#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
4224#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
4228:readChar:

	# save $ra by pushing onto stack
4228#	subu $sp,$sp,4
4232#	sw $ra,($sp)

  	# read the character
4236#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
4240#	lw $ra,($sp)
4244#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
4248#	sw $v0,($sp)

	# return
4252#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
4256:printStr:
	# check for null, printing "(null)", if so
4256#	lw $t0,($sp)
4260#	bne $t0,$zero,psNotNull

	# print "(null)"
4264#	la $a0,nullStr
4268#	li $v0,4
4272#	syscall
4276#	j donePrintStr
	
4280:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
4280#	subu $t0,$t0,8
4284#	lw $t1,($t0) # word just beyond end of string
4288#	sll $t1,$t1,2
4292#	subu $t1,$t0,$t1 # first word in string
4296#	lw $t0,4($t0) # negative of string-length
4300#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
4304#	beq $t0,$t1,donePrintStr
4308:  psLoop:
4308#	lb $a0,($t1) # next byte
4312#	li $v0,11 # code for printing char
4316#        syscall # print the char
4320#	addu $t1,$t1,1 # go to next char
4324#	blt $t1,$t0,psLoop
4325##...slt $at,$t1,$t0
4329##...bne $at,$zero,$-20

4332:  donePrintStr:
	# pop stack and return
4332#	addu $sp,$sp,8
4336#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
4340:printInt:
	# pop value off stack, along with 'this'
4340#	lw $a0,($sp)
4344#	addu $sp,$sp,12

	# print it
4348#	li $v0,1 # code for print-int
4352#	syscall

	# return
4356#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
4360:printBool:
	# pop value off stack, along with 'this'
4360#	lw $t0,($sp)
4364#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
4368#	la $a0,falseString
4372#	beq $t0,$zero,skipPB
4376#	la $a0,trueString
4380:  skipPB:
4380#	li $v0,4 # code for print-string
4384#	syscall

	# return
4388#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
4392:substring:

	# save $ra by pushing onto stack
4392#	subu $sp,$sp,4
4396#	sw $ra,($sp)

	# get string value off stack, test for null
4400#	lw $t0,20($sp)
4404#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
4408#	lw $t0,-4($t0) # negative of string length
4412#	subu $t0,$zero,$t0 # string length
4416#	lw $t1,4($sp) # k
4420#	lw $t2,12($sp) # n
4424#	bgt $zero,$t2,strIndexOutOfBounds
4425##...slt $at,$t2,$zero
4429##...bne $at,$zero,$+1780
4432#	bgt $t2,$t1,strIndexOutOfBounds
4433##...slt $at,$t1,$t2
4437##...bne $at,$zero,$+1772
4440#	bgt $t1,$t0,strIndexOutOfBounds
4441##...slt $at,$t0,$t1
4445##...bne $at,$zero,$+1764

	# allocate memory
4448#	subu $s6,$t1,$t2 # # chars in target-string
4452#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
4456#	srl $s6,$s6,2 # convert bytes-count to word-count
4460#	move $s7,$zero # (no object-bytes in string)
4464#	jal newObject

	# store "String" tag in object-type field
4468#	la $t0,CLASS_String
4472#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
4476#	lw $t1,8($sp) # k
4480#	lw $t2,16($sp) # n
4484#	subu $t0,$t2,$t1 # value to store
4488#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
4492#	lw $t3,24($sp) # source string pointer
4496#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
4500#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
4504#	lw $t4,-8($t3) # # data words in source string
4508#	sll $t4,$t4,2 # # data bytes in source string
4512#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
4516#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
4520#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
4524#	lw $t2,-8($s7) # # data words in target string
4528#	sll $t2,$t2,2 # # data bytes in target string
4532#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
4536:  subCopyLoopzz:
4536#	lb $t4,-8($t3)
4540#	sb $t4,-8($t2)
4544#	addu $t2,$t2,1
4548#	addu $t3,$t3,1
4552#	blt $t3,$t1,subCopyLoopzz
4553##...slt $at,$t3,$t1
4557##...bne $at,$zero,$-20
	
4560:  doneSubCopyzz:
	# restore return address, store return value, pop stack
4560#	lw $ra,4($sp) # restore $ra
4564#	addu $sp,$sp,24 # pop stack
	
	# return
4568#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
4572:length:

	# get string pointer
4572#	lw $t0,($sp)
	
	# grow stack
4576#	subu $sp,$sp,4

	# store GC tag
4580#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
4584#	lw $t0,-4($t0) # -length
4588#	subu $t0,$zero,$t0
4592#	sw $t0,($sp) #store length

	# return
4596#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
4600:concat:
 	# save $ra by pushing onto stack
4600#	subu $sp,$sp,4
4604#	sw $ra($sp)

	# get string pointers and check parameter for null
4608#	lw $t0,4($sp)
4612#	beq $t0,$zero,nullPtrException
4616#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
4620#	lw $t0,-4($t0) # negative size of second object
4624#	lw $t1,-4($t1) # negative size of first object
4628#	addu $s6,$t0,$t1 # sum of negative sizes
4632#	sra $s6,$s6,2 # negative word-size of char part
4636#	subu $s6,$zero,$s6 # word size of char part
4640#	addu $s6,$s6,1 # data word size, including v-table word
4644#	move $s7,$zero
4648#	jal newObject

	# store "String" tag in object-type field
4652#	la $t0,CLASS_String
4656#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
4660#	lw $ra,4($sp) # return address
4664#	lw $t0,8($sp) # second object
4668#	lw $t1,12($sp) # first object
4672#	addu $sp,$sp,12 # pop
4676#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
4680#	lw $t2,-4($t0) # negative length of second object
4684#	lw $t3,-4($t1) # negative length of first object
4688#	addu $t4,$t2,$t3 # sum of negative lengths
4692#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
4696#	lw $t4,-8($t1) # # data words in first string
4700#	sll $t4,$t4,2 # # data bytes in first string
4704#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
4708#	lw $t4,-8($s7) # # data words in new string
4712#	sll $t4,$t4,2 # # data bytes in new string
4716#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
4720#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
4724#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
4728:  concatLoop1zz:
4728#	lb $t4,-8($t1)
4732#	sb $t4,-8($s7)
4736#	addu $s7,$s7,1
4740#	addu $t1,$t1,1
4744#	blt $t1,$t3,concatLoop1zz
4745##...slt $at,$t1,$t3
4749##...bne $at,$zero,$-20
4752:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
4752#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
4756#	lw $t4,-8($t0) # # data words in second string
4760#	sll $t4,$t4,2 # # data bytes in second string
4764#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
4768#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
4772:  concatLoop2zz:
4772#	lb $t4,-8($t1)
4776#	sb $t4,-8($s7)
4780#	addu $s7,$s7,1
4784#	addu $t1,$t1,1
4788#	blt $t1,$t3,concatLoop2zz
4789##...slt $at,$t1,$t3
4793##...bne $at,$zero,$-20
4796:  doneConcatLoop2zz:
 
4796:  concatRtnzz:
	# return
4796#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
4800:charAt:
	# get string
4800#	lw $t0,8($sp)

	# check that index is in bounds
4804#	lw $t1,-4($t0) # negative of # data words in string
4808#	subu $t3,$zero,$t1 # # chars in string
4812#	lw $t2,($sp) # index
4816#	bgeu $t2,$t3,strIndexOutOfBounds
4817##...sltu $at,$t2,$t3
4821##...beq $at,$zero,$+1388

	# access element
4824#	lw $t1,-8($t0) # # data words in object
4828#	sll $t1,$t1,2 # - byte-offset from end of chars
4832#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
4836#	addu $t0,$t0,$t1 # - address of our char, offset by 8
4840#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
4844#	addu $sp,$sp,4
4848#	sw $t0,($sp)
4852#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
4856#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
4860:intToString:

	# save return address on stack; allocate space for dummy GC tag
4860#	subu $sp,$sp,8
4864#	sw $ra,4($sp)

	# save current sp
4868#	move $t0,$sp

	# move constant 10 into $t3
4872#	li $t3,10

	# get argument, negate if negative
4876#	lw $t1,8($sp)
4880#	bge $t1,$zero,itsNonNegLoop
4881##...slt $at,$t1,$zero
4885##...beq $at,$zero,$+8
4888#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
4892:  itsNonNegLoop:
4892#	divu $t1,$t3
4896#	mflo $t1 # quotient
4900#	mfhi $t4 # remainder
4904#	addu $t4,$t4,'0' # turn remainder into digit
4908#	subu $sp,$sp,4
4912#	sw $t4,($sp) # push digit onto stack
4916#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
4920#	lw $t4,8($t0)
4924#	bge $t4,$zero,itsSkipNeg
4925##...slt $at,$t4,$zero
4929##...beq $at,$zero,$+16
4932#	li $t4,'-'
4936#	subu $sp,$sp,4
4940#	sw $t4,($sp)
4944:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
4944#	subu $s6,$t0,$sp
4948#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
4952#	sw $t3,($t0)
4956#	srl $s6,$s6,2
4960#	subu $sp,$sp,4
4964#	sw $s6,($sp)
	
	# allocate memory
4968#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
4972#	srl $s6,$s6,2
4976#	move $s7,$zero # no "object" words in object
4980#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
4984#	lw $t0,4($sp)
4988#	addu $sp,$sp,8

	# store "String" tag into class field
4992#	subu $s7,$s7,8 # address of header-1 word
4996#	la $t1,CLASS_String
5000#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
5004#	subu $t0,$zero,$t0
5008#	sw $t0,4($s7)

5012#	lw $t1,($s7) # number of data words in string
5016#	sll $t1,$t1,2 # number data bytes in string
5020#	subu $t1,$s7,$t1 # first location to store chars in string
5024#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
5028:  itsLoop:
5028#	lw $t2,($sp)
5032#	addu $sp,$sp,4
5036#	sb $t2,($t1)
5040#	addu $t1,$t1,1
5044#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
5048#	lw $ra,4($sp)
5052#	addu $sp,$sp,16
5056#	addu $t0,$t0,15
5060#	and $t0,$t0,0xfffffffc
5061##...lui $at,65535
5065##...ori $at,$at,0xfffc
5069##...and $t0,$t0,$at
5072#	sw $t0,($sp)
5076#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
5080:intToChar:
	# save return address
5080#	subu $sp,$sp,4
5084#	sw $ra,($sp)

	# allocate object
5088#	li $s6,2
5092#	move $s7,$zero
5096#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
5100#	lw $ra,4($sp)
5104#	lw $t1,8($sp)
5108#	addu $sp,$sp,16

	# store "String" tag into class field
5112#	la $t0,CLASS_String
5116#	sw $t0,-12($s7)

	# store data in string
5120#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
5124#	li $t0,-1
5128#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
5132#	sw $s7,($sp)

	# return
5136#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
5140:compareTo:
	# get string pointers and check parameter for null
5140#	lw $t0,($sp) # second string
5144#	beq $t0,$zero,nullPtrException
5148#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
5152#	lw $t2,-4($t0) # negative length of second string
5156#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
5160#	slt $t4,$t3,$t2
5164#	slt $t5,$t2,$t3
5168#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
5172#	lw $t2,-8($t0) # # data words in second string
5176#	lw $t3,-8($t1) # # data words in first string
5180#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
5184#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
5188#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
5192#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
5196#	beq $zero,$t5,skipStrCmpLenzz
5200#	move $t2,$t3
5204:  skipStrCmpLenzz:
5204#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
5208:  cmpLoopzz:
5208#	lw $t3,-8($t1) # word from str2
5212#	lw $t4,-8($t0) # word from str1
5216#	bne $t3,$t4,cmpNotEqualzz
5220#	addu $t1,$t1,4
5224#	addu $t0,$t0,4
5228#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
5232#	j cmpHitLimitzz

5236:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
5236#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
5240#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
5244#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
5248:  cmpHitLimitzz:
5248#	sw $t5,($sp) # store value
5252#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
5256#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
5260:readLogicalChar:

	# check if we already have a character
5260#	lw $v0,lastCharRead
5264#	li $t0,-2
5268#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
5272#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
5276#	jr $ra # return
	
5280:  doReadCh:
	# we need to actually read a character: read and return
5280#	li $v0,12 # use system call to read a character
5284#	syscall
5288#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
5292:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
5292#	blt $s7,$zero arraySizeOutOfBounds
5293##...slt $at,$s7,$zero
5297##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
5300#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

5304:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
5304#	move $t3,$s6
5308#	bge $t3,$zero,newSkip
5309##...slt $at,$t3,$zero
5313##...beq $at,$zero,$+8
5316#	move $t3,$zero

5320:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
5320#	addu $t0,$t3,$s7
5324#	sll $t0,$t0,2
5328#	addu $t0,$t0,8 # amount of memory needed
5332#	addu $t1,$t0,$s3
5336#	bgtu $t1,$s4,doGC
5337##...sltu $at,$s4,$t1
5341##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
5344#	move $t2,$s3
5348:  zeroObjLoop:
5348#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

5352#	addu $s3,4
5356#	bltu $s3,$t1,zeroObjLoop
5357##...sltu $at,$s3,$t1
5361##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
5364#	sll $t0,$s7,2    # number of post-header bytes
5368#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
5372#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
5376#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
5380#	move $s7,$t0
5384#	subu $sp,$sp,4
5388#	sw $t0,($sp)

5392#	jr $ra
	
5396:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
5396#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
5400#	subu $sp,$sp,4
5404#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
5408#	lw $t0,cur_seg
5412#	move $t7,$s4
5416#	la $t6,seg1_start
5417##...lui $t6,16
5421##...addiu $t6,$t6,7720
5424#	la $s3,seg0_start
5428#	la $s4,seg0_end
5429##...lui $s4,16
5433##...addiu $s4,$s4,7720
5436#	sw $zero,cur_seg
5440#	bne $t0,$zero,skipGc1
5444#	la $t6,seg0_start
5448#	la $s3,seg1_start
5449##...lui $s3,16
5453##...addiu $s3,$s3,7720
5456#	la $s4,seg1_end
5457##...lui $s4,32
5461##...addiu $s4,$s4,7720
5464#	sw $s5,cur_seg
5468:  skipGc1:
5468#	li $t5,-2
5472#	lw $t0,stack_bottom
5476#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

5480:  gcStackCopyLoop:
5480#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
5484#	sll $t2,$t1,31 # zero iff low bit was zero
5488#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
5492#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
5496#	bleu $t1,$t6,gcTestIterDone1
5497##...sltu $at,$t6,$t1
5501##...beq $at,$zero,$+148
5504#	bgtu $t1,$t7,gcTestIterDone1
5505##...sltu $at,$t7,$t1
5509##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
5512#	lw $t2,-8($t1) # possible forwarding tag
5516#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
5520#	lw $t2,-4($t1) # forwarding pointer: object's new address
5524#	sw $t2,4($t0) # update stack value
5528#	j gcTestIterDone1 # do next iteration

5532:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
5532#	bge $t2,$zero,gcSkip2
5533##...slt $at,$t2,$zero
5537##...beq $at,$zero,$+8
5540#	move $t2,$zero # set to zero if -1 (number of data words)

5544:  gcSkip2:
5544#	sll $t2,$t2,2
5548#	addu $t2,$t2,8
5552#	subu $t4,$t1,$t2 # address of first word of source
5556#	lw $t3,-4($t1) # number of object words (negative treated as zero)
5560#	bge $t3,$zero,gcH2Neg1
5561##...slt $at,$t3,$zero
5565##...beq $at,$zero,$+8
5568#	move $t3,$zero
5572:  gcH2Neg1:
5572#	sll $t3,$t3,2
5576#	addu $t3,$t3,$t1 # address one word past last word of source

5580#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
5584#	lw $s0,($t4)
5588#	lw $s1,-8($t1)
5592#	sw $s1,($t4)
5596#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
5600:  gCinnerCopy1:
5600#	lw $s0,($t4)
5604#	sw $s0,($s3)
5608#	addu $t4,$t4,4
5612#	addu $s3,$s3,4
5616#	bltu $t4,$t3,gCinnerCopy1
5617##...sltu $at,$t4,$t3
5621##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
5624#	sw $t5,-8($t1) # -2 in first header-slot
5628#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
5632#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
5636#	j gcTestIterDone1

5640:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
5640#	subu $t0,$t0,$t1
5644#	subu $t0,$t0,3

5648:  gcTestIterDone1:
5648#	bgeu $t0,$sp,gcStackCopyLoop
5649##...sltu $at,$t0,$sp
5653##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
5656#	lw $t1,cur_seg
5660#	la $t0,seg0_start
5664#	beq $t1,$zero,gcSkip4
5668#	la $t0,seg1_start
5669##...lui $t0,16
5673##...addiu $t0,$t0,7720

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

5676:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
5676#	bgeu $t0,$s3,gcFinishUp
5677##...sltu $at,$t0,$s3
5681##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

5684:  gcHeapCopyLoop:
	# check if we have a data array
5684#	lw $t1,($t0) # first header word for current object
5688#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
5689##...slt $at,$t1,$zero
5693##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
5696#	lw $t1,4($t0) # data words
5700#	addu $t1,$t1,2 # add in # header words
5704#	sll $t1,$t1,2 # convert to byte-count
5708#	addu $t0,$t0,$t1 # skip over object
5712#	j gcTestIterDone2 # go do next object, if any

5716:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
5716#	sll $t2,$t1,2 # # data bytes
5720#	addu $t2,$t2,8 # to skip header word
5724#	addu $t2,$t0,$t2 # pointer to new object
5728#	lw $t3,-8($t2) # word to swap
5732#	sw $t1,-8($t2) # store header word
5736#	sw $t3,($t0) # restore first word of object

5740#	lw $t3,-4($t2) # # object words (negative treated as zero)
5744#	bge $t3,$zero,gcH2Neg2
5745##...slt $at,$t3,$zero
5749##...beq $at,$zero,$+8
5752#	move $t3,$zero
5756:  gcH2Neg2:
5756#	sll $t3,$t3,2 # # object bytes
5760#	move $t0,$t2 # address of first pointer in object
5764#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
5768#	beq $t0,$s1,gcTestIterDone2
	
5772:  gcNextPointerInObject:
	# get pointer from object
5772#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
5776#	bleu $t1,$t6,gcGoNextPointerSlot
5777##...sltu $at,$t6,$t1
5781##...beq $at,$zero,$+136
5784#	bgtu $t1,$t7,gcGoNextPointerSlot
5785##...sltu $at,$t7,$t1
5789##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
5792#	lw $t8,-8($t1) # possible forwarding tag
5796#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
5800#	lw $t8,-4($t1) # forwarding pointer: object's new address
5804#	sw $t8,($t0) # update pointer in object
5808#	j gcGoNextPointerSlot # do next iteration

5812:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
5812#	bge $t8,$zero,gcSkip5
5813##...slt $at,$t8,$zero
5817##...beq $at,$zero,$+8
5820#	move $t8,$zero # set to zero if -1

5824:  gcSkip5:
5824#	sll $t8,$t8,2
5828#	addu $t8,$t8,8
5832#	subu $t4,$t1,$t8 # address of first word of source
5836#	lw $t3,-4($t1)
5840#	bge $t3,$zero,gcNoNeg
5841##...slt $at,$t3,$zero
5845##...beq $at,$zero,$+8
5848#	move $t3,$zero
5852:  gcNoNeg:
5852#	sll $t3,$t3,2
5856#	addu $t3,$t3,$t1 # address one word past last word of source

5860#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
5864#	lw $s0,($t4)
5868#	lw $t9,-8($t1)
5872#	sw $t9,($t4)
5876#	sw $s0,-8($t1)

	# copy all source bytes to the target
5880:  gCinnerCopy2:
5880#	lw $s0,($t4)
5884#	sw $s0,($s3)
5888#	addu $t4,$t4,4
5892#	addu $s3,$s3,4
5896#	bltu $t4,$t3,gCinnerCopy2
5897##...sltu $at,$t4,$t3
5901##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
5904#	sw $t5,-8($t1) # -2 in first header-slot
5908#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
5912#	sw $t8,($t0)

5916:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
5916#	addu $t0,$t0,4
5920#	bltu $t0,$s1,gcNextPointerInObject
5921##...sltu $at,$t0,$s1
5925##...bne $at,$zero,$-152

5928:  gcTestIterDone2:
5928#	bltu $t0,$s3,gcHeapCopyLoop
5929##...sltu $at,$t0,$s3
5933##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

5936:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
5936#	lw $s2,($sp)
5940#	addu $sp,$sp,4

	# mark us as having already GC'd
5944#	move $t5,$s5

	# go try and allocate again
5948#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
5952:vm_init:

	# mark bottom of stack
5952#	sw $sp,stack_bottom
5956#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
5960#	move $s2,$zero
5964#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
5968#	li $s5,5
5972#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

5976#	la $s3,seg0_start
5980#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
5984#	la $s4,seg0_end
5985##...lui $s4,16
5989##...addiu $s4,$s4,7720
5992#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
5996#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
6000:divide:
	# get parameters; abort if divisor zero
6000#	lw $t0,($sp)
6004#	lw $t1,8($sp)
6008#	beq $t0,$zero,divByZeroError
	
	# perform division
6012#	div $t1,$t0
6016#	mflo $t0

	# store result, adjust stack and return
6020#	addu $sp,$sp,8 # adjust stack
6024#	sw $t0,($sp) # store result
6028#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
6032:remainder:
	# get parameters; abort if divisor zero
6032#	lw $t0,($sp)
6036#	lw $t1,8($sp)
6040#	beq $t0,$zero,divByZeroError
	
	# perform division
6044#	div $t1,$t0
6048#	mfhi $t0

	# store result, adjust stack and return
6052#	addu $sp,$sp,8 # adjust stack
6056#	sw $t0,($sp) # store result
6060#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
6064:checkCast:
	# get object, allow immediately if null
6064#	lw $t2,($sp)
6068#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
6072#	lw $t3,-8($t2) # <= 0 if array
6076#	lw $t2,-12($t2) # vtable address (unless array)
6080#	bgt $t3,$zero,skipArrayCast
6081##...slt $at,$zero,$t3
6085##...bne $at,$zero,$+8
6088#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
6092:  skipArrayCast:
6092#	bge $t2,$t1,castException
6093##...slt $at,$t2,$t1
6097##...beq $at,$zero,$+152
6100#	blt $t2,$t0,castException
6101##...slt $at,$t2,$t0
6105##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
6108:  checkCastReturn:	
6108#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
6112:instanceOf:
	# get object, go return false if null
6112#	lw $t2,($sp)
6116#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
6120#	lw $t3,-8($t2) # <= 0 if array
6124#	lw $t2,-12($t2) # vtable address (unless array)
6128#	bgt $t3,$zero,skipArrayInstanceOf
6129##...slt $at,$zero,$t3
6133##...bne $at,$zero,$+8
6136#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
6140:  skipArrayInstanceOf:
6140#	sge $t0,$t2,$t0
6141##...slt $t0,$t2,$t0
6145##...xori $t0,$t0,0x1
6148#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
6152#	and $t2,$t0,$t1
6156:  doneInstanceOf: # if we reach here via branch, we know $t2=0
6156#	sw $t2,($sp)
6160#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

6164:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
6164#	li $v0,4 # syscall-code for print-string
6168#	syscall
6172:exit:
	# print termination message
6172#	li $v0,4
6176#	la $a0,exitString
6180#	syscall

	# terminate execution
6184#	li $v0,10 #syscall-code for "exit"
6188#	syscall

6192:outOfHeapMemory:
6192#	la $a0,heapMemoryMsg
6196#	j exitError
6200:divByZeroError:
6200#	la $a0,divByZeroMsg
6204#	j exitError
6208:strIndexOutOfBounds:
6208#	la $a0,strIndexOutOfBoundsMsg
6212#	j exitError
6216:arrayIndexOutOfBounds:
6216#	la $a0,arrayIndexOutOfBoundsMsg
6220#	j exitError
6224:arraySizeOutOfBounds:
6224#	la $a0,arraySizeOutOfBoundsMsg
6228#	j exitError
6232:nullPtrException:
6232#	la $a0,nullPtrExceptionMsg
6236#	j exitError
6240:badIntegerFormat:
6240#	la $a0,badIntegerFormatMsg
6244#	j exitError
6248:castException:
6248#	la $a0,castExceptionMsg
6252#	j exitError

############## data section ################
	.data
	.align 2

7412:cur_seg:
	.word 0

7416:lastCharRead:
	.word -2 # -2 => no buffered character

7420:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
7447:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
7470:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
7505:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
7539:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
7572:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
7603:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
7651:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
7672:gcMsg: 
      .asciiz "\nGC!\n"

7678:nullStr:
	.asciiz "null"
7683:trueString:
	.asciiz "true"
7688:falseString:
	.asciiz "false"
7694:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
7716:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

7720:seg0_start:
	.space 0x100000
1056296:seg0_end:
1056296:seg1_start:
	.space 0x100000
2104872:seg1_end:



