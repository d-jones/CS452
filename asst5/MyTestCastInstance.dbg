.data # Program at 1.1 		
2696:CLASS_Object: # ClassDecl at 0.0			
.word 0 # ClassDecl at 0.0	
2700:CLASS_Lib: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0		
.word readLine # ClassDecl at 0.0	 
.word readInt # ClassDecl at 0.0		
.word readChar # ClassDecl at 0.0		
.word printStr # ClassDecl at 0.0 		
.word printBool # ClassDecl at 0.0		
.word printInt # ClassDecl at 0.0  
.word intToString # ClassDecl at 0.0 		
.word intToChar # ClassDecl at 0.0			
2736:CLASS_Main: # ClassDecl at 1.7	  
.word CLASS_Lib # ClassDecl at 1.7 
.word readLine # ClassDecl at 1.7 	
.word readInt # ClassDecl at 1.7	 
.word readChar # ClassDecl at 1.7		 
.word printStr # ClassDecl at 1.7   
.word printBool # ClassDecl at 1.7 
.word printInt # ClassDecl at 1.7  	
.word intToString # ClassDecl at 1.7 	
.word intToChar # ClassDecl at 1.7   
.word fcn_30_main # ClassDecl at 1.7	 	
2776:CLASS_END_Main: # ClassDecl at 1.7   
2776:CLASS_END_Lib: # ClassDecl at 0.0			
2776:CLASS_String: # ClassDecl at 0.0  
.word CLASS_Object # ClassDecl at 0.0	
.word concat # ClassDecl at 0.0		
.word substring # ClassDecl at 0.0		
.word length # ClassDecl at 0.0 		
.word charAt # ClassDecl at 0.0	 	
.word compareTo # ClassDecl at 0.0		 
.word readLine # ClassDecl at 0.0 	 
.word readInt # ClassDecl at 0.0 
.word readChar # ClassDecl at 0.0		 
.word printStr # ClassDecl at 0.0	 	
.word printBool # ClassDecl at 0.0 	
.word printInt # ClassDecl at 0.0 	
.word intToString # ClassDecl at 0.0	  
.word intToChar # ClassDecl at 0.0	 	
.word fcn_30_main # ClassDecl at 0.0 
2836:CLASS_END_String: # ClassDecl at 0.0	
2836:CLASS_RunMain: # ClassDecl at 0.0		 
.word CLASS_Object # ClassDecl at 0.0	
.word concat # ClassDecl at 0.0	 
.word substring # ClassDecl at 0.0   
.word length # ClassDecl at 0.0	 	
.word charAt # ClassDecl at 0.0   
.word compareTo # ClassDecl at 0.0	  
.word readLine # ClassDecl at 0.0	
.word readInt # ClassDecl at 0.0  
.word readChar # ClassDecl at 0.0  	
.word printStr # ClassDecl at 0.0 	
.word printBool # ClassDecl at 0.0   
.word printInt # ClassDecl at 0.0 
.word intToString # ClassDecl at 0.0 	
.word intToChar # ClassDecl at 0.0			
.word fcn_30_main # ClassDecl at 0.0 
2896:CLASS_END_RunMain: # ClassDecl at 0.0 		
2896:CLASS_Test: # ClassDecl at 16.7	  
.word CLASS_Object # ClassDecl at 16.7 
.word fcn_32_test # ClassDecl at 16.7	 
.word concat # ClassDecl at 16.7	 	
.word substring # ClassDecl at 16.7 	 
.word length # ClassDecl at 16.7	  
.word charAt # ClassDecl at 16.7	  
.word compareTo # ClassDecl at 16.7			
.word readLine # ClassDecl at 16.7 	 
.word readInt # ClassDecl at 16.7   
.word readChar # ClassDecl at 16.7		
.word printStr # ClassDecl at 16.7	 
.word printBool # ClassDecl at 16.7 	 
.word printInt # ClassDecl at 16.7   
.word intToString # ClassDecl at 16.7	 	
.word intToChar # ClassDecl at 16.7	
.word fcn_30_main # ClassDecl at 16.7			
2960:CLASS_END_Test: # ClassDecl at 16.7		
2960:CLASS_END_Object: # ClassDecl at 0.0 
 .data # Program at 1.1  
  .byte 97 # StringLiteral at 4.14	 
  .byte 115 # StringLiteral at 4.14  
  .byte 104 # StringLiteral at 4.14			
  .byte 100 # StringLiteral at 4.14		 
  .byte 102 # StringLiteral at 4.14		
  .byte 59 # StringLiteral at 4.14	 	
  .byte 108 # StringLiteral at 4.14	 	
  .byte 107 # StringLiteral at 4.14	
  .byte 106 # StringLiteral at 4.14  	
  .byte 97 # StringLiteral at 4.14 	 
  .byte 100 # StringLiteral at 4.14	  
  .byte 102 # StringLiteral at 4.14		
  .word CLASS_String # StringLiteral at 4.14  	
  .word 4 # StringLiteral at 4.14 	
  .word -12 # StringLiteral at 4.14	 
2984:strLit_4: # StringLiteral at 4.14  	
  .byte 115 # StringLiteral at 6.19  
  .byte 32 # StringLiteral at 6.19 	
  .byte 105 # StringLiteral at 6.19	  
  .byte 110 # StringLiteral at 6.19	 
  .byte 115 # StringLiteral at 6.19		 
  .byte 116 # StringLiteral at 6.19 	 
  .byte 97 # StringLiteral at 6.19		
  .byte 110 # StringLiteral at 6.19   
  .byte 99 # StringLiteral at 6.19		
  .byte 101 # StringLiteral at 6.19		
  .byte 111 # StringLiteral at 6.19 
  .byte 102 # StringLiteral at 6.19 		
  .byte 32 # StringLiteral at 6.19  	
  .byte 83 # StringLiteral at 6.19 		
  .byte 116 # StringLiteral at 6.19		 
  .byte 114 # StringLiteral at 6.19		 
  .byte 105 # StringLiteral at 6.19 	
  .byte 110 # StringLiteral at 6.19 
  .byte 103 # StringLiteral at 6.19 		
  .byte 32 # StringLiteral at 6.19   
  .byte 61 # StringLiteral at 6.19 
  .byte 61 # StringLiteral at 6.19	  
  .byte 62 # StringLiteral at 6.19 	 
  .byte 32 # StringLiteral at 6.19  
  .byte 80 # StringLiteral at 6.19 	
  .byte 65 # StringLiteral at 6.19			
  .byte 83 # StringLiteral at 6.19 
  .byte 83 # StringLiteral at 6.19 
  .byte 10 # StringLiteral at 6.19	  
  .byte 0 # StringLiteral at 6.19  
  .byte 0 # StringLiteral at 6.19			
  .byte 0 # StringLiteral at 6.19 	
  .word CLASS_String # StringLiteral at 6.19			
  .word 9 # StringLiteral at 6.19	
  .word -29 # StringLiteral at 6.19		
3028:strLit_9: # StringLiteral at 6.19	 	
  .byte 116 # StringLiteral at 11.19			
  .byte 101 # StringLiteral at 11.19	 	
  .byte 115 # StringLiteral at 11.19 
  .byte 116 # StringLiteral at 11.19	  
  .byte 32 # StringLiteral at 11.19 		
  .byte 105 # StringLiteral at 11.19 
  .byte 110 # StringLiteral at 11.19  	
  .byte 115 # StringLiteral at 11.19	 
  .byte 116 # StringLiteral at 11.19	  
  .byte 97 # StringLiteral at 11.19   
  .byte 110 # StringLiteral at 11.19		
  .byte 99 # StringLiteral at 11.19		
  .byte 101 # StringLiteral at 11.19 
  .byte 111 # StringLiteral at 11.19	  
  .byte 102 # StringLiteral at 11.19	  
  .byte 32 # StringLiteral at 11.19  
  .byte 84 # StringLiteral at 11.19	 
  .byte 101 # StringLiteral at 11.19 		
  .byte 115 # StringLiteral at 11.19  
  .byte 116 # StringLiteral at 11.19 	 
  .byte 32 # StringLiteral at 11.19  
  .byte 61 # StringLiteral at 11.19 		
  .byte 61 # StringLiteral at 11.19  
  .byte 62 # StringLiteral at 11.19	 
  .byte 32 # StringLiteral at 11.19 	
  .byte 80 # StringLiteral at 11.19	  
  .byte 65 # StringLiteral at 11.19			
  .byte 83 # StringLiteral at 11.19	
  .byte 83 # StringLiteral at 11.19		
  .byte 10 # StringLiteral at 11.19 	 
  .byte 0 # StringLiteral at 11.19 
  .byte 0 # StringLiteral at 11.19 		
  .word CLASS_String # StringLiteral at 11.19	  
  .word 9 # StringLiteral at 11.19 		
  .word -30 # StringLiteral at 11.19  	
3072:strLit_23: # StringLiteral at 11.19	
.text # Program at 1.1 
.global main # Program at 1.1			
0:main: # Program at 1.1 
0#jal vm_init # Program at 1.1		 
4#li $s6, 1 # NewObject at 0.0 
8#li $s7, 0 # NewObject at 0.0 	
12#jal newObject # NewObject at 0.0			
16#la $t0, CLASS_Main # NewObject at 0.0	  
20#sw $t0, -12($s7) # NewObject at 0.0 	 
24#lw $t0, 0($sp) # Call at 0.0		 
28#beq $t0, $zero, nullPtrException # Call at 0.0			
32#lw $t0, -12($t0) # Call at 0.0	 
36#lw $t0, 36($t0) # Call at 0.0  
40#jalr $t0 # Call at 0.0 	 
44#li $v0, 10 # Program at 1.1	 	
48#syscall # Program at 1.1 	 
.globl fcn_30_main # MethodDeclVoid at 2.14  	
52:fcn_30_main: # MethodDeclVoid at 2.14  	
52#subu $sp, $sp, 8 # MethodDeclVoid at 2.14	
56#sw $ra, 4($sp) # MethodDeclVoid at 2.14 		
60#sw $s2, ($sp) # MethodDeclVoid at 2.14   
64#lw $s2, 8($sp) # MethodDeclVoid at 2.14	 	
68#subu $sp, $sp, 8 # IntegerLiteral at 3.11 	 
72#sw $s5, 4($sp) # IntegerLiteral at 3.11 		
76#li $t0, 9 # IntegerLiteral at 3.11	  
80#sw $t0, ($sp) # IntegerLiteral at 3.11		
84#subu $sp, $sp, 4 # StringLiteral at 4.14 	
88#la $t0, strLit_4 # StringLiteral at 4.14  	
92#sw $t0, ($sp) # StringLiteral at 4.14		 
96#lw $t0, 0($sp) # IdentifierExp at 5.6 	
100#subu $sp, $sp, 4 # IdentifierExp at 5.6   
104#sw $t0, ($sp) # IdentifierExp at 5.6	 	
108#la $t0, CLASS_String # InstanceOf at 5.8 		
112#la $t1, CLASS_END_String # InstanceOf at 5.8	 	
116#jal instanceOf # InstanceOf at 5.8		 
120#lw $t0, ($sp) # If at 5.3 	
124#addu $sp, $sp, 4 # If at 5.3  
128#beq $t0, $zero, if_else_15 # If at 5.3 
132#subu $sp, $sp, 4 # Super at 6.10			
136#sw $s2, ($sp) # Super at 6.10  	
140#subu $sp, $sp, 4 # StringLiteral at 6.19 
144#la $t0, strLit_9 # StringLiteral at 6.19			
148#sw $t0, ($sp) # StringLiteral at 6.19   
152#jal printStr # Call at 6.10	
156#j if_done_15 # If at 5.3   
160:if_else_15: # If at 5.3 	 
160:if_done_15: # If at 5.3	 	
160#li $s6, 1 # NewObject at 9.15			
164#li $s7, 0 # NewObject at 9.15	 
168#jal newObject # NewObject at 9.15	  
172#la $t0, CLASS_Test # NewObject at 9.15	  
176#sw $t0, -12($s7) # NewObject at 9.15		
180#lw $t0, 0($sp) # IdentifierExp at 10.6	  
184#subu $sp, $sp, 4 # IdentifierExp at 10.6 	
188#sw $t0, ($sp) # IdentifierExp at 10.6   
192#la $t0, CLASS_Test # InstanceOf at 10.11  	
196#la $t1, CLASS_END_Test # InstanceOf at 10.11 	
200#jal instanceOf # InstanceOf at 10.11		
204#lw $t0, ($sp) # If at 10.3   
208#addu $sp, $sp, 4 # If at 10.3	 
212#beq $t0, $zero, if_else_29 # If at 10.3			
216#subu $sp, $sp, 4 # Super at 11.10		
220#sw $s2, ($sp) # Super at 11.10			
224#subu $sp, $sp, 4 # StringLiteral at 11.19			
228#la $t0, strLit_23 # StringLiteral at 11.19	
232#sw $t0, ($sp) # StringLiteral at 11.19		 
236#jal printStr # Call at 11.10			
240#j if_done_29 # If at 10.3		
244:if_else_29: # If at 10.3  	
244:if_done_29: # If at 10.3	  
244#lw $ra, 20($sp) # MethodDeclVoid at 2.14  	
248#lw $s2, 8($sp) # MethodDeclVoid at 2.14		 
252#addu $sp, $sp, 28 # MethodDeclVoid at 2.14  	
256#jr $ra # MethodDeclVoid at 2.14  	
.globl fcn_32_test # MethodDeclVoid at 17.14  	
260:fcn_32_test: # MethodDeclVoid at 17.14	 
260#subu $sp, $sp, 8 # MethodDeclVoid at 17.14		
264#sw $ra, 4($sp) # MethodDeclVoid at 17.14	
268#sw $s2, ($sp) # MethodDeclVoid at 17.14	 
272#lw $s2, 8($sp) # MethodDeclVoid at 17.14	 	
276#lw $ra, 4($sp) # MethodDeclVoid at 17.14   
280#lw $s2, 8($sp) # MethodDeclVoid at 17.14 		
284#addu $sp, $sp, 12 # MethodDeclVoid at 17.14  
288#jr $ra # MethodDeclVoid at 17.14	  
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
292:readLine:
	
292#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
296#	sw $ra, 4($sp) # save $ra
300#	move $t1,$sp # save "original" sp

304:  doRead:

	# read the character
304#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
308#	subu $t2,$v0,13
312#	bne $t2,$zero,notReturnRL
316#	jal readLogicalChar
320#	subu $t2,$v0,10 # check for newline
324#	beq $t2,$zero,foundNewLine
328#	sw $v0,lastCharRead # push back character into queue
332#	j foundNewLine # go process the line

336:  notReturnRL:

	# at this point, $v0 has our character

336#	subu $t0,$v0,10
340#	beq $t0,$zero,foundNewLine
344#	blt $v0,$zero,foundEof
345##...slt $at,$v0,$zero
349##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
352#	subu $sp,$sp,4
356#	sw $v0,($sp)

	# loop back up to get next character
360#	j doRead

364:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
364#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
368#	sw $zero,8($sp) # return-value: null
372#	j rlReturn # return

376:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
376#	subu $t0,$t1,$sp # number of chars we read (times 4)
380#	srl $s6,$t0,2 # number of words on stack with chars
384#	subu $sp,$sp,4 # push char-count ...
388#	sw $s6,($sp) # ... onto stack
392#	addu $t2,$t0,5 # GC tag, incl. for count-word
396#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
400#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
404#	srl $s6,$s6,2 # data words in object
408#	move $s7,$zero # # object words in object
412#	jal newObject # allocate space
	
	# store header words
416#	la $t0,CLASS_String
420#	sw $t0,-12($s7) # store class tag (String) into object
424#	lw $t2,4($sp) # char-count
428#	sll $t1,$t2,2 # 4 times number of chars
432#	subu $t2,$zero,$t2 # negative of char-count
436#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
440#	lw $t0,-8($s7) # data words in object
444#	sll $t0,$t0,2 # data bytes in object
448#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
452#	subu $t0,$t0,$t2 # place to store last character (plus 9)
456#	addu $sp,$sp,8 # pop redundant object-pointer and count
460#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

464#	beq $sp,$t1,doneCharCopy
468:  charCopyLoop:
468#	lw $t2,($sp)
472#	sb $t2,-9($t0)
476#	addu $sp,$sp,4
480#	subu $t0,$t0,1
484#	bne $sp,$t1,charCopyLoop
488:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
488#	sw $s7,8($sp)
	
492:  rlReturn:
	# restore return address and return
492#	lw $ra,4($sp) # restore return address, ...
496#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
500#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
504:readInt:

	# save $ra by pushing onto stack
504#	subu $sp,$sp,4
508#	sw $ra,($sp)

512:  riSkipWhiteLoop:
	# read a character
512#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
516#	subu $t0,$v0,32
520#	bgt $t0,$zero,nonWhite
521##...slt $at,$zero,$t0
525##...bne $at,$zero,$+44
528#	beq $t0,$zero,riSkipWhiteLoop # start over if space
532#	subu $t0,$v0,10
536#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
540#	subu $t0,$v0,9
544#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
548#	subu $t0,$v0,13
552#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
556#	subu $t0,$v0,12
560#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
564#	j badIntegerFormat # illegal integer char: abort program

568:  nonWhite:
568#	subu $t0,$v0,'-'
572#	li $t4,1 # final multiplier
576#	bne $t0,$zero,helpReadInt # go read
580#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
584#	jal readLogicalChar

588:  helpReadInt:
588#	li $t2,10
592#	subu $t1,$v0,'0' # convert digit to 0-9 value
596#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
597##...sltu $at,$t1,$t2
601##...beq $at,$zero,$+2080
604#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

608:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

608#	jal readLogicalChar # read next character
612#	subu $t1,$v0,'0' # convert digit to 0-9 value
616#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
617##...sltu $at,$t1,$t2
621##...beq $at,$zero,$+20

624#	mul $t3,$t3,$t2 # multiply old value by 10
625##...mult $t3,$t2
629##...mflo $t3
632#	addu $t3,$t3,$t1 # add in value of new digit
636#	j digitLoop

640:  doneDigitLoop:

	# "push back" unused character into queue
640#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
644#	lw $ra,($sp)
648#	mult $t3,$t4 # multiply to account for poss. minus sign
652#	mflo $t3
656#	sw $t3,($sp) # result
660#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
664#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
668:readChar:

	# save $ra by pushing onto stack
668#	subu $sp,$sp,4
672#	sw $ra,($sp)

  	# read the character
676#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
680#	lw $ra,($sp)
684#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
688#	sw $v0,($sp)

	# return
692#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
696:printStr:
	# check for null, printing "(null)", if so
696#	lw $t0,($sp)
700#	bne $t0,$zero,psNotNull

	# print "(null)"
704#	la $a0,nullStr
708#	li $v0,4
712#	syscall
716#	j donePrintStr
	
720:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
720#	subu $t0,$t0,8
724#	lw $t1,($t0) # word just beyond end of string
728#	sll $t1,$t1,2
732#	subu $t1,$t0,$t1 # first word in string
736#	lw $t0,4($t0) # negative of string-length
740#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
744#	beq $t0,$t1,donePrintStr
748:  psLoop:
748#	lb $a0,($t1) # next byte
752#	li $v0,11 # code for printing char
756#        syscall # print the char
760#	addu $t1,$t1,1 # go to next char
764#	blt $t1,$t0,psLoop
765##...slt $at,$t1,$t0
769##...bne $at,$zero,$-20

772:  donePrintStr:
	# pop stack and return
772#	addu $sp,$sp,8
776#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
780:printInt:
	# pop value off stack, along with 'this'
780#	lw $a0,($sp)
784#	addu $sp,$sp,12

	# print it
788#	li $v0,1 # code for print-int
792#	syscall

	# return
796#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
800:printBool:
	# pop value off stack, along with 'this'
800#	lw $t0,($sp)
804#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
808#	la $a0,falseString
812#	beq $t0,$zero,skipPB
816#	la $a0,trueString
820:  skipPB:
820#	li $v0,4 # code for print-string
824#	syscall

	# return
828#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
832:substring:

	# save $ra by pushing onto stack
832#	subu $sp,$sp,4
836#	sw $ra,($sp)

	# get string value off stack, test for null
840#	lw $t0,20($sp)
844#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
848#	lw $t0,-4($t0) # negative of string length
852#	subu $t0,$zero,$t0 # string length
856#	lw $t1,4($sp) # k
860#	lw $t2,12($sp) # n
864#	bgt $zero,$t2,strIndexOutOfBounds
865##...slt $at,$t2,$zero
869##...bne $at,$zero,$+1780
872#	bgt $t2,$t1,strIndexOutOfBounds
873##...slt $at,$t1,$t2
877##...bne $at,$zero,$+1772
880#	bgt $t1,$t0,strIndexOutOfBounds
881##...slt $at,$t0,$t1
885##...bne $at,$zero,$+1764

	# allocate memory
888#	subu $s6,$t1,$t2 # # chars in target-string
892#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
896#	srl $s6,$s6,2 # convert bytes-count to word-count
900#	move $s7,$zero # (no object-bytes in string)
904#	jal newObject

	# store "String" tag in object-type field
908#	la $t0,CLASS_String
912#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
916#	lw $t1,8($sp) # k
920#	lw $t2,16($sp) # n
924#	subu $t0,$t2,$t1 # value to store
928#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
932#	lw $t3,24($sp) # source string pointer
936#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
940#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
944#	lw $t4,-8($t3) # # data words in source string
948#	sll $t4,$t4,2 # # data bytes in source string
952#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
956#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
960#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
964#	lw $t2,-8($s7) # # data words in target string
968#	sll $t2,$t2,2 # # data bytes in target string
972#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
976:  subCopyLoopzz:
976#	lb $t4,-8($t3)
980#	sb $t4,-8($t2)
984#	addu $t2,$t2,1
988#	addu $t3,$t3,1
992#	blt $t3,$t1,subCopyLoopzz
993##...slt $at,$t3,$t1
997##...bne $at,$zero,$-20
	
1000:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1000#	lw $ra,4($sp) # restore $ra
1004#	addu $sp,$sp,24 # pop stack
	
	# return
1008#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1012:length:

	# get string pointer
1012#	lw $t0,($sp)
	
	# grow stack
1016#	subu $sp,$sp,4

	# store GC tag
1020#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1024#	lw $t0,-4($t0) # -length
1028#	subu $t0,$zero,$t0
1032#	sw $t0,($sp) #store length

	# return
1036#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
1040:concat:
 	# save $ra by pushing onto stack
1040#	subu $sp,$sp,4
1044#	sw $ra($sp)

	# get string pointers and check parameter for null
1048#	lw $t0,4($sp)
1052#	beq $t0,$zero,nullPtrException
1056#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
1060#	lw $t0,-4($t0) # negative size of second object
1064#	lw $t1,-4($t1) # negative size of first object
1068#	addu $s6,$t0,$t1 # sum of negative sizes
1072#	sra $s6,$s6,2 # negative word-size of char part
1076#	subu $s6,$zero,$s6 # word size of char part
1080#	addu $s6,$s6,1 # data word size, including v-table word
1084#	move $s7,$zero
1088#	jal newObject

	# store "String" tag in object-type field
1092#	la $t0,CLASS_String
1096#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
1100#	lw $ra,4($sp) # return address
1104#	lw $t0,8($sp) # second object
1108#	lw $t1,12($sp) # first object
1112#	addu $sp,$sp,12 # pop
1116#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
1120#	lw $t2,-4($t0) # negative length of second object
1124#	lw $t3,-4($t1) # negative length of first object
1128#	addu $t4,$t2,$t3 # sum of negative lengths
1132#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
1136#	lw $t4,-8($t1) # # data words in first string
1140#	sll $t4,$t4,2 # # data bytes in first string
1144#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1148#	lw $t4,-8($s7) # # data words in new string
1152#	sll $t4,$t4,2 # # data bytes in new string
1156#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1160#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1164#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
1168:  concatLoop1zz:
1168#	lb $t4,-8($t1)
1172#	sb $t4,-8($s7)
1176#	addu $s7,$s7,1
1180#	addu $t1,$t1,1
1184#	blt $t1,$t3,concatLoop1zz
1185##...slt $at,$t1,$t3
1189##...bne $at,$zero,$-20
1192:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1192#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
1196#	lw $t4,-8($t0) # # data words in second string
1200#	sll $t4,$t4,2 # # data bytes in second string
1204#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1208#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
1212:  concatLoop2zz:
1212#	lb $t4,-8($t1)
1216#	sb $t4,-8($s7)
1220#	addu $s7,$s7,1
1224#	addu $t1,$t1,1
1228#	blt $t1,$t3,concatLoop2zz
1229##...slt $at,$t1,$t3
1233##...bne $at,$zero,$-20
1236:  doneConcatLoop2zz:
 
1236:  concatRtnzz:
	# return
1236#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
1240:charAt:
	# get string
1240#	lw $t0,8($sp)

	# check that index is in bounds
1244#	lw $t1,-4($t0) # negative of # data words in string
1248#	subu $t3,$zero,$t1 # # chars in string
1252#	lw $t2,($sp) # index
1256#	bgeu $t2,$t3,strIndexOutOfBounds
1257##...sltu $at,$t2,$t3
1261##...beq $at,$zero,$+1388

	# access element
1264#	lw $t1,-8($t0) # # data words in object
1268#	sll $t1,$t1,2 # - byte-offset from end of chars
1272#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
1276#	addu $t0,$t0,$t1 # - address of our char, offset by 8
1280#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
1284#	addu $sp,$sp,4
1288#	sw $t0,($sp)
1292#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
1296#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
1300:intToString:

	# save return address on stack; allocate space for dummy GC tag
1300#	subu $sp,$sp,8
1304#	sw $ra,4($sp)

	# save current sp
1308#	move $t0,$sp

	# move constant 10 into $t3
1312#	li $t3,10

	# get argument, negate if negative
1316#	lw $t1,8($sp)
1320#	bge $t1,$zero,itsNonNegLoop
1321##...slt $at,$t1,$zero
1325##...beq $at,$zero,$+8
1328#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
1332:  itsNonNegLoop:
1332#	divu $t1,$t3
1336#	mflo $t1 # quotient
1340#	mfhi $t4 # remainder
1344#	addu $t4,$t4,'0' # turn remainder into digit
1348#	subu $sp,$sp,4
1352#	sw $t4,($sp) # push digit onto stack
1356#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
1360#	lw $t4,8($t0)
1364#	bge $t4,$zero,itsSkipNeg
1365##...slt $at,$t4,$zero
1369##...beq $at,$zero,$+16
1372#	li $t4,'-'
1376#	subu $sp,$sp,4
1380#	sw $t4,($sp)
1384:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
1384#	subu $s6,$t0,$sp
1388#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
1392#	sw $t3,($t0)
1396#	srl $s6,$s6,2
1400#	subu $sp,$sp,4
1404#	sw $s6,($sp)
	
	# allocate memory
1408#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
1412#	srl $s6,$s6,2
1416#	move $s7,$zero # no "object" words in object
1420#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
1424#	lw $t0,4($sp)
1428#	addu $sp,$sp,8

	# store "String" tag into class field
1432#	subu $s7,$s7,8 # address of header-1 word
1436#	la $t1,CLASS_String
1440#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
1444#	subu $t0,$zero,$t0
1448#	sw $t0,4($s7)

1452#	lw $t1,($s7) # number of data words in string
1456#	sll $t1,$t1,2 # number data bytes in string
1460#	subu $t1,$s7,$t1 # first location to store chars in string
1464#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
1468:  itsLoop:
1468#	lw $t2,($sp)
1472#	addu $sp,$sp,4
1476#	sb $t2,($t1)
1480#	addu $t1,$t1,1
1484#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
1488#	lw $ra,4($sp)
1492#	addu $sp,$sp,16
1496#	addu $t0,$t0,15
1500#	and $t0,$t0,0xfffffffc
1501##...lui $at,65535
1505##...ori $at,$at,0xfffc
1509##...and $t0,$t0,$at
1512#	sw $t0,($sp)
1516#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
1520:intToChar:
	# save return address
1520#	subu $sp,$sp,4
1524#	sw $ra,($sp)

	# allocate object
1528#	li $s6,2
1532#	move $s7,$zero
1536#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
1540#	lw $ra,4($sp)
1544#	lw $t1,8($sp)
1548#	addu $sp,$sp,16

	# store "String" tag into class field
1552#	la $t0,CLASS_String
1556#	sw $t0,-12($s7)

	# store data in string
1560#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
1564#	li $t0,-1
1568#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
1572#	sw $s7,($sp)

	# return
1576#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
1580:compareTo:
	# get string pointers and check parameter for null
1580#	lw $t0,($sp) # second string
1584#	beq $t0,$zero,nullPtrException
1588#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
1592#	lw $t2,-4($t0) # negative length of second string
1596#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
1600#	slt $t4,$t3,$t2
1604#	slt $t5,$t2,$t3
1608#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
1612#	lw $t2,-8($t0) # # data words in second string
1616#	lw $t3,-8($t1) # # data words in first string
1620#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
1624#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
1628#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
1632#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
1636#	beq $zero,$t5,skipStrCmpLenzz
1640#	move $t2,$t3
1644:  skipStrCmpLenzz:
1644#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
1648:  cmpLoopzz:
1648#	lw $t3,-8($t1) # word from str2
1652#	lw $t4,-8($t0) # word from str1
1656#	bne $t3,$t4,cmpNotEqualzz
1660#	addu $t1,$t1,4
1664#	addu $t0,$t0,4
1668#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
1672#	j cmpHitLimitzz

1676:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
1676#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
1680#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
1684#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
1688:  cmpHitLimitzz:
1688#	sw $t5,($sp) # store value
1692#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1696#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
1700:readLogicalChar:

	# check if we already have a character
1700#	lw $v0,lastCharRead
1704#	li $t0,-2
1708#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
1712#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
1716#	jr $ra # return
	
1720:  doReadCh:
	# we need to actually read a character: read and return
1720#	li $v0,12 # use system call to read a character
1724#	syscall
1728#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
1732:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
1732#	blt $s7,$zero arraySizeOutOfBounds
1733##...slt $at,$s7,$zero
1737##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
1740#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

1744:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
1744#	move $t3,$s6
1748#	bge $t3,$zero,newSkip
1749##...slt $at,$t3,$zero
1753##...beq $at,$zero,$+8
1756#	move $t3,$zero

1760:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
1760#	addu $t0,$t3,$s7
1764#	sll $t0,$t0,2
1768#	addu $t0,$t0,8 # amount of memory needed
1772#	addu $t1,$t0,$s3
1776#	bgtu $t1,$s4,doGC
1777##...sltu $at,$s4,$t1
1781##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
1784#	move $t2,$s3
1788:  zeroObjLoop:
1788#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

1792#	addu $s3,4
1796#	bltu $s3,$t1,zeroObjLoop
1797##...sltu $at,$s3,$t1
1801##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
1804#	sll $t0,$s7,2    # number of post-header bytes
1808#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
1812#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
1816#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
1820#	move $s7,$t0
1824#	subu $sp,$sp,4
1828#	sw $t0,($sp)

1832#	jr $ra
	
1836:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
1836#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
1840#	subu $sp,$sp,4
1844#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
1848#	lw $t0,cur_seg
1852#	move $t7,$s4
1856#	la $t6,seg1_start
1857##...lui $t6,16
1861##...addiu $t6,$t6,3380
1864#	la $s3,seg0_start
1868#	la $s4,seg0_end
1869##...lui $s4,16
1873##...addiu $s4,$s4,3380
1876#	sw $zero,cur_seg
1880#	bne $t0,$zero,skipGc1
1884#	la $t6,seg0_start
1888#	la $s3,seg1_start
1889##...lui $s3,16
1893##...addiu $s3,$s3,3380
1896#	la $s4,seg1_end
1897##...lui $s4,32
1901##...addiu $s4,$s4,3380
1904#	sw $s5,cur_seg
1908:  skipGc1:
1908#	li $t5,-2
1912#	lw $t0,stack_bottom
1916#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

1920:  gcStackCopyLoop:
1920#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
1924#	sll $t2,$t1,31 # zero iff low bit was zero
1928#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
1932#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
1936#	bleu $t1,$t6,gcTestIterDone1
1937##...sltu $at,$t6,$t1
1941##...beq $at,$zero,$+148
1944#	bgtu $t1,$t7,gcTestIterDone1
1945##...sltu $at,$t7,$t1
1949##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
1952#	lw $t2,-8($t1) # possible forwarding tag
1956#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
1960#	lw $t2,-4($t1) # forwarding pointer: object's new address
1964#	sw $t2,4($t0) # update stack value
1968#	j gcTestIterDone1 # do next iteration

1972:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
1972#	bge $t2,$zero,gcSkip2
1973##...slt $at,$t2,$zero
1977##...beq $at,$zero,$+8
1980#	move $t2,$zero # set to zero if -1 (number of data words)

1984:  gcSkip2:
1984#	sll $t2,$t2,2
1988#	addu $t2,$t2,8
1992#	subu $t4,$t1,$t2 # address of first word of source
1996#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2000#	bge $t3,$zero,gcH2Neg1
2001##...slt $at,$t3,$zero
2005##...beq $at,$zero,$+8
2008#	move $t3,$zero
2012:  gcH2Neg1:
2012#	sll $t3,$t3,2
2016#	addu $t3,$t3,$t1 # address one word past last word of source

2020#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2024#	lw $s0,($t4)
2028#	lw $s1,-8($t1)
2032#	sw $s1,($t4)
2036#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
2040:  gCinnerCopy1:
2040#	lw $s0,($t4)
2044#	sw $s0,($s3)
2048#	addu $t4,$t4,4
2052#	addu $s3,$s3,4
2056#	bltu $t4,$t3,gCinnerCopy1
2057##...sltu $at,$t4,$t3
2061##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2064#	sw $t5,-8($t1) # -2 in first header-slot
2068#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
2072#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
2076#	j gcTestIterDone1

2080:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
2080#	subu $t0,$t0,$t1
2084#	subu $t0,$t0,3

2088:  gcTestIterDone1:
2088#	bgeu $t0,$sp,gcStackCopyLoop
2089##...sltu $at,$t0,$sp
2093##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
2096#	lw $t1,cur_seg
2100#	la $t0,seg0_start
2104#	beq $t1,$zero,gcSkip4
2108#	la $t0,seg1_start
2109##...lui $t0,16
2113##...addiu $t0,$t0,3380

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

2116:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
2116#	bgeu $t0,$s3,gcFinishUp
2117##...sltu $at,$t0,$s3
2121##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

2124:  gcHeapCopyLoop:
	# check if we have a data array
2124#	lw $t1,($t0) # first header word for current object
2128#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
2129##...slt $at,$t1,$zero
2133##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
2136#	lw $t1,4($t0) # data words
2140#	addu $t1,$t1,2 # add in # header words
2144#	sll $t1,$t1,2 # convert to byte-count
2148#	addu $t0,$t0,$t1 # skip over object
2152#	j gcTestIterDone2 # go do next object, if any

2156:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
2156#	sll $t2,$t1,2 # # data bytes
2160#	addu $t2,$t2,8 # to skip header word
2164#	addu $t2,$t0,$t2 # pointer to new object
2168#	lw $t3,-8($t2) # word to swap
2172#	sw $t1,-8($t2) # store header word
2176#	sw $t3,($t0) # restore first word of object

2180#	lw $t3,-4($t2) # # object words (negative treated as zero)
2184#	bge $t3,$zero,gcH2Neg2
2185##...slt $at,$t3,$zero
2189##...beq $at,$zero,$+8
2192#	move $t3,$zero
2196:  gcH2Neg2:
2196#	sll $t3,$t3,2 # # object bytes
2200#	move $t0,$t2 # address of first pointer in object
2204#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
2208#	beq $t0,$s1,gcTestIterDone2
	
2212:  gcNextPointerInObject:
	# get pointer from object
2212#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
2216#	bleu $t1,$t6,gcGoNextPointerSlot
2217##...sltu $at,$t6,$t1
2221##...beq $at,$zero,$+136
2224#	bgtu $t1,$t7,gcGoNextPointerSlot
2225##...sltu $at,$t7,$t1
2229##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2232#	lw $t8,-8($t1) # possible forwarding tag
2236#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
2240#	lw $t8,-4($t1) # forwarding pointer: object's new address
2244#	sw $t8,($t0) # update pointer in object
2248#	j gcGoNextPointerSlot # do next iteration

2252:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
2252#	bge $t8,$zero,gcSkip5
2253##...slt $at,$t8,$zero
2257##...beq $at,$zero,$+8
2260#	move $t8,$zero # set to zero if -1

2264:  gcSkip5:
2264#	sll $t8,$t8,2
2268#	addu $t8,$t8,8
2272#	subu $t4,$t1,$t8 # address of first word of source
2276#	lw $t3,-4($t1)
2280#	bge $t3,$zero,gcNoNeg
2281##...slt $at,$t3,$zero
2285##...beq $at,$zero,$+8
2288#	move $t3,$zero
2292:  gcNoNeg:
2292#	sll $t3,$t3,2
2296#	addu $t3,$t3,$t1 # address one word past last word of source

2300#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
2304#	lw $s0,($t4)
2308#	lw $t9,-8($t1)
2312#	sw $t9,($t4)
2316#	sw $s0,-8($t1)

	# copy all source bytes to the target
2320:  gCinnerCopy2:
2320#	lw $s0,($t4)
2324#	sw $s0,($s3)
2328#	addu $t4,$t4,4
2332#	addu $s3,$s3,4
2336#	bltu $t4,$t3,gCinnerCopy2
2337##...sltu $at,$t4,$t3
2341##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2344#	sw $t5,-8($t1) # -2 in first header-slot
2348#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
2352#	sw $t8,($t0)

2356:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
2356#	addu $t0,$t0,4
2360#	bltu $t0,$s1,gcNextPointerInObject
2361##...sltu $at,$t0,$s1
2365##...bne $at,$zero,$-152

2368:  gcTestIterDone2:
2368#	bltu $t0,$s3,gcHeapCopyLoop
2369##...sltu $at,$t0,$s3
2373##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

2376:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
2376#	lw $s2,($sp)
2380#	addu $sp,$sp,4

	# mark us as having already GC'd
2384#	move $t5,$s5

	# go try and allocate again
2388#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
2392:vm_init:

	# mark bottom of stack
2392#	sw $sp,stack_bottom
2396#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
2400#	move $s2,$zero
2404#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
2408#	li $s5,5
2412#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

2416#	la $s3,seg0_start
2420#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
2424#	la $s4,seg0_end
2425##...lui $s4,16
2429##...addiu $s4,$s4,3380
2432#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
2436#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2440:divide:
	# get parameters; abort if divisor zero
2440#	lw $t0,($sp)
2444#	lw $t1,8($sp)
2448#	beq $t0,$zero,divByZeroError
	
	# perform division
2452#	div $t1,$t0
2456#	mflo $t0

	# store result, adjust stack and return
2460#	addu $sp,$sp,8 # adjust stack
2464#	sw $t0,($sp) # store result
2468#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2472:remainder:
	# get parameters; abort if divisor zero
2472#	lw $t0,($sp)
2476#	lw $t1,8($sp)
2480#	beq $t0,$zero,divByZeroError
	
	# perform division
2484#	div $t1,$t0
2488#	mfhi $t0

	# store result, adjust stack and return
2492#	addu $sp,$sp,8 # adjust stack
2496#	sw $t0,($sp) # store result
2500#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
2504:checkCast:
	# get object, allow immediately if null
2504#	lw $t2,($sp)
2508#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
2512#	lw $t3,-8($t2) # <= 0 if array
2516#	lw $t2,-12($t2) # vtable address (unless array)
2520#	bgt $t3,$zero,skipArrayCast
2521##...slt $at,$zero,$t3
2525##...bne $at,$zero,$+8
2528#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
2532:  skipArrayCast:
2532#	bge $t2,$t1,castException
2533##...slt $at,$t2,$t1
2537##...beq $at,$zero,$+152
2540#	blt $t2,$t0,castException
2541##...slt $at,$t2,$t0
2545##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
2548:  checkCastReturn:	
2548#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
2552:instanceOf:
	# get object, go return false if null
2552#	lw $t2,($sp)
2556#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
2560#	lw $t3,-8($t2) # <= 0 if array
2564#	lw $t2,-12($t2) # vtable address (unless array)
2568#	bgt $t3,$zero,skipArrayInstanceOf
2569##...slt $at,$zero,$t3
2573##...bne $at,$zero,$+8
2576#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
2580:  skipArrayInstanceOf:
2580#	sge $t0,$t2,$t0
2581##...slt $t0,$t2,$t0
2585##...xori $t0,$t0,0x1
2588#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
2592#	and $t2,$t0,$t1
2596:  doneInstanceOf: # if we reach here via branch, we know $t2=0
2596#	sw $t2,($sp)
2600#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

2604:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
2604#	li $v0,4 # syscall-code for print-string
2608#	syscall
2612:exit:
	# print termination message
2612#	li $v0,4
2616#	la $a0,exitString
2620#	syscall

	# terminate execution
2624#	li $v0,10 #syscall-code for "exit"
2628#	syscall

2632:outOfHeapMemory:
2632#	la $a0,heapMemoryMsg
2636#	j exitError
2640:divByZeroError:
2640#	la $a0,divByZeroMsg
2644#	j exitError
2648:strIndexOutOfBounds:
2648#	la $a0,strIndexOutOfBoundsMsg
2652#	j exitError
2656:arrayIndexOutOfBounds:
2656#	la $a0,arrayIndexOutOfBoundsMsg
2660#	j exitError
2664:arraySizeOutOfBounds:
2664#	la $a0,arraySizeOutOfBoundsMsg
2668#	j exitError
2672:nullPtrException:
2672#	la $a0,nullPtrExceptionMsg
2676#	j exitError
2680:badIntegerFormat:
2680#	la $a0,badIntegerFormatMsg
2684#	j exitError
2688:castException:
2688#	la $a0,castExceptionMsg
2692#	j exitError

############## data section ################
	.data
	.align 2

3072:cur_seg:
	.word 0

3076:lastCharRead:
	.word -2 # -2 => no buffered character

3080:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3107:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3130:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3165:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3199:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
3232:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
3263:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
3311:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
3332:gcMsg: 
      .asciiz "\nGC!\n"

3338:nullStr:
	.asciiz "null"
3343:trueString:
	.asciiz "true"
3348:falseString:
	.asciiz "false"
3354:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
3376:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

3380:seg0_start:
	.space 0x100000
1051956:seg0_end:
1051956:seg1_start:
	.space 0x100000
2100532:seg1_end:



