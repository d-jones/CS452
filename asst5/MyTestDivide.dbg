 .data # Program at 1.1 	
  .byte 10 # StringLiteral at 19.18	
  .byte 0 # StringLiteral at 19.18 	 
  .byte 0 # StringLiteral at 19.18 		
  .byte 0 # StringLiteral at 19.18	 	
  .word CLASS_String # StringLiteral at 19.18		
  .word 2 # StringLiteral at 19.18 
  .word -1 # StringLiteral at 19.18	 	
3980:strLit_89: # StringLiteral at 19.18 
  .byte 10 # StringLiteral at 21.18 		
  .byte 0 # StringLiteral at 21.18 	 
  .byte 0 # StringLiteral at 21.18	  
  .byte 0 # StringLiteral at 21.18	
  .word CLASS_String # StringLiteral at 21.18  	
  .word 2 # StringLiteral at 21.18	
  .word -1 # StringLiteral at 21.18			
3996:strLit_97: # StringLiteral at 21.18  
  .byte 10 # StringLiteral at 23.18 	
  .byte 0 # StringLiteral at 23.18	  
  .byte 0 # StringLiteral at 23.18  	
  .byte 0 # StringLiteral at 23.18		
  .word CLASS_String # StringLiteral at 23.18 	
  .word 2 # StringLiteral at 23.18	 	
  .word -1 # StringLiteral at 23.18	 
4012:strLit_105: # StringLiteral at 23.18 	
  .byte 10 # StringLiteral at 25.18 		
  .byte 0 # StringLiteral at 25.18 
  .byte 0 # StringLiteral at 25.18	
  .byte 0 # StringLiteral at 25.18 
  .word CLASS_String # StringLiteral at 25.18   
  .word 2 # StringLiteral at 25.18			
  .word -1 # StringLiteral at 25.18 
4028:strLit_113: # StringLiteral at 25.18  	
  .byte 10 # StringLiteral at 27.18	
  .byte 0 # StringLiteral at 27.18   
  .byte 0 # StringLiteral at 27.18		 
  .byte 0 # StringLiteral at 27.18  
  .word CLASS_String # StringLiteral at 27.18			
  .word 2 # StringLiteral at 27.18 		
  .word -1 # StringLiteral at 27.18  	
4044:strLit_121: # StringLiteral at 27.18			
  .byte 10 # StringLiteral at 29.18	 
  .byte 0 # StringLiteral at 29.18	  
  .byte 0 # StringLiteral at 29.18  	
  .byte 0 # StringLiteral at 29.18	
  .word CLASS_String # StringLiteral at 29.18  
  .word 2 # StringLiteral at 29.18	  
  .word -1 # StringLiteral at 29.18 
4060:strLit_129: # StringLiteral at 29.18	 	
  .byte 10 # StringLiteral at 31.18	  
  .byte 0 # StringLiteral at 31.18	 
  .byte 0 # StringLiteral at 31.18	
  .byte 0 # StringLiteral at 31.18 
  .word CLASS_String # StringLiteral at 31.18	
  .word 2 # StringLiteral at 31.18	 	
  .word -1 # StringLiteral at 31.18			
4076:strLit_137: # StringLiteral at 31.18	
  .byte 10 # StringLiteral at 33.18			
  .byte 0 # StringLiteral at 33.18		
  .byte 0 # StringLiteral at 33.18	 
  .byte 0 # StringLiteral at 33.18	
  .word CLASS_String # StringLiteral at 33.18			
  .word 2 # StringLiteral at 33.18  	
  .word -1 # StringLiteral at 33.18   
4092:strLit_145: # StringLiteral at 33.18 	
  .byte 10 # StringLiteral at 35.18	 
  .byte 0 # StringLiteral at 35.18		
  .byte 0 # StringLiteral at 35.18	 
  .byte 0 # StringLiteral at 35.18 		
  .word CLASS_String # StringLiteral at 35.18   
  .word 2 # StringLiteral at 35.18	  
  .word -1 # StringLiteral at 35.18	  
4108:strLit_153: # StringLiteral at 35.18  
  .byte 10 # StringLiteral at 37.18	 	
  .byte 0 # StringLiteral at 37.18	 	
  .byte 0 # StringLiteral at 37.18 	
  .byte 0 # StringLiteral at 37.18  
  .word CLASS_String # StringLiteral at 37.18		
  .word 2 # StringLiteral at 37.18			
  .word -1 # StringLiteral at 37.18 	
4124:strLit_161: # StringLiteral at 37.18	 	
  .byte 10 # StringLiteral at 39.18 	
  .byte 0 # StringLiteral at 39.18			
  .byte 0 # StringLiteral at 39.18	  
  .byte 0 # StringLiteral at 39.18	 
  .word CLASS_String # StringLiteral at 39.18		
  .word 2 # StringLiteral at 39.18		
  .word -1 # StringLiteral at 39.18 	
4140:strLit_169: # StringLiteral at 39.18			
  .byte 10 # StringLiteral at 41.18	 
  .byte 0 # StringLiteral at 41.18	
  .byte 0 # StringLiteral at 41.18	 
  .byte 0 # StringLiteral at 41.18	 	
  .word CLASS_String # StringLiteral at 41.18   
  .word 2 # StringLiteral at 41.18	 
  .word -1 # StringLiteral at 41.18	  
4156:strLit_177: # StringLiteral at 41.18	
  .byte 10 # StringLiteral at 43.18	
  .byte 0 # StringLiteral at 43.18	 	
  .byte 0 # StringLiteral at 43.18	  
  .byte 0 # StringLiteral at 43.18  
  .word CLASS_String # StringLiteral at 43.18			
  .word 2 # StringLiteral at 43.18  	
  .word -1 # StringLiteral at 43.18 
4172:strLit_185: # StringLiteral at 43.18  	
4172:CLASS_Object: # Program at 1.1 
4172:CLASS_String: # Program at 1.1 		
.text # Program at 1.1 
.global main # Program at 1.1 	
0:main: # Program at 1.1	
0#jal vm_init # Program at 1.1  
4#subu $sp, $sp, 4 # NewObject at 0.0 
8#sw $zero, ($sp) # NewObject at 0.0			
12#jal fcn_189_main # Call at 0.0			
16#li $v0, 10 # Program at 1.1	  
20#syscall # Program at 1.1 		
.globl fcn_189_main # MethodDeclVoid at 2.14 		
24:fcn_189_main: # MethodDeclVoid at 2.14		 
24#subu $sp, $sp, 8 # MethodDeclVoid at 2.14		 
28#sw $ra, 4($sp) # MethodDeclVoid at 2.14   
32#sw $s2, ($sp) # MethodDeclVoid at 2.14 
36#lw $s2, 4($sp) # MethodDeclVoid at 2.14	
40#subu $sp, $sp, 8 # IntegerLiteral at 3.11	 
44#sw $s5, 4($sp) # IntegerLiteral at 3.11 	 
48#li $t0, 20 # IntegerLiteral at 3.11		 
52#sw $t0, ($sp) # IntegerLiteral at 3.11	
56#subu $sp, $sp, 8 # IntegerLiteral at 3.15 		
60#sw $s5, 4($sp) # IntegerLiteral at 3.15	
64#li $t0, 2 # IntegerLiteral at 3.15 	
68#sw $t0, ($sp) # IntegerLiteral at 3.15 	 
72#jal divide # Divide at 3.13	
76#subu $sp, $sp, 8 # IntegerLiteral at 4.11	
80#sw $s5, 4($sp) # IntegerLiteral at 4.11   
84#li $t0, 20 # IntegerLiteral at 4.11	  
88#sw $t0, ($sp) # IntegerLiteral at 4.11  	
92#subu $sp, $sp, 8 # IntegerLiteral at 4.16  	
96#sw $s5, 4($sp) # IntegerLiteral at 4.16 		
100#li $t0, 0 # IntegerLiteral at 4.16			
104#sw $t0, ($sp) # IntegerLiteral at 4.16	  
108#subu $sp, $sp, 8 # IntegerLiteral at 4.17	  
112#sw $s5, 4($sp) # IntegerLiteral at 4.17 	
116#li $t0, 2 # IntegerLiteral at 4.17 	 
120#sw $t0, ($sp) # IntegerLiteral at 4.17		
124#lw $t0, ($sp) # Minus at 4.16		
128#lw $t1, 8($sp) # Minus at 4.16	
132#subu $t0, $t1, $t0 # Minus at 4.16		
136#addu $sp, $sp, 8 # Minus at 4.16			
140#sw $t0, ($sp) # Minus at 4.16	  
144#jal divide # Divide at 4.14		
148#subu $sp, $sp, 8 # IntegerLiteral at 5.11		 
152#sw $s5, 4($sp) # IntegerLiteral at 5.11	
156#li $t0, 0 # IntegerLiteral at 5.11  
160#sw $t0, ($sp) # IntegerLiteral at 5.11	 
164#subu $sp, $sp, 8 # IntegerLiteral at 5.12 	 
168#sw $s5, 4($sp) # IntegerLiteral at 5.12 		
172#li $t0, 40 # IntegerLiteral at 5.12		 
176#sw $t0, ($sp) # IntegerLiteral at 5.12 
180#lw $t0, ($sp) # Minus at 5.11  	
184#lw $t1, 8($sp) # Minus at 5.11  	
188#subu $t0, $t1, $t0 # Minus at 5.11   
192#addu $sp, $sp, 8 # Minus at 5.11	 
196#sw $t0, ($sp) # Minus at 5.11	 
200#subu $sp, $sp, 8 # IntegerLiteral at 5.17	 	
204#sw $s5, 4($sp) # IntegerLiteral at 5.17 	
208#li $t0, 2 # IntegerLiteral at 5.17		
212#sw $t0, ($sp) # IntegerLiteral at 5.17 
216#jal divide # Divide at 5.15	  
220#subu $sp, $sp, 8 # IntegerLiteral at 6.11	
224#sw $s5, 4($sp) # IntegerLiteral at 6.11	 
228#li $t0, 0 # IntegerLiteral at 6.11	 	
232#sw $t0, ($sp) # IntegerLiteral at 6.11		
236#subu $sp, $sp, 8 # IntegerLiteral at 6.12	  
240#sw $s5, 4($sp) # IntegerLiteral at 6.12  
244#li $t0, 40 # IntegerLiteral at 6.12 		
248#sw $t0, ($sp) # IntegerLiteral at 6.12			
252#lw $t0, ($sp) # Minus at 6.11		 
256#lw $t1, 8($sp) # Minus at 6.11   
260#subu $t0, $t1, $t0 # Minus at 6.11  	
264#addu $sp, $sp, 8 # Minus at 6.11 	
268#sw $t0, ($sp) # Minus at 6.11  
272#subu $sp, $sp, 8 # IntegerLiteral at 6.17 		
276#sw $s5, 4($sp) # IntegerLiteral at 6.17	  
280#li $t0, 0 # IntegerLiteral at 6.17 		
284#sw $t0, ($sp) # IntegerLiteral at 6.17		 
288#subu $sp, $sp, 8 # IntegerLiteral at 6.18	
292#sw $s5, 4($sp) # IntegerLiteral at 6.18   
296#li $t0, 2 # IntegerLiteral at 6.18   
300#sw $t0, ($sp) # IntegerLiteral at 6.18 
304#lw $t0, ($sp) # Minus at 6.17 	 
308#lw $t1, 8($sp) # Minus at 6.17 	
312#subu $t0, $t1, $t0 # Minus at 6.17  	
316#addu $sp, $sp, 8 # Minus at 6.17  
320#sw $t0, ($sp) # Minus at 6.17	
324#jal divide # Divide at 6.15   
328#lw $t0, 24($sp) # IdentifierExp at 8.11 
332#subu $sp, $sp, 8 # IdentifierExp at 8.11	  
336#sw $s5, 4($sp) # IdentifierExp at 8.11	 
340#sw $t0, ($sp) # IdentifierExp at 8.11 	 
344#subu $sp, $sp, 8 # IntegerLiteral at 8.15			
348#sw $s5, 4($sp) # IntegerLiteral at 8.15 	
352#li $t0, 5 # IntegerLiteral at 8.15			
356#sw $t0, ($sp) # IntegerLiteral at 8.15 	 
360#jal divide # Divide at 8.13 	
364#subu $sp, $sp, 8 # IntegerLiteral at 9.11 	
368#sw $s5, 4($sp) # IntegerLiteral at 9.11 
372#li $t0, 20 # IntegerLiteral at 9.11 	
376#sw $t0, ($sp) # IntegerLiteral at 9.11  
380#lw $t0, 40($sp) # IdentifierExp at 9.16		 
384#subu $sp, $sp, 8 # IdentifierExp at 9.16		
388#sw $s5, 4($sp) # IdentifierExp at 9.16			
392#sw $t0, ($sp) # IdentifierExp at 9.16	 	
396#jal divide # Divide at 9.14	  
400#subu $sp, $sp, 8 # IntegerLiteral at 10.11	  
404#sw $s5, 4($sp) # IntegerLiteral at 10.11			
408#li $t0, 0 # IntegerLiteral at 10.11 		
412#sw $t0, ($sp) # IntegerLiteral at 10.11 		
416#lw $t0, 48($sp) # IdentifierExp at 10.12  
420#subu $sp, $sp, 8 # IdentifierExp at 10.12	 
424#sw $s5, 4($sp) # IdentifierExp at 10.12	 
428#sw $t0, ($sp) # IdentifierExp at 10.12 	 
432#lw $t0, ($sp) # Minus at 10.11	  
436#lw $t1, 8($sp) # Minus at 10.11	  
440#subu $t0, $t1, $t0 # Minus at 10.11	 
444#addu $sp, $sp, 8 # Minus at 10.11		
448#sw $t0, ($sp) # Minus at 10.11 
452#subu $sp, $sp, 8 # IntegerLiteral at 10.16 	
456#sw $s5, 4($sp) # IntegerLiteral at 10.16	 	
460#li $t0, 5 # IntegerLiteral at 10.16			
464#sw $t0, ($sp) # IntegerLiteral at 10.16		 
468#jal divide # Divide at 10.14	
472#subu $sp, $sp, 8 # IntegerLiteral at 11.11	
476#sw $s5, 4($sp) # IntegerLiteral at 11.11	
480#li $t0, 20 # IntegerLiteral at 11.11	 
484#sw $t0, ($sp) # IntegerLiteral at 11.11 		
488#subu $sp, $sp, 8 # IntegerLiteral at 11.16 
492#sw $s5, 4($sp) # IntegerLiteral at 11.16 	 
496#li $t0, 0 # IntegerLiteral at 11.16		 
500#sw $t0, ($sp) # IntegerLiteral at 11.16   
504#lw $t0, 64($sp) # IdentifierExp at 11.17	 
508#subu $sp, $sp, 8 # IdentifierExp at 11.17   
512#sw $s5, 4($sp) # IdentifierExp at 11.17			
516#sw $t0, ($sp) # IdentifierExp at 11.17   
520#lw $t0, ($sp) # Minus at 11.16		 
524#lw $t1, 8($sp) # Minus at 11.16   
528#subu $t0, $t1, $t0 # Minus at 11.16			
532#addu $sp, $sp, 8 # Minus at 11.16  
536#sw $t0, ($sp) # Minus at 11.16 	 
540#jal divide # Divide at 11.14  
544#lw $t0, 40($sp) # IdentifierExp at 12.11 	 
548#subu $sp, $sp, 8 # IdentifierExp at 12.11  	
552#sw $s5, 4($sp) # IdentifierExp at 12.11 		
556#sw $t0, ($sp) # IdentifierExp at 12.11 	
560#lw $t0, 64($sp) # IdentifierExp at 12.15	
564#subu $sp, $sp, 8 # IdentifierExp at 12.15 
568#sw $s5, 4($sp) # IdentifierExp at 12.15 	 
572#sw $t0, ($sp) # IdentifierExp at 12.15		 
576#jal divide # Divide at 12.13 	 
580#lw $t0, 40($sp) # IdentifierExp at 13.11  	
584#subu $sp, $sp, 8 # IdentifierExp at 13.11  	
588#sw $s5, 4($sp) # IdentifierExp at 13.11  	
592#sw $t0, ($sp) # IdentifierExp at 13.11	  
596#lw $t0, 72($sp) # IdentifierExp at 13.15 
600#subu $sp, $sp, 8 # IdentifierExp at 13.15  	
604#sw $s5, 4($sp) # IdentifierExp at 13.15	 
608#sw $t0, ($sp) # IdentifierExp at 13.15		
612#jal divide # Divide at 13.13 
616#subu $sp, $sp, 8 # IntegerLiteral at 14.11			
620#sw $s5, 4($sp) # IntegerLiteral at 14.11			
624#li $t0, 0 # IntegerLiteral at 14.11 
628#sw $t0, ($sp) # IntegerLiteral at 14.11  	
632#lw $t0, 64($sp) # IdentifierExp at 14.12 	
636#subu $sp, $sp, 8 # IdentifierExp at 14.12	  
640#sw $s5, 4($sp) # IdentifierExp at 14.12   
644#sw $t0, ($sp) # IdentifierExp at 14.12 
648#lw $t0, ($sp) # Minus at 14.11 	
652#lw $t1, 8($sp) # Minus at 14.11		 
656#subu $t0, $t1, $t0 # Minus at 14.11 		
660#addu $sp, $sp, 8 # Minus at 14.11	 	
664#sw $t0, ($sp) # Minus at 14.11   
668#lw $t0, 80($sp) # IdentifierExp at 14.16		
672#subu $sp, $sp, 8 # IdentifierExp at 14.16	  
676#sw $s5, 4($sp) # IdentifierExp at 14.16		
680#sw $t0, ($sp) # IdentifierExp at 14.16	
684#jal divide # Divide at 14.14	 
688#lw $t0, 64($sp) # IdentifierExp at 15.11   
692#subu $sp, $sp, 8 # IdentifierExp at 15.11  
696#sw $s5, 4($sp) # IdentifierExp at 15.11  	
700#sw $t0, ($sp) # IdentifierExp at 15.11 	 
704#subu $sp, $sp, 8 # IntegerLiteral at 15.15 	
708#sw $s5, 4($sp) # IntegerLiteral at 15.15	  
712#li $t0, 0 # IntegerLiteral at 15.15			
716#sw $t0, ($sp) # IntegerLiteral at 15.15	  
720#lw $t0, 96($sp) # IdentifierExp at 15.16	 	
724#subu $sp, $sp, 8 # IdentifierExp at 15.16	 	
728#sw $s5, 4($sp) # IdentifierExp at 15.16	 	
732#sw $t0, ($sp) # IdentifierExp at 15.16 	 
736#lw $t0, ($sp) # Minus at 15.15	
740#lw $t1, 8($sp) # Minus at 15.15	
744#subu $t0, $t1, $t0 # Minus at 15.15	 	
748#addu $sp, $sp, 8 # Minus at 15.15		
752#sw $t0, ($sp) # Minus at 15.15		
756#jal divide # Divide at 15.13		
760#subu $sp, $sp, 8 # IntegerLiteral at 16.11  	
764#sw $s5, 4($sp) # IntegerLiteral at 16.11		
768#li $t0, 0 # IntegerLiteral at 16.11	  
772#sw $t0, ($sp) # IntegerLiteral at 16.11	 
776#lw $t0, 72($sp) # IdentifierExp at 16.12 		
780#subu $sp, $sp, 8 # IdentifierExp at 16.12			
784#sw $s5, 4($sp) # IdentifierExp at 16.12 		
788#sw $t0, ($sp) # IdentifierExp at 16.12   
792#lw $t0, ($sp) # Minus at 16.11			
796#lw $t1, 8($sp) # Minus at 16.11		
800#subu $t0, $t1, $t0 # Minus at 16.11	 
804#addu $sp, $sp, 8 # Minus at 16.11   
808#sw $t0, ($sp) # Minus at 16.11  	
812#subu $sp, $sp, 8 # IntegerLiteral at 16.16  	
816#sw $s5, 4($sp) # IntegerLiteral at 16.16		
820#li $t0, 0 # IntegerLiteral at 16.16 	 
824#sw $t0, ($sp) # IntegerLiteral at 16.16 	 
828#lw $t0, 104($sp) # IdentifierExp at 16.17	 
832#subu $sp, $sp, 8 # IdentifierExp at 16.17  
836#sw $s5, 4($sp) # IdentifierExp at 16.17	 
840#sw $t0, ($sp) # IdentifierExp at 16.17 	
844#lw $t0, ($sp) # Minus at 16.16 		
848#lw $t1, 8($sp) # Minus at 16.16	 	
852#subu $t0, $t1, $t0 # Minus at 16.16 
856#addu $sp, $sp, 8 # Minus at 16.16		 
860#sw $t0, ($sp) # Minus at 16.16	 	
864#jal divide # Divide at 16.14  
868#subu $sp, $sp, 4 # Super at 18.9 	 
872#sw $s2, ($sp) # Super at 18.9	 
876#lw $t0, 100($sp) # IdentifierExp at 18.18 		
880#subu $sp, $sp, 8 # IdentifierExp at 18.18   
884#sw $s5, 4($sp) # IdentifierExp at 18.18		 
888#sw $t0, ($sp) # IdentifierExp at 18.18		 
892#jal printInt # Call at 18.9 	 
896#subu $sp, $sp, 4 # Super at 19.9 	 
900#sw $s2, ($sp) # Super at 19.9  	
904#subu $sp, $sp, 4 # StringLiteral at 19.18 	 
908#la $t0, strLit_89 # StringLiteral at 19.18	  
912#sw $t0, ($sp) # StringLiteral at 19.18	 
916#jal printStr # Call at 19.9 	
920#subu $sp, $sp, 4 # Super at 20.9		
924#sw $s2, ($sp) # Super at 20.9			
928#lw $t0, 92($sp) # IdentifierExp at 20.18 
932#subu $sp, $sp, 8 # IdentifierExp at 20.18		 
936#sw $s5, 4($sp) # IdentifierExp at 20.18 		
940#sw $t0, ($sp) # IdentifierExp at 20.18		
944#jal printInt # Call at 20.9	  
948#subu $sp, $sp, 4 # Super at 21.9 	
952#sw $s2, ($sp) # Super at 21.9		
956#subu $sp, $sp, 4 # StringLiteral at 21.18	  
960#la $t0, strLit_97 # StringLiteral at 21.18		 
964#sw $t0, ($sp) # StringLiteral at 21.18   
968#jal printStr # Call at 21.9	 
972#subu $sp, $sp, 4 # Super at 22.9	
976#sw $s2, ($sp) # Super at 22.9	 	
980#lw $t0, 84($sp) # IdentifierExp at 22.18	 	
984#subu $sp, $sp, 8 # IdentifierExp at 22.18  
988#sw $s5, 4($sp) # IdentifierExp at 22.18	
992#sw $t0, ($sp) # IdentifierExp at 22.18 	
996#jal printInt # Call at 22.9	 	
1000#subu $sp, $sp, 4 # Super at 23.9 	 
1004#sw $s2, ($sp) # Super at 23.9  
1008#subu $sp, $sp, 4 # StringLiteral at 23.18			
1012#la $t0, strLit_105 # StringLiteral at 23.18 	
1016#sw $t0, ($sp) # StringLiteral at 23.18  	
1020#jal printStr # Call at 23.9 
1024#subu $sp, $sp, 4 # Super at 24.9			
1028#sw $s2, ($sp) # Super at 24.9 		
1032#lw $t0, 76($sp) # IdentifierExp at 24.18			
1036#subu $sp, $sp, 8 # IdentifierExp at 24.18	
1040#sw $s5, 4($sp) # IdentifierExp at 24.18	
1044#sw $t0, ($sp) # IdentifierExp at 24.18  	
1048#jal printInt # Call at 24.9   
1052#subu $sp, $sp, 4 # Super at 25.9	
1056#sw $s2, ($sp) # Super at 25.9  
1060#subu $sp, $sp, 4 # StringLiteral at 25.18	  
1064#la $t0, strLit_113 # StringLiteral at 25.18 
1068#sw $t0, ($sp) # StringLiteral at 25.18   
1072#jal printStr # Call at 25.9		
1076#subu $sp, $sp, 4 # Super at 26.9	 	
1080#sw $s2, ($sp) # Super at 26.9	 	
1084#lw $t0, 68($sp) # IdentifierExp at 26.18 	 
1088#subu $sp, $sp, 8 # IdentifierExp at 26.18   
1092#sw $s5, 4($sp) # IdentifierExp at 26.18  	
1096#sw $t0, ($sp) # IdentifierExp at 26.18   
1100#jal printInt # Call at 26.9			
1104#subu $sp, $sp, 4 # Super at 27.9 	
1108#sw $s2, ($sp) # Super at 27.9	
1112#subu $sp, $sp, 4 # StringLiteral at 27.18	
1116#la $t0, strLit_121 # StringLiteral at 27.18 	 
1120#sw $t0, ($sp) # StringLiteral at 27.18 
1124#jal printStr # Call at 27.9	
1128#subu $sp, $sp, 4 # Super at 28.9 		
1132#sw $s2, ($sp) # Super at 28.9	
1136#lw $t0, 60($sp) # IdentifierExp at 28.18 		
1140#subu $sp, $sp, 8 # IdentifierExp at 28.18	  
1144#sw $s5, 4($sp) # IdentifierExp at 28.18			
1148#sw $t0, ($sp) # IdentifierExp at 28.18	 
1152#jal printInt # Call at 28.9	 	
1156#subu $sp, $sp, 4 # Super at 29.9  
1160#sw $s2, ($sp) # Super at 29.9	 	
1164#subu $sp, $sp, 4 # StringLiteral at 29.18 	 
1168#la $t0, strLit_129 # StringLiteral at 29.18		 
1172#sw $t0, ($sp) # StringLiteral at 29.18	  
1176#jal printStr # Call at 29.9		
1180#subu $sp, $sp, 4 # Super at 30.9	  
1184#sw $s2, ($sp) # Super at 30.9	  
1188#lw $t0, 52($sp) # IdentifierExp at 30.18 		
1192#subu $sp, $sp, 8 # IdentifierExp at 30.18 	 
1196#sw $s5, 4($sp) # IdentifierExp at 30.18	  
1200#sw $t0, ($sp) # IdentifierExp at 30.18	 	
1204#jal printInt # Call at 30.9 
1208#subu $sp, $sp, 4 # Super at 31.9 	 
1212#sw $s2, ($sp) # Super at 31.9			
1216#subu $sp, $sp, 4 # StringLiteral at 31.18  	
1220#la $t0, strLit_137 # StringLiteral at 31.18 	
1224#sw $t0, ($sp) # StringLiteral at 31.18	
1228#jal printStr # Call at 31.9	  
1232#subu $sp, $sp, 4 # Super at 32.9		 
1236#sw $s2, ($sp) # Super at 32.9  
1240#lw $t0, 44($sp) # IdentifierExp at 32.18			
1244#subu $sp, $sp, 8 # IdentifierExp at 32.18 	
1248#sw $s5, 4($sp) # IdentifierExp at 32.18  
1252#sw $t0, ($sp) # IdentifierExp at 32.18  	
1256#jal printInt # Call at 32.9	 	
1260#subu $sp, $sp, 4 # Super at 33.9	  
1264#sw $s2, ($sp) # Super at 33.9	
1268#subu $sp, $sp, 4 # StringLiteral at 33.18	
1272#la $t0, strLit_145 # StringLiteral at 33.18   
1276#sw $t0, ($sp) # StringLiteral at 33.18	 
1280#jal printStr # Call at 33.9	 	
1284#subu $sp, $sp, 4 # Super at 34.9 	
1288#sw $s2, ($sp) # Super at 34.9		
1292#lw $t0, 36($sp) # IdentifierExp at 34.18		 
1296#subu $sp, $sp, 8 # IdentifierExp at 34.18			
1300#sw $s5, 4($sp) # IdentifierExp at 34.18			
1304#sw $t0, ($sp) # IdentifierExp at 34.18  
1308#jal printInt # Call at 34.9 	 
1312#subu $sp, $sp, 4 # Super at 35.9		
1316#sw $s2, ($sp) # Super at 35.9		
1320#subu $sp, $sp, 4 # StringLiteral at 35.18  	
1324#la $t0, strLit_153 # StringLiteral at 35.18			
1328#sw $t0, ($sp) # StringLiteral at 35.18  	
1332#jal printStr # Call at 35.9			
1336#subu $sp, $sp, 4 # Super at 36.9 
1340#sw $s2, ($sp) # Super at 36.9  
1344#lw $t0, 28($sp) # IdentifierExp at 36.18 
1348#subu $sp, $sp, 8 # IdentifierExp at 36.18  	
1352#sw $s5, 4($sp) # IdentifierExp at 36.18 
1356#sw $t0, ($sp) # IdentifierExp at 36.18 		
1360#jal printInt # Call at 36.9 	 
1364#subu $sp, $sp, 4 # Super at 37.9		
1368#sw $s2, ($sp) # Super at 37.9	  
1372#subu $sp, $sp, 4 # StringLiteral at 37.18	 
1376#la $t0, strLit_161 # StringLiteral at 37.18	 	
1380#sw $t0, ($sp) # StringLiteral at 37.18 
1384#jal printStr # Call at 37.9	  
1388#subu $sp, $sp, 4 # Super at 38.9	 
1392#sw $s2, ($sp) # Super at 38.9	
1396#lw $t0, 20($sp) # IdentifierExp at 38.18	 
1400#subu $sp, $sp, 8 # IdentifierExp at 38.18	 	
1404#sw $s5, 4($sp) # IdentifierExp at 38.18		
1408#sw $t0, ($sp) # IdentifierExp at 38.18	 	
1412#jal printInt # Call at 38.9			
1416#subu $sp, $sp, 4 # Super at 39.9 
1420#sw $s2, ($sp) # Super at 39.9			
1424#subu $sp, $sp, 4 # StringLiteral at 39.18	 	
1428#la $t0, strLit_169 # StringLiteral at 39.18  	
1432#sw $t0, ($sp) # StringLiteral at 39.18		
1436#jal printStr # Call at 39.9	
1440#subu $sp, $sp, 4 # Super at 40.9			
1444#sw $s2, ($sp) # Super at 40.9		
1448#lw $t0, 12($sp) # IdentifierExp at 40.18	 
1452#subu $sp, $sp, 8 # IdentifierExp at 40.18 		
1456#sw $s5, 4($sp) # IdentifierExp at 40.18 	
1460#sw $t0, ($sp) # IdentifierExp at 40.18			
1464#jal printInt # Call at 40.9 		
1468#subu $sp, $sp, 4 # Super at 41.9		 
1472#sw $s2, ($sp) # Super at 41.9		 
1476#subu $sp, $sp, 4 # StringLiteral at 41.18	 
1480#la $t0, strLit_177 # StringLiteral at 41.18 	 
1484#sw $t0, ($sp) # StringLiteral at 41.18 		
1488#jal printStr # Call at 41.9	 	
1492#subu $sp, $sp, 4 # Super at 42.9   
1496#sw $s2, ($sp) # Super at 42.9   
1500#lw $t0, 4($sp) # IdentifierExp at 42.18	 
1504#subu $sp, $sp, 8 # IdentifierExp at 42.18	 	
1508#sw $s5, 4($sp) # IdentifierExp at 42.18 	
1512#sw $t0, ($sp) # IdentifierExp at 42.18 	 
1516#jal printInt # Call at 42.9	 	
1520#subu $sp, $sp, 4 # Super at 43.9	
1524#sw $s2, ($sp) # Super at 43.9  	
1528#subu $sp, $sp, 4 # StringLiteral at 43.18  	
1532#la $t0, strLit_185 # StringLiteral at 43.18		 
1536#sw $t0, ($sp) # StringLiteral at 43.18 	 
1540#jal printStr # Call at 43.9		 
1544#lw $ra, 108($sp) # MethodDeclVoid at 2.14	
1548#lw $s2, 4($sp) # MethodDeclVoid at 2.14	
1552#addu $sp, $sp, 116 # MethodDeclVoid at 2.14	  
1556#jr $ra # MethodDeclVoid at 2.14	  
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1560:readLine:
	
1560#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1564#	sw $ra, 4($sp) # save $ra
1568#	move $t1,$sp # save "original" sp

1572:  doRead:

	# read the character
1572#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1576#	subu $t2,$v0,13
1580#	bne $t2,$zero,notReturnRL
1584#	jal readLogicalChar
1588#	subu $t2,$v0,10 # check for newline
1592#	beq $t2,$zero,foundNewLine
1596#	sw $v0,lastCharRead # push back character into queue
1600#	j foundNewLine # go process the line

1604:  notReturnRL:

	# at this point, $v0 has our character

1604#	subu $t0,$v0,10
1608#	beq $t0,$zero,foundNewLine
1612#	blt $v0,$zero,foundEof
1613##...slt $at,$v0,$zero
1617##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1620#	subu $sp,$sp,4
1624#	sw $v0,($sp)

	# loop back up to get next character
1628#	j doRead

1632:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1632#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1636#	sw $zero,8($sp) # return-value: null
1640#	j rlReturn # return

1644:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1644#	subu $t0,$t1,$sp # number of chars we read (times 4)
1648#	srl $s6,$t0,2 # number of words on stack with chars
1652#	subu $sp,$sp,4 # push char-count ...
1656#	sw $s6,($sp) # ... onto stack
1660#	addu $t2,$t0,5 # GC tag, incl. for count-word
1664#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1668#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1672#	srl $s6,$s6,2 # data words in object
1676#	move $s7,$zero # # object words in object
1680#	jal newObject # allocate space
	
	# store header words
1684#	la $t0,CLASS_String
1688#	sw $t0,-12($s7) # store class tag (String) into object
1692#	lw $t2,4($sp) # char-count
1696#	sll $t1,$t2,2 # 4 times number of chars
1700#	subu $t2,$zero,$t2 # negative of char-count
1704#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1708#	lw $t0,-8($s7) # data words in object
1712#	sll $t0,$t0,2 # data bytes in object
1716#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1720#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1724#	addu $sp,$sp,8 # pop redundant object-pointer and count
1728#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1732#	beq $sp,$t1,doneCharCopy
1736:  charCopyLoop:
1736#	lw $t2,($sp)
1740#	sb $t2,-9($t0)
1744#	addu $sp,$sp,4
1748#	subu $t0,$t0,1
1752#	bne $sp,$t1,charCopyLoop
1756:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1756#	sw $s7,8($sp)
	
1760:  rlReturn:
	# restore return address and return
1760#	lw $ra,4($sp) # restore return address, ...
1764#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1768#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1772:readInt:

	# save $ra by pushing onto stack
1772#	subu $sp,$sp,4
1776#	sw $ra,($sp)

1780:  riSkipWhiteLoop:
	# read a character
1780#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1784#	subu $t0,$v0,32
1788#	bgt $t0,$zero,nonWhite
1789##...slt $at,$zero,$t0
1793##...bne $at,$zero,$+44
1796#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1800#	subu $t0,$v0,10
1804#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1808#	subu $t0,$v0,9
1812#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1816#	subu $t0,$v0,13
1820#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1824#	subu $t0,$v0,12
1828#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1832#	j badIntegerFormat # illegal integer char: abort program

1836:  nonWhite:
1836#	subu $t0,$v0,'-'
1840#	li $t4,1 # final multiplier
1844#	bne $t0,$zero,helpReadInt # go read
1848#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1852#	jal readLogicalChar

1856:  helpReadInt:
1856#	li $t2,10
1860#	subu $t1,$v0,'0' # convert digit to 0-9 value
1864#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1865##...sltu $at,$t1,$t2
1869##...beq $at,$zero,$+2080
1872#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1876:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1876#	jal readLogicalChar # read next character
1880#	subu $t1,$v0,'0' # convert digit to 0-9 value
1884#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1885##...sltu $at,$t1,$t2
1889##...beq $at,$zero,$+20

1892#	mul $t3,$t3,$t2 # multiply old value by 10
1893##...mult $t3,$t2
1897##...mflo $t3
1900#	addu $t3,$t3,$t1 # add in value of new digit
1904#	j digitLoop

1908:  doneDigitLoop:

	# "push back" unused character into queue
1908#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1912#	lw $ra,($sp)
1916#	mult $t3,$t4 # multiply to account for poss. minus sign
1920#	mflo $t3
1924#	sw $t3,($sp) # result
1928#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1932#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1936:readChar:

	# save $ra by pushing onto stack
1936#	subu $sp,$sp,4
1940#	sw $ra,($sp)

  	# read the character
1944#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1948#	lw $ra,($sp)
1952#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1956#	sw $v0,($sp)

	# return
1960#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1964:printStr:
	# check for null, printing "(null)", if so
1964#	lw $t0,($sp)
1968#	bne $t0,$zero,psNotNull

	# print "(null)"
1972#	la $a0,nullStr
1976#	li $v0,4
1980#	syscall
1984#	j donePrintStr
	
1988:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1988#	subu $t0,$t0,8
1992#	lw $t1,($t0) # word just beyond end of string
1996#	sll $t1,$t1,2
2000#	subu $t1,$t0,$t1 # first word in string
2004#	lw $t0,4($t0) # negative of string-length
2008#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
2012#	beq $t0,$t1,donePrintStr
2016:  psLoop:
2016#	lb $a0,($t1) # next byte
2020#	li $v0,11 # code for printing char
2024#        syscall # print the char
2028#	addu $t1,$t1,1 # go to next char
2032#	blt $t1,$t0,psLoop
2033##...slt $at,$t1,$t0
2037##...bne $at,$zero,$-20

2040:  donePrintStr:
	# pop stack and return
2040#	addu $sp,$sp,8
2044#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2048:printInt:
	# pop value off stack, along with 'this'
2048#	lw $a0,($sp)
2052#	addu $sp,$sp,12

	# print it
2056#	li $v0,1 # code for print-int
2060#	syscall

	# return
2064#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2068:printBool:
	# pop value off stack, along with 'this'
2068#	lw $t0,($sp)
2072#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2076#	la $a0,falseString
2080#	beq $t0,$zero,skipPB
2084#	la $a0,trueString
2088:  skipPB:
2088#	li $v0,4 # code for print-string
2092#	syscall

	# return
2096#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2100:substring:

	# save $ra by pushing onto stack
2100#	subu $sp,$sp,4
2104#	sw $ra,($sp)

	# get string value off stack, test for null
2108#	lw $t0,20($sp)
2112#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2116#	lw $t0,-4($t0) # negative of string length
2120#	subu $t0,$zero,$t0 # string length
2124#	lw $t1,4($sp) # k
2128#	lw $t2,12($sp) # n
2132#	bgt $zero,$t2,strIndexOutOfBounds
2133##...slt $at,$t2,$zero
2137##...bne $at,$zero,$+1780
2140#	bgt $t2,$t1,strIndexOutOfBounds
2141##...slt $at,$t1,$t2
2145##...bne $at,$zero,$+1772
2148#	bgt $t1,$t0,strIndexOutOfBounds
2149##...slt $at,$t0,$t1
2153##...bne $at,$zero,$+1764

	# allocate memory
2156#	subu $s6,$t1,$t2 # # chars in target-string
2160#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2164#	srl $s6,$s6,2 # convert bytes-count to word-count
2168#	move $s7,$zero # (no object-bytes in string)
2172#	jal newObject

	# store "String" tag in object-type field
2176#	la $t0,CLASS_String
2180#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2184#	lw $t1,8($sp) # k
2188#	lw $t2,16($sp) # n
2192#	subu $t0,$t2,$t1 # value to store
2196#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2200#	lw $t3,24($sp) # source string pointer
2204#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2208#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2212#	lw $t4,-8($t3) # # data words in source string
2216#	sll $t4,$t4,2 # # data bytes in source string
2220#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2224#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2228#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2232#	lw $t2,-8($s7) # # data words in target string
2236#	sll $t2,$t2,2 # # data bytes in target string
2240#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2244:  subCopyLoopzz:
2244#	lb $t4,-8($t3)
2248#	sb $t4,-8($t2)
2252#	addu $t2,$t2,1
2256#	addu $t3,$t3,1
2260#	blt $t3,$t1,subCopyLoopzz
2261##...slt $at,$t3,$t1
2265##...bne $at,$zero,$-20
	
2268:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2268#	lw $ra,4($sp) # restore $ra
2272#	addu $sp,$sp,24 # pop stack
	
	# return
2276#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2280:length:

	# get string pointer
2280#	lw $t0,($sp)
	
	# grow stack
2284#	subu $sp,$sp,4

	# store GC tag
2288#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2292#	lw $t0,-4($t0) # -length
2296#	subu $t0,$zero,$t0
2300#	sw $t0,($sp) #store length

	# return
2304#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2308:concat:
 	# save $ra by pushing onto stack
2308#	subu $sp,$sp,4
2312#	sw $ra($sp)

	# get string pointers and check parameter for null
2316#	lw $t0,4($sp)
2320#	beq $t0,$zero,nullPtrException
2324#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2328#	lw $t0,-4($t0) # negative size of second object
2332#	lw $t1,-4($t1) # negative size of first object
2336#	addu $s6,$t0,$t1 # sum of negative sizes
2340#	sra $s6,$s6,2 # negative word-size of char part
2344#	subu $s6,$zero,$s6 # word size of char part
2348#	addu $s6,$s6,1 # data word size, including v-table word
2352#	move $s7,$zero
2356#	jal newObject

	# store "String" tag in object-type field
2360#	la $t0,CLASS_String
2364#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2368#	lw $ra,4($sp) # return address
2372#	lw $t0,8($sp) # second object
2376#	lw $t1,12($sp) # first object
2380#	addu $sp,$sp,12 # pop
2384#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2388#	lw $t2,-4($t0) # negative length of second object
2392#	lw $t3,-4($t1) # negative length of first object
2396#	addu $t4,$t2,$t3 # sum of negative lengths
2400#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2404#	lw $t4,-8($t1) # # data words in first string
2408#	sll $t4,$t4,2 # # data bytes in first string
2412#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2416#	lw $t4,-8($s7) # # data words in new string
2420#	sll $t4,$t4,2 # # data bytes in new string
2424#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2428#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2432#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2436:  concatLoop1zz:
2436#	lb $t4,-8($t1)
2440#	sb $t4,-8($s7)
2444#	addu $s7,$s7,1
2448#	addu $t1,$t1,1
2452#	blt $t1,$t3,concatLoop1zz
2453##...slt $at,$t1,$t3
2457##...bne $at,$zero,$-20
2460:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2460#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2464#	lw $t4,-8($t0) # # data words in second string
2468#	sll $t4,$t4,2 # # data bytes in second string
2472#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2476#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2480:  concatLoop2zz:
2480#	lb $t4,-8($t1)
2484#	sb $t4,-8($s7)
2488#	addu $s7,$s7,1
2492#	addu $t1,$t1,1
2496#	blt $t1,$t3,concatLoop2zz
2497##...slt $at,$t1,$t3
2501##...bne $at,$zero,$-20
2504:  doneConcatLoop2zz:
 
2504:  concatRtnzz:
	# return
2504#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2508:charAt:
	# get string
2508#	lw $t0,8($sp)

	# check that index is in bounds
2512#	lw $t1,-4($t0) # negative of # data words in string
2516#	subu $t3,$zero,$t1 # # chars in string
2520#	lw $t2,($sp) # index
2524#	bgeu $t2,$t3,strIndexOutOfBounds
2525##...sltu $at,$t2,$t3
2529##...beq $at,$zero,$+1388

	# access element
2532#	lw $t1,-8($t0) # # data words in object
2536#	sll $t1,$t1,2 # - byte-offset from end of chars
2540#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2544#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2548#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2552#	addu $sp,$sp,4
2556#	sw $t0,($sp)
2560#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2564#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2568:intToString:

	# save return address on stack; allocate space for dummy GC tag
2568#	subu $sp,$sp,8
2572#	sw $ra,4($sp)

	# save current sp
2576#	move $t0,$sp

	# move constant 10 into $t3
2580#	li $t3,10

	# get argument, negate if negative
2584#	lw $t1,8($sp)
2588#	bge $t1,$zero,itsNonNegLoop
2589##...slt $at,$t1,$zero
2593##...beq $at,$zero,$+8
2596#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2600:  itsNonNegLoop:
2600#	divu $t1,$t3
2604#	mflo $t1 # quotient
2608#	mfhi $t4 # remainder
2612#	addu $t4,$t4,'0' # turn remainder into digit
2616#	subu $sp,$sp,4
2620#	sw $t4,($sp) # push digit onto stack
2624#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2628#	lw $t4,8($t0)
2632#	bge $t4,$zero,itsSkipNeg
2633##...slt $at,$t4,$zero
2637##...beq $at,$zero,$+16
2640#	li $t4,'-'
2644#	subu $sp,$sp,4
2648#	sw $t4,($sp)
2652:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2652#	subu $s6,$t0,$sp
2656#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2660#	sw $t3,($t0)
2664#	srl $s6,$s6,2
2668#	subu $sp,$sp,4
2672#	sw $s6,($sp)
	
	# allocate memory
2676#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2680#	srl $s6,$s6,2
2684#	move $s7,$zero # no "object" words in object
2688#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2692#	lw $t0,4($sp)
2696#	addu $sp,$sp,8

	# store "String" tag into class field
2700#	subu $s7,$s7,8 # address of header-1 word
2704#	la $t1,CLASS_String
2708#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2712#	subu $t0,$zero,$t0
2716#	sw $t0,4($s7)

2720#	lw $t1,($s7) # number of data words in string
2724#	sll $t1,$t1,2 # number data bytes in string
2728#	subu $t1,$s7,$t1 # first location to store chars in string
2732#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2736:  itsLoop:
2736#	lw $t2,($sp)
2740#	addu $sp,$sp,4
2744#	sb $t2,($t1)
2748#	addu $t1,$t1,1
2752#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2756#	lw $ra,4($sp)
2760#	addu $sp,$sp,16
2764#	addu $t0,$t0,15
2768#	and $t0,$t0,0xfffffffc
2769##...lui $at,65535
2773##...ori $at,$at,0xfffc
2777##...and $t0,$t0,$at
2780#	sw $t0,($sp)
2784#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2788:intToChar:
	# save return address
2788#	subu $sp,$sp,4
2792#	sw $ra,($sp)

	# allocate object
2796#	li $s6,2
2800#	move $s7,$zero
2804#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2808#	lw $ra,4($sp)
2812#	lw $t1,8($sp)
2816#	addu $sp,$sp,16

	# store "String" tag into class field
2820#	la $t0,CLASS_String
2824#	sw $t0,-12($s7)

	# store data in string
2828#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2832#	li $t0,-1
2836#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2840#	sw $s7,($sp)

	# return
2844#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2848:compareTo:
	# get string pointers and check parameter for null
2848#	lw $t0,($sp) # second string
2852#	beq $t0,$zero,nullPtrException
2856#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2860#	lw $t2,-4($t0) # negative length of second string
2864#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2868#	slt $t4,$t3,$t2
2872#	slt $t5,$t2,$t3
2876#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2880#	lw $t2,-8($t0) # # data words in second string
2884#	lw $t3,-8($t1) # # data words in first string
2888#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2892#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2896#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2900#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2904#	beq $zero,$t5,skipStrCmpLenzz
2908#	move $t2,$t3
2912:  skipStrCmpLenzz:
2912#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2916:  cmpLoopzz:
2916#	lw $t3,-8($t1) # word from str2
2920#	lw $t4,-8($t0) # word from str1
2924#	bne $t3,$t4,cmpNotEqualzz
2928#	addu $t1,$t1,4
2932#	addu $t0,$t0,4
2936#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2940#	j cmpHitLimitzz

2944:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2944#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2948#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2952#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2956:  cmpHitLimitzz:
2956#	sw $t5,($sp) # store value
2960#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2964#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2968:readLogicalChar:

	# check if we already have a character
2968#	lw $v0,lastCharRead
2972#	li $t0,-2
2976#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2980#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2984#	jr $ra # return
	
2988:  doReadCh:
	# we need to actually read a character: read and return
2988#	li $v0,12 # use system call to read a character
2992#	syscall
2996#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3000:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
3000#	blt $s7,$zero arraySizeOutOfBounds
3001##...slt $at,$s7,$zero
3005##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
3008#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

3012:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
3012#	move $t3,$s6
3016#	bge $t3,$zero,newSkip
3017##...slt $at,$t3,$zero
3021##...beq $at,$zero,$+8
3024#	move $t3,$zero

3028:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3028#	addu $t0,$t3,$s7
3032#	sll $t0,$t0,2
3036#	addu $t0,$t0,8 # amount of memory needed
3040#	addu $t1,$t0,$s3
3044#	bgtu $t1,$s4,doGC
3045##...sltu $at,$s4,$t1
3049##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3052#	move $t2,$s3
3056:  zeroObjLoop:
3056#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3060#	addu $s3,4
3064#	bltu $s3,$t1,zeroObjLoop
3065##...sltu $at,$s3,$t1
3069##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3072#	sll $t0,$s7,2    # number of post-header bytes
3076#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3080#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3084#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3088#	move $s7,$t0
3092#	subu $sp,$sp,4
3096#	sw $t0,($sp)

3100#	jr $ra
	
3104:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3104#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3108#	subu $sp,$sp,4
3112#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3116#	lw $t0,cur_seg
3120#	move $t7,$s4
3124#	la $t6,seg1_start
3125##...lui $t6,16
3129##...addiu $t6,$t6,4480
3132#	la $s3,seg0_start
3136#	la $s4,seg0_end
3137##...lui $s4,16
3141##...addiu $s4,$s4,4480
3144#	sw $zero,cur_seg
3148#	bne $t0,$zero,skipGc1
3152#	la $t6,seg0_start
3156#	la $s3,seg1_start
3157##...lui $s3,16
3161##...addiu $s3,$s3,4480
3164#	la $s4,seg1_end
3165##...lui $s4,32
3169##...addiu $s4,$s4,4480
3172#	sw $s5,cur_seg
3176:  skipGc1:
3176#	li $t5,-2
3180#	lw $t0,stack_bottom
3184#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3188:  gcStackCopyLoop:
3188#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3192#	sll $t2,$t1,31 # zero iff low bit was zero
3196#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3200#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3204#	bleu $t1,$t6,gcTestIterDone1
3205##...sltu $at,$t6,$t1
3209##...beq $at,$zero,$+148
3212#	bgtu $t1,$t7,gcTestIterDone1
3213##...sltu $at,$t7,$t1
3217##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3220#	lw $t2,-8($t1) # possible forwarding tag
3224#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3228#	lw $t2,-4($t1) # forwarding pointer: object's new address
3232#	sw $t2,4($t0) # update stack value
3236#	j gcTestIterDone1 # do next iteration

3240:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3240#	bge $t2,$zero,gcSkip2
3241##...slt $at,$t2,$zero
3245##...beq $at,$zero,$+8
3248#	move $t2,$zero # set to zero if -1 (number of data words)

3252:  gcSkip2:
3252#	sll $t2,$t2,2
3256#	addu $t2,$t2,8
3260#	subu $t4,$t1,$t2 # address of first word of source
3264#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3268#	bge $t3,$zero,gcH2Neg1
3269##...slt $at,$t3,$zero
3273##...beq $at,$zero,$+8
3276#	move $t3,$zero
3280:  gcH2Neg1:
3280#	sll $t3,$t3,2
3284#	addu $t3,$t3,$t1 # address one word past last word of source

3288#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3292#	lw $s0,($t4)
3296#	lw $s1,-8($t1)
3300#	sw $s1,($t4)
3304#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3308:  gCinnerCopy1:
3308#	lw $s0,($t4)
3312#	sw $s0,($s3)
3316#	addu $t4,$t4,4
3320#	addu $s3,$s3,4
3324#	bltu $t4,$t3,gCinnerCopy1
3325##...sltu $at,$t4,$t3
3329##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3332#	sw $t5,-8($t1) # -2 in first header-slot
3336#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3340#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3344#	j gcTestIterDone1

3348:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3348#	subu $t0,$t0,$t1
3352#	subu $t0,$t0,3

3356:  gcTestIterDone1:
3356#	bgeu $t0,$sp,gcStackCopyLoop
3357##...sltu $at,$t0,$sp
3361##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3364#	lw $t1,cur_seg
3368#	la $t0,seg0_start
3372#	beq $t1,$zero,gcSkip4
3376#	la $t0,seg1_start
3377##...lui $t0,16
3381##...addiu $t0,$t0,4480

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3384:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3384#	bgeu $t0,$s3,gcFinishUp
3385##...sltu $at,$t0,$s3
3389##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3392:  gcHeapCopyLoop:
	# check if we have a data array
3392#	lw $t1,($t0) # first header word for current object
3396#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3397##...slt $at,$t1,$zero
3401##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3404#	lw $t1,4($t0) # data words
3408#	addu $t1,$t1,2 # add in # header words
3412#	sll $t1,$t1,2 # convert to byte-count
3416#	addu $t0,$t0,$t1 # skip over object
3420#	j gcTestIterDone2 # go do next object, if any

3424:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3424#	sll $t2,$t1,2 # # data bytes
3428#	addu $t2,$t2,8 # to skip header word
3432#	addu $t2,$t0,$t2 # pointer to new object
3436#	lw $t3,-8($t2) # word to swap
3440#	sw $t1,-8($t2) # store header word
3444#	sw $t3,($t0) # restore first word of object

3448#	lw $t3,-4($t2) # # object words (negative treated as zero)
3452#	bge $t3,$zero,gcH2Neg2
3453##...slt $at,$t3,$zero
3457##...beq $at,$zero,$+8
3460#	move $t3,$zero
3464:  gcH2Neg2:
3464#	sll $t3,$t3,2 # # object bytes
3468#	move $t0,$t2 # address of first pointer in object
3472#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3476#	beq $t0,$s1,gcTestIterDone2
	
3480:  gcNextPointerInObject:
	# get pointer from object
3480#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3484#	bleu $t1,$t6,gcGoNextPointerSlot
3485##...sltu $at,$t6,$t1
3489##...beq $at,$zero,$+136
3492#	bgtu $t1,$t7,gcGoNextPointerSlot
3493##...sltu $at,$t7,$t1
3497##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3500#	lw $t8,-8($t1) # possible forwarding tag
3504#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3508#	lw $t8,-4($t1) # forwarding pointer: object's new address
3512#	sw $t8,($t0) # update pointer in object
3516#	j gcGoNextPointerSlot # do next iteration

3520:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3520#	bge $t8,$zero,gcSkip5
3521##...slt $at,$t8,$zero
3525##...beq $at,$zero,$+8
3528#	move $t8,$zero # set to zero if -1

3532:  gcSkip5:
3532#	sll $t8,$t8,2
3536#	addu $t8,$t8,8
3540#	subu $t4,$t1,$t8 # address of first word of source
3544#	lw $t3,-4($t1)
3548#	bge $t3,$zero,gcNoNeg
3549##...slt $at,$t3,$zero
3553##...beq $at,$zero,$+8
3556#	move $t3,$zero
3560:  gcNoNeg:
3560#	sll $t3,$t3,2
3564#	addu $t3,$t3,$t1 # address one word past last word of source

3568#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3572#	lw $s0,($t4)
3576#	lw $t9,-8($t1)
3580#	sw $t9,($t4)
3584#	sw $s0,-8($t1)

	# copy all source bytes to the target
3588:  gCinnerCopy2:
3588#	lw $s0,($t4)
3592#	sw $s0,($s3)
3596#	addu $t4,$t4,4
3600#	addu $s3,$s3,4
3604#	bltu $t4,$t3,gCinnerCopy2
3605##...sltu $at,$t4,$t3
3609##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3612#	sw $t5,-8($t1) # -2 in first header-slot
3616#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3620#	sw $t8,($t0)

3624:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3624#	addu $t0,$t0,4
3628#	bltu $t0,$s1,gcNextPointerInObject
3629##...sltu $at,$t0,$s1
3633##...bne $at,$zero,$-152

3636:  gcTestIterDone2:
3636#	bltu $t0,$s3,gcHeapCopyLoop
3637##...sltu $at,$t0,$s3
3641##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3644:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3644#	lw $s2,($sp)
3648#	addu $sp,$sp,4

	# mark us as having already GC'd
3652#	move $t5,$s5

	# go try and allocate again
3656#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3660:vm_init:

	# mark bottom of stack
3660#	sw $sp,stack_bottom
3664#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3668#	move $s2,$zero
3672#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3676#	li $s5,5
3680#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3684#	la $s3,seg0_start
3688#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3692#	la $s4,seg0_end
3693##...lui $s4,16
3697##...addiu $s4,$s4,4480
3700#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3704#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3708:divide:
	# get parameters; abort if divisor zero
3708#	lw $t0,($sp)
3712#	lw $t1,8($sp)
3716#	beq $t0,$zero,divByZeroError
	
	# perform division
3720#	div $t1,$t0
3724#	mflo $t0

	# store result, adjust stack and return
3728#	addu $sp,$sp,8 # adjust stack
3732#	sw $t0,($sp) # store result
3736#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3740:remainder:
	# get parameters; abort if divisor zero
3740#	lw $t0,($sp)
3744#	lw $t1,8($sp)
3748#	beq $t0,$zero,divByZeroError
	
	# perform division
3752#	div $t1,$t0
3756#	mfhi $t0

	# store result, adjust stack and return
3760#	addu $sp,$sp,8 # adjust stack
3764#	sw $t0,($sp) # store result
3768#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3772:checkCast:
	# get object, allow immediately if null
3772#	lw $t2,($sp)
3776#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3780#	lw $t3,-8($t2) # <= 0 if array
3784#	lw $t2,-12($t2) # vtable address (unless array)
3788#	bgt $t3,$zero,skipArrayCast
3789##...slt $at,$zero,$t3
3793##...bne $at,$zero,$+8
3796#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3800:  skipArrayCast:
3800#	bge $t2,$t1,castException
3801##...slt $at,$t2,$t1
3805##...beq $at,$zero,$+152
3808#	blt $t2,$t0,castException
3809##...slt $at,$t2,$t0
3813##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3816:  checkCastReturn:	
3816#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3820:instanceOf:
	# get object, go return false if null
3820#	lw $t2,($sp)
3824#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3828#	lw $t3,-8($t2) # <= 0 if array
3832#	lw $t2,-12($t2) # vtable address (unless array)
3836#	bgt $t3,$zero,skipArrayInstanceOf
3837##...slt $at,$zero,$t3
3841##...bne $at,$zero,$+8
3844#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3848:  skipArrayInstanceOf:
3848#	sge $t0,$t2,$t0
3849##...slt $t0,$t2,$t0
3853##...xori $t0,$t0,0x1
3856#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3860#	and $t2,$t0,$t1
3864:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3864#	sw $t2,($sp)
3868#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3872:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3872#	li $v0,4 # syscall-code for print-string
3876#	syscall
3880:exit:
	# print termination message
3880#	li $v0,4
3884#	la $a0,exitString
3888#	syscall

	# terminate execution
3892#	li $v0,10 #syscall-code for "exit"
3896#	syscall

3900:outOfHeapMemory:
3900#	la $a0,heapMemoryMsg
3904#	j exitError
3908:divByZeroError:
3908#	la $a0,divByZeroMsg
3912#	j exitError
3916:strIndexOutOfBounds:
3916#	la $a0,strIndexOutOfBoundsMsg
3920#	j exitError
3924:arrayIndexOutOfBounds:
3924#	la $a0,arrayIndexOutOfBoundsMsg
3928#	j exitError
3932:arraySizeOutOfBounds:
3932#	la $a0,arraySizeOutOfBoundsMsg
3936#	j exitError
3940:nullPtrException:
3940#	la $a0,nullPtrExceptionMsg
3944#	j exitError
3948:badIntegerFormat:
3948#	la $a0,badIntegerFormatMsg
3952#	j exitError
3956:castException:
3956#	la $a0,castExceptionMsg
3960#	j exitError

############## data section ################
	.data
	.align 2

4172:cur_seg:
	.word 0

4176:lastCharRead:
	.word -2 # -2 => no buffered character

4180:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4207:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4230:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4265:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4299:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4332:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4363:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4411:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4432:gcMsg: 
      .asciiz "\nGC!\n"

4438:nullStr:
	.asciiz "null"
4443:trueString:
	.asciiz "true"
4448:falseString:
	.asciiz "false"
4454:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4476:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4480:seg0_start:
	.space 0x100000
1053056:seg0_end:
1053056:seg1_start:
	.space 0x100000
2101632:seg1_end:



