.data # Program at 7.1	 	
5068:CLASS_Object: # ClassDecl at 0.0 	 
.word 0 # ClassDecl at 0.0	  
5072:CLASS_Lib: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0   
.word readLine # ClassDecl at 0.0 	
.word readInt # ClassDecl at 0.0   
.word readChar # ClassDecl at 0.0 	 
.word printStr # ClassDecl at 0.0 	 
.word printBool # ClassDecl at 0.0	  
.word printInt # ClassDecl at 0.0 	 
.word intToString # ClassDecl at 0.0 		
.word intToChar # ClassDecl at 0.0 	 
5108:CLASS_Main: # ClassDecl at 7.7  
.word CLASS_Lib # ClassDecl at 7.7   
.word readLine # ClassDecl at 7.7 	 
.word readInt # ClassDecl at 7.7   
.word readChar # ClassDecl at 7.7	 	
.word printStr # ClassDecl at 7.7	 
.word printBool # ClassDecl at 7.7	  
.word printInt # ClassDecl at 7.7  	
.word intToString # ClassDecl at 7.7	 	
.word intToChar # ClassDecl at 7.7   
.word fcn_193_main # ClassDecl at 7.7 	
5148:CLASS_END_Main: # ClassDecl at 7.7 
5148:CLASS_END_Lib: # ClassDecl at 0.0			
5148:CLASS_String: # ClassDecl at 0.0 	
.word CLASS_Object # ClassDecl at 0.0	 
.word concat # ClassDecl at 0.0			
.word substring # ClassDecl at 0.0 
.word length # ClassDecl at 0.0	 
.word charAt # ClassDecl at 0.0   
.word compareTo # ClassDecl at 0.0 		
5172:CLASS_END_String: # ClassDecl at 0.0   
5172:CLASS_RunMain: # ClassDecl at 0.0  	
.word CLASS_Object # ClassDecl at 0.0 		
5176:CLASS_END_RunMain: # ClassDecl at 0.0 
5176:CLASS_END_Object: # ClassDecl at 0.0		 
 .data # Program at 7.1	
  .byte 10 # StringLiteral at 43.11		 
  .byte 0 # StringLiteral at 43.11	 
  .byte 0 # StringLiteral at 43.11			
  .byte 0 # StringLiteral at 43.11			
  .word CLASS_String # StringLiteral at 43.11 	 
  .word 2 # StringLiteral at 43.11  	
  .word -1 # StringLiteral at 43.11  	
5192:strLit_189: # StringLiteral at 43.11			
  # ENTER NODE # Program at 7.1 	
  .text # Program at 7.1	 
  .globl main # Program at 7.1  
0:  main: # Program at 7.1 		
0#  jal vm_init # Program at 7.1		 
    # ENTER NODE # ExpStatement at 0.0		 
      # ENTER NODE # Call at 0.0 	
        # ENTER NODE # NewObject at 0.0	  
4#        li $s6, 1 # NewObject at 0.0 
8#        li $s7, 0 # NewObject at 0.0 		
12#        jal newObject # NewObject at 0.0   
16#        la $t0, CLASS_Main # NewObject at 0.0			
20#        sw $t0, -12($s7) # NewObject at 0.0		 
        # EXIT NODE # NewObject at 0.0	  
24#      lw $t0, 0($sp) # Call at 0.0  
28#      beq $t0, $zero, nullPtrException # Call at 0.0   
32#      lw $t0, -12($t0) # Call at 0.0	
36#      lw $t0, 36($t0) # Call at 0.0 	 
40#      jalr $t0 # Call at 0.0  
      # EXIT NODE # Call at 0.0 
    # EXIT NODE # ExpStatement at 0.0 		
44#  li $v0, 10 # Program at 7.1   
48#  syscall # Program at 7.1	  
    # ENTER NODE # MethodDeclVoid at 10.17	 
    .globl fcn_193_main # MethodDeclVoid at 10.17	 	
52:    fcn_193_main: # MethodDeclVoid at 10.17  	
52#    subu $sp, $sp, 8 # MethodDeclVoid at 10.17 		
56#    sw $ra, 4($sp) # MethodDeclVoid at 10.17	  
60#    sw $s2, ($sp) # MethodDeclVoid at 10.17 		
64#    lw $s2, 8($sp) # MethodDeclVoid at 10.17	
      # ENTER NODE # LocalVarDecl at 13.10   
        # ENTER NODE # NewArray at 13.21	 
          # ENTER NODE # IntegerLiteral at 13.29	
68#          subu $sp, $sp, 8 # IntegerLiteral at 13.29 
72#          sw $s5, 4($sp) # IntegerLiteral at 13.29	
76#          li $t0, 20 # IntegerLiteral at 13.29   
80#          sw $t0, ($sp) # IntegerLiteral at 13.29	
          # EXIT NODE # IntegerLiteral at 13.29		
84#        lw $s7, ($sp) # NewArray at 13.21	 	
88#        addu $sp, $sp, 8 # NewArray at 13.21		
92#        li $s6, 0 # NewArray at 13.21	  
96#        jal newObject # NewArray at 13.21 	
        # EXIT NODE # NewArray at 13.21	
      # EXIT NODE # LocalVarDecl at 13.10		
      # ENTER NODE # Block at 14.2 	
        # ENTER NODE # LocalVarDecl at 14.11		 
          # ENTER NODE # IntegerLiteral at 14.15			
100#          subu $sp, $sp, 8 # IntegerLiteral at 14.15 	 
104#          sw $s5, 4($sp) # IntegerLiteral at 14.15   
108#          li $t0, 0 # IntegerLiteral at 14.15 
112#          sw $t0, ($sp) # IntegerLiteral at 14.15			
          # EXIT NODE # IntegerLiteral at 14.15		
        # EXIT NODE # LocalVarDecl at 14.11  
        # ENTER NODE # While at 14.2	
116#        j while_enter_31 # While at 14.2	
120:        while_top_31: # While at 14.2	
          # ENTER NODE # Block at 14.2   
            # ENTER NODE # Block at 14.44	
              # ENTER NODE # Assign at 15.18 	
                # ENTER NODE # IdentifierExp at 15.6  
120#                lw $t0, 8($sp) # IdentifierExp at 15.6			
124#                subu $sp, $sp, 4 # IdentifierExp at 15.6 
128#                sw $t0, ($sp) # IdentifierExp at 15.6 	
                # EXIT NODE # IdentifierExp at 15.6   
                # ENTER NODE # IdentifierExp at 15.15  	
132#                lw $t0, 4($sp) # IdentifierExp at 15.15 	
136#                subu $sp, $sp, 8 # IdentifierExp at 15.15	 
140#                sw $s5, 4($sp) # IdentifierExp at 15.15 	
144#                sw $t0, ($sp) # IdentifierExp at 15.15	 
                # EXIT NODE # IdentifierExp at 15.15 
                # ENTER NODE # NewArray at 15.20	 	
                  # ENTER NODE # IntegerLiteral at 15.28  
148#                  subu $sp, $sp, 8 # IntegerLiteral at 15.28  	
152#                  sw $s5, 4($sp) # IntegerLiteral at 15.28   
156#                  li $t0, 30 # IntegerLiteral at 15.28			
160#                  sw $t0, ($sp) # IntegerLiteral at 15.28 	
                  # EXIT NODE # IntegerLiteral at 15.28		 
164#                lw $s7, ($sp) # NewArray at 15.20 
168#                addu $sp, $sp, 8 # NewArray at 15.20 
172#                li $s6, 0 # NewArray at 15.20	  
176#                jal newObject # NewArray at 15.20	 	
                # EXIT NODE # NewArray at 15.20  
180#              lw $t0, ($sp) # Assign at 15.18 	
184#              lw $t1, 12($sp) # Assign at 15.18  
188#              beq $t1, $zero, nullPtrException # Assign at 15.18			
192#              lw $t2, 4($sp) # Assign at 15.18		
196#              lw $t3, -4($t1) # Assign at 15.18	  
200#              bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 15.18  	
201##...sltu $at,$t2,$t3
205##...beq $at,$zero,$+4824
208#              sll $t2, $t2, 2 # Assign at 15.18 	
212#              addu $t2, $t2, $t1 # Assign at 15.18   
216#              sw $t0, ($t2) # Assign at 15.18	  
220#              addu $sp, $sp, 16 # Assign at 15.18 	
              # EXIT NODE # Assign at 15.18 	 
            # EXIT NODE # Block at 14.44		 
            # ENTER NODE # Assign at 14.39		 
              # ENTER NODE # Plus at 14.40		
                # ENTER NODE # IdentifierExp at 14.39 	 
224#                lw $t0, 0($sp) # IdentifierExp at 14.39	  
228#                subu $sp, $sp, 8 # IdentifierExp at 14.39  
232#                sw $s5, 4($sp) # IdentifierExp at 14.39	 
236#                sw $t0, ($sp) # IdentifierExp at 14.39 		
                # EXIT NODE # IdentifierExp at 14.39	  
                # ENTER NODE # IntegerLiteral at 14.40 	
240#                subu $sp, $sp, 8 # IntegerLiteral at 14.40 	 
244#                sw $s5, 4($sp) # IntegerLiteral at 14.40  	
248#                li $t0, 1 # IntegerLiteral at 14.40	
252#                sw $t0, ($sp) # IntegerLiteral at 14.40  
                # EXIT NODE # IntegerLiteral at 14.40		
256#              lw $t0, ($sp) # Plus at 14.40  	
260#              lw $t1, 8($sp) # Plus at 14.40	 
264#              addu $t0, $t0, $t1 # Plus at 14.40  	
268#              addu $sp, $sp, 8 # Plus at 14.40	 
272#              sw $t0, ($sp) # Plus at 14.40	 
              # EXIT NODE # Plus at 14.40 
276#            lw $t0, ($sp) # Assign at 14.39  	
280#            sw $t0, 8($sp) # Assign at 14.39  
284#            addu $sp, $sp, 8 # Assign at 14.39		
            # EXIT NODE # Assign at 14.39   
          # EXIT NODE # Block at 14.2 
288:        while_enter_31: # While at 14.2   
          # ENTER NODE # LessThan at 14.20  
            # ENTER NODE # IdentifierExp at 14.18   
288#            lw $t0, 0($sp) # IdentifierExp at 14.18  	
292#            subu $sp, $sp, 8 # IdentifierExp at 14.18 		
296#            sw $s5, 4($sp) # IdentifierExp at 14.18 	 
300#            sw $t0, ($sp) # IdentifierExp at 14.18		
            # EXIT NODE # IdentifierExp at 14.18 	 
            # ENTER NODE # ArrayLength at 14.30 	
              # ENTER NODE # IdentifierExp at 14.22 	
304#              lw $t0, 16($sp) # IdentifierExp at 14.22 
308#              subu $sp, $sp, 4 # IdentifierExp at 14.22	
312#              sw $t0, ($sp) # IdentifierExp at 14.22			
              # EXIT NODE # IdentifierExp at 14.22 		
316#            lw $t0, ($sp) # ArrayLength at 14.30	  
320#            beq $t0, $zero, nullPtrException # ArrayLength at 14.30  
324#            lw $t0, -4($t0) # ArrayLength at 14.30 	
328#            sw $s5, ($sp) # ArrayLength at 14.30		
332#            subu $sp, $sp, 4 # ArrayLength at 14.30 	
336#            sw $t0, ($sp) # ArrayLength at 14.30	
            # EXIT NODE # ArrayLength at 14.30	  
340#          lw $t0, ($sp) # LessThan at 14.20 
344#          lw $t1, 8($sp) # LessThan at 14.20  
348#          slt $t0, $t1, $t0 # LessThan at 14.20	 	
352#          addu $sp, $sp, 12 # LessThan at 14.20   
356#          sw $t0, ($sp) # LessThan at 14.20 
          # EXIT NODE # LessThan at 14.20  	
360#        lw $t0, ($sp) # While at 14.2	
364#        addu $sp, $sp, 4 # While at 14.2   
368#        bne $t0, $zero, while_top_31 # While at 14.2	 	
372:        while_exit_31: # While at 14.2 
        # EXIT NODE # While at 14.2		
372#      addu $sp, 8 # Block at 14.2	 	
      # EXIT NODE # Block at 14.2 	
      # ENTER NODE # Block at 20.2			
        # ENTER NODE # LocalVarDecl at 20.11	 	
          # ENTER NODE # IntegerLiteral at 20.15 	 
376#          subu $sp, $sp, 8 # IntegerLiteral at 20.15   
380#          sw $s5, 4($sp) # IntegerLiteral at 20.15	 
384#          li $t0, 0 # IntegerLiteral at 20.15 	 
388#          sw $t0, ($sp) # IntegerLiteral at 20.15	
          # EXIT NODE # IntegerLiteral at 20.15 	
        # EXIT NODE # LocalVarDecl at 20.11 
        # ENTER NODE # While at 20.2	
392#        j while_enter_78 # While at 20.2	 
396:        while_top_78: # While at 20.2 	 
          # ENTER NODE # Block at 20.2 		
            # ENTER NODE # Block at 20.44 	
              # ENTER NODE # Block at 21.6 	 
                # ENTER NODE # LocalVarDecl at 21.15 	 
                  # ENTER NODE # IntegerLiteral at 21.19	
396#                  subu $sp, $sp, 8 # IntegerLiteral at 21.19	  
400#                  sw $s5, 4($sp) # IntegerLiteral at 21.19 
404#                  li $t0, 0 # IntegerLiteral at 21.19 
408#                  sw $t0, ($sp) # IntegerLiteral at 21.19	  
                  # EXIT NODE # IntegerLiteral at 21.19 	
                # EXIT NODE # LocalVarDecl at 21.15	
                # ENTER NODE # While at 21.6   
412#                j while_enter_74 # While at 21.6		 
416:                while_top_74: # While at 21.6 	
                  # ENTER NODE # Block at 21.6	  
                    # ENTER NODE # Block at 21.51 		
                      # ENTER NODE # Assign at 22.18  
                        # ENTER NODE # ArrayLookup at 22.11	  
                          # ENTER NODE # IdentifierExp at 22.3 	 
416#                          lw $t0, 16($sp) # IdentifierExp at 22.3	 
420#                          subu $sp, $sp, 4 # IdentifierExp at 22.3 		
424#                          sw $t0, ($sp) # IdentifierExp at 22.3			
                          # EXIT NODE # IdentifierExp at 22.3  
                          # ENTER NODE # IdentifierExp at 22.12  
428#                          lw $t0, 12($sp) # IdentifierExp at 22.12 
432#                          subu $sp, $sp, 8 # IdentifierExp at 22.12		 
436#                          sw $s5, 4($sp) # IdentifierExp at 22.12  	
440#                          sw $t0, ($sp) # IdentifierExp at 22.12  
                          # EXIT NODE # IdentifierExp at 22.12	
444#                        lw $t0, 8($sp) # ArrayLookup at 22.11 	 
448#                        beq $t0, $zero, nullPtrException # ArrayLookup at 22.11   
452#                        lw $t1, -4($t0) # ArrayLookup at 22.11	
456#                        lw $t2, ($sp) # ArrayLookup at 22.11 		
460#                        bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 22.11	  
461##...sltu $at,$t2,$t1
465##...beq $at,$zero,$+4564
468#                        sll $t2, $t2, 2 # ArrayLookup at 22.11   
472#                        addu $t2, $t2, $t0 # ArrayLookup at 22.11   
476#                        lw $t0, ($t2) # ArrayLookup at 22.11	 
480#                        sw $t0, 8($sp) # ArrayLookup at 22.11   
484#                        addu $sp, $sp, 8 # ArrayLookup at 22.11		
                        # EXIT NODE # ArrayLookup at 22.11		
                        # ENTER NODE # IdentifierExp at 22.15  
488#                        lw $t0, 4($sp) # IdentifierExp at 22.15  
492#                        subu $sp, $sp, 8 # IdentifierExp at 22.15  	
496#                        sw $s5, 4($sp) # IdentifierExp at 22.15		 
500#                        sw $t0, ($sp) # IdentifierExp at 22.15	
                        # EXIT NODE # IdentifierExp at 22.15		 
                        # ENTER NODE # Times at 22.25  
                          # ENTER NODE # Plus at 22.22		 
                            # ENTER NODE # IdentifierExp at 22.21	  
504#                            lw $t0, 20($sp) # IdentifierExp at 22.21		
508#                            subu $sp, $sp, 8 # IdentifierExp at 22.21	  
512#                            sw $s5, 4($sp) # IdentifierExp at 22.21	  
516#                            sw $t0, ($sp) # IdentifierExp at 22.21 		
                            # EXIT NODE # IdentifierExp at 22.21 		
                            # ENTER NODE # IntegerLiteral at 22.23  
520#                            subu $sp, $sp, 8 # IntegerLiteral at 22.23			
524#                            sw $s5, 4($sp) # IntegerLiteral at 22.23	  
528#                            li $t0, 1 # IntegerLiteral at 22.23   
532#                            sw $t0, ($sp) # IntegerLiteral at 22.23	 	
                            # EXIT NODE # IntegerLiteral at 22.23  	
536#                          lw $t0, ($sp) # Plus at 22.22	 
540#                          lw $t1, 8($sp) # Plus at 22.22		
544#                          addu $t0, $t0, $t1 # Plus at 22.22	 
548#                          addu $sp, $sp, 8 # Plus at 22.22  	
552#                          sw $t0, ($sp) # Plus at 22.22 		
                          # EXIT NODE # Plus at 22.22	 	
                          # ENTER NODE # Plus at 22.28			
                            # ENTER NODE # IdentifierExp at 22.27	 
556#                            lw $t0, 20($sp) # IdentifierExp at 22.27	  
560#                            subu $sp, $sp, 8 # IdentifierExp at 22.27  	
564#                            sw $s5, 4($sp) # IdentifierExp at 22.27  	
568#                            sw $t0, ($sp) # IdentifierExp at 22.27	 	
                            # EXIT NODE # IdentifierExp at 22.27 	 
                            # ENTER NODE # IntegerLiteral at 22.29		
572#                            subu $sp, $sp, 8 # IntegerLiteral at 22.29 		
576#                            sw $s5, 4($sp) # IntegerLiteral at 22.29		 
580#                            li $t0, 1 # IntegerLiteral at 22.29  
584#                            sw $t0, ($sp) # IntegerLiteral at 22.29 	
                            # EXIT NODE # IntegerLiteral at 22.29 		
588#                          lw $t0, ($sp) # Plus at 22.28		 
592#                          lw $t1, 8($sp) # Plus at 22.28 	
596#                          addu $t0, $t0, $t1 # Plus at 22.28  
600#                          addu $sp, $sp, 8 # Plus at 22.28			
604#                          sw $t0, ($sp) # Plus at 22.28		 
                          # EXIT NODE # Plus at 22.28  
608#                        lw $t0, ($sp) # Times at 22.25		
612#                        lw $t1, 8($sp) # Times at 22.25 	 
616#                        mult $t0, $t1 # Times at 22.25  	
620#                        mflo $t0 # Times at 22.25			
624#                        addu $sp, $sp, 8 # Times at 22.25			
628#                        sw $t0, ($sp) # Times at 22.25	
                        # EXIT NODE # Times at 22.25 	 
632#                      lw $t0, ($sp) # Assign at 22.18			
636#                      lw $t1, 16($sp) # Assign at 22.18  
640#                      beq $t1, $zero, nullPtrException # Assign at 22.18		
644#                      lw $t2, 8($sp) # Assign at 22.18			
648#                      lw $t3, -4($t1) # Assign at 22.18   
652#                      bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 22.18 	 
653##...sltu $at,$t2,$t3
657##...beq $at,$zero,$+4372
660#                      sll $t2, $t2, 2 # Assign at 22.18  	
664#                      addu $t2, $t2, $t1 # Assign at 22.18   
668#                      sw $t0, ($t2) # Assign at 22.18  
672#                      addu $sp, $sp, 20 # Assign at 22.18	  
                      # EXIT NODE # Assign at 22.18	 	
                    # EXIT NODE # Block at 21.51 
                    # ENTER NODE # Assign at 21.46			
                      # ENTER NODE # Plus at 21.47		
                        # ENTER NODE # IdentifierExp at 21.46 		
676#                        lw $t0, 0($sp) # IdentifierExp at 21.46 	 
680#                        subu $sp, $sp, 8 # IdentifierExp at 21.46			
684#                        sw $s5, 4($sp) # IdentifierExp at 21.46	  
688#                        sw $t0, ($sp) # IdentifierExp at 21.46 	 
                        # EXIT NODE # IdentifierExp at 21.46  	
                        # ENTER NODE # IntegerLiteral at 21.47		 
692#                        subu $sp, $sp, 8 # IntegerLiteral at 21.47		 
696#                        sw $s5, 4($sp) # IntegerLiteral at 21.47 	
700#                        li $t0, 1 # IntegerLiteral at 21.47 	
704#                        sw $t0, ($sp) # IntegerLiteral at 21.47  	
                        # EXIT NODE # IntegerLiteral at 21.47	
708#                      lw $t0, ($sp) # Plus at 21.47	  
712#                      lw $t1, 8($sp) # Plus at 21.47  
716#                      addu $t0, $t0, $t1 # Plus at 21.47	  
720#                      addu $sp, $sp, 8 # Plus at 21.47		 
724#                      sw $t0, ($sp) # Plus at 21.47   
                      # EXIT NODE # Plus at 21.47 	 
728#                    lw $t0, ($sp) # Assign at 21.46		
732#                    sw $t0, 8($sp) # Assign at 21.46  
736#                    addu $sp, $sp, 8 # Assign at 21.46		
                    # EXIT NODE # Assign at 21.46 	 
                  # EXIT NODE # Block at 21.6 
740:                while_enter_74: # While at 21.6		 
                  # ENTER NODE # LessThan at 21.24   
                    # ENTER NODE # IdentifierExp at 21.22 
740#                    lw $t0, 0($sp) # IdentifierExp at 21.22 	
744#                    subu $sp, $sp, 8 # IdentifierExp at 21.22		
748#                    sw $s5, 4($sp) # IdentifierExp at 21.22 	
752#                    sw $t0, ($sp) # IdentifierExp at 21.22   
                    # EXIT NODE # IdentifierExp at 21.22	
                    # ENTER NODE # ArrayLength at 21.37   
                      # ENTER NODE # ArrayLookup at 21.34 	
                        # ENTER NODE # IdentifierExp at 21.26		 
756#                        lw $t0, 24($sp) # IdentifierExp at 21.26 		
760#                        subu $sp, $sp, 4 # IdentifierExp at 21.26	
764#                        sw $t0, ($sp) # IdentifierExp at 21.26	 	
                        # EXIT NODE # IdentifierExp at 21.26		
                        # ENTER NODE # IdentifierExp at 21.35  	
768#                        lw $t0, 20($sp) # IdentifierExp at 21.35	 	
772#                        subu $sp, $sp, 8 # IdentifierExp at 21.35	 
776#                        sw $s5, 4($sp) # IdentifierExp at 21.35 	 
780#                        sw $t0, ($sp) # IdentifierExp at 21.35	
                        # EXIT NODE # IdentifierExp at 21.35   
784#                      lw $t0, 8($sp) # ArrayLookup at 21.34			
788#                      beq $t0, $zero, nullPtrException # ArrayLookup at 21.34 		
792#                      lw $t1, -4($t0) # ArrayLookup at 21.34 
796#                      lw $t2, ($sp) # ArrayLookup at 21.34			
800#                      bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 21.34	  
801##...sltu $at,$t2,$t1
805##...beq $at,$zero,$+4224
808#                      sll $t2, $t2, 2 # ArrayLookup at 21.34		
812#                      addu $t2, $t2, $t0 # ArrayLookup at 21.34	 	
816#                      lw $t0, ($t2) # ArrayLookup at 21.34 		
820#                      sw $t0, 8($sp) # ArrayLookup at 21.34	
824#                      addu $sp, $sp, 8 # ArrayLookup at 21.34		 
                      # EXIT NODE # ArrayLookup at 21.34 	
828#                    lw $t0, ($sp) # ArrayLength at 21.37	  
832#                    beq $t0, $zero, nullPtrException # ArrayLength at 21.37  
836#                    lw $t0, -4($t0) # ArrayLength at 21.37 	 
840#                    sw $s5, ($sp) # ArrayLength at 21.37	
844#                    subu $sp, $sp, 4 # ArrayLength at 21.37 	
848#                    sw $t0, ($sp) # ArrayLength at 21.37  	
                    # EXIT NODE # ArrayLength at 21.37		 
852#                  lw $t0, ($sp) # LessThan at 21.24 	 
856#                  lw $t1, 8($sp) # LessThan at 21.24 	 
860#                  slt $t0, $t1, $t0 # LessThan at 21.24	
864#                  addu $sp, $sp, 12 # LessThan at 21.24   
868#                  sw $t0, ($sp) # LessThan at 21.24   
                  # EXIT NODE # LessThan at 21.24	
872#                lw $t0, ($sp) # While at 21.6 	
876#                addu $sp, $sp, 4 # While at 21.6 	
880#                bne $t0, $zero, while_top_74 # While at 21.6	
884:                while_exit_74: # While at 21.6 		
                # EXIT NODE # While at 21.6	
884#              addu $sp, 8 # Block at 21.6 	
              # EXIT NODE # Block at 21.6	 
            # EXIT NODE # Block at 20.44			
            # ENTER NODE # Assign at 20.39  	
              # ENTER NODE # Plus at 20.40 		
                # ENTER NODE # IdentifierExp at 20.39   
888#                lw $t0, 0($sp) # IdentifierExp at 20.39	
892#                subu $sp, $sp, 8 # IdentifierExp at 20.39	 	
896#                sw $s5, 4($sp) # IdentifierExp at 20.39 	
900#                sw $t0, ($sp) # IdentifierExp at 20.39	  
                # EXIT NODE # IdentifierExp at 20.39	 
                # ENTER NODE # IntegerLiteral at 20.40	 	
904#                subu $sp, $sp, 8 # IntegerLiteral at 20.40 	
908#                sw $s5, 4($sp) # IntegerLiteral at 20.40 
912#                li $t0, 1 # IntegerLiteral at 20.40  	
916#                sw $t0, ($sp) # IntegerLiteral at 20.40	  
                # EXIT NODE # IntegerLiteral at 20.40 	 
920#              lw $t0, ($sp) # Plus at 20.40  	
924#              lw $t1, 8($sp) # Plus at 20.40  
928#              addu $t0, $t0, $t1 # Plus at 20.40	 	
932#              addu $sp, $sp, 8 # Plus at 20.40	 
936#              sw $t0, ($sp) # Plus at 20.40 	
              # EXIT NODE # Plus at 20.40			
940#            lw $t0, ($sp) # Assign at 20.39	  
944#            sw $t0, 8($sp) # Assign at 20.39			
948#            addu $sp, $sp, 8 # Assign at 20.39		
            # EXIT NODE # Assign at 20.39		 
          # EXIT NODE # Block at 20.2 		
952:        while_enter_78: # While at 20.2 
          # ENTER NODE # LessThan at 20.20	 	
            # ENTER NODE # IdentifierExp at 20.18 	 
952#            lw $t0, 0($sp) # IdentifierExp at 20.18 
956#            subu $sp, $sp, 8 # IdentifierExp at 20.18 
960#            sw $s5, 4($sp) # IdentifierExp at 20.18 	 
964#            sw $t0, ($sp) # IdentifierExp at 20.18 	 
            # EXIT NODE # IdentifierExp at 20.18		 
            # ENTER NODE # ArrayLength at 20.30		
              # ENTER NODE # IdentifierExp at 20.22 	 
968#              lw $t0, 16($sp) # IdentifierExp at 20.22		 
972#              subu $sp, $sp, 4 # IdentifierExp at 20.22 		
976#              sw $t0, ($sp) # IdentifierExp at 20.22		
              # EXIT NODE # IdentifierExp at 20.22  	
980#            lw $t0, ($sp) # ArrayLength at 20.30  	
984#            beq $t0, $zero, nullPtrException # ArrayLength at 20.30  	
988#            lw $t0, -4($t0) # ArrayLength at 20.30			
992#            sw $s5, ($sp) # ArrayLength at 20.30	
996#            subu $sp, $sp, 4 # ArrayLength at 20.30 
1000#            sw $t0, ($sp) # ArrayLength at 20.30  
            # EXIT NODE # ArrayLength at 20.30 	
1004#          lw $t0, ($sp) # LessThan at 20.20		
1008#          lw $t1, 8($sp) # LessThan at 20.20 	 
1012#          slt $t0, $t1, $t0 # LessThan at 20.20   
1016#          addu $sp, $sp, 12 # LessThan at 20.20 	
1020#          sw $t0, ($sp) # LessThan at 20.20 
          # EXIT NODE # LessThan at 20.20	
1024#        lw $t0, ($sp) # While at 20.2			
1028#        addu $sp, $sp, 4 # While at 20.2  
1032#        bne $t0, $zero, while_top_78 # While at 20.2   
1036:        while_exit_78: # While at 20.2		
        # EXIT NODE # While at 20.2  
1036#      addu $sp, 8 # Block at 20.2	  
      # EXIT NODE # Block at 20.2 	 
      # ENTER NODE # Block at 27.2 		
        # ENTER NODE # LocalVarDecl at 27.11 	
          # ENTER NODE # IntegerLiteral at 27.15			
1040#          subu $sp, $sp, 8 # IntegerLiteral at 27.15  
1044#          sw $s5, 4($sp) # IntegerLiteral at 27.15	 
1048#          li $t0, 0 # IntegerLiteral at 27.15 
1052#          sw $t0, ($sp) # IntegerLiteral at 27.15	 
          # EXIT NODE # IntegerLiteral at 27.15			
        # EXIT NODE # LocalVarDecl at 27.11  
        # ENTER NODE # While at 27.2  
1056#        j while_enter_137 # While at 27.2 
1060:        while_top_137: # While at 27.2 
          # ENTER NODE # Block at 27.2		 
            # ENTER NODE # Block at 27.44		 
              # ENTER NODE # Block at 28.6  	
                # ENTER NODE # LocalVarDecl at 28.15	 	
                  # ENTER NODE # IntegerLiteral at 28.19  
1060#                  subu $sp, $sp, 8 # IntegerLiteral at 28.19 	 
1064#                  sw $s5, 4($sp) # IntegerLiteral at 28.19 	
1068#                  li $t0, 0 # IntegerLiteral at 28.19 
1072#                  sw $t0, ($sp) # IntegerLiteral at 28.19  	
                  # EXIT NODE # IntegerLiteral at 28.19		 
                # EXIT NODE # LocalVarDecl at 28.15	 
                # ENTER NODE # While at 28.6  	
1076#                j while_enter_133 # While at 28.6 
1080:                while_top_133: # While at 28.6 	 
                  # ENTER NODE # Block at 28.6 
                    # ENTER NODE # Block at 28.51 
                      # ENTER NODE # If at 29.3	
                        # ENTER NODE # Equals at 29.26			
                          # ENTER NODE # Remainder at 29.22	  
                            # ENTER NODE # ArrayLookup at 29.18		
                              # ENTER NODE # ArrayLookup at 29.15	 
                                # ENTER NODE # IdentifierExp at 29.7			
1080#                                lw $t0, 16($sp) # IdentifierExp at 29.7	  
1084#                                subu $sp, $sp, 4 # IdentifierExp at 29.7 	
1088#                                sw $t0, ($sp) # IdentifierExp at 29.7   
                                # EXIT NODE # IdentifierExp at 29.7 
                                # ENTER NODE # IdentifierExp at 29.16   
1092#                                lw $t0, 12($sp) # IdentifierExp at 29.16  	
1096#                                subu $sp, $sp, 8 # IdentifierExp at 29.16	 
1100#                                sw $s5, 4($sp) # IdentifierExp at 29.16 		
1104#                                sw $t0, ($sp) # IdentifierExp at 29.16  
                                # EXIT NODE # IdentifierExp at 29.16 	 
1108#                              lw $t0, 8($sp) # ArrayLookup at 29.15 
1112#                              beq $t0, $zero, nullPtrException # ArrayLookup at 29.15	
1116#                              lw $t1, -4($t0) # ArrayLookup at 29.15	 	
1120#                              lw $t2, ($sp) # ArrayLookup at 29.15	 
1124#                              bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 29.15  	
1125##...sltu $at,$t2,$t1
1129##...beq $at,$zero,$+3900
1132#                              sll $t2, $t2, 2 # ArrayLookup at 29.15	
1136#                              addu $t2, $t2, $t0 # ArrayLookup at 29.15 		
1140#                              lw $t0, ($t2) # ArrayLookup at 29.15	
1144#                              sw $t0, 8($sp) # ArrayLookup at 29.15  	
1148#                              addu $sp, $sp, 8 # ArrayLookup at 29.15  
                              # EXIT NODE # ArrayLookup at 29.15	 	
                              # ENTER NODE # IdentifierExp at 29.19  
1152#                              lw $t0, 4($sp) # IdentifierExp at 29.19 	
1156#                              subu $sp, $sp, 8 # IdentifierExp at 29.19  	
1160#                              sw $s5, 4($sp) # IdentifierExp at 29.19		 
1164#                              sw $t0, ($sp) # IdentifierExp at 29.19 	 
                              # EXIT NODE # IdentifierExp at 29.19		 
1168#                            lw $t0, 8($sp) # ArrayLookup at 29.18	 
1172#                            beq $t0, $zero, nullPtrException # ArrayLookup at 29.18 	
1176#                            lw $t1, -4($t0) # ArrayLookup at 29.18			
1180#                            lw $t2, ($sp) # ArrayLookup at 29.18  	
1184#                            bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 29.18 	
1185##...sltu $at,$t2,$t1
1189##...beq $at,$zero,$+3840
1192#                            sll $t2, $t2, 2 # ArrayLookup at 29.18		 
1196#                            addu $t2, $t2, $t0 # ArrayLookup at 29.18 		
1200#                            lw $t0, ($t2) # ArrayLookup at 29.18	  
1204#                            sw $t0, 4($sp) # ArrayLookup at 29.18	
1208#                            sw $s5, 8($sp) # ArrayLookup at 29.18 	 
1212#                            addu $sp, $sp, 4 # ArrayLookup at 29.18			
                            # EXIT NODE # ArrayLookup at 29.18 		
                            # ENTER NODE # IntegerLiteral at 29.24  
1216#                            subu $sp, $sp, 8 # IntegerLiteral at 29.24	  
1220#                            sw $s5, 4($sp) # IntegerLiteral at 29.24  	
1224#                            li $t0, 2 # IntegerLiteral at 29.24	  
1228#                            sw $t0, ($sp) # IntegerLiteral at 29.24 
                            # EXIT NODE # IntegerLiteral at 29.24			
1232#                          jal remainder # Remainder at 29.22 	
                          # EXIT NODE # Remainder at 29.22  	
                          # ENTER NODE # IntegerLiteral at 29.29		
1236#                          subu $sp, $sp, 8 # IntegerLiteral at 29.29 
1240#                          sw $s5, 4($sp) # IntegerLiteral at 29.29	 	
1244#                          li $t0, 1 # IntegerLiteral at 29.29		
1248#                          sw $t0, ($sp) # IntegerLiteral at 29.29 	
                          # EXIT NODE # IntegerLiteral at 29.29 	 
1252#                        lw $t0, ($sp) # Equals at 29.26 	
1256#                        lw $t1, 8($sp) # Equals at 29.26 
1260#                        seq $t0, $t0, $t1 # Equals at 29.26 		
1261##...subu $at,$t0,$t1
1265##...sltiu $t0,$at,1
1268#                        addu $sp, $sp, 12 # Equals at 29.26 	 
1272#                        sw $t0, ($sp) # Equals at 29.26  	
                        # EXIT NODE # Equals at 29.26		
1276#                      lw $t0, ($sp) # If at 29.3   
1280#                      addu $sp, $sp, 4 # If at 29.3 	
1284#                      beq $t0, $zero, if_else_130 # If at 29.3 	
                        # ENTER NODE # Block at 29.32   
                          # ENTER NODE # Assign at 30.22 
                            # ENTER NODE # ArrayLookup at 30.15 		
                              # ENTER NODE # IdentifierExp at 30.7		
1288#                              lw $t0, 16($sp) # IdentifierExp at 30.7		 
1292#                              subu $sp, $sp, 4 # IdentifierExp at 30.7 		
1296#                              sw $t0, ($sp) # IdentifierExp at 30.7 
                              # EXIT NODE # IdentifierExp at 30.7			
                              # ENTER NODE # IdentifierExp at 30.16		 
1300#                              lw $t0, 12($sp) # IdentifierExp at 30.16	 	
1304#                              subu $sp, $sp, 8 # IdentifierExp at 30.16		
1308#                              sw $s5, 4($sp) # IdentifierExp at 30.16  
1312#                              sw $t0, ($sp) # IdentifierExp at 30.16   
                              # EXIT NODE # IdentifierExp at 30.16	 	
1316#                            lw $t0, 8($sp) # ArrayLookup at 30.15			
1320#                            beq $t0, $zero, nullPtrException # ArrayLookup at 30.15 
1324#                            lw $t1, -4($t0) # ArrayLookup at 30.15   
1328#                            lw $t2, ($sp) # ArrayLookup at 30.15 	
1332#                            bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 30.15  	
1333##...sltu $at,$t2,$t1
1337##...beq $at,$zero,$+3692
1340#                            sll $t2, $t2, 2 # ArrayLookup at 30.15			
1344#                            addu $t2, $t2, $t0 # ArrayLookup at 30.15		
1348#                            lw $t0, ($t2) # ArrayLookup at 30.15	  
1352#                            sw $t0, 8($sp) # ArrayLookup at 30.15 		
1356#                            addu $sp, $sp, 8 # ArrayLookup at 30.15  	
                            # EXIT NODE # ArrayLookup at 30.15		 
                            # ENTER NODE # IdentifierExp at 30.19 		
1360#                            lw $t0, 4($sp) # IdentifierExp at 30.19	 
1364#                            subu $sp, $sp, 8 # IdentifierExp at 30.19 	
1368#                            sw $s5, 4($sp) # IdentifierExp at 30.19  
1372#                            sw $t0, ($sp) # IdentifierExp at 30.19		
                            # EXIT NODE # IdentifierExp at 30.19   
                            # ENTER NODE # Minus at 30.24 	
                              # ENTER NODE # IntegerLiteral at 30.24		
1376#                              subu $sp, $sp, 8 # IntegerLiteral at 30.24 	 
1380#                              sw $s5, 4($sp) # IntegerLiteral at 30.24	 	
1384#                              li $t0, 0 # IntegerLiteral at 30.24  	
1388#                              sw $t0, ($sp) # IntegerLiteral at 30.24	 
                              # EXIT NODE # IntegerLiteral at 30.24	 	
                              # ENTER NODE # ArrayLookup at 30.36  
                                # ENTER NODE # ArrayLookup at 30.33		 
                                  # ENTER NODE # IdentifierExp at 30.25		 
1392#                                  lw $t0, 36($sp) # IdentifierExp at 30.25			
1396#                                  subu $sp, $sp, 4 # IdentifierExp at 30.25	
1400#                                  sw $t0, ($sp) # IdentifierExp at 30.25	 
                                  # EXIT NODE # IdentifierExp at 30.25   
                                  # ENTER NODE # IdentifierExp at 30.34   
1404#                                  lw $t0, 32($sp) # IdentifierExp at 30.34	 
1408#                                  subu $sp, $sp, 8 # IdentifierExp at 30.34		 
1412#                                  sw $s5, 4($sp) # IdentifierExp at 30.34  
1416#                                  sw $t0, ($sp) # IdentifierExp at 30.34   
                                  # EXIT NODE # IdentifierExp at 30.34  	
1420#                                lw $t0, 8($sp) # ArrayLookup at 30.33 
1424#                                beq $t0, $zero, nullPtrException # ArrayLookup at 30.33 	 
1428#                                lw $t1, -4($t0) # ArrayLookup at 30.33 	
1432#                                lw $t2, ($sp) # ArrayLookup at 30.33 	
1436#                                bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 30.33	 	
1437##...sltu $at,$t2,$t1
1441##...beq $at,$zero,$+3588
1444#                                sll $t2, $t2, 2 # ArrayLookup at 30.33		
1448#                                addu $t2, $t2, $t0 # ArrayLookup at 30.33 	
1452#                                lw $t0, ($t2) # ArrayLookup at 30.33 		
1456#                                sw $t0, 8($sp) # ArrayLookup at 30.33   
1460#                                addu $sp, $sp, 8 # ArrayLookup at 30.33		 
                                # EXIT NODE # ArrayLookup at 30.33	 
                                # ENTER NODE # IdentifierExp at 30.37   
1464#                                lw $t0, 24($sp) # IdentifierExp at 30.37	 	
1468#                                subu $sp, $sp, 8 # IdentifierExp at 30.37	  
1472#                                sw $s5, 4($sp) # IdentifierExp at 30.37 		
1476#                                sw $t0, ($sp) # IdentifierExp at 30.37			
                                # EXIT NODE # IdentifierExp at 30.37	  
1480#                              lw $t0, 8($sp) # ArrayLookup at 30.36 	
1484#                              beq $t0, $zero, nullPtrException # ArrayLookup at 30.36	  
1488#                              lw $t1, -4($t0) # ArrayLookup at 30.36 		
1492#                              lw $t2, ($sp) # ArrayLookup at 30.36 	 
1496#                              bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 30.36 	
1497##...sltu $at,$t2,$t1
1501##...beq $at,$zero,$+3528
1504#                              sll $t2, $t2, 2 # ArrayLookup at 30.36 		
1508#                              addu $t2, $t2, $t0 # ArrayLookup at 30.36  
1512#                              lw $t0, ($t2) # ArrayLookup at 30.36 	 
1516#                              sw $t0, 4($sp) # ArrayLookup at 30.36	
1520#                              sw $s5, 8($sp) # ArrayLookup at 30.36		 
1524#                              addu $sp, $sp, 4 # ArrayLookup at 30.36	 	
                              # EXIT NODE # ArrayLookup at 30.36  
1528#                            lw $t0, ($sp) # Minus at 30.24 		
1532#                            lw $t1, 8($sp) # Minus at 30.24	 	
1536#                            subu $t0, $t1, $t0 # Minus at 30.24	  
1540#                            addu $sp, $sp, 8 # Minus at 30.24 	
1544#                            sw $t0, ($sp) # Minus at 30.24	  
                              # ENTER NODE # Minus at 30.24	 
1548#                              lw $t0, ($sp) # Assign at 30.22	  
1552#                              lw $t1, 16($sp) # Assign at 30.22	 
1556#                              beq $t1, $zero, nullPtrException # Assign at 30.22	 
1560#                              lw $t2, 8($sp) # Assign at 30.22  	
1564#                              lw $t3, -4($t1) # Assign at 30.22  
1568#                              bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 30.22  
1569##...sltu $at,$t2,$t3
1573##...beq $at,$zero,$+3456
1576#                              sll $t2, $t2, 2 # Assign at 30.22	  
1580#                              addu $t2, $t2, $t1 # Assign at 30.22   
1584#                              sw $t0, ($t2) # Assign at 30.22 		
1588#                              addu $sp, $sp, 20 # Assign at 30.22   
                              # EXIT NODE # Assign at 30.22   
                            # EXIT NODE # Block at 29.32	 
1592#                          j if_done_130 # If at 29.3		 
1596:                          if_else_130: # If at 29.3 
                            # ENTER NODE # Block at 32.6		 
                            # EXIT NODE # Block at 32.6	
1596:                          if_done_130: # If at 29.3 	
                          # EXIT NODE # If at 29.3  	
                        # EXIT NODE # Block at 28.51 
                        # ENTER NODE # Assign at 28.46			
                          # ENTER NODE # Plus at 28.47   
                            # ENTER NODE # IdentifierExp at 28.46	
1596#                            lw $t0, 0($sp) # IdentifierExp at 28.46 	 
1600#                            subu $sp, $sp, 8 # IdentifierExp at 28.46  
1604#                            sw $s5, 4($sp) # IdentifierExp at 28.46	 	
1608#                            sw $t0, ($sp) # IdentifierExp at 28.46	 	
                            # EXIT NODE # IdentifierExp at 28.46  
                            # ENTER NODE # IntegerLiteral at 28.47 		
1612#                            subu $sp, $sp, 8 # IntegerLiteral at 28.47	 	
1616#                            sw $s5, 4($sp) # IntegerLiteral at 28.47  	
1620#                            li $t0, 1 # IntegerLiteral at 28.47	 	
1624#                            sw $t0, ($sp) # IntegerLiteral at 28.47 	
                            # EXIT NODE # IntegerLiteral at 28.47 	 
1628#                          lw $t0, ($sp) # Plus at 28.47		
1632#                          lw $t1, 8($sp) # Plus at 28.47		 
1636#                          addu $t0, $t0, $t1 # Plus at 28.47	 	
1640#                          addu $sp, $sp, 8 # Plus at 28.47   
1644#                          sw $t0, ($sp) # Plus at 28.47 	
                          # EXIT NODE # Plus at 28.47 	
1648#                        lw $t0, ($sp) # Assign at 28.46  	
1652#                        sw $t0, 8($sp) # Assign at 28.46 	 
1656#                        addu $sp, $sp, 8 # Assign at 28.46	
                        # EXIT NODE # Assign at 28.46	 	
                      # EXIT NODE # Block at 28.6	
1660:                    while_enter_133: # While at 28.6	 
                      # ENTER NODE # LessThan at 28.24   
                        # ENTER NODE # IdentifierExp at 28.22	
1660#                        lw $t0, 0($sp) # IdentifierExp at 28.22 		
1664#                        subu $sp, $sp, 8 # IdentifierExp at 28.22   
1668#                        sw $s5, 4($sp) # IdentifierExp at 28.22	
1672#                        sw $t0, ($sp) # IdentifierExp at 28.22   
                        # EXIT NODE # IdentifierExp at 28.22		 
                        # ENTER NODE # ArrayLength at 28.37		 
                          # ENTER NODE # ArrayLookup at 28.34	  
                            # ENTER NODE # IdentifierExp at 28.26 	 
1676#                            lw $t0, 24($sp) # IdentifierExp at 28.26		 
1680#                            subu $sp, $sp, 4 # IdentifierExp at 28.26 		
1684#                            sw $t0, ($sp) # IdentifierExp at 28.26  	
                            # EXIT NODE # IdentifierExp at 28.26	 
                            # ENTER NODE # IdentifierExp at 28.35		
1688#                            lw $t0, 20($sp) # IdentifierExp at 28.35		 
1692#                            subu $sp, $sp, 8 # IdentifierExp at 28.35			
1696#                            sw $s5, 4($sp) # IdentifierExp at 28.35	 
1700#                            sw $t0, ($sp) # IdentifierExp at 28.35 	 
                            # EXIT NODE # IdentifierExp at 28.35 		
1704#                          lw $t0, 8($sp) # ArrayLookup at 28.34	 
1708#                          beq $t0, $zero, nullPtrException # ArrayLookup at 28.34		
1712#                          lw $t1, -4($t0) # ArrayLookup at 28.34   
1716#                          lw $t2, ($sp) # ArrayLookup at 28.34			
1720#                          bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 28.34 	 
1721##...sltu $at,$t2,$t1
1725##...beq $at,$zero,$+3304
1728#                          sll $t2, $t2, 2 # ArrayLookup at 28.34 
1732#                          addu $t2, $t2, $t0 # ArrayLookup at 28.34 	
1736#                          lw $t0, ($t2) # ArrayLookup at 28.34 	
1740#                          sw $t0, 8($sp) # ArrayLookup at 28.34		 
1744#                          addu $sp, $sp, 8 # ArrayLookup at 28.34	 	
                          # EXIT NODE # ArrayLookup at 28.34 	
1748#                        lw $t0, ($sp) # ArrayLength at 28.37	 	
1752#                        beq $t0, $zero, nullPtrException # ArrayLength at 28.37  
1756#                        lw $t0, -4($t0) # ArrayLength at 28.37	
1760#                        sw $s5, ($sp) # ArrayLength at 28.37 
1764#                        subu $sp, $sp, 4 # ArrayLength at 28.37		
1768#                        sw $t0, ($sp) # ArrayLength at 28.37	 
                        # EXIT NODE # ArrayLength at 28.37   
1772#                      lw $t0, ($sp) # LessThan at 28.24 	 
1776#                      lw $t1, 8($sp) # LessThan at 28.24	 
1780#                      slt $t0, $t1, $t0 # LessThan at 28.24	
1784#                      addu $sp, $sp, 12 # LessThan at 28.24 		
1788#                      sw $t0, ($sp) # LessThan at 28.24			
                      # EXIT NODE # LessThan at 28.24	 
1792#                    lw $t0, ($sp) # While at 28.6   
1796#                    addu $sp, $sp, 4 # While at 28.6	  
1800#                    bne $t0, $zero, while_top_133 # While at 28.6		
1804:                    while_exit_133: # While at 28.6		
                    # EXIT NODE # While at 28.6	
1804#                  addu $sp, 8 # Block at 28.6	 	
                  # EXIT NODE # Block at 28.6		
                # EXIT NODE # Block at 27.44  	
                # ENTER NODE # Assign at 27.39			
                  # ENTER NODE # Plus at 27.40	 	
                    # ENTER NODE # IdentifierExp at 27.39 
1808#                    lw $t0, 0($sp) # IdentifierExp at 27.39		 
1812#                    subu $sp, $sp, 8 # IdentifierExp at 27.39	  
1816#                    sw $s5, 4($sp) # IdentifierExp at 27.39	
1820#                    sw $t0, ($sp) # IdentifierExp at 27.39 	
                    # EXIT NODE # IdentifierExp at 27.39  
                    # ENTER NODE # IntegerLiteral at 27.40  
1824#                    subu $sp, $sp, 8 # IntegerLiteral at 27.40	 	
1828#                    sw $s5, 4($sp) # IntegerLiteral at 27.40		 
1832#                    li $t0, 1 # IntegerLiteral at 27.40	
1836#                    sw $t0, ($sp) # IntegerLiteral at 27.40	
                    # EXIT NODE # IntegerLiteral at 27.40	 
1840#                  lw $t0, ($sp) # Plus at 27.40  
1844#                  lw $t1, 8($sp) # Plus at 27.40	
1848#                  addu $t0, $t0, $t1 # Plus at 27.40   
1852#                  addu $sp, $sp, 8 # Plus at 27.40	 	
1856#                  sw $t0, ($sp) # Plus at 27.40   
                  # EXIT NODE # Plus at 27.40   
1860#                lw $t0, ($sp) # Assign at 27.39   
1864#                sw $t0, 8($sp) # Assign at 27.39			
1868#                addu $sp, $sp, 8 # Assign at 27.39   
                # EXIT NODE # Assign at 27.39	 
              # EXIT NODE # Block at 27.2 		
1872:            while_enter_137: # While at 27.2 	 
              # ENTER NODE # LessThan at 27.20	
                # ENTER NODE # IdentifierExp at 27.18 	
1872#                lw $t0, 0($sp) # IdentifierExp at 27.18  
1876#                subu $sp, $sp, 8 # IdentifierExp at 27.18	 
1880#                sw $s5, 4($sp) # IdentifierExp at 27.18	 
1884#                sw $t0, ($sp) # IdentifierExp at 27.18 	
                # EXIT NODE # IdentifierExp at 27.18	 	
                # ENTER NODE # ArrayLength at 27.30	
                  # ENTER NODE # IdentifierExp at 27.22	 	
1888#                  lw $t0, 16($sp) # IdentifierExp at 27.22	 
1892#                  subu $sp, $sp, 4 # IdentifierExp at 27.22 	
1896#                  sw $t0, ($sp) # IdentifierExp at 27.22  	
                  # EXIT NODE # IdentifierExp at 27.22	 	
1900#                lw $t0, ($sp) # ArrayLength at 27.30		
1904#                beq $t0, $zero, nullPtrException # ArrayLength at 27.30 		
1908#                lw $t0, -4($t0) # ArrayLength at 27.30 		
1912#                sw $s5, ($sp) # ArrayLength at 27.30 	
1916#                subu $sp, $sp, 4 # ArrayLength at 27.30  
1920#                sw $t0, ($sp) # ArrayLength at 27.30  
                # EXIT NODE # ArrayLength at 27.30		 
1924#              lw $t0, ($sp) # LessThan at 27.20   
1928#              lw $t1, 8($sp) # LessThan at 27.20   
1932#              slt $t0, $t1, $t0 # LessThan at 27.20 	 
1936#              addu $sp, $sp, 12 # LessThan at 27.20	 	
1940#              sw $t0, ($sp) # LessThan at 27.20 		
              # EXIT NODE # LessThan at 27.20	
1944#            lw $t0, ($sp) # While at 27.2			
1948#            addu $sp, $sp, 4 # While at 27.2 		
1952#            bne $t0, $zero, while_top_137 # While at 27.2	
1956:            while_exit_137: # While at 27.2 		
            # EXIT NODE # While at 27.2			
1956#          addu $sp, 8 # Block at 27.2		 
          # EXIT NODE # Block at 27.2   
          # ENTER NODE # LocalVarDecl at 36.6 		
            # ENTER NODE # IntegerLiteral at 36.12	 	
1960#            subu $sp, $sp, 8 # IntegerLiteral at 36.12		
1964#            sw $s5, 4($sp) # IntegerLiteral at 36.12 	
1968#            li $t0, 0 # IntegerLiteral at 36.12		
1972#            sw $t0, ($sp) # IntegerLiteral at 36.12	
            # EXIT NODE # IntegerLiteral at 36.12	 
          # EXIT NODE # LocalVarDecl at 36.6 	 
          # ENTER NODE # Block at 37.2	 
            # ENTER NODE # LocalVarDecl at 37.11 	 
              # ENTER NODE # IntegerLiteral at 37.15	  
1976#              subu $sp, $sp, 8 # IntegerLiteral at 37.15	
1980#              sw $s5, 4($sp) # IntegerLiteral at 37.15 	 
1984#              li $t0, 0 # IntegerLiteral at 37.15  	
1988#              sw $t0, ($sp) # IntegerLiteral at 37.15 	
              # EXIT NODE # IntegerLiteral at 37.15	 
            # EXIT NODE # LocalVarDecl at 37.11  	
            # ENTER NODE # While at 37.2		
1992#            j while_enter_183 # While at 37.2 
1996:            while_top_183: # While at 37.2  	
              # ENTER NODE # Block at 37.2	 
                # ENTER NODE # Block at 37.44   
                  # ENTER NODE # Block at 38.6	 
                    # ENTER NODE # LocalVarDecl at 38.15  
                      # ENTER NODE # IntegerLiteral at 38.19 		
1996#                      subu $sp, $sp, 8 # IntegerLiteral at 38.19  
2000#                      sw $s5, 4($sp) # IntegerLiteral at 38.19		 
2004#                      li $t0, 0 # IntegerLiteral at 38.19		
2008#                      sw $t0, ($sp) # IntegerLiteral at 38.19	  
                      # EXIT NODE # IntegerLiteral at 38.19		
                    # EXIT NODE # LocalVarDecl at 38.15	 
                    # ENTER NODE # While at 38.6  	
2012#                    j while_enter_179 # While at 38.6			
2016:                    while_top_179: # While at 38.6 	 
                      # ENTER NODE # Block at 38.6 	
                        # ENTER NODE # Block at 38.51	
                          # ENTER NODE # Assign at 39.7 	
                            # ENTER NODE # Plus at 39.13   
                              # ENTER NODE # IdentifierExp at 39.9	
2016#                              lw $t0, 16($sp) # IdentifierExp at 39.9  
2020#                              subu $sp, $sp, 8 # IdentifierExp at 39.9	
2024#                              sw $s5, 4($sp) # IdentifierExp at 39.9 		
2028#                              sw $t0, ($sp) # IdentifierExp at 39.9		 
                              # EXIT NODE # IdentifierExp at 39.9 	 
                              # ENTER NODE # ArrayLookup at 39.26 		
                                # ENTER NODE # ArrayLookup at 39.23 	
                                  # ENTER NODE # IdentifierExp at 39.15  	
2032#                                  lw $t0, 32($sp) # IdentifierExp at 39.15  
2036#                                  subu $sp, $sp, 4 # IdentifierExp at 39.15   
2040#                                  sw $t0, ($sp) # IdentifierExp at 39.15	
                                  # EXIT NODE # IdentifierExp at 39.15 
                                  # ENTER NODE # IdentifierExp at 39.24	
2044#                                  lw $t0, 20($sp) # IdentifierExp at 39.24	  
2048#                                  subu $sp, $sp, 8 # IdentifierExp at 39.24		
2052#                                  sw $s5, 4($sp) # IdentifierExp at 39.24 
2056#                                  sw $t0, ($sp) # IdentifierExp at 39.24 		
                                  # EXIT NODE # IdentifierExp at 39.24		 
2060#                                lw $t0, 8($sp) # ArrayLookup at 39.23	 	
2064#                                beq $t0, $zero, nullPtrException # ArrayLookup at 39.23 		
2068#                                lw $t1, -4($t0) # ArrayLookup at 39.23 	 
2072#                                lw $t2, ($sp) # ArrayLookup at 39.23  	
2076#                                bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 39.23 	
2077##...sltu $at,$t2,$t1
2081##...beq $at,$zero,$+2948
2084#                                sll $t2, $t2, 2 # ArrayLookup at 39.23 	
2088#                                addu $t2, $t2, $t0 # ArrayLookup at 39.23 	
2092#                                lw $t0, ($t2) # ArrayLookup at 39.23  
2096#                                sw $t0, 8($sp) # ArrayLookup at 39.23  	
2100#                                addu $sp, $sp, 8 # ArrayLookup at 39.23	
                                # EXIT NODE # ArrayLookup at 39.23		 
                                # ENTER NODE # IdentifierExp at 39.27 	
2104#                                lw $t0, 12($sp) # IdentifierExp at 39.27  
2108#                                subu $sp, $sp, 8 # IdentifierExp at 39.27		 
2112#                                sw $s5, 4($sp) # IdentifierExp at 39.27  
2116#                                sw $t0, ($sp) # IdentifierExp at 39.27 	
                                # EXIT NODE # IdentifierExp at 39.27	  
2120#                              lw $t0, 8($sp) # ArrayLookup at 39.26	  
2124#                              beq $t0, $zero, nullPtrException # ArrayLookup at 39.26	 	
2128#                              lw $t1, -4($t0) # ArrayLookup at 39.26	  
2132#                              lw $t2, ($sp) # ArrayLookup at 39.26 	 
2136#                              bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 39.26  	
2137##...sltu $at,$t2,$t1
2141##...beq $at,$zero,$+2888
2144#                              sll $t2, $t2, 2 # ArrayLookup at 39.26   
2148#                              addu $t2, $t2, $t0 # ArrayLookup at 39.26	  
2152#                              lw $t0, ($t2) # ArrayLookup at 39.26			
2156#                              sw $t0, 4($sp) # ArrayLookup at 39.26		 
2160#                              sw $s5, 8($sp) # ArrayLookup at 39.26  
2164#                              addu $sp, $sp, 4 # ArrayLookup at 39.26	 	
                              # EXIT NODE # ArrayLookup at 39.26			
2168#                            lw $t0, ($sp) # Plus at 39.13 	 
2172#                            lw $t1, 8($sp) # Plus at 39.13			
2176#                            addu $t0, $t0, $t1 # Plus at 39.13			
2180#                            addu $sp, $sp, 8 # Plus at 39.13		 
2184#                            sw $t0, ($sp) # Plus at 39.13 	 
                            # EXIT NODE # Plus at 39.13   
2188#                          lw $t0, ($sp) # Assign at 39.7 	 
2192#                          sw $t0, 24($sp) # Assign at 39.7	 
2196#                          addu $sp, $sp, 8 # Assign at 39.7	  
                          # EXIT NODE # Assign at 39.7  	
                        # EXIT NODE # Block at 38.51	
                        # ENTER NODE # Assign at 38.46		 
                          # ENTER NODE # Plus at 38.47 		
                            # ENTER NODE # IdentifierExp at 38.46	  
2200#                            lw $t0, 0($sp) # IdentifierExp at 38.46		 
2204#                            subu $sp, $sp, 8 # IdentifierExp at 38.46	
2208#                            sw $s5, 4($sp) # IdentifierExp at 38.46		
2212#                            sw $t0, ($sp) # IdentifierExp at 38.46	 	
                            # EXIT NODE # IdentifierExp at 38.46 	 
                            # ENTER NODE # IntegerLiteral at 38.47  
2216#                            subu $sp, $sp, 8 # IntegerLiteral at 38.47		
2220#                            sw $s5, 4($sp) # IntegerLiteral at 38.47 
2224#                            li $t0, 1 # IntegerLiteral at 38.47	 	
2228#                            sw $t0, ($sp) # IntegerLiteral at 38.47	 
                            # EXIT NODE # IntegerLiteral at 38.47 	 
2232#                          lw $t0, ($sp) # Plus at 38.47   
2236#                          lw $t1, 8($sp) # Plus at 38.47 
2240#                          addu $t0, $t0, $t1 # Plus at 38.47		 
2244#                          addu $sp, $sp, 8 # Plus at 38.47 
2248#                          sw $t0, ($sp) # Plus at 38.47 	
                          # EXIT NODE # Plus at 38.47	
2252#                        lw $t0, ($sp) # Assign at 38.46   
2256#                        sw $t0, 8($sp) # Assign at 38.46  	
2260#                        addu $sp, $sp, 8 # Assign at 38.46	 
                        # EXIT NODE # Assign at 38.46	  
                      # EXIT NODE # Block at 38.6	  
2264:                    while_enter_179: # While at 38.6	  
                      # ENTER NODE # LessThan at 38.24 		
                        # ENTER NODE # IdentifierExp at 38.22 	 
2264#                        lw $t0, 0($sp) # IdentifierExp at 38.22			
2268#                        subu $sp, $sp, 8 # IdentifierExp at 38.22		
2272#                        sw $s5, 4($sp) # IdentifierExp at 38.22 
2276#                        sw $t0, ($sp) # IdentifierExp at 38.22 	
                        # EXIT NODE # IdentifierExp at 38.22	 
                        # ENTER NODE # ArrayLength at 38.37  	
                          # ENTER NODE # ArrayLookup at 38.34		 
                            # ENTER NODE # IdentifierExp at 38.26	 
2280#                            lw $t0, 32($sp) # IdentifierExp at 38.26	  
2284#                            subu $sp, $sp, 4 # IdentifierExp at 38.26   
2288#                            sw $t0, ($sp) # IdentifierExp at 38.26	 
                            # EXIT NODE # IdentifierExp at 38.26	 	
                            # ENTER NODE # IdentifierExp at 38.35   
2292#                            lw $t0, 20($sp) # IdentifierExp at 38.35 		
2296#                            subu $sp, $sp, 8 # IdentifierExp at 38.35 		
2300#                            sw $s5, 4($sp) # IdentifierExp at 38.35  	
2304#                            sw $t0, ($sp) # IdentifierExp at 38.35	
                            # EXIT NODE # IdentifierExp at 38.35		
2308#                          lw $t0, 8($sp) # ArrayLookup at 38.34   
2312#                          beq $t0, $zero, nullPtrException # ArrayLookup at 38.34  
2316#                          lw $t1, -4($t0) # ArrayLookup at 38.34		 
2320#                          lw $t2, ($sp) # ArrayLookup at 38.34		
2324#                          bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 38.34  	
2325##...sltu $at,$t2,$t1
2329##...beq $at,$zero,$+2700
2332#                          sll $t2, $t2, 2 # ArrayLookup at 38.34	 
2336#                          addu $t2, $t2, $t0 # ArrayLookup at 38.34 		
2340#                          lw $t0, ($t2) # ArrayLookup at 38.34 	
2344#                          sw $t0, 8($sp) # ArrayLookup at 38.34   
2348#                          addu $sp, $sp, 8 # ArrayLookup at 38.34	
                          # EXIT NODE # ArrayLookup at 38.34		 
2352#                        lw $t0, ($sp) # ArrayLength at 38.37		
2356#                        beq $t0, $zero, nullPtrException # ArrayLength at 38.37  
2360#                        lw $t0, -4($t0) # ArrayLength at 38.37 	
2364#                        sw $s5, ($sp) # ArrayLength at 38.37  
2368#                        subu $sp, $sp, 4 # ArrayLength at 38.37	 	
2372#                        sw $t0, ($sp) # ArrayLength at 38.37 	
                        # EXIT NODE # ArrayLength at 38.37	
2376#                      lw $t0, ($sp) # LessThan at 38.24	
2380#                      lw $t1, 8($sp) # LessThan at 38.24 		
2384#                      slt $t0, $t1, $t0 # LessThan at 38.24			
2388#                      addu $sp, $sp, 12 # LessThan at 38.24	 	
2392#                      sw $t0, ($sp) # LessThan at 38.24	 	
                      # EXIT NODE # LessThan at 38.24	
2396#                    lw $t0, ($sp) # While at 38.6 
2400#                    addu $sp, $sp, 4 # While at 38.6	 	
2404#                    bne $t0, $zero, while_top_179 # While at 38.6   
2408:                    while_exit_179: # While at 38.6  	
                    # EXIT NODE # While at 38.6	 	
2408#                  addu $sp, 8 # Block at 38.6	
                  # EXIT NODE # Block at 38.6	 	
                # EXIT NODE # Block at 37.44		
                # ENTER NODE # Assign at 37.39   
                  # ENTER NODE # Plus at 37.40 		
                    # ENTER NODE # IdentifierExp at 37.39	
2412#                    lw $t0, 0($sp) # IdentifierExp at 37.39  	
2416#                    subu $sp, $sp, 8 # IdentifierExp at 37.39			
2420#                    sw $s5, 4($sp) # IdentifierExp at 37.39  
2424#                    sw $t0, ($sp) # IdentifierExp at 37.39			
                    # EXIT NODE # IdentifierExp at 37.39	 	
                    # ENTER NODE # IntegerLiteral at 37.40	  
2428#                    subu $sp, $sp, 8 # IntegerLiteral at 37.40		 
2432#                    sw $s5, 4($sp) # IntegerLiteral at 37.40	 
2436#                    li $t0, 1 # IntegerLiteral at 37.40 	
2440#                    sw $t0, ($sp) # IntegerLiteral at 37.40			
                    # EXIT NODE # IntegerLiteral at 37.40	
2444#                  lw $t0, ($sp) # Plus at 37.40	 
2448#                  lw $t1, 8($sp) # Plus at 37.40	 	
2452#                  addu $t0, $t0, $t1 # Plus at 37.40 		
2456#                  addu $sp, $sp, 8 # Plus at 37.40 		
2460#                  sw $t0, ($sp) # Plus at 37.40	 	
                  # EXIT NODE # Plus at 37.40	 
2464#                lw $t0, ($sp) # Assign at 37.39  
2468#                sw $t0, 8($sp) # Assign at 37.39   
2472#                addu $sp, $sp, 8 # Assign at 37.39			
                # EXIT NODE # Assign at 37.39	  
              # EXIT NODE # Block at 37.2   
2476:            while_enter_183: # While at 37.2	 	
              # ENTER NODE # LessThan at 37.20		
                # ENTER NODE # IdentifierExp at 37.18	  
2476#                lw $t0, 0($sp) # IdentifierExp at 37.18	 
2480#                subu $sp, $sp, 8 # IdentifierExp at 37.18		 
2484#                sw $s5, 4($sp) # IdentifierExp at 37.18		
2488#                sw $t0, ($sp) # IdentifierExp at 37.18	
                # EXIT NODE # IdentifierExp at 37.18 		
                # ENTER NODE # ArrayLength at 37.30		
                  # ENTER NODE # IdentifierExp at 37.22	 	
2492#                  lw $t0, 24($sp) # IdentifierExp at 37.22  	
2496#                  subu $sp, $sp, 4 # IdentifierExp at 37.22 	
2500#                  sw $t0, ($sp) # IdentifierExp at 37.22  
                  # EXIT NODE # IdentifierExp at 37.22			
2504#                lw $t0, ($sp) # ArrayLength at 37.30	  
2508#                beq $t0, $zero, nullPtrException # ArrayLength at 37.30 	
2512#                lw $t0, -4($t0) # ArrayLength at 37.30	 	
2516#                sw $s5, ($sp) # ArrayLength at 37.30 
2520#                subu $sp, $sp, 4 # ArrayLength at 37.30  	
2524#                sw $t0, ($sp) # ArrayLength at 37.30			
                # EXIT NODE # ArrayLength at 37.30	  
2528#              lw $t0, ($sp) # LessThan at 37.20 	
2532#              lw $t1, 8($sp) # LessThan at 37.20	 
2536#              slt $t0, $t1, $t0 # LessThan at 37.20	 	
2540#              addu $sp, $sp, 12 # LessThan at 37.20   
2544#              sw $t0, ($sp) # LessThan at 37.20	
              # EXIT NODE # LessThan at 37.20  	
2548#            lw $t0, ($sp) # While at 37.2		 
2552#            addu $sp, $sp, 4 # While at 37.2		
2556#            bne $t0, $zero, while_top_183 # While at 37.2	 	
2560:            while_exit_183: # While at 37.2 
            # EXIT NODE # While at 37.2	 	
2560#          addu $sp, 8 # Block at 37.2 	
          # EXIT NODE # Block at 37.2	  
          # ENTER NODE # ExpStatement at 42.2		 
            # ENTER NODE # Call at 42.2 	 
              # ENTER NODE # This at 42.2  	
2564#              subu $sp, $sp, 4 # This at 42.2	
2568#              sw $s2, ($sp) # This at 42.2   
              # EXIT NODE # This at 42.2 
              # ENTER NODE # IdentifierExp at 42.11   
2572#              lw $t0, 4($sp) # IdentifierExp at 42.11	
2576#              subu $sp, $sp, 8 # IdentifierExp at 42.11 	
2580#              sw $s5, 4($sp) # IdentifierExp at 42.11 	 
2584#              sw $t0, ($sp) # IdentifierExp at 42.11   
              # EXIT NODE # IdentifierExp at 42.11 		
2588#            lw $t0, 8($sp) # Call at 42.2 		
2592#            beq $t0, $zero, nullPtrException # Call at 42.2  
2596#            lw $t0, -12($t0) # Call at 42.2	  
2600#            lw $t0, 24($t0) # Call at 42.2		 
2604#            jalr $t0 # Call at 42.2	 	
            # EXIT NODE # Call at 42.2		
          # EXIT NODE # ExpStatement at 42.2  	
          # ENTER NODE # ExpStatement at 43.2			
            # ENTER NODE # Call at 43.2		
              # ENTER NODE # This at 43.2	  
2608#              subu $sp, $sp, 4 # This at 43.2  	
2612#              sw $s2, ($sp) # This at 43.2 	 
              # EXIT NODE # This at 43.2	  
              # ENTER NODE # StringLiteral at 43.11	 	
2616#              subu $sp, $sp, 4 # StringLiteral at 43.11 
2620#              la $t0, strLit_189 # StringLiteral at 43.11  
2624#              sw $t0, ($sp) # StringLiteral at 43.11 
              # EXIT NODE # StringLiteral at 43.11  	
2628#            lw $t0, 4($sp) # Call at 43.2 		
2632#            beq $t0, $zero, nullPtrException # Call at 43.2 	
2636#            lw $t0, -12($t0) # Call at 43.2  	
2640#            lw $t0, 16($t0) # Call at 43.2  
2644#            jalr $t0 # Call at 43.2	
            # EXIT NODE # Call at 43.2			
          # EXIT NODE # ExpStatement at 43.2  	
2648#        lw $ra, 16($sp) # MethodDeclVoid at 10.17	 
2652#        lw $s2, 12($sp) # MethodDeclVoid at 10.17  	
2656#        addu $sp, $sp, 24 # MethodDeclVoid at 10.17   
2660#        jr $ra # MethodDeclVoid at 10.17	  
        # EXIT NODE # MethodDeclVoid at 10.17		 
      # EXIT NODE # Program at 7.1 
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
2664:readLine:
	
2664#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
2668#	sw $ra, 4($sp) # save $ra
2672#	move $t1,$sp # save "original" sp

2676:  doRead:

	# read the character
2676#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
2680#	subu $t2,$v0,13
2684#	bne $t2,$zero,notReturnRL
2688#	jal readLogicalChar
2692#	subu $t2,$v0,10 # check for newline
2696#	beq $t2,$zero,foundNewLine
2700#	sw $v0,lastCharRead # push back character into queue
2704#	j foundNewLine # go process the line

2708:  notReturnRL:

	# at this point, $v0 has our character

2708#	subu $t0,$v0,10
2712#	beq $t0,$zero,foundNewLine
2716#	blt $v0,$zero,foundEof
2717##...slt $at,$v0,$zero
2721##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
2724#	subu $sp,$sp,4
2728#	sw $v0,($sp)

	# loop back up to get next character
2732#	j doRead

2736:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2736#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
2740#	sw $zero,8($sp) # return-value: null
2744#	j rlReturn # return

2748:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
2748#	subu $t0,$t1,$sp # number of chars we read (times 4)
2752#	srl $s6,$t0,2 # number of words on stack with chars
2756#	subu $sp,$sp,4 # push char-count ...
2760#	sw $s6,($sp) # ... onto stack
2764#	addu $t2,$t0,5 # GC tag, incl. for count-word
2768#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
2772#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2776#	srl $s6,$s6,2 # data words in object
2780#	move $s7,$zero # # object words in object
2784#	jal newObject # allocate space
	
	# store header words
2788#	la $t0,CLASS_String
2792#	sw $t0,-12($s7) # store class tag (String) into object
2796#	lw $t2,4($sp) # char-count
2800#	sll $t1,$t2,2 # 4 times number of chars
2804#	subu $t2,$zero,$t2 # negative of char-count
2808#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
2812#	lw $t0,-8($s7) # data words in object
2816#	sll $t0,$t0,2 # data bytes in object
2820#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
2824#	subu $t0,$t0,$t2 # place to store last character (plus 9)
2828#	addu $sp,$sp,8 # pop redundant object-pointer and count
2832#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

2836#	beq $sp,$t1,doneCharCopy
2840:  charCopyLoop:
2840#	lw $t2,($sp)
2844#	sb $t2,-9($t0)
2848#	addu $sp,$sp,4
2852#	subu $t0,$t0,1
2856#	bne $sp,$t1,charCopyLoop
2860:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
2860#	sw $s7,8($sp)
	
2864:  rlReturn:
	# restore return address and return
2864#	lw $ra,4($sp) # restore return address, ...
2868#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
2872#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2876:readInt:

	# save $ra by pushing onto stack
2876#	subu $sp,$sp,4
2880#	sw $ra,($sp)

2884:  riSkipWhiteLoop:
	# read a character
2884#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
2888#	subu $t0,$v0,32
2892#	bgt $t0,$zero,nonWhite
2893##...slt $at,$zero,$t0
2897##...bne $at,$zero,$+44
2900#	beq $t0,$zero,riSkipWhiteLoop # start over if space
2904#	subu $t0,$v0,10
2908#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
2912#	subu $t0,$v0,9
2916#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
2920#	subu $t0,$v0,13
2924#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
2928#	subu $t0,$v0,12
2932#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
2936#	j badIntegerFormat # illegal integer char: abort program

2940:  nonWhite:
2940#	subu $t0,$v0,'-'
2944#	li $t4,1 # final multiplier
2948#	bne $t0,$zero,helpReadInt # go read
2952#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
2956#	jal readLogicalChar

2960:  helpReadInt:
2960#	li $t2,10
2964#	subu $t1,$v0,'0' # convert digit to 0-9 value
2968#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
2969##...sltu $at,$t1,$t2
2973##...beq $at,$zero,$+2080
2976#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

2980:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

2980#	jal readLogicalChar # read next character
2984#	subu $t1,$v0,'0' # convert digit to 0-9 value
2988#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
2989##...sltu $at,$t1,$t2
2993##...beq $at,$zero,$+20

2996#	mul $t3,$t3,$t2 # multiply old value by 10
2997##...mult $t3,$t2
3001##...mflo $t3
3004#	addu $t3,$t3,$t1 # add in value of new digit
3008#	j digitLoop

3012:  doneDigitLoop:

	# "push back" unused character into queue
3012#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
3016#	lw $ra,($sp)
3020#	mult $t3,$t4 # multiply to account for poss. minus sign
3024#	mflo $t3
3028#	sw $t3,($sp) # result
3032#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
3036#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
3040:readChar:

	# save $ra by pushing onto stack
3040#	subu $sp,$sp,4
3044#	sw $ra,($sp)

  	# read the character
3048#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
3052#	lw $ra,($sp)
3056#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
3060#	sw $v0,($sp)

	# return
3064#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
3068:printStr:
	# check for null, printing "(null)", if so
3068#	lw $t0,($sp)
3072#	bne $t0,$zero,psNotNull

	# print "(null)"
3076#	la $a0,nullStr
3080#	li $v0,4
3084#	syscall
3088#	j donePrintStr
	
3092:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
3092#	subu $t0,$t0,8
3096#	lw $t1,($t0) # word just beyond end of string
3100#	sll $t1,$t1,2
3104#	subu $t1,$t0,$t1 # first word in string
3108#	lw $t0,4($t0) # negative of string-length
3112#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
3116#	beq $t0,$t1,donePrintStr
3120:  psLoop:
3120#	lb $a0,($t1) # next byte
3124#	li $v0,11 # code for printing char
3128#        syscall # print the char
3132#	addu $t1,$t1,1 # go to next char
3136#	blt $t1,$t0,psLoop
3137##...slt $at,$t1,$t0
3141##...bne $at,$zero,$-20

3144:  donePrintStr:
	# pop stack and return
3144#	addu $sp,$sp,8
3148#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
3152:printInt:
	# pop value off stack, along with 'this'
3152#	lw $a0,($sp)
3156#	addu $sp,$sp,12

	# print it
3160#	li $v0,1 # code for print-int
3164#	syscall

	# return
3168#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
3172:printBool:
	# pop value off stack, along with 'this'
3172#	lw $t0,($sp)
3176#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
3180#	la $a0,falseString
3184#	beq $t0,$zero,skipPB
3188#	la $a0,trueString
3192:  skipPB:
3192#	li $v0,4 # code for print-string
3196#	syscall

	# return
3200#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
3204:substring:

	# save $ra by pushing onto stack
3204#	subu $sp,$sp,4
3208#	sw $ra,($sp)

	# get string value off stack, test for null
3212#	lw $t0,20($sp)
3216#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
3220#	lw $t0,-4($t0) # negative of string length
3224#	subu $t0,$zero,$t0 # string length
3228#	lw $t1,4($sp) # k
3232#	lw $t2,12($sp) # n
3236#	bgt $zero,$t2,strIndexOutOfBounds
3237##...slt $at,$t2,$zero
3241##...bne $at,$zero,$+1780
3244#	bgt $t2,$t1,strIndexOutOfBounds
3245##...slt $at,$t1,$t2
3249##...bne $at,$zero,$+1772
3252#	bgt $t1,$t0,strIndexOutOfBounds
3253##...slt $at,$t0,$t1
3257##...bne $at,$zero,$+1764

	# allocate memory
3260#	subu $s6,$t1,$t2 # # chars in target-string
3264#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
3268#	srl $s6,$s6,2 # convert bytes-count to word-count
3272#	move $s7,$zero # (no object-bytes in string)
3276#	jal newObject

	# store "String" tag in object-type field
3280#	la $t0,CLASS_String
3284#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
3288#	lw $t1,8($sp) # k
3292#	lw $t2,16($sp) # n
3296#	subu $t0,$t2,$t1 # value to store
3300#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
3304#	lw $t3,24($sp) # source string pointer
3308#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
3312#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
3316#	lw $t4,-8($t3) # # data words in source string
3320#	sll $t4,$t4,2 # # data bytes in source string
3324#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
3328#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
3332#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
3336#	lw $t2,-8($s7) # # data words in target string
3340#	sll $t2,$t2,2 # # data bytes in target string
3344#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
3348:  subCopyLoopzz:
3348#	lb $t4,-8($t3)
3352#	sb $t4,-8($t2)
3356#	addu $t2,$t2,1
3360#	addu $t3,$t3,1
3364#	blt $t3,$t1,subCopyLoopzz
3365##...slt $at,$t3,$t1
3369##...bne $at,$zero,$-20
	
3372:  doneSubCopyzz:
	# restore return address, store return value, pop stack
3372#	lw $ra,4($sp) # restore $ra
3376#	addu $sp,$sp,24 # pop stack
	
	# return
3380#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
3384:length:

	# get string pointer
3384#	lw $t0,($sp)
	
	# grow stack
3388#	subu $sp,$sp,4

	# store GC tag
3392#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
3396#	lw $t0,-4($t0) # -length
3400#	subu $t0,$zero,$t0
3404#	sw $t0,($sp) #store length

	# return
3408#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
3412:concat:
 	# save $ra by pushing onto stack
3412#	subu $sp,$sp,4
3416#	sw $ra($sp)

	# get string pointers and check parameter for null
3420#	lw $t0,4($sp)
3424#	beq $t0,$zero,nullPtrException
3428#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
3432#	lw $t0,-4($t0) # negative size of second object
3436#	lw $t1,-4($t1) # negative size of first object
3440#	addu $s6,$t0,$t1 # sum of negative sizes
3444#	sra $s6,$s6,2 # negative word-size of char part
3448#	subu $s6,$zero,$s6 # word size of char part
3452#	addu $s6,$s6,1 # data word size, including v-table word
3456#	move $s7,$zero
3460#	jal newObject

	# store "String" tag in object-type field
3464#	la $t0,CLASS_String
3468#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
3472#	lw $ra,4($sp) # return address
3476#	lw $t0,8($sp) # second object
3480#	lw $t1,12($sp) # first object
3484#	addu $sp,$sp,12 # pop
3488#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
3492#	lw $t2,-4($t0) # negative length of second object
3496#	lw $t3,-4($t1) # negative length of first object
3500#	addu $t4,$t2,$t3 # sum of negative lengths
3504#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
3508#	lw $t4,-8($t1) # # data words in first string
3512#	sll $t4,$t4,2 # # data bytes in first string
3516#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
3520#	lw $t4,-8($s7) # # data words in new string
3524#	sll $t4,$t4,2 # # data bytes in new string
3528#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
3532#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
3536#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
3540:  concatLoop1zz:
3540#	lb $t4,-8($t1)
3544#	sb $t4,-8($s7)
3548#	addu $s7,$s7,1
3552#	addu $t1,$t1,1
3556#	blt $t1,$t3,concatLoop1zz
3557##...slt $at,$t1,$t3
3561##...bne $at,$zero,$-20
3564:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
3564#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
3568#	lw $t4,-8($t0) # # data words in second string
3572#	sll $t4,$t4,2 # # data bytes in second string
3576#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
3580#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
3584:  concatLoop2zz:
3584#	lb $t4,-8($t1)
3588#	sb $t4,-8($s7)
3592#	addu $s7,$s7,1
3596#	addu $t1,$t1,1
3600#	blt $t1,$t3,concatLoop2zz
3601##...slt $at,$t1,$t3
3605##...bne $at,$zero,$-20
3608:  doneConcatLoop2zz:
 
3608:  concatRtnzz:
	# return
3608#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
3612:charAt:
	# get string
3612#	lw $t0,8($sp)

	# check that index is in bounds
3616#	lw $t1,-4($t0) # negative of # data words in string
3620#	subu $t3,$zero,$t1 # # chars in string
3624#	lw $t2,($sp) # index
3628#	bgeu $t2,$t3,strIndexOutOfBounds
3629##...sltu $at,$t2,$t3
3633##...beq $at,$zero,$+1388

	# access element
3636#	lw $t1,-8($t0) # # data words in object
3640#	sll $t1,$t1,2 # - byte-offset from end of chars
3644#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3648#	addu $t0,$t0,$t1 # - address of our char, offset by 8
3652#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
3656#	addu $sp,$sp,4
3660#	sw $t0,($sp)
3664#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
3668#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
3672:intToString:

	# save return address on stack; allocate space for dummy GC tag
3672#	subu $sp,$sp,8
3676#	sw $ra,4($sp)

	# save current sp
3680#	move $t0,$sp

	# move constant 10 into $t3
3684#	li $t3,10

	# get argument, negate if negative
3688#	lw $t1,8($sp)
3692#	bge $t1,$zero,itsNonNegLoop
3693##...slt $at,$t1,$zero
3697##...beq $at,$zero,$+8
3700#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
3704:  itsNonNegLoop:
3704#	divu $t1,$t3
3708#	mflo $t1 # quotient
3712#	mfhi $t4 # remainder
3716#	addu $t4,$t4,'0' # turn remainder into digit
3720#	subu $sp,$sp,4
3724#	sw $t4,($sp) # push digit onto stack
3728#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
3732#	lw $t4,8($t0)
3736#	bge $t4,$zero,itsSkipNeg
3737##...slt $at,$t4,$zero
3741##...beq $at,$zero,$+16
3744#	li $t4,'-'
3748#	subu $sp,$sp,4
3752#	sw $t4,($sp)
3756:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
3756#	subu $s6,$t0,$sp
3760#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
3764#	sw $t3,($t0)
3768#	srl $s6,$s6,2
3772#	subu $sp,$sp,4
3776#	sw $s6,($sp)
	
	# allocate memory
3780#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3784#	srl $s6,$s6,2
3788#	move $s7,$zero # no "object" words in object
3792#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
3796#	lw $t0,4($sp)
3800#	addu $sp,$sp,8

	# store "String" tag into class field
3804#	subu $s7,$s7,8 # address of header-1 word
3808#	la $t1,CLASS_String
3812#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
3816#	subu $t0,$zero,$t0
3820#	sw $t0,4($s7)

3824#	lw $t1,($s7) # number of data words in string
3828#	sll $t1,$t1,2 # number data bytes in string
3832#	subu $t1,$s7,$t1 # first location to store chars in string
3836#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
3840:  itsLoop:
3840#	lw $t2,($sp)
3844#	addu $sp,$sp,4
3848#	sb $t2,($t1)
3852#	addu $t1,$t1,1
3856#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
3860#	lw $ra,4($sp)
3864#	addu $sp,$sp,16
3868#	addu $t0,$t0,15
3872#	and $t0,$t0,0xfffffffc
3873##...lui $at,65535
3877##...ori $at,$at,0xfffc
3881##...and $t0,$t0,$at
3884#	sw $t0,($sp)
3888#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3892:intToChar:
	# save return address
3892#	subu $sp,$sp,4
3896#	sw $ra,($sp)

	# allocate object
3900#	li $s6,2
3904#	move $s7,$zero
3908#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
3912#	lw $ra,4($sp)
3916#	lw $t1,8($sp)
3920#	addu $sp,$sp,16

	# store "String" tag into class field
3924#	la $t0,CLASS_String
3928#	sw $t0,-12($s7)

	# store data in string
3932#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
3936#	li $t0,-1
3940#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
3944#	sw $s7,($sp)

	# return
3948#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
3952:compareTo:
	# get string pointers and check parameter for null
3952#	lw $t0,($sp) # second string
3956#	beq $t0,$zero,nullPtrException
3960#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
3964#	lw $t2,-4($t0) # negative length of second string
3968#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
3972#	slt $t4,$t3,$t2
3976#	slt $t5,$t2,$t3
3980#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
3984#	lw $t2,-8($t0) # # data words in second string
3988#	lw $t3,-8($t1) # # data words in first string
3992#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3996#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
4000#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
4004#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
4008#	beq $zero,$t5,skipStrCmpLenzz
4012#	move $t2,$t3
4016:  skipStrCmpLenzz:
4016#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
4020:  cmpLoopzz:
4020#	lw $t3,-8($t1) # word from str2
4024#	lw $t4,-8($t0) # word from str1
4028#	bne $t3,$t4,cmpNotEqualzz
4032#	addu $t1,$t1,4
4036#	addu $t0,$t0,4
4040#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
4044#	j cmpHitLimitzz

4048:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
4048#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
4052#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
4056#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
4060:  cmpHitLimitzz:
4060#	sw $t5,($sp) # store value
4064#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
4068#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
4072:readLogicalChar:

	# check if we already have a character
4072#	lw $v0,lastCharRead
4076#	li $t0,-2
4080#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
4084#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
4088#	jr $ra # return
	
4092:  doReadCh:
	# we need to actually read a character: read and return
4092#	li $v0,12 # use system call to read a character
4096#	syscall
4100#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
4104:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
4104#	blt $s7,$zero arraySizeOutOfBounds
4105##...slt $at,$s7,$zero
4109##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
4112#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

4116:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
4116#	move $t3,$s6
4120#	bge $t3,$zero,newSkip
4121##...slt $at,$t3,$zero
4125##...beq $at,$zero,$+8
4128#	move $t3,$zero

4132:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
4132#	addu $t0,$t3,$s7
4136#	sll $t0,$t0,2
4140#	addu $t0,$t0,8 # amount of memory needed
4144#	addu $t1,$t0,$s3
4148#	bgtu $t1,$s4,doGC
4149##...sltu $at,$s4,$t1
4153##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
4156#	move $t2,$s3
4160:  zeroObjLoop:
4160#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

4164#	addu $s3,4
4168#	bltu $s3,$t1,zeroObjLoop
4169##...sltu $at,$s3,$t1
4173##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
4176#	sll $t0,$s7,2    # number of post-header bytes
4180#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
4184#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
4188#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
4192#	move $s7,$t0
4196#	subu $sp,$sp,4
4200#	sw $t0,($sp)

4204#	jr $ra
	
4208:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
4208#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
4212#	subu $sp,$sp,4
4216#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
4220#	lw $t0,cur_seg
4224#	move $t7,$s4
4228#	la $t6,seg1_start
4229##...lui $t6,16
4233##...addiu $t6,$t6,5500
4236#	la $s3,seg0_start
4240#	la $s4,seg0_end
4241##...lui $s4,16
4245##...addiu $s4,$s4,5500
4248#	sw $zero,cur_seg
4252#	bne $t0,$zero,skipGc1
4256#	la $t6,seg0_start
4260#	la $s3,seg1_start
4261##...lui $s3,16
4265##...addiu $s3,$s3,5500
4268#	la $s4,seg1_end
4269##...lui $s4,32
4273##...addiu $s4,$s4,5500
4276#	sw $s5,cur_seg
4280:  skipGc1:
4280#	li $t5,-2
4284#	lw $t0,stack_bottom
4288#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

4292:  gcStackCopyLoop:
4292#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
4296#	sll $t2,$t1,31 # zero iff low bit was zero
4300#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
4304#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
4308#	bleu $t1,$t6,gcTestIterDone1
4309##...sltu $at,$t6,$t1
4313##...beq $at,$zero,$+148
4316#	bgtu $t1,$t7,gcTestIterDone1
4317##...sltu $at,$t7,$t1
4321##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4324#	lw $t2,-8($t1) # possible forwarding tag
4328#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
4332#	lw $t2,-4($t1) # forwarding pointer: object's new address
4336#	sw $t2,4($t0) # update stack value
4340#	j gcTestIterDone1 # do next iteration

4344:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
4344#	bge $t2,$zero,gcSkip2
4345##...slt $at,$t2,$zero
4349##...beq $at,$zero,$+8
4352#	move $t2,$zero # set to zero if -1 (number of data words)

4356:  gcSkip2:
4356#	sll $t2,$t2,2
4360#	addu $t2,$t2,8
4364#	subu $t4,$t1,$t2 # address of first word of source
4368#	lw $t3,-4($t1) # number of object words (negative treated as zero)
4372#	bge $t3,$zero,gcH2Neg1
4373##...slt $at,$t3,$zero
4377##...beq $at,$zero,$+8
4380#	move $t3,$zero
4384:  gcH2Neg1:
4384#	sll $t3,$t3,2
4388#	addu $t3,$t3,$t1 # address one word past last word of source

4392#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
4396#	lw $s0,($t4)
4400#	lw $s1,-8($t1)
4404#	sw $s1,($t4)
4408#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
4412:  gCinnerCopy1:
4412#	lw $s0,($t4)
4416#	sw $s0,($s3)
4420#	addu $t4,$t4,4
4424#	addu $s3,$s3,4
4428#	bltu $t4,$t3,gCinnerCopy1
4429##...sltu $at,$t4,$t3
4433##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4436#	sw $t5,-8($t1) # -2 in first header-slot
4440#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
4444#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
4448#	j gcTestIterDone1

4452:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
4452#	subu $t0,$t0,$t1
4456#	subu $t0,$t0,3

4460:  gcTestIterDone1:
4460#	bgeu $t0,$sp,gcStackCopyLoop
4461##...sltu $at,$t0,$sp
4465##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
4468#	lw $t1,cur_seg
4472#	la $t0,seg0_start
4476#	beq $t1,$zero,gcSkip4
4480#	la $t0,seg1_start
4481##...lui $t0,16
4485##...addiu $t0,$t0,5500

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

4488:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
4488#	bgeu $t0,$s3,gcFinishUp
4489##...sltu $at,$t0,$s3
4493##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

4496:  gcHeapCopyLoop:
	# check if we have a data array
4496#	lw $t1,($t0) # first header word for current object
4500#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
4501##...slt $at,$t1,$zero
4505##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
4508#	lw $t1,4($t0) # data words
4512#	addu $t1,$t1,2 # add in # header words
4516#	sll $t1,$t1,2 # convert to byte-count
4520#	addu $t0,$t0,$t1 # skip over object
4524#	j gcTestIterDone2 # go do next object, if any

4528:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
4528#	sll $t2,$t1,2 # # data bytes
4532#	addu $t2,$t2,8 # to skip header word
4536#	addu $t2,$t0,$t2 # pointer to new object
4540#	lw $t3,-8($t2) # word to swap
4544#	sw $t1,-8($t2) # store header word
4548#	sw $t3,($t0) # restore first word of object

4552#	lw $t3,-4($t2) # # object words (negative treated as zero)
4556#	bge $t3,$zero,gcH2Neg2
4557##...slt $at,$t3,$zero
4561##...beq $at,$zero,$+8
4564#	move $t3,$zero
4568:  gcH2Neg2:
4568#	sll $t3,$t3,2 # # object bytes
4572#	move $t0,$t2 # address of first pointer in object
4576#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
4580#	beq $t0,$s1,gcTestIterDone2
	
4584:  gcNextPointerInObject:
	# get pointer from object
4584#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
4588#	bleu $t1,$t6,gcGoNextPointerSlot
4589##...sltu $at,$t6,$t1
4593##...beq $at,$zero,$+136
4596#	bgtu $t1,$t7,gcGoNextPointerSlot
4597##...sltu $at,$t7,$t1
4601##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4604#	lw $t8,-8($t1) # possible forwarding tag
4608#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
4612#	lw $t8,-4($t1) # forwarding pointer: object's new address
4616#	sw $t8,($t0) # update pointer in object
4620#	j gcGoNextPointerSlot # do next iteration

4624:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
4624#	bge $t8,$zero,gcSkip5
4625##...slt $at,$t8,$zero
4629##...beq $at,$zero,$+8
4632#	move $t8,$zero # set to zero if -1

4636:  gcSkip5:
4636#	sll $t8,$t8,2
4640#	addu $t8,$t8,8
4644#	subu $t4,$t1,$t8 # address of first word of source
4648#	lw $t3,-4($t1)
4652#	bge $t3,$zero,gcNoNeg
4653##...slt $at,$t3,$zero
4657##...beq $at,$zero,$+8
4660#	move $t3,$zero
4664:  gcNoNeg:
4664#	sll $t3,$t3,2
4668#	addu $t3,$t3,$t1 # address one word past last word of source

4672#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
4676#	lw $s0,($t4)
4680#	lw $t9,-8($t1)
4684#	sw $t9,($t4)
4688#	sw $s0,-8($t1)

	# copy all source bytes to the target
4692:  gCinnerCopy2:
4692#	lw $s0,($t4)
4696#	sw $s0,($s3)
4700#	addu $t4,$t4,4
4704#	addu $s3,$s3,4
4708#	bltu $t4,$t3,gCinnerCopy2
4709##...sltu $at,$t4,$t3
4713##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4716#	sw $t5,-8($t1) # -2 in first header-slot
4720#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
4724#	sw $t8,($t0)

4728:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
4728#	addu $t0,$t0,4
4732#	bltu $t0,$s1,gcNextPointerInObject
4733##...sltu $at,$t0,$s1
4737##...bne $at,$zero,$-152

4740:  gcTestIterDone2:
4740#	bltu $t0,$s3,gcHeapCopyLoop
4741##...sltu $at,$t0,$s3
4745##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

4748:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
4748#	lw $s2,($sp)
4752#	addu $sp,$sp,4

	# mark us as having already GC'd
4756#	move $t5,$s5

	# go try and allocate again
4760#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4764:vm_init:

	# mark bottom of stack
4764#	sw $sp,stack_bottom
4768#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
4772#	move $s2,$zero
4776#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
4780#	li $s5,5
4784#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

4788#	la $s3,seg0_start
4792#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
4796#	la $s4,seg0_end
4797##...lui $s4,16
4801##...addiu $s4,$s4,5500
4804#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
4808#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4812:divide:
	# get parameters; abort if divisor zero
4812#	lw $t0,($sp)
4816#	lw $t1,8($sp)
4820#	beq $t0,$zero,divByZeroError
	
	# perform division
4824#	div $t1,$t0
4828#	mflo $t0

	# store result, adjust stack and return
4832#	addu $sp,$sp,8 # adjust stack
4836#	sw $t0,($sp) # store result
4840#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4844:remainder:
	# get parameters; abort if divisor zero
4844#	lw $t0,($sp)
4848#	lw $t1,8($sp)
4852#	beq $t0,$zero,divByZeroError
	
	# perform division
4856#	div $t1,$t0
4860#	mfhi $t0

	# store result, adjust stack and return
4864#	addu $sp,$sp,8 # adjust stack
4868#	sw $t0,($sp) # store result
4872#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4876:checkCast:
	# get object, allow immediately if null
4876#	lw $t2,($sp)
4880#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
4884#	lw $t3,-8($t2) # <= 0 if array
4888#	lw $t2,-12($t2) # vtable address (unless array)
4892#	bgt $t3,$zero,skipArrayCast
4893##...slt $at,$zero,$t3
4897##...bne $at,$zero,$+8
4900#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4904:  skipArrayCast:
4904#	bge $t2,$t1,castException
4905##...slt $at,$t2,$t1
4909##...beq $at,$zero,$+152
4912#	blt $t2,$t0,castException
4913##...slt $at,$t2,$t0
4917##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
4920:  checkCastReturn:	
4920#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4924:instanceOf:
	# get object, go return false if null
4924#	lw $t2,($sp)
4928#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
4932#	lw $t3,-8($t2) # <= 0 if array
4936#	lw $t2,-12($t2) # vtable address (unless array)
4940#	bgt $t3,$zero,skipArrayInstanceOf
4941##...slt $at,$zero,$t3
4945##...bne $at,$zero,$+8
4948#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4952:  skipArrayInstanceOf:
4952#	sge $t0,$t2,$t0
4953##...slt $t0,$t2,$t0
4957##...xori $t0,$t0,0x1
4960#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
4964#	and $t2,$t0,$t1
4968:  doneInstanceOf: # if we reach here via branch, we know $t2=0
4968#	sw $t2,($sp)
4972#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4976:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
4976#	li $v0,4 # syscall-code for print-string
4980#	syscall
4984:exit:
	# print termination message
4984#	li $v0,4
4988#	la $a0,exitString
4992#	syscall

	# terminate execution
4996#	li $v0,10 #syscall-code for "exit"
5000#	syscall

5004:outOfHeapMemory:
5004#	la $a0,heapMemoryMsg
5008#	j exitError
5012:divByZeroError:
5012#	la $a0,divByZeroMsg
5016#	j exitError
5020:strIndexOutOfBounds:
5020#	la $a0,strIndexOutOfBoundsMsg
5024#	j exitError
5028:arrayIndexOutOfBounds:
5028#	la $a0,arrayIndexOutOfBoundsMsg
5032#	j exitError
5036:arraySizeOutOfBounds:
5036#	la $a0,arraySizeOutOfBoundsMsg
5040#	j exitError
5044:nullPtrException:
5044#	la $a0,nullPtrExceptionMsg
5048#	j exitError
5052:badIntegerFormat:
5052#	la $a0,badIntegerFormatMsg
5056#	j exitError
5060:castException:
5060#	la $a0,castExceptionMsg
5064#	j exitError

############## data section ################
	.data
	.align 2

5192:cur_seg:
	.word 0

5196:lastCharRead:
	.word -2 # -2 => no buffered character

5200:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
5227:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
5250:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
5285:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
5319:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
5352:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
5383:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
5431:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
5452:gcMsg: 
      .asciiz "\nGC!\n"

5458:nullStr:
	.asciiz "null"
5463:trueString:
	.asciiz "true"
5468:falseString:
	.asciiz "false"
5474:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
5496:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

5500:seg0_start:
	.space 0x100000
1054076:seg0_end:
1054076:seg1_start:
	.space 0x100000
2102652:seg1_end:



