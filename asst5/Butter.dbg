.data # Program at 3.1		 
3468:CLASS_Object: # ClassDecl at 0.0		
.word 0 # ClassDecl at 0.0	 
3472:CLASS_Lib: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0		
.word readLine # ClassDecl at 0.0	 
.word readInt # ClassDecl at 0.0	 	
.word readChar # ClassDecl at 0.0  	
.word printStr # ClassDecl at 0.0	  
.word printBool # ClassDecl at 0.0 		
.word printInt # ClassDecl at 0.0		
.word intToString # ClassDecl at 0.0 		
.word intToChar # ClassDecl at 0.0 		
3508:CLASS_Toast: # ClassDecl at 28.7  
.word CLASS_Lib # ClassDecl at 28.7	 	
.word readLine # ClassDecl at 28.7			
.word readInt # ClassDecl at 28.7	 	
.word readChar # ClassDecl at 28.7	 
.word printStr # ClassDecl at 28.7  
.word printBool # ClassDecl at 28.7	
.word printInt # ClassDecl at 28.7	 
.word intToString # ClassDecl at 28.7		 
.word intToChar # ClassDecl at 28.7	 	
.word fcn_99_run # ClassDecl at 28.7 		
3548:CLASS_Jam: # ClassDecl at 9.7 	
.word CLASS_Toast # ClassDecl at 9.7			
.word readLine # ClassDecl at 9.7	
.word readInt # ClassDecl at 9.7		
.word readChar # ClassDecl at 9.7	 
.word printStr # ClassDecl at 9.7	 
.word printBool # ClassDecl at 9.7		 
.word printInt # ClassDecl at 9.7	  
.word intToString # ClassDecl at 9.7 		
.word intToChar # ClassDecl at 9.7	  
.word fcn_99_run # ClassDecl at 9.7   
.word fcn_70_test # ClassDecl at 9.7		 
3592:CLASS_END_Jam: # ClassDecl at 9.7		
3592:CLASS_END_Toast: # ClassDecl at 28.7 		
3592:CLASS_END_Lib: # ClassDecl at 0.0 	 
3592:CLASS_String: # ClassDecl at 0.0 	 
.word CLASS_Object # ClassDecl at 0.0	
.word concat # ClassDecl at 0.0	
.word substring # ClassDecl at 0.0 
.word length # ClassDecl at 0.0 	 
.word charAt # ClassDecl at 0.0  
.word compareTo # ClassDecl at 0.0	
.word readLine # ClassDecl at 0.0 
.word readInt # ClassDecl at 0.0	 
.word readChar # ClassDecl at 0.0  
.word printStr # ClassDecl at 0.0		 
.word printBool # ClassDecl at 0.0	 
.word printInt # ClassDecl at 0.0	  
.word intToString # ClassDecl at 0.0	  
.word intToChar # ClassDecl at 0.0 	 
.word fcn_99_run # ClassDecl at 0.0	 
.word fcn_70_test # ClassDecl at 0.0 	
3656:CLASS_END_String: # ClassDecl at 0.0	
3656:CLASS_RunMain: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0		 
.word concat # ClassDecl at 0.0		 
.word substring # ClassDecl at 0.0 
.word length # ClassDecl at 0.0 		
.word charAt # ClassDecl at 0.0		 
.word compareTo # ClassDecl at 0.0			
.word readLine # ClassDecl at 0.0 	
.word readInt # ClassDecl at 0.0	  
.word readChar # ClassDecl at 0.0  
.word printStr # ClassDecl at 0.0 		
.word printBool # ClassDecl at 0.0  	
.word printInt # ClassDecl at 0.0 	
.word intToString # ClassDecl at 0.0  
.word intToChar # ClassDecl at 0.0	 	
.word fcn_99_run # ClassDecl at 0.0 
.word fcn_70_test # ClassDecl at 0.0 		
3720:CLASS_END_RunMain: # ClassDecl at 0.0		
3720:CLASS_Main: # ClassDecl at 3.7	  
.word CLASS_Object # ClassDecl at 3.7 	 
.word fcn_4_main # ClassDecl at 3.7	 
.word concat # ClassDecl at 3.7	
.word substring # ClassDecl at 3.7	 
.word length # ClassDecl at 3.7		
.word charAt # ClassDecl at 3.7	
.word compareTo # ClassDecl at 3.7  	
.word readLine # ClassDecl at 3.7 
.word readInt # ClassDecl at 3.7   
.word readChar # ClassDecl at 3.7			
.word printStr # ClassDecl at 3.7  	
.word printBool # ClassDecl at 3.7	  
.word printInt # ClassDecl at 3.7  
.word intToString # ClassDecl at 3.7  
.word intToChar # ClassDecl at 3.7	  
.word fcn_99_run # ClassDecl at 3.7  
.word fcn_70_test # ClassDecl at 3.7		 
3788:CLASS_END_Main: # ClassDecl at 3.7	  
3788:CLASS_END_Object: # ClassDecl at 0.0 		
 .data # Program at 3.1			
  .byte 102 # StringLiteral at 14.13	 
  .byte 117 # StringLiteral at 14.13  
  .byte 110 # StringLiteral at 14.13 	
  .byte 0 # StringLiteral at 14.13		 
  .word CLASS_String # StringLiteral at 14.13 	 
  .word 2 # StringLiteral at 14.13 		
  .word -3 # StringLiteral at 14.13 
3804:strLit_16: # StringLiteral at 14.13	 	
  .byte 32 # StringLiteral at 20.22			
  .byte 0 # StringLiteral at 20.22	
  .byte 0 # StringLiteral at 20.22			
  .byte 0 # StringLiteral at 20.22	
  .word CLASS_String # StringLiteral at 20.22 	 
  .word 2 # StringLiteral at 20.22  	
  .word -1 # StringLiteral at 20.22	
3820:strLit_48: # StringLiteral at 20.22	 	
  .byte 10 # StringLiteral at 22.18  	
  .byte 0 # StringLiteral at 22.18		
  .byte 0 # StringLiteral at 22.18		 
  .byte 0 # StringLiteral at 22.18  	
  .word CLASS_String # StringLiteral at 22.18 
  .word 2 # StringLiteral at 22.18  	
  .word -1 # StringLiteral at 22.18  	
3836:strLit_56: # StringLiteral at 22.18		
  .byte 10 # StringLiteral at 36.23	  
  .byte 0 # StringLiteral at 36.23  
  .byte 0 # StringLiteral at 36.23		 
  .byte 0 # StringLiteral at 36.23  	
  .word CLASS_String # StringLiteral at 36.23  	
  .word 2 # StringLiteral at 36.23			
  .word -1 # StringLiteral at 36.23  	
3852:strLit_96: # StringLiteral at 36.23 
.text # Program at 3.1	  
.global main # Program at 3.1	
0:main: # Program at 3.1	 
0#jal vm_init # Program at 3.1	 
4#li $s6, 1 # NewObject at 0.0 	
8#li $s7, 0 # NewObject at 0.0 
12#jal newObject # NewObject at 0.0 	 
16#la $t0, CLASS_Main # NewObject at 0.0			
20#sw $t0, -12($s7) # NewObject at 0.0 
24#lw $t0, 0($sp) # Call at 0.0   
28#beq $t0, $zero, nullPtrException # Call at 0.0 	 
32#lw $t0, -12($t0) # Call at 0.0			
36#lw $t0, 4($t0) # Call at 0.0			
40#jalr $t0 # Call at 0.0 	 
44#li $v0, 10 # Program at 3.1 	
48#syscall # Program at 3.1   
.globl fcn_4_main # MethodDeclVoid at 4.17 
52:fcn_4_main: # MethodDeclVoid at 4.17		 
52#subu $sp, $sp, 8 # MethodDeclVoid at 4.17	 	
56#sw $ra, 4($sp) # MethodDeclVoid at 4.17		 
60#sw $s2, ($sp) # MethodDeclVoid at 4.17	  
64#lw $s2, 8($sp) # MethodDeclVoid at 4.17			
68#li $s6, 1 # NewObject at 5.9 		
72#li $s7, 0 # NewObject at 5.9	 	
76#jal newObject # NewObject at 5.9		 
80#la $t0, CLASS_Jam # NewObject at 5.9  
84#sw $t0, -12($s7) # NewObject at 5.9			
88#lw $t0, 0($sp) # Call at 5.19	  
92#beq $t0, $zero, nullPtrException # Call at 5.19	 	
96#lw $t0, -12($t0) # Call at 5.19	
100#lw $t0, 36($t0) # Call at 5.19   
104#jalr $t0 # Call at 5.19  	
108#lw $ra, 4($sp) # MethodDeclVoid at 4.17	 	
112#lw $s2, 8($sp) # MethodDeclVoid at 4.17   
116#addu $sp, $sp, 12 # MethodDeclVoid at 4.17	 
120#jr $ra # MethodDeclVoid at 4.17 
.globl fcn_70_test # MethodDeclVoid at 12.17		
124:fcn_70_test: # MethodDeclVoid at 12.17  
124#subu $sp, $sp, 8 # MethodDeclVoid at 12.17	 
128#sw $ra, 4($sp) # MethodDeclVoid at 12.17		 
132#sw $s2, ($sp) # MethodDeclVoid at 12.17 
136#lw $s2, 16($sp) # MethodDeclVoid at 12.17 		
140#subu $sp, $sp, 8 # IntegerLiteral at 13.13 		
144#sw $s5, 4($sp) # IntegerLiteral at 13.13  
148#li $t0, 3 # IntegerLiteral at 13.13 		
152#sw $t0, ($sp) # IntegerLiteral at 13.13   
156#lw $t0, ($sp) # Assign at 13.11 	
160#sw $t0, -16($s2) # Assign at 13.11	 
164#addu $sp, $sp, 8 # Assign at 13.11 	 
168#subu $sp, $sp, 4 # StringLiteral at 14.13		 
172#la $t0, strLit_16 # StringLiteral at 14.13 		
176#sw $t0, ($sp) # StringLiteral at 14.13 	 
180#lw $t0, ($sp) # Assign at 14.11 	 
184#sw $t0, 0($s2) # Assign at 14.11	 	
188#addu $sp, $sp, 4 # Assign at 14.11 	 
192#subu $sp, $sp, 8 # IntegerLiteral at 15.22		 
196#sw $s5, 4($sp) # IntegerLiteral at 15.22 
200#li $t0, 0 # IntegerLiteral at 15.22  
204#sw $t0, ($sp) # IntegerLiteral at 15.22	  
208#j while_enter_54 # While at 15.9	 	
212:while_top_54: # While at 15.9	 
212#subu $sp, $sp, 4 # True at 16.25 
216#li $t0, 1 # True at 16.25	  
220#sw $t0, ($sp) # True at 16.25  	
224#subu $sp, $sp, 8 # IntegerLiteral at 17.21	  
228#sw $s5, 4($sp) # IntegerLiteral at 17.21   
232#li $t0, 78 # IntegerLiteral at 17.21	 	
236#sw $t0, ($sp) # IntegerLiteral at 17.21			
240#lw $t0, 0($sp) # IdentifierExp at 18.17	 	
244#subu $sp, $sp, 8 # IdentifierExp at 18.17 		
248#sw $s5, 4($sp) # IdentifierExp at 18.17	
252#sw $t0, ($sp) # IdentifierExp at 18.17		
256#subu $sp, $sp, 8 # IntegerLiteral at 18.21 	
260#sw $s5, 4($sp) # IntegerLiteral at 18.21  	
264#li $t0, 0 # IntegerLiteral at 18.21	
268#sw $t0, ($sp) # IntegerLiteral at 18.21 	
272#lw $t0, ($sp) # GreaterThan at 18.19 
276#lw $t1, 8($sp) # GreaterThan at 18.19		
280#sgt $t0, $t1, $t0 # GreaterThan at 18.19 	
284#addu $sp, $sp, 12 # GreaterThan at 18.19	 
288#sw $t0, ($sp) # GreaterThan at 18.19 		
292#lw $t0, ($sp) # And at 18.23 	 
296#beq $t0, $zero, skip_40 # And at 18.23	 	
300#addu $sp, $sp, 4 # And at 18.23	
304#lw $t0, 8($sp) # IdentifierExp at 18.26		
308#subu $sp, $sp, 4 # IdentifierExp at 18.26		
312#sw $t0, ($sp) # IdentifierExp at 18.26 		
316:skip_40: # And at 18.23 	
316#lw $t0, ($sp) # Assign at 18.15 	 
320#sw $t0, 12($sp) # Assign at 18.15  
324#addu $sp, $sp, 4 # Assign at 18.15 
328#subu $sp, $sp, 4 # This at 19.13	
332#sw $s2, ($sp) # This at 19.13  	
336#lw $t0, 16($sp) # IdentifierExp at 19.22	 
340#subu $sp, $sp, 8 # IdentifierExp at 19.22	  
344#sw $s5, 4($sp) # IdentifierExp at 19.22 	
348#sw $t0, ($sp) # IdentifierExp at 19.22			
352#lw $t0, 12($sp) # IdentifierExp at 19.24	  
356#subu $sp, $sp, 8 # IdentifierExp at 19.24	 	
360#sw $s5, 4($sp) # IdentifierExp at 19.24 	 
364#sw $t0, ($sp) # IdentifierExp at 19.24	 	
368#lw $t0, ($sp) # Plus at 19.23	  
372#lw $t1, 8($sp) # Plus at 19.23	 	
376#addu $t0, $t0, $t1 # Plus at 19.23		
380#addu $sp, $sp, 8 # Plus at 19.23		
384#sw $t0, ($sp) # Plus at 19.23			
388#lw $t0, 8($sp) # Call at 19.13  
392#beq $t0, $zero, nullPtrException # Call at 19.13  	
396#lw $t0, -12($t0) # Call at 19.13   
400#lw $t0, 24($t0) # Call at 19.13		 
404#jalr $t0 # Call at 19.13  	
408#subu $sp, $sp, 4 # This at 20.13	  
412#sw $s2, ($sp) # This at 20.13 	 
416#subu $sp, $sp, 4 # StringLiteral at 20.22  
420#la $t0, strLit_48 # StringLiteral at 20.22	 
424#sw $t0, ($sp) # StringLiteral at 20.22   
428#lw $t0, 4($sp) # Call at 20.13			
432#beq $t0, $zero, nullPtrException # Call at 20.13 
436#lw $t0, -12($t0) # Call at 20.13 
440#lw $t0, 16($t0) # Call at 20.13  	
444#jalr $t0 # Call at 20.13	 	
448#addu $sp, 12 # Block at 15.37 	 
452#lw $t0, 0($sp) # IdentifierExp at 15.32	 	
456#subu $sp, $sp, 8 # IdentifierExp at 15.32 	 
460#sw $s5, 4($sp) # IdentifierExp at 15.32			
464#sw $t0, ($sp) # IdentifierExp at 15.32	
468#subu $sp, $sp, 8 # IntegerLiteral at 15.33			
472#sw $s5, 4($sp) # IntegerLiteral at 15.33   
476#li $t0, 1 # IntegerLiteral at 15.33 	 
480#sw $t0, ($sp) # IntegerLiteral at 15.33  
484#lw $t0, ($sp) # Plus at 15.33 	 
488#lw $t1, 8($sp) # Plus at 15.33	
492#addu $t0, $t0, $t1 # Plus at 15.33   
496#addu $sp, $sp, 8 # Plus at 15.33 		
500#sw $t0, ($sp) # Plus at 15.33   
504#lw $t0, ($sp) # Assign at 15.32	 	
508#sw $t0, 8($sp) # Assign at 15.32 		
512#addu $sp, $sp, 8 # Assign at 15.32 	
516:while_enter_54: # While at 15.9			
516#lw $t0, 0($sp) # IdentifierExp at 15.25 		
520#subu $sp, $sp, 8 # IdentifierExp at 15.25	 
524#sw $s5, 4($sp) # IdentifierExp at 15.25		 
528#sw $t0, ($sp) # IdentifierExp at 15.25	 	
532#lw $t0, 24($sp) # IdentifierExp at 15.29			
536#subu $sp, $sp, 8 # IdentifierExp at 15.29	  
540#sw $s5, 4($sp) # IdentifierExp at 15.29	
544#sw $t0, ($sp) # IdentifierExp at 15.29	
548#lw $t0, ($sp) # LessThan at 15.27	 	
552#lw $t1, 8($sp) # LessThan at 15.27  
556#slt $t0, $t1, $t0 # LessThan at 15.27 	
560#addu $sp, $sp, 12 # LessThan at 15.27  
564#sw $t0, ($sp) # LessThan at 15.27	 	
568#lw $t0, ($sp) # While at 15.9   
572#addu $sp, $sp, 4 # While at 15.9 		
576#bne $t0, $zero, while_top_54 # While at 15.9	  
580:while_exit_54: # While at 15.9 	
580#addu $sp, 8 # Block at 15.9	 	
584#subu $sp, $sp, 4 # This at 22.9 	 
588#sw $s2, ($sp) # This at 22.9		
592#subu $sp, $sp, 4 # StringLiteral at 22.18	
596#la $t0, strLit_56 # StringLiteral at 22.18 		
600#sw $t0, ($sp) # StringLiteral at 22.18 		
604#lw $t0, 4($sp) # Call at 22.9 
608#beq $t0, $zero, nullPtrException # Call at 22.9 		
612#lw $t0, -12($t0) # Call at 22.9 	 
616#lw $t0, 16($t0) # Call at 22.9 	
620#jalr $t0 # Call at 22.9	 	
624#lw $t0, -16($s2) # IdentifierExp at 23.9			
628#subu $sp, $sp, 8 # IdentifierExp at 23.9	  
632#sw $s5, 4($sp) # IdentifierExp at 23.9  
636#sw $t0, ($sp) # IdentifierExp at 23.9 	 
640#subu $sp, $sp, 8 # IntegerLiteral at 23.10	 	
644#sw $s5, 4($sp) # IntegerLiteral at 23.10	 	
648#li $t0, 1 # IntegerLiteral at 23.10	
652#sw $t0, ($sp) # IntegerLiteral at 23.10  	
656#lw $t0, ($sp) # Plus at 23.10	
660#lw $t1, 8($sp) # Plus at 23.10	 
664#addu $t0, $t0, $t1 # Plus at 23.10	 
668#addu $sp, $sp, 8 # Plus at 23.10 
672#sw $t0, ($sp) # Plus at 23.10 		
676#lw $t0, ($sp) # Assign at 23.9	  
680#sw $t0, -16($s2) # Assign at 23.9 		
684#addu $sp, $sp, 8 # Assign at 23.9   
688#lw $t0, -16($s2) # IdentifierExp at 24.9		
692#subu $sp, $sp, 8 # IdentifierExp at 24.9 		
696#sw $s5, 4($sp) # IdentifierExp at 24.9 		
700#sw $t0, ($sp) # IdentifierExp at 24.9   
704#subu $sp, $sp, 8 # IntegerLiteral at 24.10 
708#sw $s5, 4($sp) # IntegerLiteral at 24.10	 
712#li $t0, 1 # IntegerLiteral at 24.10 	
716#sw $t0, ($sp) # IntegerLiteral at 24.10	 	
720#lw $t0, ($sp) # Plus at 24.10 	
724#lw $t1, 8($sp) # Plus at 24.10		 
728#addu $t0, $t0, $t1 # Plus at 24.10	 
732#addu $sp, $sp, 8 # Plus at 24.10 
736#sw $t0, ($sp) # Plus at 24.10		
740#lw $t0, ($sp) # Assign at 24.9 	 
744#sw $t0, -16($s2) # Assign at 24.9   
748#addu $sp, $sp, 8 # Assign at 24.9	
752#lw $ra, 4($sp) # MethodDeclVoid at 12.17 
756#lw $s2, 16($sp) # MethodDeclVoid at 12.17		
760#addu $sp, $sp, 20 # MethodDeclVoid at 12.17		
764#jr $ra # MethodDeclVoid at 12.17  	
.globl fcn_99_run # MethodDeclVoid at 30.17 	
768:fcn_99_run: # MethodDeclVoid at 30.17	  
768#subu $sp, $sp, 8 # MethodDeclVoid at 30.17  	
772#sw $ra, 4($sp) # MethodDeclVoid at 30.17 		
776#sw $s2, ($sp) # MethodDeclVoid at 30.17			
780#lw $s2, 8($sp) # MethodDeclVoid at 30.17 	 
784#li $s6, 1 # NewObject at 31.17  	
788#li $s7, 0 # NewObject at 31.17			
792#jal newObject # NewObject at 31.17			
796#la $t0, CLASS_Jam # NewObject at 31.17	
800#sw $t0, -12($s7) # NewObject at 31.17			
804#lw $t0, 0($sp) # IdentifierExp at 32.9 	 
808#subu $sp, $sp, 4 # IdentifierExp at 32.9  
812#sw $t0, ($sp) # IdentifierExp at 32.9 	
816#subu $sp, $sp, 8 # IntegerLiteral at 32.16   
820#sw $s5, 4($sp) # IntegerLiteral at 32.16			
824#li $t0, 33 # IntegerLiteral at 32.16 		
828#sw $t0, ($sp) # IntegerLiteral at 32.16	
832#lw $t0, 8($sp) # Call at 32.11	  
836#beq $t0, $zero, nullPtrException # Call at 32.11  
840#lw $t0, -12($t0) # Call at 32.11		
844#lw $t0, 40($t0) # Call at 32.11 	
848#jalr $t0 # Call at 32.11	 	
852#lw $t0, 0($sp) # IdentifierExp at 33.13	
856#subu $sp, $sp, 4 # IdentifierExp at 33.13 	 
860#sw $t0, ($sp) # IdentifierExp at 33.13	
864#lw $t0, ($sp) # InstVarAccess at 33.14			
868#beq $t0, $zero, nullPtrException # InstVarAccess at 33.14 		
872#lw $t0, -16($t0) # InstVarAccess at 33.14		
876#subu $sp, $sp, 4 # InstVarAccess at 33.14		 
880#sw $s5, 4($sp) # InstVarAccess at 33.14  
884#sw $t0, ($sp) # InstVarAccess at 33.14	 	
888#lw $t0, ($sp) # Assign at 33.11		 
892#sw $t0, -16($s2) # Assign at 33.11 	 
896#addu $sp, $sp, 8 # Assign at 33.11   
900#lw $t0, -16($s2) # IdentifierExp at 34.9 	 
904#subu $sp, $sp, 8 # IdentifierExp at 34.9 	 
908#sw $s5, 4($sp) # IdentifierExp at 34.9 	 
912#sw $t0, ($sp) # IdentifierExp at 34.9 		
916#subu $sp, $sp, 8 # IntegerLiteral at 34.10		 
920#sw $s5, 4($sp) # IntegerLiteral at 34.10	 
924#li $t0, 1 # IntegerLiteral at 34.10  
928#sw $t0, ($sp) # IntegerLiteral at 34.10	 	
932#lw $t0, ($sp) # Plus at 34.10	 
936#lw $t1, 8($sp) # Plus at 34.10	 
940#addu $t0, $t0, $t1 # Plus at 34.10   
944#addu $sp, $sp, 8 # Plus at 34.10		
948#sw $t0, ($sp) # Plus at 34.10	 
952#lw $t0, ($sp) # Assign at 34.9	 
956#sw $t0, -16($s2) # Assign at 34.9	 
960#addu $sp, $sp, 8 # Assign at 34.9	  
964#subu $sp, $sp, 4 # This at 35.9		 
968#sw $s2, ($sp) # This at 35.9  	
972#lw $t0, -16($s2) # IdentifierExp at 35.23 	 
976#subu $sp, $sp, 8 # IdentifierExp at 35.23 
980#sw $s5, 4($sp) # IdentifierExp at 35.23  	
984#sw $t0, ($sp) # IdentifierExp at 35.23 	
988#lw $t0, 8($sp) # Call at 35.14		 
992#beq $t0, $zero, nullPtrException # Call at 35.14	  
996#lw $t0, -12($t0) # Call at 35.14 		
1000#lw $t0, 24($t0) # Call at 35.14 		
1004#jalr $t0 # Call at 35.14		
1008#subu $sp, $sp, 4 # This at 36.9  	
1012#sw $s2, ($sp) # This at 36.9 	
1016#subu $sp, $sp, 4 # StringLiteral at 36.23 
1020#la $t0, strLit_96 # StringLiteral at 36.23	 	
1024#sw $t0, ($sp) # StringLiteral at 36.23	 
1028#lw $t0, 4($sp) # Call at 36.14 	
1032#beq $t0, $zero, nullPtrException # Call at 36.14 		
1036#lw $t0, -12($t0) # Call at 36.14  	
1040#lw $t0, 16($t0) # Call at 36.14	 	
1044#jalr $t0 # Call at 36.14		 
1048#lw $ra, 8($sp) # MethodDeclVoid at 30.17	
1052#lw $s2, 8($sp) # MethodDeclVoid at 30.17			
1056#addu $sp, $sp, 16 # MethodDeclVoid at 30.17		
1060#jr $ra # MethodDeclVoid at 30.17	 
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1064:readLine:
	
1064#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1068#	sw $ra, 4($sp) # save $ra
1072#	move $t1,$sp # save "original" sp

1076:  doRead:

	# read the character
1076#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1080#	subu $t2,$v0,13
1084#	bne $t2,$zero,notReturnRL
1088#	jal readLogicalChar
1092#	subu $t2,$v0,10 # check for newline
1096#	beq $t2,$zero,foundNewLine
1100#	sw $v0,lastCharRead # push back character into queue
1104#	j foundNewLine # go process the line

1108:  notReturnRL:

	# at this point, $v0 has our character

1108#	subu $t0,$v0,10
1112#	beq $t0,$zero,foundNewLine
1116#	blt $v0,$zero,foundEof
1117##...slt $at,$v0,$zero
1121##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1124#	subu $sp,$sp,4
1128#	sw $v0,($sp)

	# loop back up to get next character
1132#	j doRead

1136:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1136#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1140#	sw $zero,8($sp) # return-value: null
1144#	j rlReturn # return

1148:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1148#	subu $t0,$t1,$sp # number of chars we read (times 4)
1152#	srl $s6,$t0,2 # number of words on stack with chars
1156#	subu $sp,$sp,4 # push char-count ...
1160#	sw $s6,($sp) # ... onto stack
1164#	addu $t2,$t0,5 # GC tag, incl. for count-word
1168#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1172#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1176#	srl $s6,$s6,2 # data words in object
1180#	move $s7,$zero # # object words in object
1184#	jal newObject # allocate space
	
	# store header words
1188#	la $t0,CLASS_String
1192#	sw $t0,-12($s7) # store class tag (String) into object
1196#	lw $t2,4($sp) # char-count
1200#	sll $t1,$t2,2 # 4 times number of chars
1204#	subu $t2,$zero,$t2 # negative of char-count
1208#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1212#	lw $t0,-8($s7) # data words in object
1216#	sll $t0,$t0,2 # data bytes in object
1220#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1224#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1228#	addu $sp,$sp,8 # pop redundant object-pointer and count
1232#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1236#	beq $sp,$t1,doneCharCopy
1240:  charCopyLoop:
1240#	lw $t2,($sp)
1244#	sb $t2,-9($t0)
1248#	addu $sp,$sp,4
1252#	subu $t0,$t0,1
1256#	bne $sp,$t1,charCopyLoop
1260:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1260#	sw $s7,8($sp)
	
1264:  rlReturn:
	# restore return address and return
1264#	lw $ra,4($sp) # restore return address, ...
1268#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1272#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1276:readInt:

	# save $ra by pushing onto stack
1276#	subu $sp,$sp,4
1280#	sw $ra,($sp)

1284:  riSkipWhiteLoop:
	# read a character
1284#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1288#	subu $t0,$v0,32
1292#	bgt $t0,$zero,nonWhite
1293##...slt $at,$zero,$t0
1297##...bne $at,$zero,$+44
1300#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1304#	subu $t0,$v0,10
1308#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1312#	subu $t0,$v0,9
1316#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1320#	subu $t0,$v0,13
1324#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1328#	subu $t0,$v0,12
1332#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1336#	j badIntegerFormat # illegal integer char: abort program

1340:  nonWhite:
1340#	subu $t0,$v0,'-'
1344#	li $t4,1 # final multiplier
1348#	bne $t0,$zero,helpReadInt # go read
1352#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1356#	jal readLogicalChar

1360:  helpReadInt:
1360#	li $t2,10
1364#	subu $t1,$v0,'0' # convert digit to 0-9 value
1368#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1369##...sltu $at,$t1,$t2
1373##...beq $at,$zero,$+2080
1376#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1380:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1380#	jal readLogicalChar # read next character
1384#	subu $t1,$v0,'0' # convert digit to 0-9 value
1388#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1389##...sltu $at,$t1,$t2
1393##...beq $at,$zero,$+20

1396#	mul $t3,$t3,$t2 # multiply old value by 10
1397##...mult $t3,$t2
1401##...mflo $t3
1404#	addu $t3,$t3,$t1 # add in value of new digit
1408#	j digitLoop

1412:  doneDigitLoop:

	# "push back" unused character into queue
1412#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1416#	lw $ra,($sp)
1420#	mult $t3,$t4 # multiply to account for poss. minus sign
1424#	mflo $t3
1428#	sw $t3,($sp) # result
1432#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1436#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1440:readChar:

	# save $ra by pushing onto stack
1440#	subu $sp,$sp,4
1444#	sw $ra,($sp)

  	# read the character
1448#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1452#	lw $ra,($sp)
1456#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1460#	sw $v0,($sp)

	# return
1464#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1468:printStr:
	# check for null, printing "(null)", if so
1468#	lw $t0,($sp)
1472#	bne $t0,$zero,psNotNull

	# print "(null)"
1476#	la $a0,nullStr
1480#	li $v0,4
1484#	syscall
1488#	j donePrintStr
	
1492:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1492#	subu $t0,$t0,8
1496#	lw $t1,($t0) # word just beyond end of string
1500#	sll $t1,$t1,2
1504#	subu $t1,$t0,$t1 # first word in string
1508#	lw $t0,4($t0) # negative of string-length
1512#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1516#	beq $t0,$t1,donePrintStr
1520:  psLoop:
1520#	lb $a0,($t1) # next byte
1524#	li $v0,11 # code for printing char
1528#        syscall # print the char
1532#	addu $t1,$t1,1 # go to next char
1536#	blt $t1,$t0,psLoop
1537##...slt $at,$t1,$t0
1541##...bne $at,$zero,$-20

1544:  donePrintStr:
	# pop stack and return
1544#	addu $sp,$sp,8
1548#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1552:printInt:
	# pop value off stack, along with 'this'
1552#	lw $a0,($sp)
1556#	addu $sp,$sp,12

	# print it
1560#	li $v0,1 # code for print-int
1564#	syscall

	# return
1568#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1572:printBool:
	# pop value off stack, along with 'this'
1572#	lw $t0,($sp)
1576#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1580#	la $a0,falseString
1584#	beq $t0,$zero,skipPB
1588#	la $a0,trueString
1592:  skipPB:
1592#	li $v0,4 # code for print-string
1596#	syscall

	# return
1600#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1604:substring:

	# save $ra by pushing onto stack
1604#	subu $sp,$sp,4
1608#	sw $ra,($sp)

	# get string value off stack, test for null
1612#	lw $t0,20($sp)
1616#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1620#	lw $t0,-4($t0) # negative of string length
1624#	subu $t0,$zero,$t0 # string length
1628#	lw $t1,4($sp) # k
1632#	lw $t2,12($sp) # n
1636#	bgt $zero,$t2,strIndexOutOfBounds
1637##...slt $at,$t2,$zero
1641##...bne $at,$zero,$+1780
1644#	bgt $t2,$t1,strIndexOutOfBounds
1645##...slt $at,$t1,$t2
1649##...bne $at,$zero,$+1772
1652#	bgt $t1,$t0,strIndexOutOfBounds
1653##...slt $at,$t0,$t1
1657##...bne $at,$zero,$+1764

	# allocate memory
1660#	subu $s6,$t1,$t2 # # chars in target-string
1664#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1668#	srl $s6,$s6,2 # convert bytes-count to word-count
1672#	move $s7,$zero # (no object-bytes in string)
1676#	jal newObject

	# store "String" tag in object-type field
1680#	la $t0,CLASS_String
1684#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1688#	lw $t1,8($sp) # k
1692#	lw $t2,16($sp) # n
1696#	subu $t0,$t2,$t1 # value to store
1700#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1704#	lw $t3,24($sp) # source string pointer
1708#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
1712#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
1716#	lw $t4,-8($t3) # # data words in source string
1720#	sll $t4,$t4,2 # # data bytes in source string
1724#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1728#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1732#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1736#	lw $t2,-8($s7) # # data words in target string
1740#	sll $t2,$t2,2 # # data bytes in target string
1744#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
1748:  subCopyLoopzz:
1748#	lb $t4,-8($t3)
1752#	sb $t4,-8($t2)
1756#	addu $t2,$t2,1
1760#	addu $t3,$t3,1
1764#	blt $t3,$t1,subCopyLoopzz
1765##...slt $at,$t3,$t1
1769##...bne $at,$zero,$-20
	
1772:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1772#	lw $ra,4($sp) # restore $ra
1776#	addu $sp,$sp,24 # pop stack
	
	# return
1780#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1784:length:

	# get string pointer
1784#	lw $t0,($sp)
	
	# grow stack
1788#	subu $sp,$sp,4

	# store GC tag
1792#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1796#	lw $t0,-4($t0) # -length
1800#	subu $t0,$zero,$t0
1804#	sw $t0,($sp) #store length

	# return
1808#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
1812:concat:
 	# save $ra by pushing onto stack
1812#	subu $sp,$sp,4
1816#	sw $ra($sp)

	# get string pointers and check parameter for null
1820#	lw $t0,4($sp)
1824#	beq $t0,$zero,nullPtrException
1828#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
1832#	lw $t0,-4($t0) # negative size of second object
1836#	lw $t1,-4($t1) # negative size of first object
1840#	addu $s6,$t0,$t1 # sum of negative sizes
1844#	sra $s6,$s6,2 # negative word-size of char part
1848#	subu $s6,$zero,$s6 # word size of char part
1852#	addu $s6,$s6,1 # data word size, including v-table word
1856#	move $s7,$zero
1860#	jal newObject

	# store "String" tag in object-type field
1864#	la $t0,CLASS_String
1868#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
1872#	lw $ra,4($sp) # return address
1876#	lw $t0,8($sp) # second object
1880#	lw $t1,12($sp) # first object
1884#	addu $sp,$sp,12 # pop
1888#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
1892#	lw $t2,-4($t0) # negative length of second object
1896#	lw $t3,-4($t1) # negative length of first object
1900#	addu $t4,$t2,$t3 # sum of negative lengths
1904#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
1908#	lw $t4,-8($t1) # # data words in first string
1912#	sll $t4,$t4,2 # # data bytes in first string
1916#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1920#	lw $t4,-8($s7) # # data words in new string
1924#	sll $t4,$t4,2 # # data bytes in new string
1928#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1932#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1936#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
1940:  concatLoop1zz:
1940#	lb $t4,-8($t1)
1944#	sb $t4,-8($s7)
1948#	addu $s7,$s7,1
1952#	addu $t1,$t1,1
1956#	blt $t1,$t3,concatLoop1zz
1957##...slt $at,$t1,$t3
1961##...bne $at,$zero,$-20
1964:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1964#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
1968#	lw $t4,-8($t0) # # data words in second string
1972#	sll $t4,$t4,2 # # data bytes in second string
1976#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1980#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
1984:  concatLoop2zz:
1984#	lb $t4,-8($t1)
1988#	sb $t4,-8($s7)
1992#	addu $s7,$s7,1
1996#	addu $t1,$t1,1
2000#	blt $t1,$t3,concatLoop2zz
2001##...slt $at,$t1,$t3
2005##...bne $at,$zero,$-20
2008:  doneConcatLoop2zz:
 
2008:  concatRtnzz:
	# return
2008#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2012:charAt:
	# get string
2012#	lw $t0,8($sp)

	# check that index is in bounds
2016#	lw $t1,-4($t0) # negative of # data words in string
2020#	subu $t3,$zero,$t1 # # chars in string
2024#	lw $t2,($sp) # index
2028#	bgeu $t2,$t3,strIndexOutOfBounds
2029##...sltu $at,$t2,$t3
2033##...beq $at,$zero,$+1388

	# access element
2036#	lw $t1,-8($t0) # # data words in object
2040#	sll $t1,$t1,2 # - byte-offset from end of chars
2044#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2048#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2052#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2056#	addu $sp,$sp,4
2060#	sw $t0,($sp)
2064#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2068#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2072:intToString:

	# save return address on stack; allocate space for dummy GC tag
2072#	subu $sp,$sp,8
2076#	sw $ra,4($sp)

	# save current sp
2080#	move $t0,$sp

	# move constant 10 into $t3
2084#	li $t3,10

	# get argument, negate if negative
2088#	lw $t1,8($sp)
2092#	bge $t1,$zero,itsNonNegLoop
2093##...slt $at,$t1,$zero
2097##...beq $at,$zero,$+8
2100#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2104:  itsNonNegLoop:
2104#	divu $t1,$t3
2108#	mflo $t1 # quotient
2112#	mfhi $t4 # remainder
2116#	addu $t4,$t4,'0' # turn remainder into digit
2120#	subu $sp,$sp,4
2124#	sw $t4,($sp) # push digit onto stack
2128#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2132#	lw $t4,8($t0)
2136#	bge $t4,$zero,itsSkipNeg
2137##...slt $at,$t4,$zero
2141##...beq $at,$zero,$+16
2144#	li $t4,'-'
2148#	subu $sp,$sp,4
2152#	sw $t4,($sp)
2156:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2156#	subu $s6,$t0,$sp
2160#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2164#	sw $t3,($t0)
2168#	srl $s6,$s6,2
2172#	subu $sp,$sp,4
2176#	sw $s6,($sp)
	
	# allocate memory
2180#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2184#	srl $s6,$s6,2
2188#	move $s7,$zero # no "object" words in object
2192#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2196#	lw $t0,4($sp)
2200#	addu $sp,$sp,8

	# store "String" tag into class field
2204#	subu $s7,$s7,8 # address of header-1 word
2208#	la $t1,CLASS_String
2212#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2216#	subu $t0,$zero,$t0
2220#	sw $t0,4($s7)

2224#	lw $t1,($s7) # number of data words in string
2228#	sll $t1,$t1,2 # number data bytes in string
2232#	subu $t1,$s7,$t1 # first location to store chars in string
2236#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2240:  itsLoop:
2240#	lw $t2,($sp)
2244#	addu $sp,$sp,4
2248#	sb $t2,($t1)
2252#	addu $t1,$t1,1
2256#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2260#	lw $ra,4($sp)
2264#	addu $sp,$sp,16
2268#	addu $t0,$t0,15
2272#	and $t0,$t0,0xfffffffc
2273##...lui $at,65535
2277##...ori $at,$at,0xfffc
2281##...and $t0,$t0,$at
2284#	sw $t0,($sp)
2288#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2292:intToChar:
	# save return address
2292#	subu $sp,$sp,4
2296#	sw $ra,($sp)

	# allocate object
2300#	li $s6,2
2304#	move $s7,$zero
2308#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2312#	lw $ra,4($sp)
2316#	lw $t1,8($sp)
2320#	addu $sp,$sp,16

	# store "String" tag into class field
2324#	la $t0,CLASS_String
2328#	sw $t0,-12($s7)

	# store data in string
2332#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2336#	li $t0,-1
2340#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2344#	sw $s7,($sp)

	# return
2348#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2352:compareTo:
	# get string pointers and check parameter for null
2352#	lw $t0,($sp) # second string
2356#	beq $t0,$zero,nullPtrException
2360#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2364#	lw $t2,-4($t0) # negative length of second string
2368#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2372#	slt $t4,$t3,$t2
2376#	slt $t5,$t2,$t3
2380#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2384#	lw $t2,-8($t0) # # data words in second string
2388#	lw $t3,-8($t1) # # data words in first string
2392#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2396#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2400#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2404#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2408#	beq $zero,$t5,skipStrCmpLenzz
2412#	move $t2,$t3
2416:  skipStrCmpLenzz:
2416#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2420:  cmpLoopzz:
2420#	lw $t3,-8($t1) # word from str2
2424#	lw $t4,-8($t0) # word from str1
2428#	bne $t3,$t4,cmpNotEqualzz
2432#	addu $t1,$t1,4
2436#	addu $t0,$t0,4
2440#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2444#	j cmpHitLimitzz

2448:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2448#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2452#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2456#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2460:  cmpHitLimitzz:
2460#	sw $t5,($sp) # store value
2464#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2468#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2472:readLogicalChar:

	# check if we already have a character
2472#	lw $v0,lastCharRead
2476#	li $t0,-2
2480#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2484#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2488#	jr $ra # return
	
2492:  doReadCh:
	# we need to actually read a character: read and return
2492#	li $v0,12 # use system call to read a character
2496#	syscall
2500#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2504:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2504#	blt $s7,$zero arraySizeOutOfBounds
2505##...slt $at,$s7,$zero
2509##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2512#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2516:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2516#	move $t3,$s6
2520#	bge $t3,$zero,newSkip
2521##...slt $at,$t3,$zero
2525##...beq $at,$zero,$+8
2528#	move $t3,$zero

2532:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2532#	addu $t0,$t3,$s7
2536#	sll $t0,$t0,2
2540#	addu $t0,$t0,8 # amount of memory needed
2544#	addu $t1,$t0,$s3
2548#	bgtu $t1,$s4,doGC
2549##...sltu $at,$s4,$t1
2553##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2556#	move $t2,$s3
2560:  zeroObjLoop:
2560#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2564#	addu $s3,4
2568#	bltu $s3,$t1,zeroObjLoop
2569##...sltu $at,$s3,$t1
2573##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2576#	sll $t0,$s7,2    # number of post-header bytes
2580#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2584#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2588#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2592#	move $s7,$t0
2596#	subu $sp,$sp,4
2600#	sw $t0,($sp)

2604#	jr $ra
	
2608:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2608#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2612#	subu $sp,$sp,4
2616#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2620#	lw $t0,cur_seg
2624#	move $t7,$s4
2628#	la $t6,seg1_start
2629##...lui $t6,16
2633##...addiu $t6,$t6,4160
2636#	la $s3,seg0_start
2640#	la $s4,seg0_end
2641##...lui $s4,16
2645##...addiu $s4,$s4,4160
2648#	sw $zero,cur_seg
2652#	bne $t0,$zero,skipGc1
2656#	la $t6,seg0_start
2660#	la $s3,seg1_start
2661##...lui $s3,16
2665##...addiu $s3,$s3,4160
2668#	la $s4,seg1_end
2669##...lui $s4,32
2673##...addiu $s4,$s4,4160
2676#	sw $s5,cur_seg
2680:  skipGc1:
2680#	li $t5,-2
2684#	lw $t0,stack_bottom
2688#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2692:  gcStackCopyLoop:
2692#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2696#	sll $t2,$t1,31 # zero iff low bit was zero
2700#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2704#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2708#	bleu $t1,$t6,gcTestIterDone1
2709##...sltu $at,$t6,$t1
2713##...beq $at,$zero,$+148
2716#	bgtu $t1,$t7,gcTestIterDone1
2717##...sltu $at,$t7,$t1
2721##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2724#	lw $t2,-8($t1) # possible forwarding tag
2728#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
2732#	lw $t2,-4($t1) # forwarding pointer: object's new address
2736#	sw $t2,4($t0) # update stack value
2740#	j gcTestIterDone1 # do next iteration

2744:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
2744#	bge $t2,$zero,gcSkip2
2745##...slt $at,$t2,$zero
2749##...beq $at,$zero,$+8
2752#	move $t2,$zero # set to zero if -1 (number of data words)

2756:  gcSkip2:
2756#	sll $t2,$t2,2
2760#	addu $t2,$t2,8
2764#	subu $t4,$t1,$t2 # address of first word of source
2768#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2772#	bge $t3,$zero,gcH2Neg1
2773##...slt $at,$t3,$zero
2777##...beq $at,$zero,$+8
2780#	move $t3,$zero
2784:  gcH2Neg1:
2784#	sll $t3,$t3,2
2788#	addu $t3,$t3,$t1 # address one word past last word of source

2792#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2796#	lw $s0,($t4)
2800#	lw $s1,-8($t1)
2804#	sw $s1,($t4)
2808#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
2812:  gCinnerCopy1:
2812#	lw $s0,($t4)
2816#	sw $s0,($s3)
2820#	addu $t4,$t4,4
2824#	addu $s3,$s3,4
2828#	bltu $t4,$t3,gCinnerCopy1
2829##...sltu $at,$t4,$t3
2833##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2836#	sw $t5,-8($t1) # -2 in first header-slot
2840#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
2844#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
2848#	j gcTestIterDone1

2852:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
2852#	subu $t0,$t0,$t1
2856#	subu $t0,$t0,3

2860:  gcTestIterDone1:
2860#	bgeu $t0,$sp,gcStackCopyLoop
2861##...sltu $at,$t0,$sp
2865##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
2868#	lw $t1,cur_seg
2872#	la $t0,seg0_start
2876#	beq $t1,$zero,gcSkip4
2880#	la $t0,seg1_start
2881##...lui $t0,16
2885##...addiu $t0,$t0,4160

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

2888:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
2888#	bgeu $t0,$s3,gcFinishUp
2889##...sltu $at,$t0,$s3
2893##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

2896:  gcHeapCopyLoop:
	# check if we have a data array
2896#	lw $t1,($t0) # first header word for current object
2900#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
2901##...slt $at,$t1,$zero
2905##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
2908#	lw $t1,4($t0) # data words
2912#	addu $t1,$t1,2 # add in # header words
2916#	sll $t1,$t1,2 # convert to byte-count
2920#	addu $t0,$t0,$t1 # skip over object
2924#	j gcTestIterDone2 # go do next object, if any

2928:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
2928#	sll $t2,$t1,2 # # data bytes
2932#	addu $t2,$t2,8 # to skip header word
2936#	addu $t2,$t0,$t2 # pointer to new object
2940#	lw $t3,-8($t2) # word to swap
2944#	sw $t1,-8($t2) # store header word
2948#	sw $t3,($t0) # restore first word of object

2952#	lw $t3,-4($t2) # # object words (negative treated as zero)
2956#	bge $t3,$zero,gcH2Neg2
2957##...slt $at,$t3,$zero
2961##...beq $at,$zero,$+8
2964#	move $t3,$zero
2968:  gcH2Neg2:
2968#	sll $t3,$t3,2 # # object bytes
2972#	move $t0,$t2 # address of first pointer in object
2976#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
2980#	beq $t0,$s1,gcTestIterDone2
	
2984:  gcNextPointerInObject:
	# get pointer from object
2984#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
2988#	bleu $t1,$t6,gcGoNextPointerSlot
2989##...sltu $at,$t6,$t1
2993##...beq $at,$zero,$+136
2996#	bgtu $t1,$t7,gcGoNextPointerSlot
2997##...sltu $at,$t7,$t1
3001##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3004#	lw $t8,-8($t1) # possible forwarding tag
3008#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3012#	lw $t8,-4($t1) # forwarding pointer: object's new address
3016#	sw $t8,($t0) # update pointer in object
3020#	j gcGoNextPointerSlot # do next iteration

3024:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3024#	bge $t8,$zero,gcSkip5
3025##...slt $at,$t8,$zero
3029##...beq $at,$zero,$+8
3032#	move $t8,$zero # set to zero if -1

3036:  gcSkip5:
3036#	sll $t8,$t8,2
3040#	addu $t8,$t8,8
3044#	subu $t4,$t1,$t8 # address of first word of source
3048#	lw $t3,-4($t1)
3052#	bge $t3,$zero,gcNoNeg
3053##...slt $at,$t3,$zero
3057##...beq $at,$zero,$+8
3060#	move $t3,$zero
3064:  gcNoNeg:
3064#	sll $t3,$t3,2
3068#	addu $t3,$t3,$t1 # address one word past last word of source

3072#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3076#	lw $s0,($t4)
3080#	lw $t9,-8($t1)
3084#	sw $t9,($t4)
3088#	sw $s0,-8($t1)

	# copy all source bytes to the target
3092:  gCinnerCopy2:
3092#	lw $s0,($t4)
3096#	sw $s0,($s3)
3100#	addu $t4,$t4,4
3104#	addu $s3,$s3,4
3108#	bltu $t4,$t3,gCinnerCopy2
3109##...sltu $at,$t4,$t3
3113##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3116#	sw $t5,-8($t1) # -2 in first header-slot
3120#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3124#	sw $t8,($t0)

3128:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3128#	addu $t0,$t0,4
3132#	bltu $t0,$s1,gcNextPointerInObject
3133##...sltu $at,$t0,$s1
3137##...bne $at,$zero,$-152

3140:  gcTestIterDone2:
3140#	bltu $t0,$s3,gcHeapCopyLoop
3141##...sltu $at,$t0,$s3
3145##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3148:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3148#	lw $s2,($sp)
3152#	addu $sp,$sp,4

	# mark us as having already GC'd
3156#	move $t5,$s5

	# go try and allocate again
3160#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3164:vm_init:

	# mark bottom of stack
3164#	sw $sp,stack_bottom
3168#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3172#	move $s2,$zero
3176#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3180#	li $s5,5
3184#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3188#	la $s3,seg0_start
3192#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3196#	la $s4,seg0_end
3197##...lui $s4,16
3201##...addiu $s4,$s4,4160
3204#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3208#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3212:divide:
	# get parameters; abort if divisor zero
3212#	lw $t0,($sp)
3216#	lw $t1,8($sp)
3220#	beq $t0,$zero,divByZeroError
	
	# perform division
3224#	div $t1,$t0
3228#	mflo $t0

	# store result, adjust stack and return
3232#	addu $sp,$sp,8 # adjust stack
3236#	sw $t0,($sp) # store result
3240#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3244:remainder:
	# get parameters; abort if divisor zero
3244#	lw $t0,($sp)
3248#	lw $t1,8($sp)
3252#	beq $t0,$zero,divByZeroError
	
	# perform division
3256#	div $t1,$t0
3260#	mfhi $t0

	# store result, adjust stack and return
3264#	addu $sp,$sp,8 # adjust stack
3268#	sw $t0,($sp) # store result
3272#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3276:checkCast:
	# get object, allow immediately if null
3276#	lw $t2,($sp)
3280#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3284#	lw $t3,-8($t2) # <= 0 if array
3288#	lw $t2,-12($t2) # vtable address (unless array)
3292#	bgt $t3,$zero,skipArrayCast
3293##...slt $at,$zero,$t3
3297##...bne $at,$zero,$+8
3300#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3304:  skipArrayCast:
3304#	bge $t2,$t1,castException
3305##...slt $at,$t2,$t1
3309##...beq $at,$zero,$+152
3312#	blt $t2,$t0,castException
3313##...slt $at,$t2,$t0
3317##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3320:  checkCastReturn:	
3320#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3324:instanceOf:
	# get object, go return false if null
3324#	lw $t2,($sp)
3328#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3332#	lw $t3,-8($t2) # <= 0 if array
3336#	lw $t2,-12($t2) # vtable address (unless array)
3340#	bgt $t3,$zero,skipArrayInstanceOf
3341##...slt $at,$zero,$t3
3345##...bne $at,$zero,$+8
3348#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3352:  skipArrayInstanceOf:
3352#	sge $t0,$t2,$t0
3353##...slt $t0,$t2,$t0
3357##...xori $t0,$t0,0x1
3360#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3364#	and $t2,$t0,$t1
3368:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3368#	sw $t2,($sp)
3372#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3376:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3376#	li $v0,4 # syscall-code for print-string
3380#	syscall
3384:exit:
	# print termination message
3384#	li $v0,4
3388#	la $a0,exitString
3392#	syscall

	# terminate execution
3396#	li $v0,10 #syscall-code for "exit"
3400#	syscall

3404:outOfHeapMemory:
3404#	la $a0,heapMemoryMsg
3408#	j exitError
3412:divByZeroError:
3412#	la $a0,divByZeroMsg
3416#	j exitError
3420:strIndexOutOfBounds:
3420#	la $a0,strIndexOutOfBoundsMsg
3424#	j exitError
3428:arrayIndexOutOfBounds:
3428#	la $a0,arrayIndexOutOfBoundsMsg
3432#	j exitError
3436:arraySizeOutOfBounds:
3436#	la $a0,arraySizeOutOfBoundsMsg
3440#	j exitError
3444:nullPtrException:
3444#	la $a0,nullPtrExceptionMsg
3448#	j exitError
3452:badIntegerFormat:
3452#	la $a0,badIntegerFormatMsg
3456#	j exitError
3460:castException:
3460#	la $a0,castExceptionMsg
3464#	j exitError

############## data section ################
	.data
	.align 2

3852:cur_seg:
	.word 0

3856:lastCharRead:
	.word -2 # -2 => no buffered character

3860:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3887:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3910:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3945:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3979:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4012:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4043:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4091:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4112:gcMsg: 
      .asciiz "\nGC!\n"

4118:nullStr:
	.asciiz "null"
4123:trueString:
	.asciiz "true"
4128:falseString:
	.asciiz "false"
4134:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4156:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4160:seg0_start:
	.space 0x100000
1052736:seg0_end:
1052736:seg1_start:
	.space 0x100000
2101312:seg1_end:



