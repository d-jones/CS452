 .data # Program at 1.1  	
  .byte 97 # StringLiteral at 8.17 
  .byte 108 # StringLiteral at 8.17  
  .byte 115 # StringLiteral at 8.17	 	
  .byte 107 # StringLiteral at 8.17   
  .byte 100 # StringLiteral at 8.17 	
  .byte 106 # StringLiteral at 8.17 	
  .byte 102 # StringLiteral at 8.17		
  .byte 108 # StringLiteral at 8.17			
  .byte 107 # StringLiteral at 8.17	  
  .byte 97 # StringLiteral at 8.17  	
  .byte 115 # StringLiteral at 8.17	  
  .byte 0 # StringLiteral at 8.17  	
  .word CLASS_String # StringLiteral at 8.17 
  .word 4 # StringLiteral at 8.17		
  .word -11 # StringLiteral at 8.17		 
4004:strLit_14: # StringLiteral at 8.17	
  .byte 10 # StringLiteral at 15.18		
  .byte 0 # StringLiteral at 15.18	 
  .byte 0 # StringLiteral at 15.18	  
  .byte 0 # StringLiteral at 15.18 
  .word CLASS_String # StringLiteral at 15.18  	
  .word 2 # StringLiteral at 15.18		 
  .word -1 # StringLiteral at 15.18  
4020:strLit_29: # StringLiteral at 15.18 
  .byte 10 # StringLiteral at 18.18  	
  .byte 0 # StringLiteral at 18.18		 
  .byte 0 # StringLiteral at 18.18	
  .byte 0 # StringLiteral at 18.18	 
  .word CLASS_String # StringLiteral at 18.18   
  .word 2 # StringLiteral at 18.18	  
  .word -1 # StringLiteral at 18.18			
4036:strLit_42: # StringLiteral at 18.18 		
  .byte 116 # StringLiteral at 20.15   
  .byte 101 # StringLiteral at 20.15 	 
  .byte 115 # StringLiteral at 20.15  
  .byte 116 # StringLiteral at 20.15   
  .byte 32 # StringLiteral at 20.15 	 
  .byte 115 # StringLiteral at 20.15  	
  .byte 116 # StringLiteral at 20.15  
  .byte 114 # StringLiteral at 20.15 	 
  .byte 105 # StringLiteral at 20.15  	
  .byte 110 # StringLiteral at 20.15 		
  .byte 103 # StringLiteral at 20.15 
  .byte 0 # StringLiteral at 20.15			
  .word CLASS_String # StringLiteral at 20.15 		
  .word 4 # StringLiteral at 20.15 	 
  .word -11 # StringLiteral at 20.15  
4060:strLit_47: # StringLiteral at 20.15	
  .byte 10 # StringLiteral at 23.18	
  .byte 0 # StringLiteral at 23.18	 
  .byte 0 # StringLiteral at 23.18 	 
  .byte 0 # StringLiteral at 23.18	 	
  .word CLASS_String # StringLiteral at 23.18		
  .word 2 # StringLiteral at 23.18  
  .word -1 # StringLiteral at 23.18 		
4076:strLit_53: # StringLiteral at 23.18   
  .byte 10 # StringLiteral at 25.18   
  .byte 0 # StringLiteral at 25.18 
  .byte 0 # StringLiteral at 25.18 
  .byte 0 # StringLiteral at 25.18 		
  .word CLASS_String # StringLiteral at 25.18			
  .word 2 # StringLiteral at 25.18  
  .word -1 # StringLiteral at 25.18	 	
4092:strLit_61: # StringLiteral at 25.18		
  .byte 10 # StringLiteral at 27.18 	 
  .byte 0 # StringLiteral at 27.18 		
  .byte 0 # StringLiteral at 27.18		 
  .byte 0 # StringLiteral at 27.18 	
  .word CLASS_String # StringLiteral at 27.18  	
  .word 2 # StringLiteral at 27.18 	
  .word -1 # StringLiteral at 27.18 
4108:strLit_69: # StringLiteral at 27.18		 
  .byte 10 # StringLiteral at 29.18 	
  .byte 0 # StringLiteral at 29.18			
  .byte 0 # StringLiteral at 29.18	
  .byte 0 # StringLiteral at 29.18	  
  .word CLASS_String # StringLiteral at 29.18	 	
  .word 2 # StringLiteral at 29.18		
  .word -1 # StringLiteral at 29.18   
4124:strLit_77: # StringLiteral at 29.18 	
  .byte 10 # StringLiteral at 31.18		 
  .byte 0 # StringLiteral at 31.18 	 
  .byte 0 # StringLiteral at 31.18		
  .byte 0 # StringLiteral at 31.18	 	
  .word CLASS_String # StringLiteral at 31.18 
  .word 2 # StringLiteral at 31.18	 	
  .word -1 # StringLiteral at 31.18		 
4140:strLit_85: # StringLiteral at 31.18  	
  .byte 10 # StringLiteral at 33.18  	
  .byte 0 # StringLiteral at 33.18	 
  .byte 0 # StringLiteral at 33.18 
  .byte 0 # StringLiteral at 33.18 
  .word CLASS_String # StringLiteral at 33.18		 
  .word 2 # StringLiteral at 33.18	
  .word -1 # StringLiteral at 33.18			
4156:strLit_93: # StringLiteral at 33.18  
  .byte 10 # StringLiteral at 35.18		
  .byte 0 # StringLiteral at 35.18  	
  .byte 0 # StringLiteral at 35.18 		
  .byte 0 # StringLiteral at 35.18 
  .word CLASS_String # StringLiteral at 35.18		 
  .word 2 # StringLiteral at 35.18  	
  .word -1 # StringLiteral at 35.18		
4172:strLit_101: # StringLiteral at 35.18 
  .byte 10 # StringLiteral at 37.18 
  .byte 0 # StringLiteral at 37.18	
  .byte 0 # StringLiteral at 37.18	
  .byte 0 # StringLiteral at 37.18   
  .word CLASS_String # StringLiteral at 37.18	 	
  .word 2 # StringLiteral at 37.18	 	
  .word -1 # StringLiteral at 37.18 	
4188:strLit_109: # StringLiteral at 37.18			
  .byte 10 # StringLiteral at 39.18 	
  .byte 0 # StringLiteral at 39.18 		
  .byte 0 # StringLiteral at 39.18		
  .byte 0 # StringLiteral at 39.18 
  .word CLASS_String # StringLiteral at 39.18  	
  .word 2 # StringLiteral at 39.18	  
  .word -1 # StringLiteral at 39.18	  
4204:strLit_117: # StringLiteral at 39.18   
  .byte 10 # StringLiteral at 41.18	
  .byte 0 # StringLiteral at 41.18 
  .byte 0 # StringLiteral at 41.18 	 
  .byte 0 # StringLiteral at 41.18		
  .word CLASS_String # StringLiteral at 41.18		
  .word 2 # StringLiteral at 41.18  
  .word -1 # StringLiteral at 41.18		 
4220:strLit_127: # StringLiteral at 41.18			
  .byte 10 # StringLiteral at 43.18  	
  .byte 0 # StringLiteral at 43.18	
  .byte 0 # StringLiteral at 43.18  	
  .byte 0 # StringLiteral at 43.18 	 
  .word CLASS_String # StringLiteral at 43.18   
  .word 2 # StringLiteral at 43.18 
  .word -1 # StringLiteral at 43.18 	
4236:strLit_137: # StringLiteral at 43.18  	
  .byte 10 # StringLiteral at 45.18		 
  .byte 0 # StringLiteral at 45.18 		
  .byte 0 # StringLiteral at 45.18  
  .byte 0 # StringLiteral at 45.18		 
  .word CLASS_String # StringLiteral at 45.18	  
  .word 2 # StringLiteral at 45.18	
  .word -1 # StringLiteral at 45.18	  
4252:strLit_147: # StringLiteral at 45.18 
  .byte 10 # StringLiteral at 47.18 		
  .byte 0 # StringLiteral at 47.18  	
  .byte 0 # StringLiteral at 47.18	 
  .byte 0 # StringLiteral at 47.18	 	
  .word CLASS_String # StringLiteral at 47.18		 
  .word 2 # StringLiteral at 47.18  
  .word -1 # StringLiteral at 47.18  	
4268:strLit_157: # StringLiteral at 47.18	 
  .byte 10 # StringLiteral at 49.18			
  .byte 0 # StringLiteral at 49.18 	 
  .byte 0 # StringLiteral at 49.18 		
  .byte 0 # StringLiteral at 49.18	 
  .word CLASS_String # StringLiteral at 49.18		
  .word 2 # StringLiteral at 49.18	
  .word -1 # StringLiteral at 49.18	 	
4284:strLit_169: # StringLiteral at 49.18		 
  .byte 10 # StringLiteral at 51.18   
  .byte 0 # StringLiteral at 51.18		
  .byte 0 # StringLiteral at 51.18	 
  .byte 0 # StringLiteral at 51.18 	 
  .word CLASS_String # StringLiteral at 51.18   
  .word 2 # StringLiteral at 51.18		
  .word -1 # StringLiteral at 51.18		
4300:strLit_181: # StringLiteral at 51.18	 	
  .byte 10 # StringLiteral at 54.18 		
  .byte 0 # StringLiteral at 54.18			
  .byte 0 # StringLiteral at 54.18  
  .byte 0 # StringLiteral at 54.18	  
  .word CLASS_String # StringLiteral at 54.18		 
  .word 2 # StringLiteral at 54.18 
  .word -1 # StringLiteral at 54.18			
4316:strLit_189: # StringLiteral at 54.18		
  .byte 73 # StringLiteral at 55.18	 	
  .byte 32 # StringLiteral at 55.18   
  .byte 84 # StringLiteral at 55.18		
  .byte 72 # StringLiteral at 55.18		 
  .byte 73 # StringLiteral at 55.18	  
  .byte 78 # StringLiteral at 55.18	
  .byte 75 # StringLiteral at 55.18		
  .byte 32 # StringLiteral at 55.18	
  .byte 84 # StringLiteral at 55.18	
  .byte 72 # StringLiteral at 55.18	 	
  .byte 73 # StringLiteral at 55.18  	
  .byte 83 # StringLiteral at 55.18	
  .byte 32 # StringLiteral at 55.18		
  .byte 73 # StringLiteral at 55.18		 
  .byte 83 # StringLiteral at 55.18 
  .byte 32 # StringLiteral at 55.18		 
  .byte 87 # StringLiteral at 55.18 
  .byte 79 # StringLiteral at 55.18 		
  .byte 82 # StringLiteral at 55.18		
  .byte 75 # StringLiteral at 55.18   
  .byte 73 # StringLiteral at 55.18	
  .byte 78 # StringLiteral at 55.18 
  .byte 71 # StringLiteral at 55.18   
  .byte 33 # StringLiteral at 55.18		
  .byte 33 # StringLiteral at 55.18 	 
  .byte 33 # StringLiteral at 55.18 	
  .byte 0 # StringLiteral at 55.18 		
  .byte 0 # StringLiteral at 55.18	  
  .word CLASS_String # StringLiteral at 55.18	 	
  .word 8 # StringLiteral at 55.18	 
  .word -26 # StringLiteral at 55.18 	 
4356:strLit_193: # StringLiteral at 55.18			
  .byte 10 # StringLiteral at 56.18 	
  .byte 0 # StringLiteral at 56.18			
  .byte 0 # StringLiteral at 56.18  	
  .byte 0 # StringLiteral at 56.18	  
  .word CLASS_String # StringLiteral at 56.18	
  .word 2 # StringLiteral at 56.18	  
  .word -1 # StringLiteral at 56.18   
4372:strLit_197: # StringLiteral at 56.18 	
4372:CLASS_Object: # Program at 1.1   
4372:CLASS_String: # Program at 1.1			
.text # Program at 1.1	 	
.global main # Program at 1.1 	 
0:main: # Program at 1.1 		
0#jal vm_init # Program at 1.1	 	
4#subu $sp, $sp, 4 # NewObject at 0.0  	
8#sw $zero, ($sp) # NewObject at 0.0 
12#jal fcn_201_main # Call at 0.0 	
16#li $v0, 10 # Program at 1.1		
20#syscall # Program at 1.1   
.globl fcn_201_main # MethodDeclVoid at 3.14  
24:fcn_201_main: # MethodDeclVoid at 3.14  	
24#subu $sp, $sp, 8 # MethodDeclVoid at 3.14  
28#sw $ra, 4($sp) # MethodDeclVoid at 3.14	
32#sw $s2, ($sp) # MethodDeclVoid at 3.14   
36#lw $s2, 4($sp) # MethodDeclVoid at 3.14		
40#subu $sp, $sp, 8 # IntegerLiteral at 4.11   
44#sw $s5, 4($sp) # IntegerLiteral at 4.11	
48#li $t0, 9 # IntegerLiteral at 4.11			
52#sw $t0, ($sp) # IntegerLiteral at 4.11   
56#lw $t0, 0($sp) # IdentifierExp at 5.11			
60#subu $sp, $sp, 8 # IdentifierExp at 5.11 		
64#sw $s5, 4($sp) # IdentifierExp at 5.11	
68#sw $t0, ($sp) # IdentifierExp at 5.11			
72#subu $sp, $sp, 8 # IntegerLiteral at 5.15 	
76#sw $s5, 4($sp) # IntegerLiteral at 5.15			
80#li $t0, 2 # IntegerLiteral at 5.15	 
84#sw $t0, ($sp) # IntegerLiteral at 5.15 
88#lw $t0, ($sp) # Plus at 5.13 	
92#lw $t1, 8($sp) # Plus at 5.13 
96#addu $t0, $t0, $t1 # Plus at 5.13   
100#addu $sp, $sp, 8 # Plus at 5.13  
104#sw $t0, ($sp) # Plus at 5.13  	
108#lw $t0, 0($sp) # IdentifierExp at 6.11 
112#subu $sp, $sp, 8 # IdentifierExp at 6.11	
116#sw $s5, 4($sp) # IdentifierExp at 6.11		
120#sw $t0, ($sp) # IdentifierExp at 6.11 	
124#subu $sp, $sp, 8 # IntegerLiteral at 6.15		
128#sw $s5, 4($sp) # IntegerLiteral at 6.15 		
132#li $t0, 2 # IntegerLiteral at 6.15 
136#sw $t0, ($sp) # IntegerLiteral at 6.15			
140#lw $t0, ($sp) # Minus at 6.13 		
144#lw $t1, 8($sp) # Minus at 6.13	  
148#subu $t0, $t1, $t0 # Minus at 6.13	  
152#addu $sp, $sp, 8 # Minus at 6.13		
156#sw $t0, ($sp) # Minus at 6.13		 
160#subu $sp, $sp, 4 # StringLiteral at 8.17		
164#la $t0, strLit_14 # StringLiteral at 8.17 	
168#sw $t0, ($sp) # StringLiteral at 8.17  	
172#lw $t0, 0($sp) # IdentifierExp at 9.6		
176#subu $sp, $sp, 4 # IdentifierExp at 9.6 	
180#sw $t0, ($sp) # IdentifierExp at 9.6  	
184#lw $t0, ($sp) # If at 9.3		 
188#addu $sp, $sp, 4 # If at 9.3			
192#beq $t0, $zero, if_else_21 # If at 9.3		 
196#j if_done_21 # If at 9.3			
200:if_else_21: # If at 9.3	  
200:if_done_21: # If at 9.3	
200#subu $sp, $sp, 8 # IntegerLiteral at 13.11	  
204#sw $s5, 4($sp) # IntegerLiteral at 13.11 	
208#li $t0, 1 # IntegerLiteral at 13.11	 
212#sw $t0, ($sp) # IntegerLiteral at 13.11			
216#subu $sp, $sp, 4 # Super at 14.9   
220#sw $s2, ($sp) # Super at 14.9	
224#lw $t0, 4($sp) # IdentifierExp at 14.18 
228#subu $sp, $sp, 8 # IdentifierExp at 14.18			
232#sw $s5, 4($sp) # IdentifierExp at 14.18   
236#sw $t0, ($sp) # IdentifierExp at 14.18 	
240#jal printInt # Call at 14.9	
244#subu $sp, $sp, 4 # Super at 15.9	  
248#sw $s2, ($sp) # Super at 15.9		
252#subu $sp, $sp, 4 # StringLiteral at 15.18 		
256#la $t0, strLit_29 # StringLiteral at 15.18	 	
260#sw $t0, ($sp) # StringLiteral at 15.18   
264#jal printStr # Call at 15.9 	 
268#lw $t0, 0($sp) # IdentifierExp at 16.7	 
272#subu $sp, $sp, 8 # IdentifierExp at 16.7 		
276#sw $s5, 4($sp) # IdentifierExp at 16.7   
280#sw $t0, ($sp) # IdentifierExp at 16.7 		
284#subu $sp, $sp, 8 # IntegerLiteral at 16.11			
288#sw $s5, 4($sp) # IntegerLiteral at 16.11 		
292#li $t0, 1 # IntegerLiteral at 16.11 		
296#sw $t0, ($sp) # IntegerLiteral at 16.11  
300#lw $t0, ($sp) # Plus at 16.9  	
304#lw $t1, 8($sp) # Plus at 16.9 		
308#addu $t0, $t0, $t1 # Plus at 16.9 
312#addu $sp, $sp, 8 # Plus at 16.9	 	
316#sw $t0, ($sp) # Plus at 16.9  
320#lw $t0, ($sp) # Assign at 16.5 		
324#sw $t0, 8($sp) # Assign at 16.5		
328#addu $sp, $sp, 8 # Assign at 16.5 	 
332#subu $sp, $sp, 4 # Super at 17.9 	 
336#sw $s2, ($sp) # Super at 17.9			
340#lw $t0, 4($sp) # IdentifierExp at 17.18 	
344#subu $sp, $sp, 8 # IdentifierExp at 17.18 
348#sw $s5, 4($sp) # IdentifierExp at 17.18 
352#sw $t0, ($sp) # IdentifierExp at 17.18  
356#jal printInt # Call at 17.9 	 
360#subu $sp, $sp, 4 # Super at 18.9   
364#sw $s2, ($sp) # Super at 18.9	 
368#subu $sp, $sp, 4 # StringLiteral at 18.18	
372#la $t0, strLit_42 # StringLiteral at 18.18	 
376#sw $t0, ($sp) # StringLiteral at 18.18	
380#jal printStr # Call at 18.9 
384#subu $sp, $sp, 4 # StringLiteral at 20.15			
388#la $t0, strLit_47 # StringLiteral at 20.15   
392#sw $t0, ($sp) # StringLiteral at 20.15	
396#subu $sp, $sp, 4 # Super at 22.9 	 
400#sw $s2, ($sp) # Super at 22.9 
404#lw $t0, 36($sp) # IdentifierExp at 22.18	 	
408#subu $sp, $sp, 8 # IdentifierExp at 22.18 
412#sw $s5, 4($sp) # IdentifierExp at 22.18  
416#sw $t0, ($sp) # IdentifierExp at 22.18		
420#jal printInt # Call at 22.9	
424#subu $sp, $sp, 4 # Super at 23.9	
428#sw $s2, ($sp) # Super at 23.9	
432#subu $sp, $sp, 4 # StringLiteral at 23.18 
436#la $t0, strLit_53 # StringLiteral at 23.18 	
440#sw $t0, ($sp) # StringLiteral at 23.18	 	
444#jal printStr # Call at 23.9  
448#subu $sp, $sp, 4 # Super at 24.9  
452#sw $s2, ($sp) # Super at 24.9		 
456#lw $t0, 36($sp) # IdentifierExp at 24.18 
460#subu $sp, $sp, 8 # IdentifierExp at 24.18   
464#sw $s5, 4($sp) # IdentifierExp at 24.18		
468#sw $t0, ($sp) # IdentifierExp at 24.18		
472#jal printInt # Call at 24.9 	
476#subu $sp, $sp, 4 # Super at 25.9 	
480#sw $s2, ($sp) # Super at 25.9		 
484#subu $sp, $sp, 4 # StringLiteral at 25.18   
488#la $t0, strLit_61 # StringLiteral at 25.18		 
492#sw $t0, ($sp) # StringLiteral at 25.18 
496#jal printStr # Call at 25.9 		
500#subu $sp, $sp, 4 # Super at 26.9	 
504#sw $s2, ($sp) # Super at 26.9 
508#lw $t0, 36($sp) # IdentifierExp at 26.18 	 
512#subu $sp, $sp, 8 # IdentifierExp at 26.18	  
516#sw $s5, 4($sp) # IdentifierExp at 26.18	 
520#sw $t0, ($sp) # IdentifierExp at 26.18	
524#jal printInt # Call at 26.9			
528#subu $sp, $sp, 4 # Super at 27.9	  
532#sw $s2, ($sp) # Super at 27.9	  
536#subu $sp, $sp, 4 # StringLiteral at 27.18	 	
540#la $t0, strLit_69 # StringLiteral at 27.18  	
544#sw $t0, ($sp) # StringLiteral at 27.18 	
548#jal printStr # Call at 27.9  
552#subu $sp, $sp, 4 # Super at 28.9 	
556#sw $s2, ($sp) # Super at 28.9		 
560#lw $t0, 28($sp) # IdentifierExp at 28.18	  
564#subu $sp, $sp, 8 # IdentifierExp at 28.18		
568#sw $s5, 4($sp) # IdentifierExp at 28.18  	
572#sw $t0, ($sp) # IdentifierExp at 28.18  
576#jal printInt # Call at 28.9	 	
580#subu $sp, $sp, 4 # Super at 29.9   
584#sw $s2, ($sp) # Super at 29.9	 	
588#subu $sp, $sp, 4 # StringLiteral at 29.18  
592#la $t0, strLit_77 # StringLiteral at 29.18 	
596#sw $t0, ($sp) # StringLiteral at 29.18 
600#jal printStr # Call at 29.9		 
604#subu $sp, $sp, 4 # Super at 30.9 
608#sw $s2, ($sp) # Super at 30.9 		
612#lw $t0, 28($sp) # IdentifierExp at 30.18   
616#subu $sp, $sp, 8 # IdentifierExp at 30.18		 
620#sw $s5, 4($sp) # IdentifierExp at 30.18 		
624#sw $t0, ($sp) # IdentifierExp at 30.18	
628#jal printInt # Call at 30.9 	
632#subu $sp, $sp, 4 # Super at 31.9 	
636#sw $s2, ($sp) # Super at 31.9  
640#subu $sp, $sp, 4 # StringLiteral at 31.18		
644#la $t0, strLit_85 # StringLiteral at 31.18	
648#sw $t0, ($sp) # StringLiteral at 31.18  	
652#jal printStr # Call at 31.9 		
656#subu $sp, $sp, 4 # Super at 32.9	 
660#sw $s2, ($sp) # Super at 32.9 
664#lw $t0, 28($sp) # IdentifierExp at 32.18 		
668#subu $sp, $sp, 8 # IdentifierExp at 32.18  
672#sw $s5, 4($sp) # IdentifierExp at 32.18  
676#sw $t0, ($sp) # IdentifierExp at 32.18		
680#jal printInt # Call at 32.9   
684#subu $sp, $sp, 4 # Super at 33.9 	
688#sw $s2, ($sp) # Super at 33.9 	 
692#subu $sp, $sp, 4 # StringLiteral at 33.18 
696#la $t0, strLit_93 # StringLiteral at 33.18  	
700#sw $t0, ($sp) # StringLiteral at 33.18		 
704#jal printStr # Call at 33.9	  
708#subu $sp, $sp, 4 # Super at 34.9			
712#sw $s2, ($sp) # Super at 34.9	  
716#lw $t0, 20($sp) # IdentifierExp at 34.18 
720#subu $sp, $sp, 8 # IdentifierExp at 34.18		 
724#sw $s5, 4($sp) # IdentifierExp at 34.18		 
728#sw $t0, ($sp) # IdentifierExp at 34.18   
732#jal printInt # Call at 34.9 	 
736#subu $sp, $sp, 4 # Super at 35.9		
740#sw $s2, ($sp) # Super at 35.9 	
744#subu $sp, $sp, 4 # StringLiteral at 35.18 	 
748#la $t0, strLit_101 # StringLiteral at 35.18  	
752#sw $t0, ($sp) # StringLiteral at 35.18	 
756#jal printStr # Call at 35.9  	
760#subu $sp, $sp, 4 # Super at 36.9		 
764#sw $s2, ($sp) # Super at 36.9 
768#lw $t0, 20($sp) # IdentifierExp at 36.18  	
772#subu $sp, $sp, 8 # IdentifierExp at 36.18  
776#sw $s5, 4($sp) # IdentifierExp at 36.18		
780#sw $t0, ($sp) # IdentifierExp at 36.18   
784#jal printInt # Call at 36.9   
788#subu $sp, $sp, 4 # Super at 37.9			
792#sw $s2, ($sp) # Super at 37.9  	
796#subu $sp, $sp, 4 # StringLiteral at 37.18 
800#la $t0, strLit_109 # StringLiteral at 37.18		 
804#sw $t0, ($sp) # StringLiteral at 37.18 		
808#jal printStr # Call at 37.9	
812#subu $sp, $sp, 4 # Super at 38.9 	 
816#sw $s2, ($sp) # Super at 38.9	
820#lw $t0, 20($sp) # IdentifierExp at 38.18   
824#subu $sp, $sp, 8 # IdentifierExp at 38.18	 
828#sw $s5, 4($sp) # IdentifierExp at 38.18			
832#sw $t0, ($sp) # IdentifierExp at 38.18		 
836#jal printInt # Call at 38.9	 	
840#subu $sp, $sp, 4 # Super at 39.9			
844#sw $s2, ($sp) # Super at 39.9		 
848#subu $sp, $sp, 4 # StringLiteral at 39.18 	
852#la $t0, strLit_117 # StringLiteral at 39.18	
856#sw $t0, ($sp) # StringLiteral at 39.18 
860#jal printStr # Call at 39.9	 
864#subu $sp, $sp, 4 # Super at 40.9   
868#sw $s2, ($sp) # Super at 40.9	
872#lw $t0, 36($sp) # IdentifierExp at 40.18 	
876#subu $sp, $sp, 8 # IdentifierExp at 40.18 	
880#sw $s5, 4($sp) # IdentifierExp at 40.18 
884#sw $t0, ($sp) # IdentifierExp at 40.18  	
888#lw $t0, 36($sp) # IdentifierExp at 40.22   
892#subu $sp, $sp, 8 # IdentifierExp at 40.22	 	
896#sw $s5, 4($sp) # IdentifierExp at 40.22  	
900#sw $t0, ($sp) # IdentifierExp at 40.22 	 
904#lw $t0, ($sp) # Minus at 40.20	
908#lw $t1, 8($sp) # Minus at 40.20	 	
912#subu $t0, $t1, $t0 # Minus at 40.20  	
916#addu $sp, $sp, 8 # Minus at 40.20 	
920#sw $t0, ($sp) # Minus at 40.20   
924#jal printInt # Call at 40.9 		
928#subu $sp, $sp, 4 # Super at 41.9	  
932#sw $s2, ($sp) # Super at 41.9 	 
936#subu $sp, $sp, 4 # StringLiteral at 41.18	  
940#la $t0, strLit_127 # StringLiteral at 41.18	 	
944#sw $t0, ($sp) # StringLiteral at 41.18	  
948#jal printStr # Call at 41.9			
952#subu $sp, $sp, 4 # Super at 42.9	
956#sw $s2, ($sp) # Super at 42.9	  
960#lw $t0, 36($sp) # IdentifierExp at 42.18 	 
964#subu $sp, $sp, 8 # IdentifierExp at 42.18	 	
968#sw $s5, 4($sp) # IdentifierExp at 42.18	 
972#sw $t0, ($sp) # IdentifierExp at 42.18 		
976#lw $t0, 36($sp) # IdentifierExp at 42.22	  
980#subu $sp, $sp, 8 # IdentifierExp at 42.22  	
984#sw $s5, 4($sp) # IdentifierExp at 42.22		
988#sw $t0, ($sp) # IdentifierExp at 42.22 
992#lw $t0, ($sp) # Minus at 42.20	
996#lw $t1, 8($sp) # Minus at 42.20	
1000#subu $t0, $t1, $t0 # Minus at 42.20	
1004#addu $sp, $sp, 8 # Minus at 42.20   
1008#sw $t0, ($sp) # Minus at 42.20		 
1012#jal printInt # Call at 42.9	  
1016#subu $sp, $sp, 4 # Super at 43.9		
1020#sw $s2, ($sp) # Super at 43.9	 	
1024#subu $sp, $sp, 4 # StringLiteral at 43.18			
1028#la $t0, strLit_137 # StringLiteral at 43.18		
1032#sw $t0, ($sp) # StringLiteral at 43.18	 	
1036#jal printStr # Call at 43.9		
1040#subu $sp, $sp, 4 # Super at 44.9 
1044#sw $s2, ($sp) # Super at 44.9 	
1048#lw $t0, 28($sp) # IdentifierExp at 44.18   
1052#subu $sp, $sp, 8 # IdentifierExp at 44.18		
1056#sw $s5, 4($sp) # IdentifierExp at 44.18   
1060#sw $t0, ($sp) # IdentifierExp at 44.18   
1064#lw $t0, 44($sp) # IdentifierExp at 44.22	 	
1068#subu $sp, $sp, 8 # IdentifierExp at 44.22 
1072#sw $s5, 4($sp) # IdentifierExp at 44.22   
1076#sw $t0, ($sp) # IdentifierExp at 44.22 	
1080#lw $t0, ($sp) # Minus at 44.20			
1084#lw $t1, 8($sp) # Minus at 44.20	  
1088#subu $t0, $t1, $t0 # Minus at 44.20	 
1092#addu $sp, $sp, 8 # Minus at 44.20 	
1096#sw $t0, ($sp) # Minus at 44.20			
1100#jal printInt # Call at 44.9	 	
1104#subu $sp, $sp, 4 # Super at 45.9   
1108#sw $s2, ($sp) # Super at 45.9 	 
1112#subu $sp, $sp, 4 # StringLiteral at 45.18 
1116#la $t0, strLit_147 # StringLiteral at 45.18 		
1120#sw $t0, ($sp) # StringLiteral at 45.18	
1124#jal printStr # Call at 45.9   
1128#subu $sp, $sp, 4 # Super at 46.9  
1132#sw $s2, ($sp) # Super at 46.9	 
1136#lw $t0, 28($sp) # IdentifierExp at 46.18			
1140#subu $sp, $sp, 8 # IdentifierExp at 46.18 	 
1144#sw $s5, 4($sp) # IdentifierExp at 46.18			
1148#sw $t0, ($sp) # IdentifierExp at 46.18 
1152#lw $t0, 44($sp) # IdentifierExp at 46.22 		
1156#subu $sp, $sp, 8 # IdentifierExp at 46.22  
1160#sw $s5, 4($sp) # IdentifierExp at 46.22  	
1164#sw $t0, ($sp) # IdentifierExp at 46.22  	
1168#lw $t0, ($sp) # Minus at 46.20   
1172#lw $t1, 8($sp) # Minus at 46.20	  
1176#subu $t0, $t1, $t0 # Minus at 46.20	 	
1180#addu $sp, $sp, 8 # Minus at 46.20	 
1184#sw $t0, ($sp) # Minus at 46.20 	 
1188#jal printInt # Call at 46.9	 	
1192#subu $sp, $sp, 4 # Super at 47.9		 
1196#sw $s2, ($sp) # Super at 47.9	 
1200#subu $sp, $sp, 4 # StringLiteral at 47.18	 	
1204#la $t0, strLit_157 # StringLiteral at 47.18	  
1208#sw $t0, ($sp) # StringLiteral at 47.18  	
1212#jal printStr # Call at 47.9	
1216#subu $sp, $sp, 4 # Super at 48.9 		
1220#sw $s2, ($sp) # Super at 48.9 
1224#lw $t0, 20($sp) # IdentifierExp at 48.18	 
1228#subu $sp, $sp, 8 # IdentifierExp at 48.18	
1232#sw $s5, 4($sp) # IdentifierExp at 48.18  	
1236#sw $t0, ($sp) # IdentifierExp at 48.18			
1240#lw $t0, 44($sp) # IdentifierExp at 48.22 	
1244#subu $sp, $sp, 8 # IdentifierExp at 48.22	 
1248#sw $s5, 4($sp) # IdentifierExp at 48.22 	 
1252#sw $t0, ($sp) # IdentifierExp at 48.22 
1256#lw $t0, ($sp) # Plus at 48.20 		
1260#lw $t1, 8($sp) # Plus at 48.20			
1264#addu $t0, $t0, $t1 # Plus at 48.20 		
1268#addu $sp, $sp, 8 # Plus at 48.20	 	
1272#sw $t0, ($sp) # Plus at 48.20  
1276#lw $t0, 36($sp) # IdentifierExp at 48.26   
1280#subu $sp, $sp, 8 # IdentifierExp at 48.26	
1284#sw $s5, 4($sp) # IdentifierExp at 48.26  
1288#sw $t0, ($sp) # IdentifierExp at 48.26		
1292#lw $t0, ($sp) # Minus at 48.24  
1296#lw $t1, 8($sp) # Minus at 48.24	 
1300#subu $t0, $t1, $t0 # Minus at 48.24 	
1304#addu $sp, $sp, 8 # Minus at 48.24			
1308#sw $t0, ($sp) # Minus at 48.24  
1312#jal printInt # Call at 48.9			
1316#subu $sp, $sp, 4 # Super at 49.9	 
1320#sw $s2, ($sp) # Super at 49.9	 	
1324#subu $sp, $sp, 4 # StringLiteral at 49.18 
1328#la $t0, strLit_169 # StringLiteral at 49.18		
1332#sw $t0, ($sp) # StringLiteral at 49.18			
1336#jal printStr # Call at 49.9   
1340#subu $sp, $sp, 4 # Super at 50.9 		
1344#sw $s2, ($sp) # Super at 50.9 	 
1348#lw $t0, 28($sp) # IdentifierExp at 50.18		
1352#subu $sp, $sp, 8 # IdentifierExp at 50.18		 
1356#sw $s5, 4($sp) # IdentifierExp at 50.18   
1360#sw $t0, ($sp) # IdentifierExp at 50.18		 
1364#lw $t0, 44($sp) # IdentifierExp at 50.22  
1368#subu $sp, $sp, 8 # IdentifierExp at 50.22	 	
1372#sw $s5, 4($sp) # IdentifierExp at 50.22 	
1376#sw $t0, ($sp) # IdentifierExp at 50.22 
1380#lw $t0, ($sp) # Minus at 50.20   
1384#lw $t1, 8($sp) # Minus at 50.20			
1388#subu $t0, $t1, $t0 # Minus at 50.20	 
1392#addu $sp, $sp, 8 # Minus at 50.20		
1396#sw $t0, ($sp) # Minus at 50.20 	 
1400#lw $t0, 28($sp) # IdentifierExp at 50.26   
1404#subu $sp, $sp, 8 # IdentifierExp at 50.26	  
1408#sw $s5, 4($sp) # IdentifierExp at 50.26 	
1412#sw $t0, ($sp) # IdentifierExp at 50.26   
1416#lw $t0, ($sp) # Plus at 50.24	 	
1420#lw $t1, 8($sp) # Plus at 50.24			
1424#addu $t0, $t0, $t1 # Plus at 50.24  	
1428#addu $sp, $sp, 8 # Plus at 50.24 	
1432#sw $t0, ($sp) # Plus at 50.24 
1436#jal printInt # Call at 50.9			
1440#subu $sp, $sp, 4 # Super at 51.9  
1444#sw $s2, ($sp) # Super at 51.9   
1448#subu $sp, $sp, 4 # StringLiteral at 51.18	 
1452#la $t0, strLit_181 # StringLiteral at 51.18 	
1456#sw $t0, ($sp) # StringLiteral at 51.18	  
1460#jal printStr # Call at 51.9  
1464#subu $sp, $sp, 4 # Super at 53.9 		
1468#sw $s2, ($sp) # Super at 53.9	  
1472#lw $t0, 4($sp) # IdentifierExp at 53.18   
1476#subu $sp, $sp, 4 # IdentifierExp at 53.18   
1480#sw $t0, ($sp) # IdentifierExp at 53.18	
1484#jal printStr # Call at 53.9	 
1488#subu $sp, $sp, 4 # Super at 54.9 	
1492#sw $s2, ($sp) # Super at 54.9 	 
1496#subu $sp, $sp, 4 # StringLiteral at 54.18	 	
1500#la $t0, strLit_189 # StringLiteral at 54.18		
1504#sw $t0, ($sp) # StringLiteral at 54.18 		
1508#jal printStr # Call at 54.9	  
1512#subu $sp, $sp, 4 # Super at 55.9	 	
1516#sw $s2, ($sp) # Super at 55.9 	
1520#subu $sp, $sp, 4 # StringLiteral at 55.18	 
1524#la $t0, strLit_193 # StringLiteral at 55.18	
1528#sw $t0, ($sp) # StringLiteral at 55.18	  
1532#jal printStr # Call at 55.9   
1536#subu $sp, $sp, 4 # Super at 56.9	 	
1540#sw $s2, ($sp) # Super at 56.9 
1544#subu $sp, $sp, 4 # StringLiteral at 56.18	
1548#la $t0, strLit_197 # StringLiteral at 56.18 		
1552#sw $t0, ($sp) # StringLiteral at 56.18	 	
1556#jal printStr # Call at 56.9 	 
1560#lw $ra, 44($sp) # MethodDeclVoid at 3.14 		
1564#lw $s2, 4($sp) # MethodDeclVoid at 3.14	 	
1568#addu $sp, $sp, 52 # MethodDeclVoid at 3.14		 
1572#jr $ra # MethodDeclVoid at 3.14	
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1576:readLine:
	
1576#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1580#	sw $ra, 4($sp) # save $ra
1584#	move $t1,$sp # save "original" sp

1588:  doRead:

	# read the character
1588#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1592#	subu $t2,$v0,13
1596#	bne $t2,$zero,notReturnRL
1600#	jal readLogicalChar
1604#	subu $t2,$v0,10 # check for newline
1608#	beq $t2,$zero,foundNewLine
1612#	sw $v0,lastCharRead # push back character into queue
1616#	j foundNewLine # go process the line

1620:  notReturnRL:

	# at this point, $v0 has our character

1620#	subu $t0,$v0,10
1624#	beq $t0,$zero,foundNewLine
1628#	blt $v0,$zero,foundEof
1629##...slt $at,$v0,$zero
1633##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1636#	subu $sp,$sp,4
1640#	sw $v0,($sp)

	# loop back up to get next character
1644#	j doRead

1648:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1648#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1652#	sw $zero,8($sp) # return-value: null
1656#	j rlReturn # return

1660:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1660#	subu $t0,$t1,$sp # number of chars we read (times 4)
1664#	srl $s6,$t0,2 # number of words on stack with chars
1668#	subu $sp,$sp,4 # push char-count ...
1672#	sw $s6,($sp) # ... onto stack
1676#	addu $t2,$t0,5 # GC tag, incl. for count-word
1680#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1684#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1688#	srl $s6,$s6,2 # data words in object
1692#	move $s7,$zero # # object words in object
1696#	jal newObject # allocate space
	
	# store header words
1700#	la $t0,CLASS_String
1704#	sw $t0,-12($s7) # store class tag (String) into object
1708#	lw $t2,4($sp) # char-count
1712#	sll $t1,$t2,2 # 4 times number of chars
1716#	subu $t2,$zero,$t2 # negative of char-count
1720#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1724#	lw $t0,-8($s7) # data words in object
1728#	sll $t0,$t0,2 # data bytes in object
1732#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1736#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1740#	addu $sp,$sp,8 # pop redundant object-pointer and count
1744#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1748#	beq $sp,$t1,doneCharCopy
1752:  charCopyLoop:
1752#	lw $t2,($sp)
1756#	sb $t2,-9($t0)
1760#	addu $sp,$sp,4
1764#	subu $t0,$t0,1
1768#	bne $sp,$t1,charCopyLoop
1772:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1772#	sw $s7,8($sp)
	
1776:  rlReturn:
	# restore return address and return
1776#	lw $ra,4($sp) # restore return address, ...
1780#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1784#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1788:readInt:

	# save $ra by pushing onto stack
1788#	subu $sp,$sp,4
1792#	sw $ra,($sp)

1796:  riSkipWhiteLoop:
	# read a character
1796#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1800#	subu $t0,$v0,32
1804#	bgt $t0,$zero,nonWhite
1805##...slt $at,$zero,$t0
1809##...bne $at,$zero,$+44
1812#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1816#	subu $t0,$v0,10
1820#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1824#	subu $t0,$v0,9
1828#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1832#	subu $t0,$v0,13
1836#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1840#	subu $t0,$v0,12
1844#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1848#	j badIntegerFormat # illegal integer char: abort program

1852:  nonWhite:
1852#	subu $t0,$v0,'-'
1856#	li $t4,1 # final multiplier
1860#	bne $t0,$zero,helpReadInt # go read
1864#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1868#	jal readLogicalChar

1872:  helpReadInt:
1872#	li $t2,10
1876#	subu $t1,$v0,'0' # convert digit to 0-9 value
1880#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1881##...sltu $at,$t1,$t2
1885##...beq $at,$zero,$+2080
1888#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1892:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1892#	jal readLogicalChar # read next character
1896#	subu $t1,$v0,'0' # convert digit to 0-9 value
1900#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1901##...sltu $at,$t1,$t2
1905##...beq $at,$zero,$+20

1908#	mul $t3,$t3,$t2 # multiply old value by 10
1909##...mult $t3,$t2
1913##...mflo $t3
1916#	addu $t3,$t3,$t1 # add in value of new digit
1920#	j digitLoop

1924:  doneDigitLoop:

	# "push back" unused character into queue
1924#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1928#	lw $ra,($sp)
1932#	mult $t3,$t4 # multiply to account for poss. minus sign
1936#	mflo $t3
1940#	sw $t3,($sp) # result
1944#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1948#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1952:readChar:

	# save $ra by pushing onto stack
1952#	subu $sp,$sp,4
1956#	sw $ra,($sp)

  	# read the character
1960#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1964#	lw $ra,($sp)
1968#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1972#	sw $v0,($sp)

	# return
1976#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1980:printStr:
	# check for null, printing "(null)", if so
1980#	lw $t0,($sp)
1984#	bne $t0,$zero,psNotNull

	# print "(null)"
1988#	la $a0,nullStr
1992#	li $v0,4
1996#	syscall
2000#	j donePrintStr
	
2004:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2004#	subu $t0,$t0,8
2008#	lw $t1,($t0) # word just beyond end of string
2012#	sll $t1,$t1,2
2016#	subu $t1,$t0,$t1 # first word in string
2020#	lw $t0,4($t0) # negative of string-length
2024#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
2028#	beq $t0,$t1,donePrintStr
2032:  psLoop:
2032#	lb $a0,($t1) # next byte
2036#	li $v0,11 # code for printing char
2040#        syscall # print the char
2044#	addu $t1,$t1,1 # go to next char
2048#	blt $t1,$t0,psLoop
2049##...slt $at,$t1,$t0
2053##...bne $at,$zero,$-20

2056:  donePrintStr:
	# pop stack and return
2056#	addu $sp,$sp,8
2060#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2064:printInt:
	# pop value off stack, along with 'this'
2064#	lw $a0,($sp)
2068#	addu $sp,$sp,12

	# print it
2072#	li $v0,1 # code for print-int
2076#	syscall

	# return
2080#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2084:printBool:
	# pop value off stack, along with 'this'
2084#	lw $t0,($sp)
2088#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2092#	la $a0,falseString
2096#	beq $t0,$zero,skipPB
2100#	la $a0,trueString
2104:  skipPB:
2104#	li $v0,4 # code for print-string
2108#	syscall

	# return
2112#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2116:substring:

	# save $ra by pushing onto stack
2116#	subu $sp,$sp,4
2120#	sw $ra,($sp)

	# get string value off stack, test for null
2124#	lw $t0,20($sp)
2128#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2132#	lw $t0,-4($t0) # negative of string length
2136#	subu $t0,$zero,$t0 # string length
2140#	lw $t1,4($sp) # k
2144#	lw $t2,12($sp) # n
2148#	bgt $zero,$t2,strIndexOutOfBounds
2149##...slt $at,$t2,$zero
2153##...bne $at,$zero,$+1780
2156#	bgt $t2,$t1,strIndexOutOfBounds
2157##...slt $at,$t1,$t2
2161##...bne $at,$zero,$+1772
2164#	bgt $t1,$t0,strIndexOutOfBounds
2165##...slt $at,$t0,$t1
2169##...bne $at,$zero,$+1764

	# allocate memory
2172#	subu $s6,$t1,$t2 # # chars in target-string
2176#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2180#	srl $s6,$s6,2 # convert bytes-count to word-count
2184#	move $s7,$zero # (no object-bytes in string)
2188#	jal newObject

	# store "String" tag in object-type field
2192#	la $t0,CLASS_String
2196#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2200#	lw $t1,8($sp) # k
2204#	lw $t2,16($sp) # n
2208#	subu $t0,$t2,$t1 # value to store
2212#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2216#	lw $t3,24($sp) # source string pointer
2220#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2224#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2228#	lw $t4,-8($t3) # # data words in source string
2232#	sll $t4,$t4,2 # # data bytes in source string
2236#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2240#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2244#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2248#	lw $t2,-8($s7) # # data words in target string
2252#	sll $t2,$t2,2 # # data bytes in target string
2256#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2260:  subCopyLoopzz:
2260#	lb $t4,-8($t3)
2264#	sb $t4,-8($t2)
2268#	addu $t2,$t2,1
2272#	addu $t3,$t3,1
2276#	blt $t3,$t1,subCopyLoopzz
2277##...slt $at,$t3,$t1
2281##...bne $at,$zero,$-20
	
2284:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2284#	lw $ra,4($sp) # restore $ra
2288#	addu $sp,$sp,24 # pop stack
	
	# return
2292#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2296:length:

	# get string pointer
2296#	lw $t0,($sp)
	
	# grow stack
2300#	subu $sp,$sp,4

	# store GC tag
2304#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2308#	lw $t0,-4($t0) # -length
2312#	subu $t0,$zero,$t0
2316#	sw $t0,($sp) #store length

	# return
2320#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2324:concat:
 	# save $ra by pushing onto stack
2324#	subu $sp,$sp,4
2328#	sw $ra($sp)

	# get string pointers and check parameter for null
2332#	lw $t0,4($sp)
2336#	beq $t0,$zero,nullPtrException
2340#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2344#	lw $t0,-4($t0) # negative size of second object
2348#	lw $t1,-4($t1) # negative size of first object
2352#	addu $s6,$t0,$t1 # sum of negative sizes
2356#	sra $s6,$s6,2 # negative word-size of char part
2360#	subu $s6,$zero,$s6 # word size of char part
2364#	addu $s6,$s6,1 # data word size, including v-table word
2368#	move $s7,$zero
2372#	jal newObject

	# store "String" tag in object-type field
2376#	la $t0,CLASS_String
2380#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2384#	lw $ra,4($sp) # return address
2388#	lw $t0,8($sp) # second object
2392#	lw $t1,12($sp) # first object
2396#	addu $sp,$sp,12 # pop
2400#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2404#	lw $t2,-4($t0) # negative length of second object
2408#	lw $t3,-4($t1) # negative length of first object
2412#	addu $t4,$t2,$t3 # sum of negative lengths
2416#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2420#	lw $t4,-8($t1) # # data words in first string
2424#	sll $t4,$t4,2 # # data bytes in first string
2428#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2432#	lw $t4,-8($s7) # # data words in new string
2436#	sll $t4,$t4,2 # # data bytes in new string
2440#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2444#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2448#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2452:  concatLoop1zz:
2452#	lb $t4,-8($t1)
2456#	sb $t4,-8($s7)
2460#	addu $s7,$s7,1
2464#	addu $t1,$t1,1
2468#	blt $t1,$t3,concatLoop1zz
2469##...slt $at,$t1,$t3
2473##...bne $at,$zero,$-20
2476:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2476#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2480#	lw $t4,-8($t0) # # data words in second string
2484#	sll $t4,$t4,2 # # data bytes in second string
2488#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2492#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2496:  concatLoop2zz:
2496#	lb $t4,-8($t1)
2500#	sb $t4,-8($s7)
2504#	addu $s7,$s7,1
2508#	addu $t1,$t1,1
2512#	blt $t1,$t3,concatLoop2zz
2513##...slt $at,$t1,$t3
2517##...bne $at,$zero,$-20
2520:  doneConcatLoop2zz:
 
2520:  concatRtnzz:
	# return
2520#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2524:charAt:
	# get string
2524#	lw $t0,8($sp)

	# check that index is in bounds
2528#	lw $t1,-4($t0) # negative of # data words in string
2532#	subu $t3,$zero,$t1 # # chars in string
2536#	lw $t2,($sp) # index
2540#	bgeu $t2,$t3,strIndexOutOfBounds
2541##...sltu $at,$t2,$t3
2545##...beq $at,$zero,$+1388

	# access element
2548#	lw $t1,-8($t0) # # data words in object
2552#	sll $t1,$t1,2 # - byte-offset from end of chars
2556#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2560#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2564#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2568#	addu $sp,$sp,4
2572#	sw $t0,($sp)
2576#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2580#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2584:intToString:

	# save return address on stack; allocate space for dummy GC tag
2584#	subu $sp,$sp,8
2588#	sw $ra,4($sp)

	# save current sp
2592#	move $t0,$sp

	# move constant 10 into $t3
2596#	li $t3,10

	# get argument, negate if negative
2600#	lw $t1,8($sp)
2604#	bge $t1,$zero,itsNonNegLoop
2605##...slt $at,$t1,$zero
2609##...beq $at,$zero,$+8
2612#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2616:  itsNonNegLoop:
2616#	divu $t1,$t3
2620#	mflo $t1 # quotient
2624#	mfhi $t4 # remainder
2628#	addu $t4,$t4,'0' # turn remainder into digit
2632#	subu $sp,$sp,4
2636#	sw $t4,($sp) # push digit onto stack
2640#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2644#	lw $t4,8($t0)
2648#	bge $t4,$zero,itsSkipNeg
2649##...slt $at,$t4,$zero
2653##...beq $at,$zero,$+16
2656#	li $t4,'-'
2660#	subu $sp,$sp,4
2664#	sw $t4,($sp)
2668:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2668#	subu $s6,$t0,$sp
2672#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2676#	sw $t3,($t0)
2680#	srl $s6,$s6,2
2684#	subu $sp,$sp,4
2688#	sw $s6,($sp)
	
	# allocate memory
2692#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2696#	srl $s6,$s6,2
2700#	move $s7,$zero # no "object" words in object
2704#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2708#	lw $t0,4($sp)
2712#	addu $sp,$sp,8

	# store "String" tag into class field
2716#	subu $s7,$s7,8 # address of header-1 word
2720#	la $t1,CLASS_String
2724#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2728#	subu $t0,$zero,$t0
2732#	sw $t0,4($s7)

2736#	lw $t1,($s7) # number of data words in string
2740#	sll $t1,$t1,2 # number data bytes in string
2744#	subu $t1,$s7,$t1 # first location to store chars in string
2748#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2752:  itsLoop:
2752#	lw $t2,($sp)
2756#	addu $sp,$sp,4
2760#	sb $t2,($t1)
2764#	addu $t1,$t1,1
2768#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2772#	lw $ra,4($sp)
2776#	addu $sp,$sp,16
2780#	addu $t0,$t0,15
2784#	and $t0,$t0,0xfffffffc
2785##...lui $at,65535
2789##...ori $at,$at,0xfffc
2793##...and $t0,$t0,$at
2796#	sw $t0,($sp)
2800#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2804:intToChar:
	# save return address
2804#	subu $sp,$sp,4
2808#	sw $ra,($sp)

	# allocate object
2812#	li $s6,2
2816#	move $s7,$zero
2820#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2824#	lw $ra,4($sp)
2828#	lw $t1,8($sp)
2832#	addu $sp,$sp,16

	# store "String" tag into class field
2836#	la $t0,CLASS_String
2840#	sw $t0,-12($s7)

	# store data in string
2844#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2848#	li $t0,-1
2852#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2856#	sw $s7,($sp)

	# return
2860#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2864:compareTo:
	# get string pointers and check parameter for null
2864#	lw $t0,($sp) # second string
2868#	beq $t0,$zero,nullPtrException
2872#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2876#	lw $t2,-4($t0) # negative length of second string
2880#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2884#	slt $t4,$t3,$t2
2888#	slt $t5,$t2,$t3
2892#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2896#	lw $t2,-8($t0) # # data words in second string
2900#	lw $t3,-8($t1) # # data words in first string
2904#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2908#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2912#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2916#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2920#	beq $zero,$t5,skipStrCmpLenzz
2924#	move $t2,$t3
2928:  skipStrCmpLenzz:
2928#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2932:  cmpLoopzz:
2932#	lw $t3,-8($t1) # word from str2
2936#	lw $t4,-8($t0) # word from str1
2940#	bne $t3,$t4,cmpNotEqualzz
2944#	addu $t1,$t1,4
2948#	addu $t0,$t0,4
2952#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2956#	j cmpHitLimitzz

2960:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2960#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2964#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2968#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2972:  cmpHitLimitzz:
2972#	sw $t5,($sp) # store value
2976#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2980#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2984:readLogicalChar:

	# check if we already have a character
2984#	lw $v0,lastCharRead
2988#	li $t0,-2
2992#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2996#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3000#	jr $ra # return
	
3004:  doReadCh:
	# we need to actually read a character: read and return
3004#	li $v0,12 # use system call to read a character
3008#	syscall
3012#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3016:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
3016#	blt $s7,$zero arraySizeOutOfBounds
3017##...slt $at,$s7,$zero
3021##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
3024#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

3028:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
3028#	move $t3,$s6
3032#	bge $t3,$zero,newSkip
3033##...slt $at,$t3,$zero
3037##...beq $at,$zero,$+8
3040#	move $t3,$zero

3044:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3044#	addu $t0,$t3,$s7
3048#	sll $t0,$t0,2
3052#	addu $t0,$t0,8 # amount of memory needed
3056#	addu $t1,$t0,$s3
3060#	bgtu $t1,$s4,doGC
3061##...sltu $at,$s4,$t1
3065##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3068#	move $t2,$s3
3072:  zeroObjLoop:
3072#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3076#	addu $s3,4
3080#	bltu $s3,$t1,zeroObjLoop
3081##...sltu $at,$s3,$t1
3085##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3088#	sll $t0,$s7,2    # number of post-header bytes
3092#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3096#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3100#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3104#	move $s7,$t0
3108#	subu $sp,$sp,4
3112#	sw $t0,($sp)

3116#	jr $ra
	
3120:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3120#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3124#	subu $sp,$sp,4
3128#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3132#	lw $t0,cur_seg
3136#	move $t7,$s4
3140#	la $t6,seg1_start
3141##...lui $t6,16
3145##...addiu $t6,$t6,4680
3148#	la $s3,seg0_start
3152#	la $s4,seg0_end
3153##...lui $s4,16
3157##...addiu $s4,$s4,4680
3160#	sw $zero,cur_seg
3164#	bne $t0,$zero,skipGc1
3168#	la $t6,seg0_start
3172#	la $s3,seg1_start
3173##...lui $s3,16
3177##...addiu $s3,$s3,4680
3180#	la $s4,seg1_end
3181##...lui $s4,32
3185##...addiu $s4,$s4,4680
3188#	sw $s5,cur_seg
3192:  skipGc1:
3192#	li $t5,-2
3196#	lw $t0,stack_bottom
3200#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3204:  gcStackCopyLoop:
3204#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3208#	sll $t2,$t1,31 # zero iff low bit was zero
3212#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3216#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3220#	bleu $t1,$t6,gcTestIterDone1
3221##...sltu $at,$t6,$t1
3225##...beq $at,$zero,$+148
3228#	bgtu $t1,$t7,gcTestIterDone1
3229##...sltu $at,$t7,$t1
3233##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3236#	lw $t2,-8($t1) # possible forwarding tag
3240#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3244#	lw $t2,-4($t1) # forwarding pointer: object's new address
3248#	sw $t2,4($t0) # update stack value
3252#	j gcTestIterDone1 # do next iteration

3256:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3256#	bge $t2,$zero,gcSkip2
3257##...slt $at,$t2,$zero
3261##...beq $at,$zero,$+8
3264#	move $t2,$zero # set to zero if -1 (number of data words)

3268:  gcSkip2:
3268#	sll $t2,$t2,2
3272#	addu $t2,$t2,8
3276#	subu $t4,$t1,$t2 # address of first word of source
3280#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3284#	bge $t3,$zero,gcH2Neg1
3285##...slt $at,$t3,$zero
3289##...beq $at,$zero,$+8
3292#	move $t3,$zero
3296:  gcH2Neg1:
3296#	sll $t3,$t3,2
3300#	addu $t3,$t3,$t1 # address one word past last word of source

3304#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3308#	lw $s0,($t4)
3312#	lw $s1,-8($t1)
3316#	sw $s1,($t4)
3320#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3324:  gCinnerCopy1:
3324#	lw $s0,($t4)
3328#	sw $s0,($s3)
3332#	addu $t4,$t4,4
3336#	addu $s3,$s3,4
3340#	bltu $t4,$t3,gCinnerCopy1
3341##...sltu $at,$t4,$t3
3345##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3348#	sw $t5,-8($t1) # -2 in first header-slot
3352#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3356#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3360#	j gcTestIterDone1

3364:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3364#	subu $t0,$t0,$t1
3368#	subu $t0,$t0,3

3372:  gcTestIterDone1:
3372#	bgeu $t0,$sp,gcStackCopyLoop
3373##...sltu $at,$t0,$sp
3377##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3380#	lw $t1,cur_seg
3384#	la $t0,seg0_start
3388#	beq $t1,$zero,gcSkip4
3392#	la $t0,seg1_start
3393##...lui $t0,16
3397##...addiu $t0,$t0,4680

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3400:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3400#	bgeu $t0,$s3,gcFinishUp
3401##...sltu $at,$t0,$s3
3405##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3408:  gcHeapCopyLoop:
	# check if we have a data array
3408#	lw $t1,($t0) # first header word for current object
3412#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3413##...slt $at,$t1,$zero
3417##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3420#	lw $t1,4($t0) # data words
3424#	addu $t1,$t1,2 # add in # header words
3428#	sll $t1,$t1,2 # convert to byte-count
3432#	addu $t0,$t0,$t1 # skip over object
3436#	j gcTestIterDone2 # go do next object, if any

3440:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3440#	sll $t2,$t1,2 # # data bytes
3444#	addu $t2,$t2,8 # to skip header word
3448#	addu $t2,$t0,$t2 # pointer to new object
3452#	lw $t3,-8($t2) # word to swap
3456#	sw $t1,-8($t2) # store header word
3460#	sw $t3,($t0) # restore first word of object

3464#	lw $t3,-4($t2) # # object words (negative treated as zero)
3468#	bge $t3,$zero,gcH2Neg2
3469##...slt $at,$t3,$zero
3473##...beq $at,$zero,$+8
3476#	move $t3,$zero
3480:  gcH2Neg2:
3480#	sll $t3,$t3,2 # # object bytes
3484#	move $t0,$t2 # address of first pointer in object
3488#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3492#	beq $t0,$s1,gcTestIterDone2
	
3496:  gcNextPointerInObject:
	# get pointer from object
3496#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3500#	bleu $t1,$t6,gcGoNextPointerSlot
3501##...sltu $at,$t6,$t1
3505##...beq $at,$zero,$+136
3508#	bgtu $t1,$t7,gcGoNextPointerSlot
3509##...sltu $at,$t7,$t1
3513##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3516#	lw $t8,-8($t1) # possible forwarding tag
3520#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3524#	lw $t8,-4($t1) # forwarding pointer: object's new address
3528#	sw $t8,($t0) # update pointer in object
3532#	j gcGoNextPointerSlot # do next iteration

3536:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3536#	bge $t8,$zero,gcSkip5
3537##...slt $at,$t8,$zero
3541##...beq $at,$zero,$+8
3544#	move $t8,$zero # set to zero if -1

3548:  gcSkip5:
3548#	sll $t8,$t8,2
3552#	addu $t8,$t8,8
3556#	subu $t4,$t1,$t8 # address of first word of source
3560#	lw $t3,-4($t1)
3564#	bge $t3,$zero,gcNoNeg
3565##...slt $at,$t3,$zero
3569##...beq $at,$zero,$+8
3572#	move $t3,$zero
3576:  gcNoNeg:
3576#	sll $t3,$t3,2
3580#	addu $t3,$t3,$t1 # address one word past last word of source

3584#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3588#	lw $s0,($t4)
3592#	lw $t9,-8($t1)
3596#	sw $t9,($t4)
3600#	sw $s0,-8($t1)

	# copy all source bytes to the target
3604:  gCinnerCopy2:
3604#	lw $s0,($t4)
3608#	sw $s0,($s3)
3612#	addu $t4,$t4,4
3616#	addu $s3,$s3,4
3620#	bltu $t4,$t3,gCinnerCopy2
3621##...sltu $at,$t4,$t3
3625##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3628#	sw $t5,-8($t1) # -2 in first header-slot
3632#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3636#	sw $t8,($t0)

3640:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3640#	addu $t0,$t0,4
3644#	bltu $t0,$s1,gcNextPointerInObject
3645##...sltu $at,$t0,$s1
3649##...bne $at,$zero,$-152

3652:  gcTestIterDone2:
3652#	bltu $t0,$s3,gcHeapCopyLoop
3653##...sltu $at,$t0,$s3
3657##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3660:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3660#	lw $s2,($sp)
3664#	addu $sp,$sp,4

	# mark us as having already GC'd
3668#	move $t5,$s5

	# go try and allocate again
3672#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3676:vm_init:

	# mark bottom of stack
3676#	sw $sp,stack_bottom
3680#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3684#	move $s2,$zero
3688#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3692#	li $s5,5
3696#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3700#	la $s3,seg0_start
3704#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3708#	la $s4,seg0_end
3709##...lui $s4,16
3713##...addiu $s4,$s4,4680
3716#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3720#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3724:divide:
	# get parameters; abort if divisor zero
3724#	lw $t0,($sp)
3728#	lw $t1,8($sp)
3732#	beq $t0,$zero,divByZeroError
	
	# perform division
3736#	div $t1,$t0
3740#	mflo $t0

	# store result, adjust stack and return
3744#	addu $sp,$sp,8 # adjust stack
3748#	sw $t0,($sp) # store result
3752#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3756:remainder:
	# get parameters; abort if divisor zero
3756#	lw $t0,($sp)
3760#	lw $t1,8($sp)
3764#	beq $t0,$zero,divByZeroError
	
	# perform division
3768#	div $t1,$t0
3772#	mfhi $t0

	# store result, adjust stack and return
3776#	addu $sp,$sp,8 # adjust stack
3780#	sw $t0,($sp) # store result
3784#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3788:checkCast:
	# get object, allow immediately if null
3788#	lw $t2,($sp)
3792#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3796#	lw $t3,-8($t2) # <= 0 if array
3800#	lw $t2,-12($t2) # vtable address (unless array)
3804#	bgt $t3,$zero,skipArrayCast
3805##...slt $at,$zero,$t3
3809##...bne $at,$zero,$+8
3812#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3816:  skipArrayCast:
3816#	bge $t2,$t1,castException
3817##...slt $at,$t2,$t1
3821##...beq $at,$zero,$+152
3824#	blt $t2,$t0,castException
3825##...slt $at,$t2,$t0
3829##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3832:  checkCastReturn:	
3832#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3836:instanceOf:
	# get object, go return false if null
3836#	lw $t2,($sp)
3840#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3844#	lw $t3,-8($t2) # <= 0 if array
3848#	lw $t2,-12($t2) # vtable address (unless array)
3852#	bgt $t3,$zero,skipArrayInstanceOf
3853##...slt $at,$zero,$t3
3857##...bne $at,$zero,$+8
3860#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3864:  skipArrayInstanceOf:
3864#	sge $t0,$t2,$t0
3865##...slt $t0,$t2,$t0
3869##...xori $t0,$t0,0x1
3872#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3876#	and $t2,$t0,$t1
3880:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3880#	sw $t2,($sp)
3884#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3888:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3888#	li $v0,4 # syscall-code for print-string
3892#	syscall
3896:exit:
	# print termination message
3896#	li $v0,4
3900#	la $a0,exitString
3904#	syscall

	# terminate execution
3908#	li $v0,10 #syscall-code for "exit"
3912#	syscall

3916:outOfHeapMemory:
3916#	la $a0,heapMemoryMsg
3920#	j exitError
3924:divByZeroError:
3924#	la $a0,divByZeroMsg
3928#	j exitError
3932:strIndexOutOfBounds:
3932#	la $a0,strIndexOutOfBoundsMsg
3936#	j exitError
3940:arrayIndexOutOfBounds:
3940#	la $a0,arrayIndexOutOfBoundsMsg
3944#	j exitError
3948:arraySizeOutOfBounds:
3948#	la $a0,arraySizeOutOfBoundsMsg
3952#	j exitError
3956:nullPtrException:
3956#	la $a0,nullPtrExceptionMsg
3960#	j exitError
3964:badIntegerFormat:
3964#	la $a0,badIntegerFormatMsg
3968#	j exitError
3972:castException:
3972#	la $a0,castExceptionMsg
3976#	j exitError

############## data section ################
	.data
	.align 2

4372:cur_seg:
	.word 0

4376:lastCharRead:
	.word -2 # -2 => no buffered character

4380:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4407:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4430:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4465:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4499:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4532:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4563:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4611:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4632:gcMsg: 
      .asciiz "\nGC!\n"

4638:nullStr:
	.asciiz "null"
4643:trueString:
	.asciiz "true"
4648:falseString:
	.asciiz "false"
4654:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4676:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4680:seg0_start:
	.space 0x100000
1053256:seg0_end:
1053256:seg1_start:
	.space 0x100000
2101832:seg1_end:



