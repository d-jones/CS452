 .data # Program at 1.1 		
  .byte 10 # StringLiteral at 10.18 
  .byte 0 # StringLiteral at 10.18  	
  .byte 0 # StringLiteral at 10.18	  
  .byte 0 # StringLiteral at 10.18 	
  .word CLASS_String # StringLiteral at 10.18   
  .word 2 # StringLiteral at 10.18	 	
  .word -1 # StringLiteral at 10.18   
3956:strLit_20: # StringLiteral at 10.18	
  .byte 10 # StringLiteral at 13.18		
  .byte 0 # StringLiteral at 13.18  	
  .byte 0 # StringLiteral at 13.18	 	
  .byte 0 # StringLiteral at 13.18  	
  .word CLASS_String # StringLiteral at 13.18		 
  .word 2 # StringLiteral at 13.18			
  .word -1 # StringLiteral at 13.18   
3972:strLit_33: # StringLiteral at 13.18 	
  .byte 116 # StringLiteral at 15.15	 
  .byte 101 # StringLiteral at 15.15 	 
  .byte 115 # StringLiteral at 15.15		
  .byte 116 # StringLiteral at 15.15  	
  .byte 32 # StringLiteral at 15.15			
  .byte 115 # StringLiteral at 15.15  
  .byte 116 # StringLiteral at 15.15	 
  .byte 114 # StringLiteral at 15.15 	 
  .byte 105 # StringLiteral at 15.15		 
  .byte 110 # StringLiteral at 15.15 
  .byte 103 # StringLiteral at 15.15 	
  .byte 0 # StringLiteral at 15.15  	
  .word CLASS_String # StringLiteral at 15.15			
  .word 4 # StringLiteral at 15.15   
  .word -11 # StringLiteral at 15.15	 
3996:strLit_38: # StringLiteral at 15.15   
  .byte 10 # StringLiteral at 18.18 
  .byte 0 # StringLiteral at 18.18  
  .byte 0 # StringLiteral at 18.18 		
  .byte 0 # StringLiteral at 18.18   
  .word CLASS_String # StringLiteral at 18.18	 
  .word 2 # StringLiteral at 18.18	  
  .word -1 # StringLiteral at 18.18	 	
4012:strLit_44: # StringLiteral at 18.18  	
  .byte 10 # StringLiteral at 20.18		
  .byte 0 # StringLiteral at 20.18	
  .byte 0 # StringLiteral at 20.18   
  .byte 0 # StringLiteral at 20.18	 	
  .word CLASS_String # StringLiteral at 20.18	  
  .word 2 # StringLiteral at 20.18			
  .word -1 # StringLiteral at 20.18		 
4028:strLit_52: # StringLiteral at 20.18	
  .byte 10 # StringLiteral at 22.18	 	
  .byte 0 # StringLiteral at 22.18	
  .byte 0 # StringLiteral at 22.18 	
  .byte 0 # StringLiteral at 22.18		 
  .word CLASS_String # StringLiteral at 22.18  
  .word 2 # StringLiteral at 22.18 	 
  .word -1 # StringLiteral at 22.18   
4044:strLit_60: # StringLiteral at 22.18 	 
  .byte 10 # StringLiteral at 24.18	 	
  .byte 0 # StringLiteral at 24.18 
  .byte 0 # StringLiteral at 24.18  	
  .byte 0 # StringLiteral at 24.18 	 
  .word CLASS_String # StringLiteral at 24.18		 
  .word 2 # StringLiteral at 24.18	  
  .word -1 # StringLiteral at 24.18  
4060:strLit_68: # StringLiteral at 24.18  	
  .byte 10 # StringLiteral at 26.18 	
  .byte 0 # StringLiteral at 26.18 	
  .byte 0 # StringLiteral at 26.18 	
  .byte 0 # StringLiteral at 26.18			
  .word CLASS_String # StringLiteral at 26.18  	
  .word 2 # StringLiteral at 26.18		
  .word -1 # StringLiteral at 26.18  
4076:strLit_76: # StringLiteral at 26.18	
  .byte 10 # StringLiteral at 28.18 		
  .byte 0 # StringLiteral at 28.18 
  .byte 0 # StringLiteral at 28.18	 
  .byte 0 # StringLiteral at 28.18 	
  .word CLASS_String # StringLiteral at 28.18	 
  .word 2 # StringLiteral at 28.18		 
  .word -1 # StringLiteral at 28.18	 
4092:strLit_84: # StringLiteral at 28.18	
  .byte 10 # StringLiteral at 30.18   
  .byte 0 # StringLiteral at 30.18	 	
  .byte 0 # StringLiteral at 30.18	 	
  .byte 0 # StringLiteral at 30.18 		
  .word CLASS_String # StringLiteral at 30.18 		
  .word 2 # StringLiteral at 30.18 	 
  .word -1 # StringLiteral at 30.18   
4108:strLit_92: # StringLiteral at 30.18	  
  .byte 10 # StringLiteral at 32.18  	
  .byte 0 # StringLiteral at 32.18			
  .byte 0 # StringLiteral at 32.18	
  .byte 0 # StringLiteral at 32.18	  
  .word CLASS_String # StringLiteral at 32.18	 
  .word 2 # StringLiteral at 32.18   
  .word -1 # StringLiteral at 32.18	 
4124:strLit_100: # StringLiteral at 32.18	  
  .byte 10 # StringLiteral at 34.18	
  .byte 0 # StringLiteral at 34.18 	
  .byte 0 # StringLiteral at 34.18	 	
  .byte 0 # StringLiteral at 34.18 		
  .word CLASS_String # StringLiteral at 34.18	 
  .word 2 # StringLiteral at 34.18	
  .word -1 # StringLiteral at 34.18	 
4140:strLit_108: # StringLiteral at 34.18	  
  .byte 10 # StringLiteral at 36.18 
  .byte 0 # StringLiteral at 36.18	
  .byte 0 # StringLiteral at 36.18	
  .byte 0 # StringLiteral at 36.18   
  .word CLASS_String # StringLiteral at 36.18  
  .word 2 # StringLiteral at 36.18		
  .word -1 # StringLiteral at 36.18			
4156:strLit_118: # StringLiteral at 36.18 	 
  .byte 10 # StringLiteral at 38.18 		
  .byte 0 # StringLiteral at 38.18   
  .byte 0 # StringLiteral at 38.18		
  .byte 0 # StringLiteral at 38.18 		
  .word CLASS_String # StringLiteral at 38.18			
  .word 2 # StringLiteral at 38.18 	 
  .word -1 # StringLiteral at 38.18 	 
4172:strLit_128: # StringLiteral at 38.18		
  .byte 10 # StringLiteral at 40.18		
  .byte 0 # StringLiteral at 40.18 	
  .byte 0 # StringLiteral at 40.18		 
  .byte 0 # StringLiteral at 40.18  	
  .word CLASS_String # StringLiteral at 40.18  
  .word 2 # StringLiteral at 40.18 	
  .word -1 # StringLiteral at 40.18 	
4188:strLit_138: # StringLiteral at 40.18 	 
  .byte 10 # StringLiteral at 42.18 	
  .byte 0 # StringLiteral at 42.18 	 
  .byte 0 # StringLiteral at 42.18	  
  .byte 0 # StringLiteral at 42.18	 
  .word CLASS_String # StringLiteral at 42.18		 
  .word 2 # StringLiteral at 42.18 	 
  .word -1 # StringLiteral at 42.18	 
4204:strLit_148: # StringLiteral at 42.18		 
  .byte 10 # StringLiteral at 44.18   
  .byte 0 # StringLiteral at 44.18 
  .byte 0 # StringLiteral at 44.18		 
  .byte 0 # StringLiteral at 44.18	 
  .word CLASS_String # StringLiteral at 44.18	 	
  .word 2 # StringLiteral at 44.18		
  .word -1 # StringLiteral at 44.18 
4220:strLit_160: # StringLiteral at 44.18 		
  .byte 10 # StringLiteral at 46.18  	
  .byte 0 # StringLiteral at 46.18  
  .byte 0 # StringLiteral at 46.18 		
  .byte 0 # StringLiteral at 46.18		
  .word CLASS_String # StringLiteral at 46.18			
  .word 2 # StringLiteral at 46.18	 	
  .word -1 # StringLiteral at 46.18	
4236:strLit_172: # StringLiteral at 46.18  	
  .byte 10 # StringLiteral at 49.18			
  .byte 0 # StringLiteral at 49.18 	
  .byte 0 # StringLiteral at 49.18		
  .byte 0 # StringLiteral at 49.18   
  .word CLASS_String # StringLiteral at 49.18  	
  .word 2 # StringLiteral at 49.18	  
  .word -1 # StringLiteral at 49.18 
4252:strLit_180: # StringLiteral at 49.18  	
  .byte 73 # StringLiteral at 50.18	
  .byte 32 # StringLiteral at 50.18   
  .byte 84 # StringLiteral at 50.18			
  .byte 72 # StringLiteral at 50.18		
  .byte 73 # StringLiteral at 50.18	 
  .byte 78 # StringLiteral at 50.18	 
  .byte 75 # StringLiteral at 50.18 		
  .byte 32 # StringLiteral at 50.18	 	
  .byte 84 # StringLiteral at 50.18		
  .byte 72 # StringLiteral at 50.18	  
  .byte 73 # StringLiteral at 50.18			
  .byte 83 # StringLiteral at 50.18 
  .byte 32 # StringLiteral at 50.18		 
  .byte 73 # StringLiteral at 50.18 	 
  .byte 83 # StringLiteral at 50.18	 
  .byte 32 # StringLiteral at 50.18  
  .byte 87 # StringLiteral at 50.18		
  .byte 79 # StringLiteral at 50.18  
  .byte 82 # StringLiteral at 50.18   
  .byte 75 # StringLiteral at 50.18	  
  .byte 73 # StringLiteral at 50.18 		
  .byte 78 # StringLiteral at 50.18		 
  .byte 71 # StringLiteral at 50.18 	 
  .byte 33 # StringLiteral at 50.18	
  .byte 33 # StringLiteral at 50.18			
  .byte 33 # StringLiteral at 50.18 
  .byte 0 # StringLiteral at 50.18 	
  .byte 0 # StringLiteral at 50.18 	 
  .word CLASS_String # StringLiteral at 50.18	 	
  .word 8 # StringLiteral at 50.18  
  .word -26 # StringLiteral at 50.18  
4292:strLit_184: # StringLiteral at 50.18		 
  .byte 10 # StringLiteral at 51.18   
  .byte 0 # StringLiteral at 51.18	 
  .byte 0 # StringLiteral at 51.18  
  .byte 0 # StringLiteral at 51.18 	 
  .word CLASS_String # StringLiteral at 51.18	  
  .word 2 # StringLiteral at 51.18		 
  .word -1 # StringLiteral at 51.18			
4308:strLit_188: # StringLiteral at 51.18 	
4308:CLASS_Object: # Program at 1.1  	
4308:CLASS_String: # Program at 1.1  	
.text # Program at 1.1	 
.global main # Program at 1.1		
0:main: # Program at 1.1 		
0#jal vm_init # Program at 1.1	  
4#subu $sp, $sp, 4 # NewObject at 0.0		 
8#sw $zero, ($sp) # NewObject at 0.0	
12#jal fcn_192_main # Call at 0.0 	 
16#li $v0, 10 # Program at 1.1	 	
20#syscall # Program at 1.1	
.globl fcn_192_main # MethodDeclVoid at 3.14 
24:fcn_192_main: # MethodDeclVoid at 3.14			
24#subu $sp, $sp, 8 # MethodDeclVoid at 3.14		
28#sw $ra, 4($sp) # MethodDeclVoid at 3.14		
32#sw $s2, ($sp) # MethodDeclVoid at 3.14	  
36#lw $s2, 4($sp) # MethodDeclVoid at 3.14   
40#subu $sp, $sp, 8 # IntegerLiteral at 4.11			
44#sw $s5, 4($sp) # IntegerLiteral at 4.11	
48#li $t0, 9 # IntegerLiteral at 4.11  	
52#sw $t0, ($sp) # IntegerLiteral at 4.11  	
56#lw $t0, 0($sp) # IdentifierExp at 5.11		 
60#subu $sp, $sp, 8 # IdentifierExp at 5.11		 
64#sw $s5, 4($sp) # IdentifierExp at 5.11	  
68#sw $t0, ($sp) # IdentifierExp at 5.11			
72#subu $sp, $sp, 8 # IntegerLiteral at 5.15   
76#sw $s5, 4($sp) # IntegerLiteral at 5.15	 	
80#li $t0, 2 # IntegerLiteral at 5.15 	 
84#sw $t0, ($sp) # IntegerLiteral at 5.15 	 
88#lw $t0, ($sp) # Plus at 5.13	
92#lw $t1, 8($sp) # Plus at 5.13 
96#addu $t0, $t0, $t1 # Plus at 5.13   
100#addu $sp, $sp, 8 # Plus at 5.13  
104#sw $t0, ($sp) # Plus at 5.13 	 
108#lw $t0, 0($sp) # IdentifierExp at 6.11   
112#subu $sp, $sp, 8 # IdentifierExp at 6.11 	
116#sw $s5, 4($sp) # IdentifierExp at 6.11  	
120#sw $t0, ($sp) # IdentifierExp at 6.11 	 
124#subu $sp, $sp, 8 # IntegerLiteral at 6.15 
128#sw $s5, 4($sp) # IntegerLiteral at 6.15	 
132#li $t0, 2 # IntegerLiteral at 6.15	  
136#sw $t0, ($sp) # IntegerLiteral at 6.15 	
140#lw $t0, ($sp) # Minus at 6.13	 	
144#lw $t1, 8($sp) # Minus at 6.13 	
148#subu $t0, $t1, $t0 # Minus at 6.13 	
152#addu $sp, $sp, 8 # Minus at 6.13 
156#sw $t0, ($sp) # Minus at 6.13  	
160#subu $sp, $sp, 8 # IntegerLiteral at 8.11		 
164#sw $s5, 4($sp) # IntegerLiteral at 8.11	
168#li $t0, 1 # IntegerLiteral at 8.11	
172#sw $t0, ($sp) # IntegerLiteral at 8.11			
176#subu $sp, $sp, 4 # Super at 9.9	
180#sw $s2, ($sp) # Super at 9.9			
184#lw $t0, 4($sp) # IdentifierExp at 9.18	
188#subu $sp, $sp, 8 # IdentifierExp at 9.18  
192#sw $s5, 4($sp) # IdentifierExp at 9.18   
196#sw $t0, ($sp) # IdentifierExp at 9.18   
200#jal printInt # Call at 9.9  	
204#subu $sp, $sp, 4 # Super at 10.9	 
208#sw $s2, ($sp) # Super at 10.9 
212#subu $sp, $sp, 4 # StringLiteral at 10.18		
216#la $t0, strLit_20 # StringLiteral at 10.18 	
220#sw $t0, ($sp) # StringLiteral at 10.18 	 
224#jal printStr # Call at 10.9	  
228#lw $t0, 0($sp) # IdentifierExp at 11.7	 	
232#subu $sp, $sp, 8 # IdentifierExp at 11.7 	 
236#sw $s5, 4($sp) # IdentifierExp at 11.7		 
240#sw $t0, ($sp) # IdentifierExp at 11.7	
244#subu $sp, $sp, 8 # IntegerLiteral at 11.11 
248#sw $s5, 4($sp) # IntegerLiteral at 11.11		
252#li $t0, 1 # IntegerLiteral at 11.11 		
256#sw $t0, ($sp) # IntegerLiteral at 11.11   
260#lw $t0, ($sp) # Plus at 11.9			
264#lw $t1, 8($sp) # Plus at 11.9	 	
268#addu $t0, $t0, $t1 # Plus at 11.9	 
272#addu $sp, $sp, 8 # Plus at 11.9	  
276#sw $t0, ($sp) # Plus at 11.9	 
280#lw $t0, ($sp) # Assign at 11.5		 
284#sw $t0, 8($sp) # Assign at 11.5		 
288#addu $sp, $sp, 8 # Assign at 11.5	 	
292#subu $sp, $sp, 4 # Super at 12.9 
296#sw $s2, ($sp) # Super at 12.9 	 
300#lw $t0, 4($sp) # IdentifierExp at 12.18 		
304#subu $sp, $sp, 8 # IdentifierExp at 12.18	 
308#sw $s5, 4($sp) # IdentifierExp at 12.18	
312#sw $t0, ($sp) # IdentifierExp at 12.18			
316#jal printInt # Call at 12.9 	
320#subu $sp, $sp, 4 # Super at 13.9 
324#sw $s2, ($sp) # Super at 13.9	 
328#subu $sp, $sp, 4 # StringLiteral at 13.18	
332#la $t0, strLit_33 # StringLiteral at 13.18		 
336#sw $t0, ($sp) # StringLiteral at 13.18		
340#jal printStr # Call at 13.9  	
344#subu $sp, $sp, 4 # StringLiteral at 15.15 
348#la $t0, strLit_38 # StringLiteral at 15.15		 
352#sw $t0, ($sp) # StringLiteral at 15.15   
356#subu $sp, $sp, 4 # Super at 17.9	 	
360#sw $s2, ($sp) # Super at 17.9	 
364#lw $t0, 32($sp) # IdentifierExp at 17.18  	
368#subu $sp, $sp, 8 # IdentifierExp at 17.18 	 
372#sw $s5, 4($sp) # IdentifierExp at 17.18  
376#sw $t0, ($sp) # IdentifierExp at 17.18		 
380#jal printInt # Call at 17.9 		
384#subu $sp, $sp, 4 # Super at 18.9			
388#sw $s2, ($sp) # Super at 18.9		
392#subu $sp, $sp, 4 # StringLiteral at 18.18	 	
396#la $t0, strLit_44 # StringLiteral at 18.18	 	
400#sw $t0, ($sp) # StringLiteral at 18.18	
404#jal printStr # Call at 18.9	 
408#subu $sp, $sp, 4 # Super at 19.9	 	
412#sw $s2, ($sp) # Super at 19.9	 
416#lw $t0, 32($sp) # IdentifierExp at 19.18	
420#subu $sp, $sp, 8 # IdentifierExp at 19.18 		
424#sw $s5, 4($sp) # IdentifierExp at 19.18	 
428#sw $t0, ($sp) # IdentifierExp at 19.18	 	
432#jal printInt # Call at 19.9   
436#subu $sp, $sp, 4 # Super at 20.9		
440#sw $s2, ($sp) # Super at 20.9  
444#subu $sp, $sp, 4 # StringLiteral at 20.18			
448#la $t0, strLit_52 # StringLiteral at 20.18 		
452#sw $t0, ($sp) # StringLiteral at 20.18 		
456#jal printStr # Call at 20.9 		
460#subu $sp, $sp, 4 # Super at 21.9	  
464#sw $s2, ($sp) # Super at 21.9			
468#lw $t0, 32($sp) # IdentifierExp at 21.18		
472#subu $sp, $sp, 8 # IdentifierExp at 21.18	  
476#sw $s5, 4($sp) # IdentifierExp at 21.18	  
480#sw $t0, ($sp) # IdentifierExp at 21.18			
484#jal printInt # Call at 21.9		
488#subu $sp, $sp, 4 # Super at 22.9 	
492#sw $s2, ($sp) # Super at 22.9		 
496#subu $sp, $sp, 4 # StringLiteral at 22.18 
500#la $t0, strLit_60 # StringLiteral at 22.18	 	
504#sw $t0, ($sp) # StringLiteral at 22.18 		
508#jal printStr # Call at 22.9	 	
512#subu $sp, $sp, 4 # Super at 23.9 	 
516#sw $s2, ($sp) # Super at 23.9	 
520#lw $t0, 24($sp) # IdentifierExp at 23.18	  
524#subu $sp, $sp, 8 # IdentifierExp at 23.18  
528#sw $s5, 4($sp) # IdentifierExp at 23.18		 
532#sw $t0, ($sp) # IdentifierExp at 23.18 		
536#jal printInt # Call at 23.9   
540#subu $sp, $sp, 4 # Super at 24.9   
544#sw $s2, ($sp) # Super at 24.9 	 
548#subu $sp, $sp, 4 # StringLiteral at 24.18		 
552#la $t0, strLit_68 # StringLiteral at 24.18	  
556#sw $t0, ($sp) # StringLiteral at 24.18		
560#jal printStr # Call at 24.9  	
564#subu $sp, $sp, 4 # Super at 25.9	 	
568#sw $s2, ($sp) # Super at 25.9			
572#lw $t0, 24($sp) # IdentifierExp at 25.18 
576#subu $sp, $sp, 8 # IdentifierExp at 25.18	 
580#sw $s5, 4($sp) # IdentifierExp at 25.18 	 
584#sw $t0, ($sp) # IdentifierExp at 25.18	
588#jal printInt # Call at 25.9 	
592#subu $sp, $sp, 4 # Super at 26.9		 
596#sw $s2, ($sp) # Super at 26.9		 
600#subu $sp, $sp, 4 # StringLiteral at 26.18 		
604#la $t0, strLit_76 # StringLiteral at 26.18   
608#sw $t0, ($sp) # StringLiteral at 26.18	
612#jal printStr # Call at 26.9	 
616#subu $sp, $sp, 4 # Super at 27.9 		
620#sw $s2, ($sp) # Super at 27.9	  
624#lw $t0, 24($sp) # IdentifierExp at 27.18 	 
628#subu $sp, $sp, 8 # IdentifierExp at 27.18	
632#sw $s5, 4($sp) # IdentifierExp at 27.18			
636#sw $t0, ($sp) # IdentifierExp at 27.18		 
640#jal printInt # Call at 27.9	
644#subu $sp, $sp, 4 # Super at 28.9 
648#sw $s2, ($sp) # Super at 28.9	 	
652#subu $sp, $sp, 4 # StringLiteral at 28.18  
656#la $t0, strLit_84 # StringLiteral at 28.18	 
660#sw $t0, ($sp) # StringLiteral at 28.18 	
664#jal printStr # Call at 28.9 
668#subu $sp, $sp, 4 # Super at 29.9	 
672#sw $s2, ($sp) # Super at 29.9	
676#lw $t0, 16($sp) # IdentifierExp at 29.18 	
680#subu $sp, $sp, 8 # IdentifierExp at 29.18	 
684#sw $s5, 4($sp) # IdentifierExp at 29.18  
688#sw $t0, ($sp) # IdentifierExp at 29.18 		
692#jal printInt # Call at 29.9	
696#subu $sp, $sp, 4 # Super at 30.9  	
700#sw $s2, ($sp) # Super at 30.9		 
704#subu $sp, $sp, 4 # StringLiteral at 30.18  	
708#la $t0, strLit_92 # StringLiteral at 30.18	
712#sw $t0, ($sp) # StringLiteral at 30.18	  
716#jal printStr # Call at 30.9  	
720#subu $sp, $sp, 4 # Super at 31.9 		
724#sw $s2, ($sp) # Super at 31.9	 	
728#lw $t0, 16($sp) # IdentifierExp at 31.18	 	
732#subu $sp, $sp, 8 # IdentifierExp at 31.18  	
736#sw $s5, 4($sp) # IdentifierExp at 31.18 		
740#sw $t0, ($sp) # IdentifierExp at 31.18	  
744#jal printInt # Call at 31.9	
748#subu $sp, $sp, 4 # Super at 32.9  
752#sw $s2, ($sp) # Super at 32.9   
756#subu $sp, $sp, 4 # StringLiteral at 32.18 
760#la $t0, strLit_100 # StringLiteral at 32.18 		
764#sw $t0, ($sp) # StringLiteral at 32.18 		
768#jal printStr # Call at 32.9	
772#subu $sp, $sp, 4 # Super at 33.9  
776#sw $s2, ($sp) # Super at 33.9  
780#lw $t0, 16($sp) # IdentifierExp at 33.18 	 
784#subu $sp, $sp, 8 # IdentifierExp at 33.18  	
788#sw $s5, 4($sp) # IdentifierExp at 33.18   
792#sw $t0, ($sp) # IdentifierExp at 33.18   
796#jal printInt # Call at 33.9 		
800#subu $sp, $sp, 4 # Super at 34.9 	 
804#sw $s2, ($sp) # Super at 34.9	
808#subu $sp, $sp, 4 # StringLiteral at 34.18   
812#la $t0, strLit_108 # StringLiteral at 34.18		
816#sw $t0, ($sp) # StringLiteral at 34.18  
820#jal printStr # Call at 34.9  	
824#subu $sp, $sp, 4 # Super at 35.9	  
828#sw $s2, ($sp) # Super at 35.9		
832#lw $t0, 32($sp) # IdentifierExp at 35.18  
836#subu $sp, $sp, 8 # IdentifierExp at 35.18 
840#sw $s5, 4($sp) # IdentifierExp at 35.18   
844#sw $t0, ($sp) # IdentifierExp at 35.18 	
848#lw $t0, 32($sp) # IdentifierExp at 35.22			
852#subu $sp, $sp, 8 # IdentifierExp at 35.22			
856#sw $s5, 4($sp) # IdentifierExp at 35.22   
860#sw $t0, ($sp) # IdentifierExp at 35.22  	
864#lw $t0, ($sp) # Minus at 35.20   
868#lw $t1, 8($sp) # Minus at 35.20 		
872#subu $t0, $t1, $t0 # Minus at 35.20 	 
876#addu $sp, $sp, 8 # Minus at 35.20		
880#sw $t0, ($sp) # Minus at 35.20	 
884#jal printInt # Call at 35.9	  
888#subu $sp, $sp, 4 # Super at 36.9   
892#sw $s2, ($sp) # Super at 36.9 	 
896#subu $sp, $sp, 4 # StringLiteral at 36.18	
900#la $t0, strLit_118 # StringLiteral at 36.18   
904#sw $t0, ($sp) # StringLiteral at 36.18 
908#jal printStr # Call at 36.9	  
912#subu $sp, $sp, 4 # Super at 37.9	  
916#sw $s2, ($sp) # Super at 37.9 		
920#lw $t0, 32($sp) # IdentifierExp at 37.18		
924#subu $sp, $sp, 8 # IdentifierExp at 37.18 
928#sw $s5, 4($sp) # IdentifierExp at 37.18 
932#sw $t0, ($sp) # IdentifierExp at 37.18			
936#lw $t0, 32($sp) # IdentifierExp at 37.22	 	
940#subu $sp, $sp, 8 # IdentifierExp at 37.22  
944#sw $s5, 4($sp) # IdentifierExp at 37.22 		
948#sw $t0, ($sp) # IdentifierExp at 37.22 	
952#lw $t0, ($sp) # Minus at 37.20	  
956#lw $t1, 8($sp) # Minus at 37.20	
960#subu $t0, $t1, $t0 # Minus at 37.20	
964#addu $sp, $sp, 8 # Minus at 37.20  
968#sw $t0, ($sp) # Minus at 37.20  	
972#jal printInt # Call at 37.9 		
976#subu $sp, $sp, 4 # Super at 38.9 	
980#sw $s2, ($sp) # Super at 38.9	
984#subu $sp, $sp, 4 # StringLiteral at 38.18 		
988#la $t0, strLit_128 # StringLiteral at 38.18   
992#sw $t0, ($sp) # StringLiteral at 38.18 
996#jal printStr # Call at 38.9 		
1000#subu $sp, $sp, 4 # Super at 39.9		 
1004#sw $s2, ($sp) # Super at 39.9 	
1008#lw $t0, 24($sp) # IdentifierExp at 39.18	 
1012#subu $sp, $sp, 8 # IdentifierExp at 39.18			
1016#sw $s5, 4($sp) # IdentifierExp at 39.18 	
1020#sw $t0, ($sp) # IdentifierExp at 39.18 		
1024#lw $t0, 40($sp) # IdentifierExp at 39.22	
1028#subu $sp, $sp, 8 # IdentifierExp at 39.22   
1032#sw $s5, 4($sp) # IdentifierExp at 39.22	  
1036#sw $t0, ($sp) # IdentifierExp at 39.22	 	
1040#lw $t0, ($sp) # Minus at 39.20	  
1044#lw $t1, 8($sp) # Minus at 39.20 	
1048#subu $t0, $t1, $t0 # Minus at 39.20   
1052#addu $sp, $sp, 8 # Minus at 39.20  	
1056#sw $t0, ($sp) # Minus at 39.20   
1060#jal printInt # Call at 39.9	
1064#subu $sp, $sp, 4 # Super at 40.9 	 
1068#sw $s2, ($sp) # Super at 40.9	  
1072#subu $sp, $sp, 4 # StringLiteral at 40.18   
1076#la $t0, strLit_138 # StringLiteral at 40.18  
1080#sw $t0, ($sp) # StringLiteral at 40.18 
1084#jal printStr # Call at 40.9 	 
1088#subu $sp, $sp, 4 # Super at 41.9		
1092#sw $s2, ($sp) # Super at 41.9		 
1096#lw $t0, 24($sp) # IdentifierExp at 41.18		 
1100#subu $sp, $sp, 8 # IdentifierExp at 41.18 
1104#sw $s5, 4($sp) # IdentifierExp at 41.18		
1108#sw $t0, ($sp) # IdentifierExp at 41.18 	 
1112#lw $t0, 40($sp) # IdentifierExp at 41.22  	
1116#subu $sp, $sp, 8 # IdentifierExp at 41.22	  
1120#sw $s5, 4($sp) # IdentifierExp at 41.22 	
1124#sw $t0, ($sp) # IdentifierExp at 41.22	
1128#lw $t0, ($sp) # Minus at 41.20	 	
1132#lw $t1, 8($sp) # Minus at 41.20		 
1136#subu $t0, $t1, $t0 # Minus at 41.20 		
1140#addu $sp, $sp, 8 # Minus at 41.20	  
1144#sw $t0, ($sp) # Minus at 41.20	 	
1148#jal printInt # Call at 41.9  
1152#subu $sp, $sp, 4 # Super at 42.9	
1156#sw $s2, ($sp) # Super at 42.9	 	
1160#subu $sp, $sp, 4 # StringLiteral at 42.18  
1164#la $t0, strLit_148 # StringLiteral at 42.18 	
1168#sw $t0, ($sp) # StringLiteral at 42.18		 
1172#jal printStr # Call at 42.9 	
1176#subu $sp, $sp, 4 # Super at 43.9  	
1180#sw $s2, ($sp) # Super at 43.9 		
1184#lw $t0, 16($sp) # IdentifierExp at 43.18	  
1188#subu $sp, $sp, 8 # IdentifierExp at 43.18	  
1192#sw $s5, 4($sp) # IdentifierExp at 43.18  
1196#sw $t0, ($sp) # IdentifierExp at 43.18 	 
1200#lw $t0, 40($sp) # IdentifierExp at 43.22		 
1204#subu $sp, $sp, 8 # IdentifierExp at 43.22	 
1208#sw $s5, 4($sp) # IdentifierExp at 43.22 
1212#sw $t0, ($sp) # IdentifierExp at 43.22 
1216#lw $t0, ($sp) # Plus at 43.20	 
1220#lw $t1, 8($sp) # Plus at 43.20	  
1224#addu $t0, $t0, $t1 # Plus at 43.20		
1228#addu $sp, $sp, 8 # Plus at 43.20		 
1232#sw $t0, ($sp) # Plus at 43.20  	
1236#lw $t0, 32($sp) # IdentifierExp at 43.26 		
1240#subu $sp, $sp, 8 # IdentifierExp at 43.26	 	
1244#sw $s5, 4($sp) # IdentifierExp at 43.26			
1248#sw $t0, ($sp) # IdentifierExp at 43.26		 
1252#lw $t0, ($sp) # Minus at 43.24	  
1256#lw $t1, 8($sp) # Minus at 43.24  	
1260#subu $t0, $t1, $t0 # Minus at 43.24  	
1264#addu $sp, $sp, 8 # Minus at 43.24 	
1268#sw $t0, ($sp) # Minus at 43.24 	
1272#jal printInt # Call at 43.9			
1276#subu $sp, $sp, 4 # Super at 44.9  
1280#sw $s2, ($sp) # Super at 44.9 	
1284#subu $sp, $sp, 4 # StringLiteral at 44.18	 
1288#la $t0, strLit_160 # StringLiteral at 44.18 
1292#sw $t0, ($sp) # StringLiteral at 44.18		
1296#jal printStr # Call at 44.9  
1300#subu $sp, $sp, 4 # Super at 45.9			
1304#sw $s2, ($sp) # Super at 45.9			
1308#lw $t0, 24($sp) # IdentifierExp at 45.18	 
1312#subu $sp, $sp, 8 # IdentifierExp at 45.18  
1316#sw $s5, 4($sp) # IdentifierExp at 45.18	 	
1320#sw $t0, ($sp) # IdentifierExp at 45.18	 
1324#lw $t0, 40($sp) # IdentifierExp at 45.22		 
1328#subu $sp, $sp, 8 # IdentifierExp at 45.22  	
1332#sw $s5, 4($sp) # IdentifierExp at 45.22  
1336#sw $t0, ($sp) # IdentifierExp at 45.22		
1340#lw $t0, ($sp) # Minus at 45.20 	
1344#lw $t1, 8($sp) # Minus at 45.20 
1348#subu $t0, $t1, $t0 # Minus at 45.20 		
1352#addu $sp, $sp, 8 # Minus at 45.20		 
1356#sw $t0, ($sp) # Minus at 45.20	 
1360#lw $t0, 24($sp) # IdentifierExp at 45.26  	
1364#subu $sp, $sp, 8 # IdentifierExp at 45.26 	 
1368#sw $s5, 4($sp) # IdentifierExp at 45.26 		
1372#sw $t0, ($sp) # IdentifierExp at 45.26 
1376#lw $t0, ($sp) # Plus at 45.24		
1380#lw $t1, 8($sp) # Plus at 45.24	  
1384#addu $t0, $t0, $t1 # Plus at 45.24	
1388#addu $sp, $sp, 8 # Plus at 45.24  	
1392#sw $t0, ($sp) # Plus at 45.24		 
1396#jal printInt # Call at 45.9 	
1400#subu $sp, $sp, 4 # Super at 46.9		
1404#sw $s2, ($sp) # Super at 46.9	
1408#subu $sp, $sp, 4 # StringLiteral at 46.18   
1412#la $t0, strLit_172 # StringLiteral at 46.18		 
1416#sw $t0, ($sp) # StringLiteral at 46.18 	
1420#jal printStr # Call at 46.9 		
1424#subu $sp, $sp, 4 # Super at 48.9	
1428#sw $s2, ($sp) # Super at 48.9  
1432#lw $t0, 4($sp) # IdentifierExp at 48.18			
1436#subu $sp, $sp, 4 # IdentifierExp at 48.18	
1440#sw $t0, ($sp) # IdentifierExp at 48.18 
1444#jal printStr # Call at 48.9	  
1448#subu $sp, $sp, 4 # Super at 49.9 		
1452#sw $s2, ($sp) # Super at 49.9   
1456#subu $sp, $sp, 4 # StringLiteral at 49.18	 
1460#la $t0, strLit_180 # StringLiteral at 49.18	
1464#sw $t0, ($sp) # StringLiteral at 49.18		 
1468#jal printStr # Call at 49.9	 	
1472#subu $sp, $sp, 4 # Super at 50.9  	
1476#sw $s2, ($sp) # Super at 50.9	 	
1480#subu $sp, $sp, 4 # StringLiteral at 50.18	
1484#la $t0, strLit_184 # StringLiteral at 50.18		
1488#sw $t0, ($sp) # StringLiteral at 50.18 
1492#jal printStr # Call at 50.9 	 
1496#subu $sp, $sp, 4 # Super at 51.9 	
1500#sw $s2, ($sp) # Super at 51.9			
1504#subu $sp, $sp, 4 # StringLiteral at 51.18  
1508#la $t0, strLit_188 # StringLiteral at 51.18		
1512#sw $t0, ($sp) # StringLiteral at 51.18			
1516#jal printStr # Call at 51.9			
1520#lw $ra, 40($sp) # MethodDeclVoid at 3.14		
1524#lw $s2, 4($sp) # MethodDeclVoid at 3.14 
1528#addu $sp, $sp, 48 # MethodDeclVoid at 3.14 		
1532#jr $ra # MethodDeclVoid at 3.14  
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1536:readLine:
	
1536#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1540#	sw $ra, 4($sp) # save $ra
1544#	move $t1,$sp # save "original" sp

1548:  doRead:

	# read the character
1548#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1552#	subu $t2,$v0,13
1556#	bne $t2,$zero,notReturnRL
1560#	jal readLogicalChar
1564#	subu $t2,$v0,10 # check for newline
1568#	beq $t2,$zero,foundNewLine
1572#	sw $v0,lastCharRead # push back character into queue
1576#	j foundNewLine # go process the line

1580:  notReturnRL:

	# at this point, $v0 has our character

1580#	subu $t0,$v0,10
1584#	beq $t0,$zero,foundNewLine
1588#	blt $v0,$zero,foundEof
1589##...slt $at,$v0,$zero
1593##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1596#	subu $sp,$sp,4
1600#	sw $v0,($sp)

	# loop back up to get next character
1604#	j doRead

1608:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1608#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1612#	sw $zero,8($sp) # return-value: null
1616#	j rlReturn # return

1620:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1620#	subu $t0,$t1,$sp # number of chars we read (times 4)
1624#	srl $s6,$t0,2 # number of words on stack with chars
1628#	subu $sp,$sp,4 # push char-count ...
1632#	sw $s6,($sp) # ... onto stack
1636#	addu $t2,$t0,5 # GC tag, incl. for count-word
1640#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1644#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1648#	srl $s6,$s6,2 # data words in object
1652#	move $s7,$zero # # object words in object
1656#	jal newObject # allocate space
	
	# store header words
1660#	la $t0,CLASS_String
1664#	sw $t0,-12($s7) # store class tag (String) into object
1668#	lw $t2,4($sp) # char-count
1672#	sll $t1,$t2,2 # 4 times number of chars
1676#	subu $t2,$zero,$t2 # negative of char-count
1680#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1684#	lw $t0,-8($s7) # data words in object
1688#	sll $t0,$t0,2 # data bytes in object
1692#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1696#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1700#	addu $sp,$sp,8 # pop redundant object-pointer and count
1704#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1708#	beq $sp,$t1,doneCharCopy
1712:  charCopyLoop:
1712#	lw $t2,($sp)
1716#	sb $t2,-9($t0)
1720#	addu $sp,$sp,4
1724#	subu $t0,$t0,1
1728#	bne $sp,$t1,charCopyLoop
1732:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1732#	sw $s7,8($sp)
	
1736:  rlReturn:
	# restore return address and return
1736#	lw $ra,4($sp) # restore return address, ...
1740#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1744#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1748:readInt:

	# save $ra by pushing onto stack
1748#	subu $sp,$sp,4
1752#	sw $ra,($sp)

1756:  riSkipWhiteLoop:
	# read a character
1756#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1760#	subu $t0,$v0,32
1764#	bgt $t0,$zero,nonWhite
1765##...slt $at,$zero,$t0
1769##...bne $at,$zero,$+44
1772#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1776#	subu $t0,$v0,10
1780#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1784#	subu $t0,$v0,9
1788#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1792#	subu $t0,$v0,13
1796#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1800#	subu $t0,$v0,12
1804#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1808#	j badIntegerFormat # illegal integer char: abort program

1812:  nonWhite:
1812#	subu $t0,$v0,'-'
1816#	li $t4,1 # final multiplier
1820#	bne $t0,$zero,helpReadInt # go read
1824#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1828#	jal readLogicalChar

1832:  helpReadInt:
1832#	li $t2,10
1836#	subu $t1,$v0,'0' # convert digit to 0-9 value
1840#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1841##...sltu $at,$t1,$t2
1845##...beq $at,$zero,$+2080
1848#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1852:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1852#	jal readLogicalChar # read next character
1856#	subu $t1,$v0,'0' # convert digit to 0-9 value
1860#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1861##...sltu $at,$t1,$t2
1865##...beq $at,$zero,$+20

1868#	mul $t3,$t3,$t2 # multiply old value by 10
1869##...mult $t3,$t2
1873##...mflo $t3
1876#	addu $t3,$t3,$t1 # add in value of new digit
1880#	j digitLoop

1884:  doneDigitLoop:

	# "push back" unused character into queue
1884#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1888#	lw $ra,($sp)
1892#	mult $t3,$t4 # multiply to account for poss. minus sign
1896#	mflo $t3
1900#	sw $t3,($sp) # result
1904#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1908#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1912:readChar:

	# save $ra by pushing onto stack
1912#	subu $sp,$sp,4
1916#	sw $ra,($sp)

  	# read the character
1920#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1924#	lw $ra,($sp)
1928#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1932#	sw $v0,($sp)

	# return
1936#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1940:printStr:
	# check for null, printing "(null)", if so
1940#	lw $t0,($sp)
1944#	bne $t0,$zero,psNotNull

	# print "(null)"
1948#	la $a0,nullStr
1952#	li $v0,4
1956#	syscall
1960#	j donePrintStr
	
1964:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1964#	subu $t0,$t0,8
1968#	lw $t1,($t0) # word just beyond end of string
1972#	sll $t1,$t1,2
1976#	subu $t1,$t0,$t1 # first word in string
1980#	lw $t0,4($t0) # negative of string-length
1984#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1988#	beq $t0,$t1,donePrintStr
1992:  psLoop:
1992#	lb $a0,($t1) # next byte
1996#	li $v0,11 # code for printing char
2000#        syscall # print the char
2004#	addu $t1,$t1,1 # go to next char
2008#	blt $t1,$t0,psLoop
2009##...slt $at,$t1,$t0
2013##...bne $at,$zero,$-20

2016:  donePrintStr:
	# pop stack and return
2016#	addu $sp,$sp,8
2020#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2024:printInt:
	# pop value off stack, along with 'this'
2024#	lw $a0,($sp)
2028#	addu $sp,$sp,12

	# print it
2032#	li $v0,1 # code for print-int
2036#	syscall

	# return
2040#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2044:printBool:
	# pop value off stack, along with 'this'
2044#	lw $t0,($sp)
2048#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2052#	la $a0,falseString
2056#	beq $t0,$zero,skipPB
2060#	la $a0,trueString
2064:  skipPB:
2064#	li $v0,4 # code for print-string
2068#	syscall

	# return
2072#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2076:substring:

	# save $ra by pushing onto stack
2076#	subu $sp,$sp,4
2080#	sw $ra,($sp)

	# get string value off stack, test for null
2084#	lw $t0,20($sp)
2088#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2092#	lw $t0,-4($t0) # negative of string length
2096#	subu $t0,$zero,$t0 # string length
2100#	lw $t1,4($sp) # k
2104#	lw $t2,12($sp) # n
2108#	bgt $zero,$t2,strIndexOutOfBounds
2109##...slt $at,$t2,$zero
2113##...bne $at,$zero,$+1780
2116#	bgt $t2,$t1,strIndexOutOfBounds
2117##...slt $at,$t1,$t2
2121##...bne $at,$zero,$+1772
2124#	bgt $t1,$t0,strIndexOutOfBounds
2125##...slt $at,$t0,$t1
2129##...bne $at,$zero,$+1764

	# allocate memory
2132#	subu $s6,$t1,$t2 # # chars in target-string
2136#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2140#	srl $s6,$s6,2 # convert bytes-count to word-count
2144#	move $s7,$zero # (no object-bytes in string)
2148#	jal newObject

	# store "String" tag in object-type field
2152#	la $t0,CLASS_String
2156#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2160#	lw $t1,8($sp) # k
2164#	lw $t2,16($sp) # n
2168#	subu $t0,$t2,$t1 # value to store
2172#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2176#	lw $t3,24($sp) # source string pointer
2180#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2184#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2188#	lw $t4,-8($t3) # # data words in source string
2192#	sll $t4,$t4,2 # # data bytes in source string
2196#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2200#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2204#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2208#	lw $t2,-8($s7) # # data words in target string
2212#	sll $t2,$t2,2 # # data bytes in target string
2216#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2220:  subCopyLoopzz:
2220#	lb $t4,-8($t3)
2224#	sb $t4,-8($t2)
2228#	addu $t2,$t2,1
2232#	addu $t3,$t3,1
2236#	blt $t3,$t1,subCopyLoopzz
2237##...slt $at,$t3,$t1
2241##...bne $at,$zero,$-20
	
2244:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2244#	lw $ra,4($sp) # restore $ra
2248#	addu $sp,$sp,24 # pop stack
	
	# return
2252#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2256:length:

	# get string pointer
2256#	lw $t0,($sp)
	
	# grow stack
2260#	subu $sp,$sp,4

	# store GC tag
2264#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2268#	lw $t0,-4($t0) # -length
2272#	subu $t0,$zero,$t0
2276#	sw $t0,($sp) #store length

	# return
2280#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2284:concat:
 	# save $ra by pushing onto stack
2284#	subu $sp,$sp,4
2288#	sw $ra($sp)

	# get string pointers and check parameter for null
2292#	lw $t0,4($sp)
2296#	beq $t0,$zero,nullPtrException
2300#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2304#	lw $t0,-4($t0) # negative size of second object
2308#	lw $t1,-4($t1) # negative size of first object
2312#	addu $s6,$t0,$t1 # sum of negative sizes
2316#	sra $s6,$s6,2 # negative word-size of char part
2320#	subu $s6,$zero,$s6 # word size of char part
2324#	addu $s6,$s6,1 # data word size, including v-table word
2328#	move $s7,$zero
2332#	jal newObject

	# store "String" tag in object-type field
2336#	la $t0,CLASS_String
2340#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2344#	lw $ra,4($sp) # return address
2348#	lw $t0,8($sp) # second object
2352#	lw $t1,12($sp) # first object
2356#	addu $sp,$sp,12 # pop
2360#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2364#	lw $t2,-4($t0) # negative length of second object
2368#	lw $t3,-4($t1) # negative length of first object
2372#	addu $t4,$t2,$t3 # sum of negative lengths
2376#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2380#	lw $t4,-8($t1) # # data words in first string
2384#	sll $t4,$t4,2 # # data bytes in first string
2388#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2392#	lw $t4,-8($s7) # # data words in new string
2396#	sll $t4,$t4,2 # # data bytes in new string
2400#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2404#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2408#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2412:  concatLoop1zz:
2412#	lb $t4,-8($t1)
2416#	sb $t4,-8($s7)
2420#	addu $s7,$s7,1
2424#	addu $t1,$t1,1
2428#	blt $t1,$t3,concatLoop1zz
2429##...slt $at,$t1,$t3
2433##...bne $at,$zero,$-20
2436:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2436#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2440#	lw $t4,-8($t0) # # data words in second string
2444#	sll $t4,$t4,2 # # data bytes in second string
2448#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2452#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2456:  concatLoop2zz:
2456#	lb $t4,-8($t1)
2460#	sb $t4,-8($s7)
2464#	addu $s7,$s7,1
2468#	addu $t1,$t1,1
2472#	blt $t1,$t3,concatLoop2zz
2473##...slt $at,$t1,$t3
2477##...bne $at,$zero,$-20
2480:  doneConcatLoop2zz:
 
2480:  concatRtnzz:
	# return
2480#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2484:charAt:
	# get string
2484#	lw $t0,8($sp)

	# check that index is in bounds
2488#	lw $t1,-4($t0) # negative of # data words in string
2492#	subu $t3,$zero,$t1 # # chars in string
2496#	lw $t2,($sp) # index
2500#	bgeu $t2,$t3,strIndexOutOfBounds
2501##...sltu $at,$t2,$t3
2505##...beq $at,$zero,$+1388

	# access element
2508#	lw $t1,-8($t0) # # data words in object
2512#	sll $t1,$t1,2 # - byte-offset from end of chars
2516#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2520#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2524#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2528#	addu $sp,$sp,4
2532#	sw $t0,($sp)
2536#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2540#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2544:intToString:

	# save return address on stack; allocate space for dummy GC tag
2544#	subu $sp,$sp,8
2548#	sw $ra,4($sp)

	# save current sp
2552#	move $t0,$sp

	# move constant 10 into $t3
2556#	li $t3,10

	# get argument, negate if negative
2560#	lw $t1,8($sp)
2564#	bge $t1,$zero,itsNonNegLoop
2565##...slt $at,$t1,$zero
2569##...beq $at,$zero,$+8
2572#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2576:  itsNonNegLoop:
2576#	divu $t1,$t3
2580#	mflo $t1 # quotient
2584#	mfhi $t4 # remainder
2588#	addu $t4,$t4,'0' # turn remainder into digit
2592#	subu $sp,$sp,4
2596#	sw $t4,($sp) # push digit onto stack
2600#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2604#	lw $t4,8($t0)
2608#	bge $t4,$zero,itsSkipNeg
2609##...slt $at,$t4,$zero
2613##...beq $at,$zero,$+16
2616#	li $t4,'-'
2620#	subu $sp,$sp,4
2624#	sw $t4,($sp)
2628:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2628#	subu $s6,$t0,$sp
2632#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2636#	sw $t3,($t0)
2640#	srl $s6,$s6,2
2644#	subu $sp,$sp,4
2648#	sw $s6,($sp)
	
	# allocate memory
2652#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2656#	srl $s6,$s6,2
2660#	move $s7,$zero # no "object" words in object
2664#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2668#	lw $t0,4($sp)
2672#	addu $sp,$sp,8

	# store "String" tag into class field
2676#	subu $s7,$s7,8 # address of header-1 word
2680#	la $t1,CLASS_String
2684#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2688#	subu $t0,$zero,$t0
2692#	sw $t0,4($s7)

2696#	lw $t1,($s7) # number of data words in string
2700#	sll $t1,$t1,2 # number data bytes in string
2704#	subu $t1,$s7,$t1 # first location to store chars in string
2708#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2712:  itsLoop:
2712#	lw $t2,($sp)
2716#	addu $sp,$sp,4
2720#	sb $t2,($t1)
2724#	addu $t1,$t1,1
2728#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2732#	lw $ra,4($sp)
2736#	addu $sp,$sp,16
2740#	addu $t0,$t0,15
2744#	and $t0,$t0,0xfffffffc
2745##...lui $at,65535
2749##...ori $at,$at,0xfffc
2753##...and $t0,$t0,$at
2756#	sw $t0,($sp)
2760#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2764:intToChar:
	# save return address
2764#	subu $sp,$sp,4
2768#	sw $ra,($sp)

	# allocate object
2772#	li $s6,2
2776#	move $s7,$zero
2780#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2784#	lw $ra,4($sp)
2788#	lw $t1,8($sp)
2792#	addu $sp,$sp,16

	# store "String" tag into class field
2796#	la $t0,CLASS_String
2800#	sw $t0,-12($s7)

	# store data in string
2804#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2808#	li $t0,-1
2812#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2816#	sw $s7,($sp)

	# return
2820#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2824:compareTo:
	# get string pointers and check parameter for null
2824#	lw $t0,($sp) # second string
2828#	beq $t0,$zero,nullPtrException
2832#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2836#	lw $t2,-4($t0) # negative length of second string
2840#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2844#	slt $t4,$t3,$t2
2848#	slt $t5,$t2,$t3
2852#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2856#	lw $t2,-8($t0) # # data words in second string
2860#	lw $t3,-8($t1) # # data words in first string
2864#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2868#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2872#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2876#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2880#	beq $zero,$t5,skipStrCmpLenzz
2884#	move $t2,$t3
2888:  skipStrCmpLenzz:
2888#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2892:  cmpLoopzz:
2892#	lw $t3,-8($t1) # word from str2
2896#	lw $t4,-8($t0) # word from str1
2900#	bne $t3,$t4,cmpNotEqualzz
2904#	addu $t1,$t1,4
2908#	addu $t0,$t0,4
2912#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2916#	j cmpHitLimitzz

2920:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2920#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2924#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2928#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2932:  cmpHitLimitzz:
2932#	sw $t5,($sp) # store value
2936#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2940#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2944:readLogicalChar:

	# check if we already have a character
2944#	lw $v0,lastCharRead
2948#	li $t0,-2
2952#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2956#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2960#	jr $ra # return
	
2964:  doReadCh:
	# we need to actually read a character: read and return
2964#	li $v0,12 # use system call to read a character
2968#	syscall
2972#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2976:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2976#	blt $s7,$zero arraySizeOutOfBounds
2977##...slt $at,$s7,$zero
2981##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2984#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2988:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2988#	move $t3,$s6
2992#	bge $t3,$zero,newSkip
2993##...slt $at,$t3,$zero
2997##...beq $at,$zero,$+8
3000#	move $t3,$zero

3004:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3004#	addu $t0,$t3,$s7
3008#	sll $t0,$t0,2
3012#	addu $t0,$t0,8 # amount of memory needed
3016#	addu $t1,$t0,$s3
3020#	bgtu $t1,$s4,doGC
3021##...sltu $at,$s4,$t1
3025##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3028#	move $t2,$s3
3032:  zeroObjLoop:
3032#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3036#	addu $s3,4
3040#	bltu $s3,$t1,zeroObjLoop
3041##...sltu $at,$s3,$t1
3045##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3048#	sll $t0,$s7,2    # number of post-header bytes
3052#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3056#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3060#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3064#	move $s7,$t0
3068#	subu $sp,$sp,4
3072#	sw $t0,($sp)

3076#	jr $ra
	
3080:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3080#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3084#	subu $sp,$sp,4
3088#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3092#	lw $t0,cur_seg
3096#	move $t7,$s4
3100#	la $t6,seg1_start
3101##...lui $t6,16
3105##...addiu $t6,$t6,4616
3108#	la $s3,seg0_start
3112#	la $s4,seg0_end
3113##...lui $s4,16
3117##...addiu $s4,$s4,4616
3120#	sw $zero,cur_seg
3124#	bne $t0,$zero,skipGc1
3128#	la $t6,seg0_start
3132#	la $s3,seg1_start
3133##...lui $s3,16
3137##...addiu $s3,$s3,4616
3140#	la $s4,seg1_end
3141##...lui $s4,32
3145##...addiu $s4,$s4,4616
3148#	sw $s5,cur_seg
3152:  skipGc1:
3152#	li $t5,-2
3156#	lw $t0,stack_bottom
3160#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3164:  gcStackCopyLoop:
3164#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3168#	sll $t2,$t1,31 # zero iff low bit was zero
3172#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3176#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3180#	bleu $t1,$t6,gcTestIterDone1
3181##...sltu $at,$t6,$t1
3185##...beq $at,$zero,$+148
3188#	bgtu $t1,$t7,gcTestIterDone1
3189##...sltu $at,$t7,$t1
3193##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3196#	lw $t2,-8($t1) # possible forwarding tag
3200#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3204#	lw $t2,-4($t1) # forwarding pointer: object's new address
3208#	sw $t2,4($t0) # update stack value
3212#	j gcTestIterDone1 # do next iteration

3216:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3216#	bge $t2,$zero,gcSkip2
3217##...slt $at,$t2,$zero
3221##...beq $at,$zero,$+8
3224#	move $t2,$zero # set to zero if -1 (number of data words)

3228:  gcSkip2:
3228#	sll $t2,$t2,2
3232#	addu $t2,$t2,8
3236#	subu $t4,$t1,$t2 # address of first word of source
3240#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3244#	bge $t3,$zero,gcH2Neg1
3245##...slt $at,$t3,$zero
3249##...beq $at,$zero,$+8
3252#	move $t3,$zero
3256:  gcH2Neg1:
3256#	sll $t3,$t3,2
3260#	addu $t3,$t3,$t1 # address one word past last word of source

3264#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3268#	lw $s0,($t4)
3272#	lw $s1,-8($t1)
3276#	sw $s1,($t4)
3280#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3284:  gCinnerCopy1:
3284#	lw $s0,($t4)
3288#	sw $s0,($s3)
3292#	addu $t4,$t4,4
3296#	addu $s3,$s3,4
3300#	bltu $t4,$t3,gCinnerCopy1
3301##...sltu $at,$t4,$t3
3305##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3308#	sw $t5,-8($t1) # -2 in first header-slot
3312#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3316#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3320#	j gcTestIterDone1

3324:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3324#	subu $t0,$t0,$t1
3328#	subu $t0,$t0,3

3332:  gcTestIterDone1:
3332#	bgeu $t0,$sp,gcStackCopyLoop
3333##...sltu $at,$t0,$sp
3337##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3340#	lw $t1,cur_seg
3344#	la $t0,seg0_start
3348#	beq $t1,$zero,gcSkip4
3352#	la $t0,seg1_start
3353##...lui $t0,16
3357##...addiu $t0,$t0,4616

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3360:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3360#	bgeu $t0,$s3,gcFinishUp
3361##...sltu $at,$t0,$s3
3365##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3368:  gcHeapCopyLoop:
	# check if we have a data array
3368#	lw $t1,($t0) # first header word for current object
3372#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3373##...slt $at,$t1,$zero
3377##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3380#	lw $t1,4($t0) # data words
3384#	addu $t1,$t1,2 # add in # header words
3388#	sll $t1,$t1,2 # convert to byte-count
3392#	addu $t0,$t0,$t1 # skip over object
3396#	j gcTestIterDone2 # go do next object, if any

3400:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3400#	sll $t2,$t1,2 # # data bytes
3404#	addu $t2,$t2,8 # to skip header word
3408#	addu $t2,$t0,$t2 # pointer to new object
3412#	lw $t3,-8($t2) # word to swap
3416#	sw $t1,-8($t2) # store header word
3420#	sw $t3,($t0) # restore first word of object

3424#	lw $t3,-4($t2) # # object words (negative treated as zero)
3428#	bge $t3,$zero,gcH2Neg2
3429##...slt $at,$t3,$zero
3433##...beq $at,$zero,$+8
3436#	move $t3,$zero
3440:  gcH2Neg2:
3440#	sll $t3,$t3,2 # # object bytes
3444#	move $t0,$t2 # address of first pointer in object
3448#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3452#	beq $t0,$s1,gcTestIterDone2
	
3456:  gcNextPointerInObject:
	# get pointer from object
3456#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3460#	bleu $t1,$t6,gcGoNextPointerSlot
3461##...sltu $at,$t6,$t1
3465##...beq $at,$zero,$+136
3468#	bgtu $t1,$t7,gcGoNextPointerSlot
3469##...sltu $at,$t7,$t1
3473##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3476#	lw $t8,-8($t1) # possible forwarding tag
3480#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3484#	lw $t8,-4($t1) # forwarding pointer: object's new address
3488#	sw $t8,($t0) # update pointer in object
3492#	j gcGoNextPointerSlot # do next iteration

3496:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3496#	bge $t8,$zero,gcSkip5
3497##...slt $at,$t8,$zero
3501##...beq $at,$zero,$+8
3504#	move $t8,$zero # set to zero if -1

3508:  gcSkip5:
3508#	sll $t8,$t8,2
3512#	addu $t8,$t8,8
3516#	subu $t4,$t1,$t8 # address of first word of source
3520#	lw $t3,-4($t1)
3524#	bge $t3,$zero,gcNoNeg
3525##...slt $at,$t3,$zero
3529##...beq $at,$zero,$+8
3532#	move $t3,$zero
3536:  gcNoNeg:
3536#	sll $t3,$t3,2
3540#	addu $t3,$t3,$t1 # address one word past last word of source

3544#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3548#	lw $s0,($t4)
3552#	lw $t9,-8($t1)
3556#	sw $t9,($t4)
3560#	sw $s0,-8($t1)

	# copy all source bytes to the target
3564:  gCinnerCopy2:
3564#	lw $s0,($t4)
3568#	sw $s0,($s3)
3572#	addu $t4,$t4,4
3576#	addu $s3,$s3,4
3580#	bltu $t4,$t3,gCinnerCopy2
3581##...sltu $at,$t4,$t3
3585##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3588#	sw $t5,-8($t1) # -2 in first header-slot
3592#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3596#	sw $t8,($t0)

3600:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3600#	addu $t0,$t0,4
3604#	bltu $t0,$s1,gcNextPointerInObject
3605##...sltu $at,$t0,$s1
3609##...bne $at,$zero,$-152

3612:  gcTestIterDone2:
3612#	bltu $t0,$s3,gcHeapCopyLoop
3613##...sltu $at,$t0,$s3
3617##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3620:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3620#	lw $s2,($sp)
3624#	addu $sp,$sp,4

	# mark us as having already GC'd
3628#	move $t5,$s5

	# go try and allocate again
3632#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3636:vm_init:

	# mark bottom of stack
3636#	sw $sp,stack_bottom
3640#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3644#	move $s2,$zero
3648#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3652#	li $s5,5
3656#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3660#	la $s3,seg0_start
3664#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3668#	la $s4,seg0_end
3669##...lui $s4,16
3673##...addiu $s4,$s4,4616
3676#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3680#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3684:divide:
	# get parameters; abort if divisor zero
3684#	lw $t0,($sp)
3688#	lw $t1,8($sp)
3692#	beq $t0,$zero,divByZeroError
	
	# perform division
3696#	div $t1,$t0
3700#	mflo $t0

	# store result, adjust stack and return
3704#	addu $sp,$sp,8 # adjust stack
3708#	sw $t0,($sp) # store result
3712#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3716:remainder:
	# get parameters; abort if divisor zero
3716#	lw $t0,($sp)
3720#	lw $t1,8($sp)
3724#	beq $t0,$zero,divByZeroError
	
	# perform division
3728#	div $t1,$t0
3732#	mfhi $t0

	# store result, adjust stack and return
3736#	addu $sp,$sp,8 # adjust stack
3740#	sw $t0,($sp) # store result
3744#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3748:checkCast:
	# get object, allow immediately if null
3748#	lw $t2,($sp)
3752#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3756#	lw $t3,-8($t2) # <= 0 if array
3760#	lw $t2,-12($t2) # vtable address (unless array)
3764#	bgt $t3,$zero,skipArrayCast
3765##...slt $at,$zero,$t3
3769##...bne $at,$zero,$+8
3772#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3776:  skipArrayCast:
3776#	bge $t2,$t1,castException
3777##...slt $at,$t2,$t1
3781##...beq $at,$zero,$+152
3784#	blt $t2,$t0,castException
3785##...slt $at,$t2,$t0
3789##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3792:  checkCastReturn:	
3792#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3796:instanceOf:
	# get object, go return false if null
3796#	lw $t2,($sp)
3800#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3804#	lw $t3,-8($t2) # <= 0 if array
3808#	lw $t2,-12($t2) # vtable address (unless array)
3812#	bgt $t3,$zero,skipArrayInstanceOf
3813##...slt $at,$zero,$t3
3817##...bne $at,$zero,$+8
3820#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3824:  skipArrayInstanceOf:
3824#	sge $t0,$t2,$t0
3825##...slt $t0,$t2,$t0
3829##...xori $t0,$t0,0x1
3832#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3836#	and $t2,$t0,$t1
3840:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3840#	sw $t2,($sp)
3844#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3848:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3848#	li $v0,4 # syscall-code for print-string
3852#	syscall
3856:exit:
	# print termination message
3856#	li $v0,4
3860#	la $a0,exitString
3864#	syscall

	# terminate execution
3868#	li $v0,10 #syscall-code for "exit"
3872#	syscall

3876:outOfHeapMemory:
3876#	la $a0,heapMemoryMsg
3880#	j exitError
3884:divByZeroError:
3884#	la $a0,divByZeroMsg
3888#	j exitError
3892:strIndexOutOfBounds:
3892#	la $a0,strIndexOutOfBoundsMsg
3896#	j exitError
3900:arrayIndexOutOfBounds:
3900#	la $a0,arrayIndexOutOfBoundsMsg
3904#	j exitError
3908:arraySizeOutOfBounds:
3908#	la $a0,arraySizeOutOfBoundsMsg
3912#	j exitError
3916:nullPtrException:
3916#	la $a0,nullPtrExceptionMsg
3920#	j exitError
3924:badIntegerFormat:
3924#	la $a0,badIntegerFormatMsg
3928#	j exitError
3932:castException:
3932#	la $a0,castExceptionMsg
3936#	j exitError

############## data section ################
	.data
	.align 2

4308:cur_seg:
	.word 0

4312:lastCharRead:
	.word -2 # -2 => no buffered character

4316:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4343:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4366:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4401:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4435:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4468:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4499:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4547:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4568:gcMsg: 
      .asciiz "\nGC!\n"

4574:nullStr:
	.asciiz "null"
4579:trueString:
	.asciiz "true"
4584:falseString:
	.asciiz "false"
4590:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4612:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4616:seg0_start:
	.space 0x100000
1053192:seg0_end:
1053192:seg1_start:
	.space 0x100000
2101768:seg1_end:



