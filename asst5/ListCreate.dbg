.data # Program at 15.1  	
4508:CLASS_Object: # ClassDecl at 0.0		
.word 0 # ClassDecl at 0.0	 
4512:CLASS_Lib: # ClassDecl at 0.0  	
.word CLASS_Object # ClassDecl at 0.0   
.word readLine # ClassDecl at 0.0	  
.word readInt # ClassDecl at 0.0 		
.word readChar # ClassDecl at 0.0 
.word printStr # ClassDecl at 0.0 	
.word printBool # ClassDecl at 0.0  
.word printInt # ClassDecl at 0.0	  
.word intToString # ClassDecl at 0.0	 	
.word intToChar # ClassDecl at 0.0	  
4548:CLASS_END_Lib: # ClassDecl at 0.0	 	
4548:CLASS_String: # ClassDecl at 0.0			
.word CLASS_Object # ClassDecl at 0.0	 	
.word concat # ClassDecl at 0.0 	
.word substring # ClassDecl at 0.0	
.word length # ClassDecl at 0.0			
.word charAt # ClassDecl at 0.0	  
.word compareTo # ClassDecl at 0.0	 
4572:CLASS_END_String: # ClassDecl at 0.0		 
4572:CLASS_RunMain: # ClassDecl at 0.0	
.word CLASS_Object # ClassDecl at 0.0	 	
4576:CLASS_END_RunMain: # ClassDecl at 0.0		
4576:CLASS_Main: # ClassDecl at 15.7	 	
.word CLASS_Object # ClassDecl at 15.7	
.word fcn_59_main # ClassDecl at 15.7 	 
4584:CLASS_END_Main: # ClassDecl at 15.7	 
4584:CLASS_List: # ClassDecl at 37.7	 	
.word CLASS_Object # ClassDecl at 37.7	
.word fcn_78_init # ClassDecl at 37.7	
.word fcn_87_valString # ClassDecl at 37.7	
.word fcn_95_valStringBracketed # ClassDecl at 37.7  	
.word fcn_118_print # ClassDecl at 37.7  
.word fcn_141_reversePrint # ClassDecl at 37.7 	
4608:CLASS_List2: # ClassDecl at 85.7   
.word CLASS_List # ClassDecl at 85.7 	 
.word fcn_78_init # ClassDecl at 85.7	
.word fcn_173_valString # ClassDecl at 85.7 		
.word fcn_95_valStringBracketed # ClassDecl at 85.7 	
.word fcn_118_print # ClassDecl at 85.7			
.word fcn_141_reversePrint # ClassDecl at 85.7	 
.word fcn_159_init2 # ClassDecl at 85.7			
4636:CLASS_END_List2: # ClassDecl at 85.7  
4636:CLASS_List2a: # ClassDecl at 103.7 
.word CLASS_List # ClassDecl at 103.7	
.word fcn_78_init # ClassDecl at 103.7 	
.word fcn_203_valString # ClassDecl at 103.7   
.word fcn_95_valStringBracketed # ClassDecl at 103.7 	
.word fcn_118_print # ClassDecl at 103.7  	
.word fcn_141_reversePrint # ClassDecl at 103.7	 	
.word fcn_191_init2a # ClassDecl at 103.7 		
4664:CLASS_END_List2a: # ClassDecl at 103.7 	
4664:CLASS_END_List: # ClassDecl at 37.7 		
4664:CLASS_END_Object: # ClassDecl at 0.0	
 .data # Program at 15.1	
  .byte 67 # StringLiteral at 24.34	
  .byte 104 # StringLiteral at 24.34			
  .byte 97 # StringLiteral at 24.34		 
  .byte 114 # StringLiteral at 24.34	 
  .byte 108 # StringLiteral at 24.34	
  .byte 105 # StringLiteral at 24.34		
  .byte 101 # StringLiteral at 24.34 		
  .byte 0 # StringLiteral at 24.34   
  .word CLASS_String # StringLiteral at 24.34	 
  .word 3 # StringLiteral at 24.34	 	
  .word -7 # StringLiteral at 24.34 	
4684:strLit_18: # StringLiteral at 24.34 	
  .byte 10 # StringLiteral at 31.15	  
  .byte 0 # StringLiteral at 31.15 
  .byte 0 # StringLiteral at 31.15 
  .byte 0 # StringLiteral at 31.15 		
  .word CLASS_String # StringLiteral at 31.15		 
  .word 2 # StringLiteral at 31.15 	
  .word -1 # StringLiteral at 31.15			
4700:strLit_52: # StringLiteral at 31.15	
  .byte 91 # StringLiteral at 57.9		 
  .byte 0 # StringLiteral at 57.9		
  .byte 0 # StringLiteral at 57.9	 	
  .byte 0 # StringLiteral at 57.9 		
  .word CLASS_String # StringLiteral at 57.9 	
  .word 2 # StringLiteral at 57.9			
  .word -1 # StringLiteral at 57.9	 
4716:strLit_89: # StringLiteral at 57.9		 
  .byte 93 # StringLiteral at 57.39	 
  .byte 0 # StringLiteral at 57.39	 
  .byte 0 # StringLiteral at 57.39  
  .byte 0 # StringLiteral at 57.39 		
  .word CLASS_String # StringLiteral at 57.39	 	
  .word 2 # StringLiteral at 57.39	  
  .word -1 # StringLiteral at 57.39  
4732:strLit_92: # StringLiteral at 57.39			
  .byte 10 # StringLiteral at 66.15 
  .byte 0 # StringLiteral at 66.15  	
  .byte 0 # StringLiteral at 66.15	
  .byte 0 # StringLiteral at 66.15 	 
  .word CLASS_String # StringLiteral at 66.15  
  .word 2 # StringLiteral at 66.15			
  .word -1 # StringLiteral at 66.15	  
4748:strLit_104: # StringLiteral at 66.15 	
  .byte 10 # StringLiteral at 80.15 	
  .byte 0 # StringLiteral at 80.15 	
  .byte 0 # StringLiteral at 80.15		 
  .byte 0 # StringLiteral at 80.15	  
  .word CLASS_String # StringLiteral at 80.15 	
  .word 2 # StringLiteral at 80.15   
  .word -1 # StringLiteral at 80.15   
4764:strLit_138: # StringLiteral at 80.15 
  .byte 32 # StringLiteral at 98.34		
  .byte 0 # StringLiteral at 98.34 		
  .byte 0 # StringLiteral at 98.34  
  .byte 0 # StringLiteral at 98.34  	
  .word CLASS_String # StringLiteral at 98.34	 
  .word 2 # StringLiteral at 98.34  
  .word -1 # StringLiteral at 98.34 	 
4780:strLit_167: # StringLiteral at 98.34 	 
  .byte 32 # StringLiteral at 116.34		
  .byte 0 # StringLiteral at 116.34	 	
  .byte 0 # StringLiteral at 116.34 
  .byte 0 # StringLiteral at 116.34		
  .word CLASS_String # StringLiteral at 116.34		 
  .word 2 # StringLiteral at 116.34 
  .word -1 # StringLiteral at 116.34	
4796:strLit_199: # StringLiteral at 116.34  
  # ENTER NODE # Program at 15.1	 
  .text # Program at 15.1 	
  .globl main # Program at 15.1		
0:  main: # Program at 15.1			
0#  jal vm_init # Program at 15.1  	
    # ENTER NODE # ExpStatement at 0.0 		
      # ENTER NODE # Call at 0.0			
        # ENTER NODE # NewObject at 0.0		 
4#        li $s6, 1 # NewObject at 0.0 	
8#        li $s7, 0 # NewObject at 0.0	  
12#        jal newObject # NewObject at 0.0	 
16#        la $t0, CLASS_Main # NewObject at 0.0 
20#        sw $t0, -12($s7) # NewObject at 0.0  
        # EXIT NODE # NewObject at 0.0		 
24#      lw $t0, 0($sp) # Call at 0.0  	
28#      beq $t0, $zero, nullPtrException # Call at 0.0	
32#      lw $t0, -12($t0) # Call at 0.0 	 
36#      lw $t0, 4($t0) # Call at 0.0 
40#      jalr $t0 # Call at 0.0			
      # EXIT NODE # Call at 0.0	 
    # EXIT NODE # ExpStatement at 0.0  
44#  li $v0, 10 # Program at 15.1 
48#  syscall # Program at 15.1 
    # ENTER NODE # MethodDeclVoid at 17.17 	 
    .globl fcn_59_main # MethodDeclVoid at 17.17	 
52:    fcn_59_main: # MethodDeclVoid at 17.17 	
52#    subu $sp, $sp, 8 # MethodDeclVoid at 17.17	 	
56#    sw $ra, 4($sp) # MethodDeclVoid at 17.17		 
60#    sw $s2, ($sp) # MethodDeclVoid at 17.17 	
64#    lw $s2, 8($sp) # MethodDeclVoid at 17.17 		
      # ENTER NODE # LocalVarDecl at 18.6			
        # ENTER NODE # NewObject at 18.12			
68#        li $s6, 1 # NewObject at 18.12		
72#        li $s7, 0 # NewObject at 18.12   
76#        jal newObject # NewObject at 18.12	
80#        la $t0, CLASS_Lib # NewObject at 18.12	 
84#        sw $t0, -12($s7) # NewObject at 18.12 	
        # EXIT NODE # NewObject at 18.12	
      # EXIT NODE # LocalVarDecl at 18.6			
      # ENTER NODE # LocalVarDecl at 22.7		 
        # ENTER NODE # Null at 22.14	 
88#        subu $sp, $sp, 4 # Null at 22.14 		
92#        sw $zero, ($sp) # Null at 22.14 	 
        # EXIT NODE # Null at 22.14		
      # EXIT NODE # LocalVarDecl at 22.7 		
      # ENTER NODE # Assign at 23.7	
        # ENTER NODE # Call at 23.20  
          # ENTER NODE # NewObject at 23.9		
96#          li $s6, 2 # NewObject at 23.9  
100#          li $s7, 1 # NewObject at 23.9	
104#          jal newObject # NewObject at 23.9 	 
108#          la $t0, CLASS_List # NewObject at 23.9		 
112#          sw $t0, -12($s7) # NewObject at 23.9	  
          # EXIT NODE # NewObject at 23.9  
          # ENTER NODE # IntegerLiteral at 23.25			
116#          subu $sp, $sp, 8 # IntegerLiteral at 23.25 		
120#          sw $s5, 4($sp) # IntegerLiteral at 23.25 	 
124#          li $t0, 34 # IntegerLiteral at 23.25	 
128#          sw $t0, ($sp) # IntegerLiteral at 23.25			
          # EXIT NODE # IntegerLiteral at 23.25		 
          # ENTER NODE # IdentifierExp at 23.28	 
132#          lw $t0, 12($sp) # IdentifierExp at 23.28 
136#          subu $sp, $sp, 4 # IdentifierExp at 23.28	 	
140#          sw $t0, ($sp) # IdentifierExp at 23.28 		
          # EXIT NODE # IdentifierExp at 23.28	  
144#        lw $t0, 12($sp) # Call at 23.20	
148#        beq $t0, $zero, nullPtrException # Call at 23.20		 
152#        lw $t0, -12($t0) # Call at 23.20	
156#        lw $t0, 4($t0) # Call at 23.20			
160#        jalr $t0 # Call at 23.20 	
        # EXIT NODE # Call at 23.20 	 
164#      lw $t0, ($sp) # Assign at 23.7		 
168#      sw $t0, 4($sp) # Assign at 23.7	 
172#      addu $sp, $sp, 4 # Assign at 23.7	  
      # EXIT NODE # Assign at 23.7	 
      # ENTER NODE # Assign at 24.7  	
        # ENTER NODE # Call at 24.22 	 
          # ENTER NODE # NewObject at 24.9		 
176#          li $s6, 2 # NewObject at 24.9	  
180#          li $s7, 2 # NewObject at 24.9	 
184#          jal newObject # NewObject at 24.9			
188#          la $t0, CLASS_List2a # NewObject at 24.9			
192#          sw $t0, -12($s7) # NewObject at 24.9	
          # EXIT NODE # NewObject at 24.9  	
          # ENTER NODE # IntegerLiteral at 24.29  	
196#          subu $sp, $sp, 8 # IntegerLiteral at 24.29  	
200#          sw $s5, 4($sp) # IntegerLiteral at 24.29  
204#          li $t0, 101 # IntegerLiteral at 24.29		
208#          sw $t0, ($sp) # IntegerLiteral at 24.29	 	
          # EXIT NODE # IntegerLiteral at 24.29 		
          # ENTER NODE # StringLiteral at 24.34			
212#          subu $sp, $sp, 4 # StringLiteral at 24.34  
216#          la $t0, strLit_18 # StringLiteral at 24.34		 
220#          sw $t0, ($sp) # StringLiteral at 24.34 	
          # EXIT NODE # StringLiteral at 24.34   
          # ENTER NODE # IdentifierExp at 24.45   
224#          lw $t0, 16($sp) # IdentifierExp at 24.45	
228#          subu $sp, $sp, 4 # IdentifierExp at 24.45	 
232#          sw $t0, ($sp) # IdentifierExp at 24.45  	
          # EXIT NODE # IdentifierExp at 24.45			
236#        lw $t0, 16($sp) # Call at 24.22 	
240#        beq $t0, $zero, nullPtrException # Call at 24.22			
244#        lw $t0, -12($t0) # Call at 24.22		 
248#        lw $t0, 24($t0) # Call at 24.22   
252#        jalr $t0 # Call at 24.22		 
        # EXIT NODE # Call at 24.22 		
256#      lw $t0, ($sp) # Assign at 24.7 		
260#      sw $t0, 4($sp) # Assign at 24.7	  
264#      addu $sp, $sp, 4 # Assign at 24.7  
      # EXIT NODE # Assign at 24.7		 
      # ENTER NODE # Assign at 25.7 
        # ENTER NODE # Call at 25.21 
          # ENTER NODE # NewObject at 25.9		
268#          li $s6, 3 # NewObject at 25.9	 
272#          li $s7, 1 # NewObject at 25.9  
276#          jal newObject # NewObject at 25.9	 
280#          la $t0, CLASS_List2 # NewObject at 25.9	
284#          sw $t0, -12($s7) # NewObject at 25.9		 
          # EXIT NODE # NewObject at 25.9	 	
          # ENTER NODE # Minus at 25.27 		
            # ENTER NODE # IntegerLiteral at 25.27 	
288#            subu $sp, $sp, 8 # IntegerLiteral at 25.27 		
292#            sw $s5, 4($sp) # IntegerLiteral at 25.27   
296#            li $t0, 0 # IntegerLiteral at 25.27			
300#            sw $t0, ($sp) # IntegerLiteral at 25.27		 
            # EXIT NODE # IntegerLiteral at 25.27	
            # ENTER NODE # IntegerLiteral at 25.28			
304#            subu $sp, $sp, 8 # IntegerLiteral at 25.28  
308#            sw $s5, 4($sp) # IntegerLiteral at 25.28   
312#            li $t0, 4 # IntegerLiteral at 25.28  
316#            sw $t0, ($sp) # IntegerLiteral at 25.28  
            # EXIT NODE # IntegerLiteral at 25.28		 
320#          lw $t0, ($sp) # Minus at 25.27			
324#          lw $t1, 8($sp) # Minus at 25.27 
328#          subu $t0, $t1, $t0 # Minus at 25.27   
332#          addu $sp, $sp, 8 # Minus at 25.27 	 
336#          sw $t0, ($sp) # Minus at 25.27	  
            # ENTER NODE # Minus at 25.27	  
              # ENTER NODE # IntegerLiteral at 25.31 	
340#              subu $sp, $sp, 8 # IntegerLiteral at 25.31 	 
344#              sw $s5, 4($sp) # IntegerLiteral at 25.31  
348#              li $t0, 27 # IntegerLiteral at 25.31	
352#              sw $t0, ($sp) # IntegerLiteral at 25.31	
              # EXIT NODE # IntegerLiteral at 25.31			
              # ENTER NODE # IdentifierExp at 25.35		 
356#              lw $t0, 20($sp) # IdentifierExp at 25.35 		
360#              subu $sp, $sp, 4 # IdentifierExp at 25.35	  
364#              sw $t0, ($sp) # IdentifierExp at 25.35 	
              # EXIT NODE # IdentifierExp at 25.35 	
368#            lw $t0, 20($sp) # Call at 25.21		 
372#            beq $t0, $zero, nullPtrException # Call at 25.21		
376#            lw $t0, -12($t0) # Call at 25.21  
380#            lw $t0, 24($t0) # Call at 25.21			
384#            jalr $t0 # Call at 25.21			
            # EXIT NODE # Call at 25.21			
388#          lw $t0, ($sp) # Assign at 25.7		
392#          sw $t0, 4($sp) # Assign at 25.7 		
396#          addu $sp, $sp, 4 # Assign at 25.7	
          # EXIT NODE # Assign at 25.7 	 
          # ENTER NODE # Assign at 26.7		
            # ENTER NODE # Call at 26.20		 
              # ENTER NODE # NewObject at 26.9   
400#              li $s6, 2 # NewObject at 26.9 
404#              li $s7, 1 # NewObject at 26.9		 
408#              jal newObject # NewObject at 26.9		
412#              la $t0, CLASS_List # NewObject at 26.9		 
416#              sw $t0, -12($s7) # NewObject at 26.9   
              # EXIT NODE # NewObject at 26.9   
              # ENTER NODE # IntegerLiteral at 26.25		
420#              subu $sp, $sp, 8 # IntegerLiteral at 26.25  	
424#              sw $s5, 4($sp) # IntegerLiteral at 26.25  
428#              li $t0, 21 # IntegerLiteral at 26.25	 
432#              sw $t0, ($sp) # IntegerLiteral at 26.25  
              # EXIT NODE # IntegerLiteral at 26.25 	
              # ENTER NODE # IdentifierExp at 26.29	 	
436#              lw $t0, 12($sp) # IdentifierExp at 26.29	 
440#              subu $sp, $sp, 4 # IdentifierExp at 26.29  
444#              sw $t0, ($sp) # IdentifierExp at 26.29	
              # EXIT NODE # IdentifierExp at 26.29   
448#            lw $t0, 12($sp) # Call at 26.20  	
452#            beq $t0, $zero, nullPtrException # Call at 26.20   
456#            lw $t0, -12($t0) # Call at 26.20 
460#            lw $t0, 4($t0) # Call at 26.20 		
464#            jalr $t0 # Call at 26.20		 
            # EXIT NODE # Call at 26.20	 	
468#          lw $t0, ($sp) # Assign at 26.7	
472#          sw $t0, 4($sp) # Assign at 26.7 	
476#          addu $sp, $sp, 4 # Assign at 26.7   
          # EXIT NODE # Assign at 26.7 	 
          # ENTER NODE # Assign at 27.7	
            # ENTER NODE # Call at 27.21		
              # ENTER NODE # NewObject at 27.9	 	
480#              li $s6, 3 # NewObject at 27.9		 
484#              li $s7, 1 # NewObject at 27.9  	
488#              jal newObject # NewObject at 27.9	  
492#              la $t0, CLASS_List2 # NewObject at 27.9	  
496#              sw $t0, -12($s7) # NewObject at 27.9		 
              # EXIT NODE # NewObject at 27.9	
              # ENTER NODE # IntegerLiteral at 27.27		
500#              subu $sp, $sp, 8 # IntegerLiteral at 27.27 
504#              sw $s5, 4($sp) # IntegerLiteral at 27.27 
508#              li $t0, 3 # IntegerLiteral at 27.27  
512#              sw $t0, ($sp) # IntegerLiteral at 27.27   
              # EXIT NODE # IntegerLiteral at 27.27			
              # ENTER NODE # IntegerLiteral at 27.30 	
516#              subu $sp, $sp, 8 # IntegerLiteral at 27.30	  
520#              sw $s5, 4($sp) # IntegerLiteral at 27.30	 
524#              li $t0, 4 # IntegerLiteral at 27.30	 
528#              sw $t0, ($sp) # IntegerLiteral at 27.30		
              # EXIT NODE # IntegerLiteral at 27.30			
              # ENTER NODE # IdentifierExp at 27.33  	
532#              lw $t0, 20($sp) # IdentifierExp at 27.33		 
536#              subu $sp, $sp, 4 # IdentifierExp at 27.33 	 
540#              sw $t0, ($sp) # IdentifierExp at 27.33 
              # EXIT NODE # IdentifierExp at 27.33  	
544#            lw $t0, 20($sp) # Call at 27.21		
548#            beq $t0, $zero, nullPtrException # Call at 27.21 
552#            lw $t0, -12($t0) # Call at 27.21 	 
556#            lw $t0, 24($t0) # Call at 27.21	 
560#            jalr $t0 # Call at 27.21	  
            # EXIT NODE # Call at 27.21  	
564#          lw $t0, ($sp) # Assign at 27.7		
568#          sw $t0, 4($sp) # Assign at 27.7		 
572#          addu $sp, $sp, 4 # Assign at 27.7	  
          # EXIT NODE # Assign at 27.7	  
          # ENTER NODE # ExpStatement at 30.7	  
            # ENTER NODE # Call at 30.7	 	
              # ENTER NODE # IdentifierExp at 30.2	 
576#              lw $t0, 0($sp) # IdentifierExp at 30.2	 
580#              subu $sp, $sp, 4 # IdentifierExp at 30.2	 	
584#              sw $t0, ($sp) # IdentifierExp at 30.2  	
              # EXIT NODE # IdentifierExp at 30.2		
              # ENTER NODE # IdentifierExp at 30.13  
588#              lw $t0, 8($sp) # IdentifierExp at 30.13	  
592#              subu $sp, $sp, 4 # IdentifierExp at 30.13	 
596#              sw $t0, ($sp) # IdentifierExp at 30.13		
              # EXIT NODE # IdentifierExp at 30.13	 	
600#            lw $t0, 4($sp) # Call at 30.7 		
604#            beq $t0, $zero, nullPtrException # Call at 30.7			
608#            lw $t0, -12($t0) # Call at 30.7			
612#            lw $t0, 16($t0) # Call at 30.7 	
616#            jalr $t0 # Call at 30.7		 
            # EXIT NODE # Call at 30.7 
          # EXIT NODE # ExpStatement at 30.7  	
          # ENTER NODE # ExpStatement at 31.6 		
            # ENTER NODE # Call at 31.6  	
              # ENTER NODE # IdentifierExp at 31.2	 	
620#              lw $t0, 4($sp) # IdentifierExp at 31.2			
624#              subu $sp, $sp, 4 # IdentifierExp at 31.2 	 
628#              sw $t0, ($sp) # IdentifierExp at 31.2	 	
              # EXIT NODE # IdentifierExp at 31.2		 
              # ENTER NODE # StringLiteral at 31.15	
632#              subu $sp, $sp, 4 # StringLiteral at 31.15	  
636#              la $t0, strLit_52 # StringLiteral at 31.15		 
640#              sw $t0, ($sp) # StringLiteral at 31.15			
              # EXIT NODE # StringLiteral at 31.15			
644#            lw $t0, 4($sp) # Call at 31.6   
648#            beq $t0, $zero, nullPtrException # Call at 31.6 	
652#            lw $t0, -12($t0) # Call at 31.6   
656#            lw $t0, 16($t0) # Call at 31.6 	 
660#            jalr $t0 # Call at 31.6  	
            # EXIT NODE # Call at 31.6	 
          # EXIT NODE # ExpStatement at 31.6   
          # ENTER NODE # ExpStatement at 32.7  
            # ENTER NODE # Call at 32.7  	
              # ENTER NODE # IdentifierExp at 32.2  	
664#              lw $t0, 0($sp) # IdentifierExp at 32.2	 
668#              subu $sp, $sp, 4 # IdentifierExp at 32.2			
672#              sw $t0, ($sp) # IdentifierExp at 32.2 	 
              # EXIT NODE # IdentifierExp at 32.2 	
              # ENTER NODE # IdentifierExp at 32.20 	
676#              lw $t0, 8($sp) # IdentifierExp at 32.20		 
680#              subu $sp, $sp, 4 # IdentifierExp at 32.20			
684#              sw $t0, ($sp) # IdentifierExp at 32.20  	
              # EXIT NODE # IdentifierExp at 32.20		 
688#            lw $t0, 4($sp) # Call at 32.7		 
692#            beq $t0, $zero, nullPtrException # Call at 32.7  
696#            lw $t0, -12($t0) # Call at 32.7		 
700#            lw $t0, 20($t0) # Call at 32.7 	 
704#            jalr $t0 # Call at 32.7	
            # EXIT NODE # Call at 32.7  	
          # EXIT NODE # ExpStatement at 32.7	 
708#        lw $ra, 12($sp) # MethodDeclVoid at 17.17   
712#        lw $s2, 8($sp) # MethodDeclVoid at 17.17	 	
716#        addu $sp, $sp, 20 # MethodDeclVoid at 17.17   
720#        jr $ra # MethodDeclVoid at 17.17		
        # EXIT NODE # MethodDeclVoid at 17.17  
        # ENTER NODE # MethodDeclNonVoid at 43.17	 	
        .globl fcn_78_init # MethodDeclNonVoid at 43.17		
724:        fcn_78_init: # MethodDeclNonVoid at 43.17	
724#        subu $sp, $sp, 8 # MethodDeclNonVoid at 43.17   
728#        sw $ra, 4($sp) # MethodDeclNonVoid at 43.17 		
732#        sw $s2, ($sp) # MethodDeclNonVoid at 43.17  
736#        lw $s2, 20($sp) # MethodDeclNonVoid at 43.17 	
          # ENTER NODE # Assign at 44.6			
            # ENTER NODE # IdentifierExp at 44.8 
740#            lw $t0, 12($sp) # IdentifierExp at 44.8	 	
744#            subu $sp, $sp, 8 # IdentifierExp at 44.8   
748#            sw $s5, 4($sp) # IdentifierExp at 44.8  
752#            sw $t0, ($sp) # IdentifierExp at 44.8 		
            # EXIT NODE # IdentifierExp at 44.8			
756#          lw $t0, ($sp) # Assign at 44.6			
760#          sw $t0, -16($s2) # Assign at 44.6   
764#          addu $sp, $sp, 8 # Assign at 44.6		 
          # EXIT NODE # Assign at 44.6   
          # ENTER NODE # Assign at 45.12 	 
            # ENTER NODE # This at 45.2 	
768#            subu $sp, $sp, 4 # This at 45.2		 
772#            sw $s2, ($sp) # This at 45.2  
            # EXIT NODE # This at 45.2 	
            # ENTER NODE # IdentifierExp at 45.14 	
776#            lw $t0, 12($sp) # IdentifierExp at 45.14	 
780#            subu $sp, $sp, 4 # IdentifierExp at 45.14		 
784#            sw $t0, ($sp) # IdentifierExp at 45.14 
            # EXIT NODE # IdentifierExp at 45.14  
788#          lw $t0, ($sp) # Assign at 45.12	  
792#          lw $t1, 4($sp) # Assign at 45.12 
796#          beq $t1, $zero, nullPtrException # Assign at 45.12   
800#          sw $t0, 0($t1) # Assign at 45.12	 
804#          addu $sp, $sp, 8 # Assign at 45.12		
          # EXIT NODE # Assign at 45.12	
          # ENTER NODE # This at 46.9	
808#          subu $sp, $sp, 4 # This at 46.9 	 
812#          sw $s2, ($sp) # This at 46.9	 
          # EXIT NODE # This at 46.9	  
816#        lw $ra, 8($sp) # MethodDeclNonVoid at 43.17	 	
820#        lw $s2, 4($sp) # MethodDeclNonVoid at 43.17 	 
824#        lw $t0, ($sp) # MethodDeclNonVoid at 43.17 	 
828#        sw $t0, 24($sp) # MethodDeclNonVoid at 43.17  	
832#        addu $sp, $sp, 24 # MethodDeclNonVoid at 43.17	  
836#        jr $ra # MethodDeclNonVoid at 43.17	 
          # ENTER NODE # MethodDeclNonVoid at 43.17	 	
            # ENTER NODE # MethodDeclNonVoid at 50.19 	 
            .globl fcn_87_valString # MethodDeclNonVoid at 50.19			
840:            fcn_87_valString: # MethodDeclNonVoid at 50.19 
840#            subu $sp, $sp, 8 # MethodDeclNonVoid at 50.19 		
844#            sw $ra, 4($sp) # MethodDeclNonVoid at 50.19	 	
848#            sw $s2, ($sp) # MethodDeclNonVoid at 50.19  
852#            lw $s2, 8($sp) # MethodDeclNonVoid at 50.19	 
              # ENTER NODE # LocalVarDecl at 51.6	  
                # ENTER NODE # NewObject at 51.12 	
856#                li $s6, 1 # NewObject at 51.12	
860#                li $s7, 0 # NewObject at 51.12	  
864#                jal newObject # NewObject at 51.12  
868#                la $t0, CLASS_Lib # NewObject at 51.12  
872#                sw $t0, -12($s7) # NewObject at 51.12  	
                # EXIT NODE # NewObject at 51.12		 
              # EXIT NODE # LocalVarDecl at 51.6			
              # ENTER NODE # Call at 52.13 	 
                # ENTER NODE # IdentifierExp at 52.9  
876#                lw $t0, 0($sp) # IdentifierExp at 52.9			
880#                subu $sp, $sp, 4 # IdentifierExp at 52.9		
884#                sw $t0, ($sp) # IdentifierExp at 52.9			
                # EXIT NODE # IdentifierExp at 52.9 		
                # ENTER NODE # IdentifierExp at 52.25 
888#                lw $t0, -16($s2) # IdentifierExp at 52.25	
892#                subu $sp, $sp, 8 # IdentifierExp at 52.25 		
896#                sw $s5, 4($sp) # IdentifierExp at 52.25			
900#                sw $t0, ($sp) # IdentifierExp at 52.25 	 
                # EXIT NODE # IdentifierExp at 52.25 	 
904#              lw $t0, 8($sp) # Call at 52.13	 	
908#              beq $t0, $zero, nullPtrException # Call at 52.13 	
912#              lw $t0, -12($t0) # Call at 52.13 
916#              lw $t0, 28($t0) # Call at 52.13	 
920#              jalr $t0 # Call at 52.13	 
              # EXIT NODE # Call at 52.13  	
924#            lw $ra, 12($sp) # MethodDeclNonVoid at 50.19	 
928#            lw $s2, 8($sp) # MethodDeclNonVoid at 50.19 	 
932#            lw $t0, ($sp) # MethodDeclNonVoid at 50.19   
936#            sw $t0, 16($sp) # MethodDeclNonVoid at 50.19		
940#            addu $sp, $sp, 16 # MethodDeclNonVoid at 50.19  	
944#            jr $ra # MethodDeclNonVoid at 50.19	
              # ENTER NODE # MethodDeclNonVoid at 50.19	
                # ENTER NODE # MethodDeclNonVoid at 56.19 		
                .globl fcn_95_valStringBracketed # MethodDeclNonVoid at 56.19	 	
948:                fcn_95_valStringBracketed: # MethodDeclNonVoid at 56.19  	
948#                subu $sp, $sp, 8 # MethodDeclNonVoid at 56.19			
952#                sw $ra, 4($sp) # MethodDeclNonVoid at 56.19  	
956#                sw $s2, ($sp) # MethodDeclNonVoid at 56.19			
960#                lw $s2, 8($sp) # MethodDeclNonVoid at 56.19   
                  # ENTER NODE # Call at 57.13	 
                    # ENTER NODE # StringLiteral at 57.9  	
964#                    subu $sp, $sp, 4 # StringLiteral at 57.9		
968#                    la $t0, strLit_89 # StringLiteral at 57.9 	 
972#                    sw $t0, ($sp) # StringLiteral at 57.9		 
                    # EXIT NODE # StringLiteral at 57.9  
                    # ENTER NODE # Call at 57.32 
                      # ENTER NODE # Call at 57.20		 
                        # ENTER NODE # This at 57.20 
976#                        subu $sp, $sp, 4 # This at 57.20	  
980#                        sw $s2, ($sp) # This at 57.20			
                        # EXIT NODE # This at 57.20	 
984#                      lw $t0, 0($sp) # Call at 57.20			
988#                      beq $t0, $zero, nullPtrException # Call at 57.20		
992#                      lw $t0, -12($t0) # Call at 57.20			
996#                      lw $t0, 8($t0) # Call at 57.20 
1000#                      jalr $t0 # Call at 57.20 
                      # EXIT NODE # Call at 57.20			
                      # ENTER NODE # StringLiteral at 57.39 
1004#                      subu $sp, $sp, 4 # StringLiteral at 57.39  	
1008#                      la $t0, strLit_92 # StringLiteral at 57.39 		
1012#                      sw $t0, ($sp) # StringLiteral at 57.39  
                      # EXIT NODE # StringLiteral at 57.39 	
1016#                    lw $t0, 4($sp) # Call at 57.32 	 
1020#                    beq $t0, $zero, nullPtrException # Call at 57.32	
1024#                    lw $t0, -12($t0) # Call at 57.32			
1028#                    lw $t0, 4($t0) # Call at 57.32 		
1032#                    jalr $t0 # Call at 57.32			
                    # EXIT NODE # Call at 57.32			
1036#                  lw $t0, 4($sp) # Call at 57.13  
1040#                  beq $t0, $zero, nullPtrException # Call at 57.13	 
1044#                  lw $t0, -12($t0) # Call at 57.13		
1048#                  lw $t0, 4($t0) # Call at 57.13	 
1052#                  jalr $t0 # Call at 57.13 	 
                  # EXIT NODE # Call at 57.13	
1056#                lw $ra, 8($sp) # MethodDeclNonVoid at 56.19	 
1060#                lw $s2, 4($sp) # MethodDeclNonVoid at 56.19		
1064#                lw $t0, ($sp) # MethodDeclNonVoid at 56.19		
1068#                sw $t0, 12($sp) # MethodDeclNonVoid at 56.19	
1072#                addu $sp, $sp, 12 # MethodDeclNonVoid at 56.19	 
1076#                jr $ra # MethodDeclNonVoid at 56.19  
                  # ENTER NODE # MethodDeclNonVoid at 56.19	  
                    # ENTER NODE # MethodDeclVoid at 61.17		
                    .globl fcn_118_print # MethodDeclVoid at 61.17  
1080:                    fcn_118_print: # MethodDeclVoid at 61.17			
1080#                    subu $sp, $sp, 8 # MethodDeclVoid at 61.17 
1084#                    sw $ra, 4($sp) # MethodDeclVoid at 61.17		
1088#                    sw $s2, ($sp) # MethodDeclVoid at 61.17   
1092#                    lw $s2, 12($sp) # MethodDeclVoid at 61.17	
                      # ENTER NODE # ExpStatement at 63.6 	 
                        # ENTER NODE # Call at 63.6 	
                          # ENTER NODE # IdentifierExp at 63.2	 	
1096#                          lw $t0, 8($sp) # IdentifierExp at 63.2			
1100#                          subu $sp, $sp, 4 # IdentifierExp at 63.2   
1104#                          sw $t0, ($sp) # IdentifierExp at 63.2  	
                          # EXIT NODE # IdentifierExp at 63.2 	 
                          # ENTER NODE # Call at 63.15  
                            # ENTER NODE # This at 63.15	  
1108#                            subu $sp, $sp, 4 # This at 63.15	
1112#                            sw $s2, ($sp) # This at 63.15  	
                            # EXIT NODE # This at 63.15  
1116#                          lw $t0, 0($sp) # Call at 63.15		 
1120#                          beq $t0, $zero, nullPtrException # Call at 63.15		
1124#                          lw $t0, -12($t0) # Call at 63.15 
1128#                          lw $t0, 12($t0) # Call at 63.15  
1132#                          jalr $t0 # Call at 63.15   
                          # EXIT NODE # Call at 63.15 
1136#                        lw $t0, 4($sp) # Call at 63.6 	
1140#                        beq $t0, $zero, nullPtrException # Call at 63.6  	
1144#                        lw $t0, -12($t0) # Call at 63.6		 
1148#                        lw $t0, 16($t0) # Call at 63.6	
1152#                        jalr $t0 # Call at 63.6	  
                        # EXIT NODE # Call at 63.6	 	
                      # EXIT NODE # ExpStatement at 63.6   
                      # ENTER NODE # ExpStatement at 66.6		
                        # ENTER NODE # Call at 66.6   
                          # ENTER NODE # IdentifierExp at 66.2 
1156#                          lw $t0, 8($sp) # IdentifierExp at 66.2			
1160#                          subu $sp, $sp, 4 # IdentifierExp at 66.2	
1164#                          sw $t0, ($sp) # IdentifierExp at 66.2  	
                          # EXIT NODE # IdentifierExp at 66.2 	
                          # ENTER NODE # StringLiteral at 66.15			
1168#                          subu $sp, $sp, 4 # StringLiteral at 66.15 
1172#                          la $t0, strLit_104 # StringLiteral at 66.15	 
1176#                          sw $t0, ($sp) # StringLiteral at 66.15 	
                          # EXIT NODE # StringLiteral at 66.15 	
1180#                        lw $t0, 4($sp) # Call at 66.6	
1184#                        beq $t0, $zero, nullPtrException # Call at 66.6  
1188#                        lw $t0, -12($t0) # Call at 66.6			
1192#                        lw $t0, 16($t0) # Call at 66.6	
1196#                        jalr $t0 # Call at 66.6 	
                        # EXIT NODE # Call at 66.6 
                      # EXIT NODE # ExpStatement at 66.6  
                      # ENTER NODE # If at 67.2	 	
                        # ENTER NODE # Not at 67.11 	 
                          # ENTER NODE # Equals at 67.11	 	
                            # ENTER NODE # IdentifierExp at 67.6		 
1200#                            lw $t0, 0($s2) # IdentifierExp at 67.6		 
1204#                            subu $sp, $sp, 4 # IdentifierExp at 67.6 	
1208#                            sw $t0, ($sp) # IdentifierExp at 67.6   
                            # EXIT NODE # IdentifierExp at 67.6	 	
                            # ENTER NODE # Null at 67.14 		
1212#                            subu $sp, $sp, 4 # Null at 67.14	 	
1216#                            sw $zero, ($sp) # Null at 67.14 	
                            # EXIT NODE # Null at 67.14   
1220#                          lw $t0, ($sp) # Equals at 67.11 
1224#                          lw $t1, 4($sp) # Equals at 67.11	 
1228#                          seq $t0, $t0, $t1 # Equals at 67.11	 	
1229##...subu $at,$t0,$t1
1233##...sltiu $t0,$at,1
1236#                          addu $sp, $sp, 4 # Equals at 67.11	
1240#                          sw $t0, ($sp) # Equals at 67.11			
                          # EXIT NODE # Equals at 67.11 		
1244#                        lw $t0, ($sp) # Not at 67.11	
1248#                        xor $t0, $t0, 1 # Not at 67.11	  
1252#                        sw $t0, ($sp) # Not at 67.11 	 
                        # EXIT NODE # Not at 67.11 		
1256#                      lw $t0, ($sp) # If at 67.2	 
1260#                      addu $sp, $sp, 4 # If at 67.2 	 
1264#                      beq $t0, $zero, if_else_117 # If at 67.2 		
                        # ENTER NODE # Block at 67.20 	 
                          # ENTER NODE # ExpStatement at 68.11 	
                            # ENTER NODE # Call at 68.11  
                              # ENTER NODE # IdentifierExp at 68.6	 	
1268#                              lw $t0, 0($s2) # IdentifierExp at 68.6   
1272#                              subu $sp, $sp, 4 # IdentifierExp at 68.6	 	
1276#                              sw $t0, ($sp) # IdentifierExp at 68.6		 
                              # EXIT NODE # IdentifierExp at 68.6  	
                              # ENTER NODE # IdentifierExp at 68.17   
1280#                              lw $t0, 12($sp) # IdentifierExp at 68.17		
1284#                              subu $sp, $sp, 4 # IdentifierExp at 68.17	 
1288#                              sw $t0, ($sp) # IdentifierExp at 68.17		 
                              # EXIT NODE # IdentifierExp at 68.17  
1292#                            lw $t0, 4($sp) # Call at 68.11			
1296#                            beq $t0, $zero, nullPtrException # Call at 68.11 		
1300#                            lw $t0, -12($t0) # Call at 68.11 	 
1304#                            lw $t0, 16($t0) # Call at 68.11	  
1308#                            jalr $t0 # Call at 68.11	
                            # EXIT NODE # Call at 68.11   
                          # EXIT NODE # ExpStatement at 68.11	  
                        # EXIT NODE # Block at 67.20 	
1312#                      j if_done_117 # If at 67.2  
1316:                      if_else_117: # If at 67.2  	
                        # ENTER NODE # Block at 70.5 	
                        # EXIT NODE # Block at 70.5 		
1316:                      if_done_117: # If at 67.2 
                      # EXIT NODE # If at 67.2	
1316#                    lw $ra, 4($sp) # MethodDeclVoid at 61.17	  
1320#                    lw $s2, 0($sp) # MethodDeclVoid at 61.17  
1324#                    addu $sp, $sp, 16 # MethodDeclVoid at 61.17 	
1328#                    jr $ra # MethodDeclVoid at 61.17	 	
                    # EXIT NODE # MethodDeclVoid at 61.17	 
                    # ENTER NODE # MethodDeclVoid at 73.17 	 
                    .globl fcn_141_reversePrint # MethodDeclVoid at 73.17	 
1332:                    fcn_141_reversePrint: # MethodDeclVoid at 73.17 	
1332#                    subu $sp, $sp, 8 # MethodDeclVoid at 73.17	 
1336#                    sw $ra, 4($sp) # MethodDeclVoid at 73.17 	 
1340#                    sw $s2, ($sp) # MethodDeclVoid at 73.17	 	
1344#                    lw $s2, 12($sp) # MethodDeclVoid at 73.17   
                      # ENTER NODE # If at 75.2 
                        # ENTER NODE # Not at 75.11	 	
                          # ENTER NODE # Equals at 75.11		
                            # ENTER NODE # IdentifierExp at 75.6 
1348#                            lw $t0, 0($s2) # IdentifierExp at 75.6 		
1352#                            subu $sp, $sp, 4 # IdentifierExp at 75.6   
1356#                            sw $t0, ($sp) # IdentifierExp at 75.6	
                            # EXIT NODE # IdentifierExp at 75.6  	
                            # ENTER NODE # Null at 75.14   
1360#                            subu $sp, $sp, 4 # Null at 75.14		 
1364#                            sw $zero, ($sp) # Null at 75.14  
                            # EXIT NODE # Null at 75.14 	
1368#                          lw $t0, ($sp) # Equals at 75.11	
1372#                          lw $t1, 4($sp) # Equals at 75.11  	
1376#                          seq $t0, $t0, $t1 # Equals at 75.11			
1377##...subu $at,$t0,$t1
1381##...sltiu $t0,$at,1
1384#                          addu $sp, $sp, 4 # Equals at 75.11   
1388#                          sw $t0, ($sp) # Equals at 75.11	 	
                          # EXIT NODE # Equals at 75.11		 
1392#                        lw $t0, ($sp) # Not at 75.11		 
1396#                        xor $t0, $t0, 1 # Not at 75.11	
1400#                        sw $t0, ($sp) # Not at 75.11		
                        # EXIT NODE # Not at 75.11	
1404#                      lw $t0, ($sp) # If at 75.2	 
1408#                      addu $sp, $sp, 4 # If at 75.2 
1412#                      beq $t0, $zero, if_else_131 # If at 75.2	  
                        # ENTER NODE # Block at 75.20   
                          # ENTER NODE # ExpStatement at 76.11	 	
                            # ENTER NODE # Call at 76.11	 
                              # ENTER NODE # IdentifierExp at 76.6 
1416#                              lw $t0, 0($s2) # IdentifierExp at 76.6 	
1420#                              subu $sp, $sp, 4 # IdentifierExp at 76.6	 	
1424#                              sw $t0, ($sp) # IdentifierExp at 76.6 	 
                              # EXIT NODE # IdentifierExp at 76.6   
                              # ENTER NODE # IdentifierExp at 76.24	  
1428#                              lw $t0, 12($sp) # IdentifierExp at 76.24	 
1432#                              subu $sp, $sp, 4 # IdentifierExp at 76.24 	
1436#                              sw $t0, ($sp) # IdentifierExp at 76.24 		
                              # EXIT NODE # IdentifierExp at 76.24		 
1440#                            lw $t0, 4($sp) # Call at 76.11	 
1444#                            beq $t0, $zero, nullPtrException # Call at 76.11		 
1448#                            lw $t0, -12($t0) # Call at 76.11		
1452#                            lw $t0, 20($t0) # Call at 76.11		
1456#                            jalr $t0 # Call at 76.11 
                            # EXIT NODE # Call at 76.11	
                          # EXIT NODE # ExpStatement at 76.11	
                        # EXIT NODE # Block at 75.20	  
1460#                      j if_done_131 # If at 75.2 	
1464:                      if_else_131: # If at 75.2 	 
                        # ENTER NODE # Block at 79.2	 
                        # EXIT NODE # Block at 79.2	  
1464:                      if_done_131: # If at 75.2  
                      # EXIT NODE # If at 75.2 	
                      # ENTER NODE # ExpStatement at 79.6   
                        # ENTER NODE # Call at 79.6	 	
                          # ENTER NODE # IdentifierExp at 79.2	 
1464#                          lw $t0, 8($sp) # IdentifierExp at 79.2 	 
1468#                          subu $sp, $sp, 4 # IdentifierExp at 79.2		
1472#                          sw $t0, ($sp) # IdentifierExp at 79.2 	
                          # EXIT NODE # IdentifierExp at 79.2	 
                          # ENTER NODE # Call at 79.15  
                            # ENTER NODE # This at 79.15	 
1476#                            subu $sp, $sp, 4 # This at 79.15   
1480#                            sw $s2, ($sp) # This at 79.15		 
                            # EXIT NODE # This at 79.15	 	
1484#                          lw $t0, 0($sp) # Call at 79.15 	
1488#                          beq $t0, $zero, nullPtrException # Call at 79.15	 
1492#                          lw $t0, -12($t0) # Call at 79.15 	
1496#                          lw $t0, 12($t0) # Call at 79.15 		
1500#                          jalr $t0 # Call at 79.15		
                          # EXIT NODE # Call at 79.15 	 
1504#                        lw $t0, 4($sp) # Call at 79.6		
1508#                        beq $t0, $zero, nullPtrException # Call at 79.6	
1512#                        lw $t0, -12($t0) # Call at 79.6		 
1516#                        lw $t0, 16($t0) # Call at 79.6 		
1520#                        jalr $t0 # Call at 79.6		 
                        # EXIT NODE # Call at 79.6 	 
                      # EXIT NODE # ExpStatement at 79.6  	
                      # ENTER NODE # ExpStatement at 80.6 	
                        # ENTER NODE # Call at 80.6 	 
                          # ENTER NODE # IdentifierExp at 80.2 	
1524#                          lw $t0, 8($sp) # IdentifierExp at 80.2  
1528#                          subu $sp, $sp, 4 # IdentifierExp at 80.2			
1532#                          sw $t0, ($sp) # IdentifierExp at 80.2 
                          # EXIT NODE # IdentifierExp at 80.2	
                          # ENTER NODE # StringLiteral at 80.15 	 
1536#                          subu $sp, $sp, 4 # StringLiteral at 80.15	  
1540#                          la $t0, strLit_138 # StringLiteral at 80.15			
1544#                          sw $t0, ($sp) # StringLiteral at 80.15 
                          # EXIT NODE # StringLiteral at 80.15  	
1548#                        lw $t0, 4($sp) # Call at 80.6	 	
1552#                        beq $t0, $zero, nullPtrException # Call at 80.6	  
1556#                        lw $t0, -12($t0) # Call at 80.6	 	
1560#                        lw $t0, 16($t0) # Call at 80.6  	
1564#                        jalr $t0 # Call at 80.6 	 
                        # EXIT NODE # Call at 80.6 	
                      # EXIT NODE # ExpStatement at 80.6			
1568#                    lw $ra, 4($sp) # MethodDeclVoid at 73.17			
1572#                    lw $s2, 0($sp) # MethodDeclVoid at 73.17		 
1576#                    addu $sp, $sp, 16 # MethodDeclVoid at 73.17	 
1580#                    jr $ra # MethodDeclVoid at 73.17 	 
                    # EXIT NODE # MethodDeclVoid at 73.17 	 
                    # ENTER NODE # MethodDeclNonVoid at 90.17   
                    .globl fcn_159_init2 # MethodDeclNonVoid at 90.17  	
1584:                    fcn_159_init2: # MethodDeclNonVoid at 90.17 		
1584#                    subu $sp, $sp, 8 # MethodDeclNonVoid at 90.17 
1588#                    sw $ra, 4($sp) # MethodDeclNonVoid at 90.17	 
1592#                    sw $s2, ($sp) # MethodDeclNonVoid at 90.17 
1596#                    lw $s2, 28($sp) # MethodDeclNonVoid at 90.17		 
                      # ENTER NODE # Assign at 91.7 
                        # ENTER NODE # IdentifierExp at 91.9   
1600#                        lw $t0, 12($sp) # IdentifierExp at 91.9	
1604#                        subu $sp, $sp, 8 # IdentifierExp at 91.9			
1608#                        sw $s5, 4($sp) # IdentifierExp at 91.9   
1612#                        sw $t0, ($sp) # IdentifierExp at 91.9		 
                        # EXIT NODE # IdentifierExp at 91.9			
1616#                      lw $t0, ($sp) # Assign at 91.7	 	
1620#                      sw $t0, -20($s2) # Assign at 91.7		 
1624#                      addu $sp, $sp, 8 # Assign at 91.7		 
                      # EXIT NODE # Assign at 91.7	 
                      # ENTER NODE # Call at 92.15  	
                        # ENTER NODE # Super at 92.15			
1628#                        subu $sp, $sp, 4 # Super at 92.15			
1632#                        sw $s2, ($sp) # Super at 92.15	 	
                        # EXIT NODE # Super at 92.15  
                        # ENTER NODE # IdentifierExp at 92.20  	
1636#                        lw $t0, 24($sp) # IdentifierExp at 92.20	  
1640#                        subu $sp, $sp, 8 # IdentifierExp at 92.20 
1644#                        sw $s5, 4($sp) # IdentifierExp at 92.20 	 
1648#                        sw $t0, ($sp) # IdentifierExp at 92.20		 
                        # EXIT NODE # IdentifierExp at 92.20  	
                        # ENTER NODE # IdentifierExp at 92.25   
1652#                        lw $t0, 20($sp) # IdentifierExp at 92.25 
1656#                        subu $sp, $sp, 4 # IdentifierExp at 92.25  	
1660#                        sw $t0, ($sp) # IdentifierExp at 92.25 
                        # EXIT NODE # IdentifierExp at 92.25 	
1664#                      jal fcn_78_init # Call at 92.15			
                      # EXIT NODE # Call at 92.15			
1668#                    lw $ra, 8($sp) # MethodDeclNonVoid at 90.17	
1672#                    lw $s2, 4($sp) # MethodDeclNonVoid at 90.17	 
1676#                    lw $t0, ($sp) # MethodDeclNonVoid at 90.17 	 
1680#                    sw $t0, 32($sp) # MethodDeclNonVoid at 90.17			
1684#                    addu $sp, $sp, 32 # MethodDeclNonVoid at 90.17	 	
1688#                    jr $ra # MethodDeclNonVoid at 90.17		 
                      # ENTER NODE # MethodDeclNonVoid at 90.17	 
                        # ENTER NODE # MethodDeclNonVoid at 96.19			
                        .globl fcn_173_valString # MethodDeclNonVoid at 96.19  
1692:                        fcn_173_valString: # MethodDeclNonVoid at 96.19 	 
1692#                        subu $sp, $sp, 8 # MethodDeclNonVoid at 96.19 	 
1696#                        sw $ra, 4($sp) # MethodDeclNonVoid at 96.19	 	
1700#                        sw $s2, ($sp) # MethodDeclNonVoid at 96.19	 	
1704#                        lw $s2, 8($sp) # MethodDeclNonVoid at 96.19		
                          # ENTER NODE # LocalVarDecl at 97.6  	
                            # ENTER NODE # NewObject at 97.12	
1708#                            li $s6, 1 # NewObject at 97.12  	
1712#                            li $s7, 0 # NewObject at 97.12	 	
1716#                            jal newObject # NewObject at 97.12 		
1720#                            la $t0, CLASS_Lib # NewObject at 97.12	
1724#                            sw $t0, -12($s7) # NewObject at 97.12 		
                            # EXIT NODE # NewObject at 97.12	
                          # EXIT NODE # LocalVarDecl at 97.6	  
                          # ENTER NODE # Call at 98.27  	
                            # ENTER NODE # Call at 98.15	  
                              # ENTER NODE # Super at 98.15 		
1728#                              subu $sp, $sp, 4 # Super at 98.15			
1732#                              sw $s2, ($sp) # Super at 98.15 
                              # EXIT NODE # Super at 98.15	 
1736#                            jal fcn_87_valString # Call at 98.15			
                            # EXIT NODE # Call at 98.15  	
                            # ENTER NODE # Call at 98.38 	 
                              # ENTER NODE # StringLiteral at 98.34  
1740#                              subu $sp, $sp, 4 # StringLiteral at 98.34	
1744#                              la $t0, strLit_167 # StringLiteral at 98.34			
1748#                              sw $t0, ($sp) # StringLiteral at 98.34		
                              # EXIT NODE # StringLiteral at 98.34	 	
                              # ENTER NODE # Call at 98.49	 
                                # ENTER NODE # IdentifierExp at 98.45	  
1752#                                lw $t0, 8($sp) # IdentifierExp at 98.45  	
1756#                                subu $sp, $sp, 4 # IdentifierExp at 98.45 		
1760#                                sw $t0, ($sp) # IdentifierExp at 98.45  
                                # EXIT NODE # IdentifierExp at 98.45 	 
                                # ENTER NODE # IdentifierExp at 98.61 	 
1764#                                lw $t0, -20($s2) # IdentifierExp at 98.61	  
1768#                                subu $sp, $sp, 8 # IdentifierExp at 98.61 	
1772#                                sw $s5, 4($sp) # IdentifierExp at 98.61  	
1776#                                sw $t0, ($sp) # IdentifierExp at 98.61 	
                                # EXIT NODE # IdentifierExp at 98.61 		
1780#                              lw $t0, 8($sp) # Call at 98.49  	
1784#                              beq $t0, $zero, nullPtrException # Call at 98.49	  
1788#                              lw $t0, -12($t0) # Call at 98.49			
1792#                              lw $t0, 28($t0) # Call at 98.49 
1796#                              jalr $t0 # Call at 98.49	  
                              # EXIT NODE # Call at 98.49  	
1800#                            lw $t0, 4($sp) # Call at 98.38 		
1804#                            beq $t0, $zero, nullPtrException # Call at 98.38		
1808#                            lw $t0, -12($t0) # Call at 98.38 		
1812#                            lw $t0, 4($t0) # Call at 98.38		
1816#                            jalr $t0 # Call at 98.38			
                            # EXIT NODE # Call at 98.38			
1820#                          lw $t0, 4($sp) # Call at 98.27	
1824#                          beq $t0, $zero, nullPtrException # Call at 98.27 	
1828#                          lw $t0, -12($t0) # Call at 98.27   
1832#                          lw $t0, 4($t0) # Call at 98.27	  
1836#                          jalr $t0 # Call at 98.27	 
                          # EXIT NODE # Call at 98.27		 
1840#                        lw $ra, 12($sp) # MethodDeclNonVoid at 96.19 
1844#                        lw $s2, 8($sp) # MethodDeclNonVoid at 96.19 
1848#                        lw $t0, ($sp) # MethodDeclNonVoid at 96.19		 
1852#                        sw $t0, 16($sp) # MethodDeclNonVoid at 96.19  	
1856#                        addu $sp, $sp, 16 # MethodDeclNonVoid at 96.19	 
1860#                        jr $ra # MethodDeclNonVoid at 96.19  
                          # ENTER NODE # MethodDeclNonVoid at 96.19	
                            # ENTER NODE # MethodDeclNonVoid at 108.17		
                            .globl fcn_191_init2a # MethodDeclNonVoid at 108.17			
1864:                            fcn_191_init2a: # MethodDeclNonVoid at 108.17 	 
1864#                            subu $sp, $sp, 8 # MethodDeclNonVoid at 108.17	
1868#                            sw $ra, 4($sp) # MethodDeclNonVoid at 108.17	 
1872#                            sw $s2, ($sp) # MethodDeclNonVoid at 108.17   
1876#                            lw $s2, 24($sp) # MethodDeclNonVoid at 108.17 	 
                              # ENTER NODE # Assign at 109.7   
                                # ENTER NODE # IdentifierExp at 109.9			
1880#                                lw $t0, 12($sp) # IdentifierExp at 109.9	  
1884#                                subu $sp, $sp, 4 # IdentifierExp at 109.9 	 
1888#                                sw $t0, ($sp) # IdentifierExp at 109.9	 
                                # EXIT NODE # IdentifierExp at 109.9	 	
1892#                              lw $t0, ($sp) # Assign at 109.7		
1896#                              sw $t0, 4($s2) # Assign at 109.7 		
1900#                              addu $sp, $sp, 4 # Assign at 109.7 		
                              # EXIT NODE # Assign at 109.7 
                              # ENTER NODE # Call at 110.15		 
                                # ENTER NODE # Super at 110.15 
1904#                                subu $sp, $sp, 4 # Super at 110.15  	
1908#                                sw $s2, ($sp) # Super at 110.15		 
                                # EXIT NODE # Super at 110.15  
                                # ENTER NODE # IdentifierExp at 110.20  	
1912#                                lw $t0, 20($sp) # IdentifierExp at 110.20 
1916#                                subu $sp, $sp, 8 # IdentifierExp at 110.20   
1920#                                sw $s5, 4($sp) # IdentifierExp at 110.20 	 
1924#                                sw $t0, ($sp) # IdentifierExp at 110.20		 
                                # EXIT NODE # IdentifierExp at 110.20	  
                                # ENTER NODE # IdentifierExp at 110.25			
1928#                                lw $t0, 20($sp) # IdentifierExp at 110.25 
1932#                                subu $sp, $sp, 4 # IdentifierExp at 110.25  
1936#                                sw $t0, ($sp) # IdentifierExp at 110.25  
                                # EXIT NODE # IdentifierExp at 110.25	
1940#                              jal fcn_78_init # Call at 110.15  	
                              # EXIT NODE # Call at 110.15	
1944#                            lw $ra, 8($sp) # MethodDeclNonVoid at 108.17	  
1948#                            lw $s2, 4($sp) # MethodDeclNonVoid at 108.17  
1952#                            lw $t0, ($sp) # MethodDeclNonVoid at 108.17		 
1956#                            sw $t0, 28($sp) # MethodDeclNonVoid at 108.17   
1960#                            addu $sp, $sp, 28 # MethodDeclNonVoid at 108.17	 
1964#                            jr $ra # MethodDeclNonVoid at 108.17 		
                              # ENTER NODE # MethodDeclNonVoid at 108.17	  
                                # ENTER NODE # MethodDeclNonVoid at 114.19  
                                .globl fcn_203_valString # MethodDeclNonVoid at 114.19   
1968:                                fcn_203_valString: # MethodDeclNonVoid at 114.19 
1968#                                subu $sp, $sp, 8 # MethodDeclNonVoid at 114.19 		
1972#                                sw $ra, 4($sp) # MethodDeclNonVoid at 114.19 
1976#                                sw $s2, ($sp) # MethodDeclNonVoid at 114.19 	
1980#                                lw $s2, 8($sp) # MethodDeclNonVoid at 114.19 		
                                  # ENTER NODE # LocalVarDecl at 115.6 
                                    # ENTER NODE # NewObject at 115.12	 
1984#                                    li $s6, 1 # NewObject at 115.12	 	
1988#                                    li $s7, 0 # NewObject at 115.12 
1992#                                    jal newObject # NewObject at 115.12 	 
1996#                                    la $t0, CLASS_Lib # NewObject at 115.12 
2000#                                    sw $t0, -12($s7) # NewObject at 115.12 	 
                                    # EXIT NODE # NewObject at 115.12			
                                  # EXIT NODE # LocalVarDecl at 115.6	
                                  # ENTER NODE # Call at 116.27  	
                                    # ENTER NODE # Call at 116.15  
                                      # ENTER NODE # Super at 116.15  
2004#                                      subu $sp, $sp, 4 # Super at 116.15   
2008#                                      sw $s2, ($sp) # Super at 116.15		 
                                      # EXIT NODE # Super at 116.15		
2012#                                    jal fcn_87_valString # Call at 116.15 
                                    # EXIT NODE # Call at 116.15	 
                                    # ENTER NODE # Call at 116.38	
                                      # ENTER NODE # StringLiteral at 116.34 	
2016#                                      subu $sp, $sp, 4 # StringLiteral at 116.34 	 
2020#                                      la $t0, strLit_199 # StringLiteral at 116.34		
2024#                                      sw $t0, ($sp) # StringLiteral at 116.34	 
                                      # EXIT NODE # StringLiteral at 116.34	  
                                      # ENTER NODE # IdentifierExp at 116.45  
2028#                                      lw $t0, 4($s2) # IdentifierExp at 116.45	 	
2032#                                      subu $sp, $sp, 4 # IdentifierExp at 116.45		
2036#                                      sw $t0, ($sp) # IdentifierExp at 116.45		 
                                      # EXIT NODE # IdentifierExp at 116.45   
2040#                                    lw $t0, 4($sp) # Call at 116.38 		
2044#                                    beq $t0, $zero, nullPtrException # Call at 116.38 	
2048#                                    lw $t0, -12($t0) # Call at 116.38		 
2052#                                    lw $t0, 4($t0) # Call at 116.38  	
2056#                                    jalr $t0 # Call at 116.38		
                                    # EXIT NODE # Call at 116.38   
2060#                                  lw $t0, 4($sp) # Call at 116.27 	 
2064#                                  beq $t0, $zero, nullPtrException # Call at 116.27 	
2068#                                  lw $t0, -12($t0) # Call at 116.27		 
2072#                                  lw $t0, 4($t0) # Call at 116.27  	
2076#                                  jalr $t0 # Call at 116.27	 	
                                  # EXIT NODE # Call at 116.27 	 
2080#                                lw $ra, 12($sp) # MethodDeclNonVoid at 114.19	 	
2084#                                lw $s2, 8($sp) # MethodDeclNonVoid at 114.19 	 
2088#                                lw $t0, ($sp) # MethodDeclNonVoid at 114.19	 	
2092#                                sw $t0, 16($sp) # MethodDeclNonVoid at 114.19	  
2096#                                addu $sp, $sp, 16 # MethodDeclNonVoid at 114.19 
2100#                                jr $ra # MethodDeclNonVoid at 114.19 		
                                  # ENTER NODE # MethodDeclNonVoid at 114.19	  
                                  # EXIT NODE # Program at 15.1	  
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
2104:readLine:
	
2104#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
2108#	sw $ra, 4($sp) # save $ra
2112#	move $t1,$sp # save "original" sp

2116:  doRead:

	# read the character
2116#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
2120#	subu $t2,$v0,13
2124#	bne $t2,$zero,notReturnRL
2128#	jal readLogicalChar
2132#	subu $t2,$v0,10 # check for newline
2136#	beq $t2,$zero,foundNewLine
2140#	sw $v0,lastCharRead # push back character into queue
2144#	j foundNewLine # go process the line

2148:  notReturnRL:

	# at this point, $v0 has our character

2148#	subu $t0,$v0,10
2152#	beq $t0,$zero,foundNewLine
2156#	blt $v0,$zero,foundEof
2157##...slt $at,$v0,$zero
2161##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
2164#	subu $sp,$sp,4
2168#	sw $v0,($sp)

	# loop back up to get next character
2172#	j doRead

2176:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2176#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
2180#	sw $zero,8($sp) # return-value: null
2184#	j rlReturn # return

2188:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
2188#	subu $t0,$t1,$sp # number of chars we read (times 4)
2192#	srl $s6,$t0,2 # number of words on stack with chars
2196#	subu $sp,$sp,4 # push char-count ...
2200#	sw $s6,($sp) # ... onto stack
2204#	addu $t2,$t0,5 # GC tag, incl. for count-word
2208#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
2212#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2216#	srl $s6,$s6,2 # data words in object
2220#	move $s7,$zero # # object words in object
2224#	jal newObject # allocate space
	
	# store header words
2228#	la $t0,CLASS_String
2232#	sw $t0,-12($s7) # store class tag (String) into object
2236#	lw $t2,4($sp) # char-count
2240#	sll $t1,$t2,2 # 4 times number of chars
2244#	subu $t2,$zero,$t2 # negative of char-count
2248#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
2252#	lw $t0,-8($s7) # data words in object
2256#	sll $t0,$t0,2 # data bytes in object
2260#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
2264#	subu $t0,$t0,$t2 # place to store last character (plus 9)
2268#	addu $sp,$sp,8 # pop redundant object-pointer and count
2272#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

2276#	beq $sp,$t1,doneCharCopy
2280:  charCopyLoop:
2280#	lw $t2,($sp)
2284#	sb $t2,-9($t0)
2288#	addu $sp,$sp,4
2292#	subu $t0,$t0,1
2296#	bne $sp,$t1,charCopyLoop
2300:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
2300#	sw $s7,8($sp)
	
2304:  rlReturn:
	# restore return address and return
2304#	lw $ra,4($sp) # restore return address, ...
2308#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
2312#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2316:readInt:

	# save $ra by pushing onto stack
2316#	subu $sp,$sp,4
2320#	sw $ra,($sp)

2324:  riSkipWhiteLoop:
	# read a character
2324#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
2328#	subu $t0,$v0,32
2332#	bgt $t0,$zero,nonWhite
2333##...slt $at,$zero,$t0
2337##...bne $at,$zero,$+44
2340#	beq $t0,$zero,riSkipWhiteLoop # start over if space
2344#	subu $t0,$v0,10
2348#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
2352#	subu $t0,$v0,9
2356#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
2360#	subu $t0,$v0,13
2364#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
2368#	subu $t0,$v0,12
2372#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
2376#	j badIntegerFormat # illegal integer char: abort program

2380:  nonWhite:
2380#	subu $t0,$v0,'-'
2384#	li $t4,1 # final multiplier
2388#	bne $t0,$zero,helpReadInt # go read
2392#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
2396#	jal readLogicalChar

2400:  helpReadInt:
2400#	li $t2,10
2404#	subu $t1,$v0,'0' # convert digit to 0-9 value
2408#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
2409##...sltu $at,$t1,$t2
2413##...beq $at,$zero,$+2080
2416#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

2420:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

2420#	jal readLogicalChar # read next character
2424#	subu $t1,$v0,'0' # convert digit to 0-9 value
2428#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
2429##...sltu $at,$t1,$t2
2433##...beq $at,$zero,$+20

2436#	mul $t3,$t3,$t2 # multiply old value by 10
2437##...mult $t3,$t2
2441##...mflo $t3
2444#	addu $t3,$t3,$t1 # add in value of new digit
2448#	j digitLoop

2452:  doneDigitLoop:

	# "push back" unused character into queue
2452#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
2456#	lw $ra,($sp)
2460#	mult $t3,$t4 # multiply to account for poss. minus sign
2464#	mflo $t3
2468#	sw $t3,($sp) # result
2472#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
2476#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2480:readChar:

	# save $ra by pushing onto stack
2480#	subu $sp,$sp,4
2484#	sw $ra,($sp)

  	# read the character
2488#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
2492#	lw $ra,($sp)
2496#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2500#	sw $v0,($sp)

	# return
2504#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
2508:printStr:
	# check for null, printing "(null)", if so
2508#	lw $t0,($sp)
2512#	bne $t0,$zero,psNotNull

	# print "(null)"
2516#	la $a0,nullStr
2520#	li $v0,4
2524#	syscall
2528#	j donePrintStr
	
2532:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2532#	subu $t0,$t0,8
2536#	lw $t1,($t0) # word just beyond end of string
2540#	sll $t1,$t1,2
2544#	subu $t1,$t0,$t1 # first word in string
2548#	lw $t0,4($t0) # negative of string-length
2552#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
2556#	beq $t0,$t1,donePrintStr
2560:  psLoop:
2560#	lb $a0,($t1) # next byte
2564#	li $v0,11 # code for printing char
2568#        syscall # print the char
2572#	addu $t1,$t1,1 # go to next char
2576#	blt $t1,$t0,psLoop
2577##...slt $at,$t1,$t0
2581##...bne $at,$zero,$-20

2584:  donePrintStr:
	# pop stack and return
2584#	addu $sp,$sp,8
2588#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2592:printInt:
	# pop value off stack, along with 'this'
2592#	lw $a0,($sp)
2596#	addu $sp,$sp,12

	# print it
2600#	li $v0,1 # code for print-int
2604#	syscall

	# return
2608#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2612:printBool:
	# pop value off stack, along with 'this'
2612#	lw $t0,($sp)
2616#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2620#	la $a0,falseString
2624#	beq $t0,$zero,skipPB
2628#	la $a0,trueString
2632:  skipPB:
2632#	li $v0,4 # code for print-string
2636#	syscall

	# return
2640#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2644:substring:

	# save $ra by pushing onto stack
2644#	subu $sp,$sp,4
2648#	sw $ra,($sp)

	# get string value off stack, test for null
2652#	lw $t0,20($sp)
2656#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2660#	lw $t0,-4($t0) # negative of string length
2664#	subu $t0,$zero,$t0 # string length
2668#	lw $t1,4($sp) # k
2672#	lw $t2,12($sp) # n
2676#	bgt $zero,$t2,strIndexOutOfBounds
2677##...slt $at,$t2,$zero
2681##...bne $at,$zero,$+1780
2684#	bgt $t2,$t1,strIndexOutOfBounds
2685##...slt $at,$t1,$t2
2689##...bne $at,$zero,$+1772
2692#	bgt $t1,$t0,strIndexOutOfBounds
2693##...slt $at,$t0,$t1
2697##...bne $at,$zero,$+1764

	# allocate memory
2700#	subu $s6,$t1,$t2 # # chars in target-string
2704#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2708#	srl $s6,$s6,2 # convert bytes-count to word-count
2712#	move $s7,$zero # (no object-bytes in string)
2716#	jal newObject

	# store "String" tag in object-type field
2720#	la $t0,CLASS_String
2724#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2728#	lw $t1,8($sp) # k
2732#	lw $t2,16($sp) # n
2736#	subu $t0,$t2,$t1 # value to store
2740#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2744#	lw $t3,24($sp) # source string pointer
2748#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2752#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2756#	lw $t4,-8($t3) # # data words in source string
2760#	sll $t4,$t4,2 # # data bytes in source string
2764#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2768#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2772#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2776#	lw $t2,-8($s7) # # data words in target string
2780#	sll $t2,$t2,2 # # data bytes in target string
2784#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2788:  subCopyLoopzz:
2788#	lb $t4,-8($t3)
2792#	sb $t4,-8($t2)
2796#	addu $t2,$t2,1
2800#	addu $t3,$t3,1
2804#	blt $t3,$t1,subCopyLoopzz
2805##...slt $at,$t3,$t1
2809##...bne $at,$zero,$-20
	
2812:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2812#	lw $ra,4($sp) # restore $ra
2816#	addu $sp,$sp,24 # pop stack
	
	# return
2820#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2824:length:

	# get string pointer
2824#	lw $t0,($sp)
	
	# grow stack
2828#	subu $sp,$sp,4

	# store GC tag
2832#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2836#	lw $t0,-4($t0) # -length
2840#	subu $t0,$zero,$t0
2844#	sw $t0,($sp) #store length

	# return
2848#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2852:concat:
 	# save $ra by pushing onto stack
2852#	subu $sp,$sp,4
2856#	sw $ra($sp)

	# get string pointers and check parameter for null
2860#	lw $t0,4($sp)
2864#	beq $t0,$zero,nullPtrException
2868#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2872#	lw $t0,-4($t0) # negative size of second object
2876#	lw $t1,-4($t1) # negative size of first object
2880#	addu $s6,$t0,$t1 # sum of negative sizes
2884#	sra $s6,$s6,2 # negative word-size of char part
2888#	subu $s6,$zero,$s6 # word size of char part
2892#	addu $s6,$s6,1 # data word size, including v-table word
2896#	move $s7,$zero
2900#	jal newObject

	# store "String" tag in object-type field
2904#	la $t0,CLASS_String
2908#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2912#	lw $ra,4($sp) # return address
2916#	lw $t0,8($sp) # second object
2920#	lw $t1,12($sp) # first object
2924#	addu $sp,$sp,12 # pop
2928#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2932#	lw $t2,-4($t0) # negative length of second object
2936#	lw $t3,-4($t1) # negative length of first object
2940#	addu $t4,$t2,$t3 # sum of negative lengths
2944#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2948#	lw $t4,-8($t1) # # data words in first string
2952#	sll $t4,$t4,2 # # data bytes in first string
2956#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2960#	lw $t4,-8($s7) # # data words in new string
2964#	sll $t4,$t4,2 # # data bytes in new string
2968#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2972#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2976#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2980:  concatLoop1zz:
2980#	lb $t4,-8($t1)
2984#	sb $t4,-8($s7)
2988#	addu $s7,$s7,1
2992#	addu $t1,$t1,1
2996#	blt $t1,$t3,concatLoop1zz
2997##...slt $at,$t1,$t3
3001##...bne $at,$zero,$-20
3004:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
3004#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
3008#	lw $t4,-8($t0) # # data words in second string
3012#	sll $t4,$t4,2 # # data bytes in second string
3016#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
3020#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
3024:  concatLoop2zz:
3024#	lb $t4,-8($t1)
3028#	sb $t4,-8($s7)
3032#	addu $s7,$s7,1
3036#	addu $t1,$t1,1
3040#	blt $t1,$t3,concatLoop2zz
3041##...slt $at,$t1,$t3
3045##...bne $at,$zero,$-20
3048:  doneConcatLoop2zz:
 
3048:  concatRtnzz:
	# return
3048#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
3052:charAt:
	# get string
3052#	lw $t0,8($sp)

	# check that index is in bounds
3056#	lw $t1,-4($t0) # negative of # data words in string
3060#	subu $t3,$zero,$t1 # # chars in string
3064#	lw $t2,($sp) # index
3068#	bgeu $t2,$t3,strIndexOutOfBounds
3069##...sltu $at,$t2,$t3
3073##...beq $at,$zero,$+1388

	# access element
3076#	lw $t1,-8($t0) # # data words in object
3080#	sll $t1,$t1,2 # - byte-offset from end of chars
3084#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3088#	addu $t0,$t0,$t1 # - address of our char, offset by 8
3092#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
3096#	addu $sp,$sp,4
3100#	sw $t0,($sp)
3104#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
3108#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
3112:intToString:

	# save return address on stack; allocate space for dummy GC tag
3112#	subu $sp,$sp,8
3116#	sw $ra,4($sp)

	# save current sp
3120#	move $t0,$sp

	# move constant 10 into $t3
3124#	li $t3,10

	# get argument, negate if negative
3128#	lw $t1,8($sp)
3132#	bge $t1,$zero,itsNonNegLoop
3133##...slt $at,$t1,$zero
3137##...beq $at,$zero,$+8
3140#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
3144:  itsNonNegLoop:
3144#	divu $t1,$t3
3148#	mflo $t1 # quotient
3152#	mfhi $t4 # remainder
3156#	addu $t4,$t4,'0' # turn remainder into digit
3160#	subu $sp,$sp,4
3164#	sw $t4,($sp) # push digit onto stack
3168#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
3172#	lw $t4,8($t0)
3176#	bge $t4,$zero,itsSkipNeg
3177##...slt $at,$t4,$zero
3181##...beq $at,$zero,$+16
3184#	li $t4,'-'
3188#	subu $sp,$sp,4
3192#	sw $t4,($sp)
3196:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
3196#	subu $s6,$t0,$sp
3200#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
3204#	sw $t3,($t0)
3208#	srl $s6,$s6,2
3212#	subu $sp,$sp,4
3216#	sw $s6,($sp)
	
	# allocate memory
3220#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3224#	srl $s6,$s6,2
3228#	move $s7,$zero # no "object" words in object
3232#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
3236#	lw $t0,4($sp)
3240#	addu $sp,$sp,8

	# store "String" tag into class field
3244#	subu $s7,$s7,8 # address of header-1 word
3248#	la $t1,CLASS_String
3252#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
3256#	subu $t0,$zero,$t0
3260#	sw $t0,4($s7)

3264#	lw $t1,($s7) # number of data words in string
3268#	sll $t1,$t1,2 # number data bytes in string
3272#	subu $t1,$s7,$t1 # first location to store chars in string
3276#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
3280:  itsLoop:
3280#	lw $t2,($sp)
3284#	addu $sp,$sp,4
3288#	sb $t2,($t1)
3292#	addu $t1,$t1,1
3296#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
3300#	lw $ra,4($sp)
3304#	addu $sp,$sp,16
3308#	addu $t0,$t0,15
3312#	and $t0,$t0,0xfffffffc
3313##...lui $at,65535
3317##...ori $at,$at,0xfffc
3321##...and $t0,$t0,$at
3324#	sw $t0,($sp)
3328#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3332:intToChar:
	# save return address
3332#	subu $sp,$sp,4
3336#	sw $ra,($sp)

	# allocate object
3340#	li $s6,2
3344#	move $s7,$zero
3348#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
3352#	lw $ra,4($sp)
3356#	lw $t1,8($sp)
3360#	addu $sp,$sp,16

	# store "String" tag into class field
3364#	la $t0,CLASS_String
3368#	sw $t0,-12($s7)

	# store data in string
3372#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
3376#	li $t0,-1
3380#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
3384#	sw $s7,($sp)

	# return
3388#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
3392:compareTo:
	# get string pointers and check parameter for null
3392#	lw $t0,($sp) # second string
3396#	beq $t0,$zero,nullPtrException
3400#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
3404#	lw $t2,-4($t0) # negative length of second string
3408#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
3412#	slt $t4,$t3,$t2
3416#	slt $t5,$t2,$t3
3420#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
3424#	lw $t2,-8($t0) # # data words in second string
3428#	lw $t3,-8($t1) # # data words in first string
3432#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3436#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3440#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
3444#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
3448#	beq $zero,$t5,skipStrCmpLenzz
3452#	move $t2,$t3
3456:  skipStrCmpLenzz:
3456#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
3460:  cmpLoopzz:
3460#	lw $t3,-8($t1) # word from str2
3464#	lw $t4,-8($t0) # word from str1
3468#	bne $t3,$t4,cmpNotEqualzz
3472#	addu $t1,$t1,4
3476#	addu $t0,$t0,4
3480#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
3484#	j cmpHitLimitzz

3488:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
3488#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3492#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
3496#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
3500:  cmpHitLimitzz:
3500#	sw $t5,($sp) # store value
3504#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
3508#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3512:readLogicalChar:

	# check if we already have a character
3512#	lw $v0,lastCharRead
3516#	li $t0,-2
3520#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
3524#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3528#	jr $ra # return
	
3532:  doReadCh:
	# we need to actually read a character: read and return
3532#	li $v0,12 # use system call to read a character
3536#	syscall
3540#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3544:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
3544#	blt $s7,$zero arraySizeOutOfBounds
3545##...slt $at,$s7,$zero
3549##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
3552#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

3556:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
3556#	move $t3,$s6
3560#	bge $t3,$zero,newSkip
3561##...slt $at,$t3,$zero
3565##...beq $at,$zero,$+8
3568#	move $t3,$zero

3572:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3572#	addu $t0,$t3,$s7
3576#	sll $t0,$t0,2
3580#	addu $t0,$t0,8 # amount of memory needed
3584#	addu $t1,$t0,$s3
3588#	bgtu $t1,$s4,doGC
3589##...sltu $at,$s4,$t1
3593##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3596#	move $t2,$s3
3600:  zeroObjLoop:
3600#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3604#	addu $s3,4
3608#	bltu $s3,$t1,zeroObjLoop
3609##...sltu $at,$s3,$t1
3613##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3616#	sll $t0,$s7,2    # number of post-header bytes
3620#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3624#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3628#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3632#	move $s7,$t0
3636#	subu $sp,$sp,4
3640#	sw $t0,($sp)

3644#	jr $ra
	
3648:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3648#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3652#	subu $sp,$sp,4
3656#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3660#	lw $t0,cur_seg
3664#	move $t7,$s4
3668#	la $t6,seg1_start
3669##...lui $t6,16
3673##...addiu $t6,$t6,5104
3676#	la $s3,seg0_start
3680#	la $s4,seg0_end
3681##...lui $s4,16
3685##...addiu $s4,$s4,5104
3688#	sw $zero,cur_seg
3692#	bne $t0,$zero,skipGc1
3696#	la $t6,seg0_start
3700#	la $s3,seg1_start
3701##...lui $s3,16
3705##...addiu $s3,$s3,5104
3708#	la $s4,seg1_end
3709##...lui $s4,32
3713##...addiu $s4,$s4,5104
3716#	sw $s5,cur_seg
3720:  skipGc1:
3720#	li $t5,-2
3724#	lw $t0,stack_bottom
3728#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3732:  gcStackCopyLoop:
3732#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3736#	sll $t2,$t1,31 # zero iff low bit was zero
3740#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3744#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3748#	bleu $t1,$t6,gcTestIterDone1
3749##...sltu $at,$t6,$t1
3753##...beq $at,$zero,$+148
3756#	bgtu $t1,$t7,gcTestIterDone1
3757##...sltu $at,$t7,$t1
3761##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3764#	lw $t2,-8($t1) # possible forwarding tag
3768#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3772#	lw $t2,-4($t1) # forwarding pointer: object's new address
3776#	sw $t2,4($t0) # update stack value
3780#	j gcTestIterDone1 # do next iteration

3784:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3784#	bge $t2,$zero,gcSkip2
3785##...slt $at,$t2,$zero
3789##...beq $at,$zero,$+8
3792#	move $t2,$zero # set to zero if -1 (number of data words)

3796:  gcSkip2:
3796#	sll $t2,$t2,2
3800#	addu $t2,$t2,8
3804#	subu $t4,$t1,$t2 # address of first word of source
3808#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3812#	bge $t3,$zero,gcH2Neg1
3813##...slt $at,$t3,$zero
3817##...beq $at,$zero,$+8
3820#	move $t3,$zero
3824:  gcH2Neg1:
3824#	sll $t3,$t3,2
3828#	addu $t3,$t3,$t1 # address one word past last word of source

3832#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3836#	lw $s0,($t4)
3840#	lw $s1,-8($t1)
3844#	sw $s1,($t4)
3848#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3852:  gCinnerCopy1:
3852#	lw $s0,($t4)
3856#	sw $s0,($s3)
3860#	addu $t4,$t4,4
3864#	addu $s3,$s3,4
3868#	bltu $t4,$t3,gCinnerCopy1
3869##...sltu $at,$t4,$t3
3873##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3876#	sw $t5,-8($t1) # -2 in first header-slot
3880#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3884#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3888#	j gcTestIterDone1

3892:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3892#	subu $t0,$t0,$t1
3896#	subu $t0,$t0,3

3900:  gcTestIterDone1:
3900#	bgeu $t0,$sp,gcStackCopyLoop
3901##...sltu $at,$t0,$sp
3905##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3908#	lw $t1,cur_seg
3912#	la $t0,seg0_start
3916#	beq $t1,$zero,gcSkip4
3920#	la $t0,seg1_start
3921##...lui $t0,16
3925##...addiu $t0,$t0,5104

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3928:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3928#	bgeu $t0,$s3,gcFinishUp
3929##...sltu $at,$t0,$s3
3933##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3936:  gcHeapCopyLoop:
	# check if we have a data array
3936#	lw $t1,($t0) # first header word for current object
3940#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3941##...slt $at,$t1,$zero
3945##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3948#	lw $t1,4($t0) # data words
3952#	addu $t1,$t1,2 # add in # header words
3956#	sll $t1,$t1,2 # convert to byte-count
3960#	addu $t0,$t0,$t1 # skip over object
3964#	j gcTestIterDone2 # go do next object, if any

3968:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3968#	sll $t2,$t1,2 # # data bytes
3972#	addu $t2,$t2,8 # to skip header word
3976#	addu $t2,$t0,$t2 # pointer to new object
3980#	lw $t3,-8($t2) # word to swap
3984#	sw $t1,-8($t2) # store header word
3988#	sw $t3,($t0) # restore first word of object

3992#	lw $t3,-4($t2) # # object words (negative treated as zero)
3996#	bge $t3,$zero,gcH2Neg2
3997##...slt $at,$t3,$zero
4001##...beq $at,$zero,$+8
4004#	move $t3,$zero
4008:  gcH2Neg2:
4008#	sll $t3,$t3,2 # # object bytes
4012#	move $t0,$t2 # address of first pointer in object
4016#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
4020#	beq $t0,$s1,gcTestIterDone2
	
4024:  gcNextPointerInObject:
	# get pointer from object
4024#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
4028#	bleu $t1,$t6,gcGoNextPointerSlot
4029##...sltu $at,$t6,$t1
4033##...beq $at,$zero,$+136
4036#	bgtu $t1,$t7,gcGoNextPointerSlot
4037##...sltu $at,$t7,$t1
4041##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4044#	lw $t8,-8($t1) # possible forwarding tag
4048#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
4052#	lw $t8,-4($t1) # forwarding pointer: object's new address
4056#	sw $t8,($t0) # update pointer in object
4060#	j gcGoNextPointerSlot # do next iteration

4064:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
4064#	bge $t8,$zero,gcSkip5
4065##...slt $at,$t8,$zero
4069##...beq $at,$zero,$+8
4072#	move $t8,$zero # set to zero if -1

4076:  gcSkip5:
4076#	sll $t8,$t8,2
4080#	addu $t8,$t8,8
4084#	subu $t4,$t1,$t8 # address of first word of source
4088#	lw $t3,-4($t1)
4092#	bge $t3,$zero,gcNoNeg
4093##...slt $at,$t3,$zero
4097##...beq $at,$zero,$+8
4100#	move $t3,$zero
4104:  gcNoNeg:
4104#	sll $t3,$t3,2
4108#	addu $t3,$t3,$t1 # address one word past last word of source

4112#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
4116#	lw $s0,($t4)
4120#	lw $t9,-8($t1)
4124#	sw $t9,($t4)
4128#	sw $s0,-8($t1)

	# copy all source bytes to the target
4132:  gCinnerCopy2:
4132#	lw $s0,($t4)
4136#	sw $s0,($s3)
4140#	addu $t4,$t4,4
4144#	addu $s3,$s3,4
4148#	bltu $t4,$t3,gCinnerCopy2
4149##...sltu $at,$t4,$t3
4153##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4156#	sw $t5,-8($t1) # -2 in first header-slot
4160#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
4164#	sw $t8,($t0)

4168:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
4168#	addu $t0,$t0,4
4172#	bltu $t0,$s1,gcNextPointerInObject
4173##...sltu $at,$t0,$s1
4177##...bne $at,$zero,$-152

4180:  gcTestIterDone2:
4180#	bltu $t0,$s3,gcHeapCopyLoop
4181##...sltu $at,$t0,$s3
4185##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

4188:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
4188#	lw $s2,($sp)
4192#	addu $sp,$sp,4

	# mark us as having already GC'd
4196#	move $t5,$s5

	# go try and allocate again
4200#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4204:vm_init:

	# mark bottom of stack
4204#	sw $sp,stack_bottom
4208#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
4212#	move $s2,$zero
4216#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
4220#	li $s5,5
4224#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

4228#	la $s3,seg0_start
4232#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
4236#	la $s4,seg0_end
4237##...lui $s4,16
4241##...addiu $s4,$s4,5104
4244#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
4248#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4252:divide:
	# get parameters; abort if divisor zero
4252#	lw $t0,($sp)
4256#	lw $t1,8($sp)
4260#	beq $t0,$zero,divByZeroError
	
	# perform division
4264#	div $t1,$t0
4268#	mflo $t0

	# store result, adjust stack and return
4272#	addu $sp,$sp,8 # adjust stack
4276#	sw $t0,($sp) # store result
4280#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4284:remainder:
	# get parameters; abort if divisor zero
4284#	lw $t0,($sp)
4288#	lw $t1,8($sp)
4292#	beq $t0,$zero,divByZeroError
	
	# perform division
4296#	div $t1,$t0
4300#	mfhi $t0

	# store result, adjust stack and return
4304#	addu $sp,$sp,8 # adjust stack
4308#	sw $t0,($sp) # store result
4312#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4316:checkCast:
	# get object, allow immediately if null
4316#	lw $t2,($sp)
4320#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
4324#	lw $t3,-8($t2) # <= 0 if array
4328#	lw $t2,-12($t2) # vtable address (unless array)
4332#	bgt $t3,$zero,skipArrayCast
4333##...slt $at,$zero,$t3
4337##...bne $at,$zero,$+8
4340#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4344:  skipArrayCast:
4344#	bge $t2,$t1,castException
4345##...slt $at,$t2,$t1
4349##...beq $at,$zero,$+152
4352#	blt $t2,$t0,castException
4353##...slt $at,$t2,$t0
4357##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
4360:  checkCastReturn:	
4360#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4364:instanceOf:
	# get object, go return false if null
4364#	lw $t2,($sp)
4368#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
4372#	lw $t3,-8($t2) # <= 0 if array
4376#	lw $t2,-12($t2) # vtable address (unless array)
4380#	bgt $t3,$zero,skipArrayInstanceOf
4381##...slt $at,$zero,$t3
4385##...bne $at,$zero,$+8
4388#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4392:  skipArrayInstanceOf:
4392#	sge $t0,$t2,$t0
4393##...slt $t0,$t2,$t0
4397##...xori $t0,$t0,0x1
4400#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
4404#	and $t2,$t0,$t1
4408:  doneInstanceOf: # if we reach here via branch, we know $t2=0
4408#	sw $t2,($sp)
4412#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4416:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
4416#	li $v0,4 # syscall-code for print-string
4420#	syscall
4424:exit:
	# print termination message
4424#	li $v0,4
4428#	la $a0,exitString
4432#	syscall

	# terminate execution
4436#	li $v0,10 #syscall-code for "exit"
4440#	syscall

4444:outOfHeapMemory:
4444#	la $a0,heapMemoryMsg
4448#	j exitError
4452:divByZeroError:
4452#	la $a0,divByZeroMsg
4456#	j exitError
4460:strIndexOutOfBounds:
4460#	la $a0,strIndexOutOfBoundsMsg
4464#	j exitError
4468:arrayIndexOutOfBounds:
4468#	la $a0,arrayIndexOutOfBoundsMsg
4472#	j exitError
4476:arraySizeOutOfBounds:
4476#	la $a0,arraySizeOutOfBoundsMsg
4480#	j exitError
4484:nullPtrException:
4484#	la $a0,nullPtrExceptionMsg
4488#	j exitError
4492:badIntegerFormat:
4492#	la $a0,badIntegerFormatMsg
4496#	j exitError
4500:castException:
4500#	la $a0,castExceptionMsg
4504#	j exitError

############## data section ################
	.data
	.align 2

4796:cur_seg:
	.word 0

4800:lastCharRead:
	.word -2 # -2 => no buffered character

4804:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4831:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4854:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4889:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4923:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4956:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4987:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
5035:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
5056:gcMsg: 
      .asciiz "\nGC!\n"

5062:nullStr:
	.asciiz "null"
5067:trueString:
	.asciiz "true"
5072:falseString:
	.asciiz "false"
5078:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
5100:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

5104:seg0_start:
	.space 0x100000
1053680:seg0_end:
1053680:seg1_start:
	.space 0x100000
2102256:seg1_end:



