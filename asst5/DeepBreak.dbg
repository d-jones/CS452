.data # Program at 7.1	 
3656:CLASS_Object: # ClassDecl at 0.0	  
.word 0 # ClassDecl at 0.0 		
3660:CLASS_Lib: # ClassDecl at 0.0   
.word CLASS_Object # ClassDecl at 0.0   
.word readLine # ClassDecl at 0.0  	
.word readInt # ClassDecl at 0.0			
.word readChar # ClassDecl at 0.0 		
.word printStr # ClassDecl at 0.0			
.word printBool # ClassDecl at 0.0  	
.word printInt # ClassDecl at 0.0  
.word intToString # ClassDecl at 0.0  
.word intToChar # ClassDecl at 0.0	 	
3696:CLASS_Main: # ClassDecl at 7.7			
.word CLASS_Lib # ClassDecl at 7.7			
.word readLine # ClassDecl at 7.7 	 
.word readInt # ClassDecl at 7.7	 	
.word readChar # ClassDecl at 7.7 	
.word printStr # ClassDecl at 7.7 	 
.word printBool # ClassDecl at 7.7 		
.word printInt # ClassDecl at 7.7	  
.word intToString # ClassDecl at 7.7	 	
.word intToChar # ClassDecl at 7.7	 
.word fcn_12_main # ClassDecl at 7.7  	
.word fcn_103_funnySum # ClassDecl at 7.7   
3740:CLASS_END_Main: # ClassDecl at 7.7 	
3740:CLASS_END_Lib: # ClassDecl at 0.0  
3740:CLASS_String: # ClassDecl at 0.0  	
.word CLASS_Object # ClassDecl at 0.0	 	
.word concat # ClassDecl at 0.0		
.word substring # ClassDecl at 0.0	 	
.word length # ClassDecl at 0.0	 
.word charAt # ClassDecl at 0.0			
.word compareTo # ClassDecl at 0.0  
3764:CLASS_END_String: # ClassDecl at 0.0	  
3764:CLASS_RunMain: # ClassDecl at 0.0	 	
.word CLASS_Object # ClassDecl at 0.0 	
3768:CLASS_END_RunMain: # ClassDecl at 0.0	
3768:CLASS_END_Object: # ClassDecl at 0.0 		
 .data # Program at 7.1   
  .byte 10 # StringLiteral at 12.11	
  .byte 0 # StringLiteral at 12.11		
  .byte 0 # StringLiteral at 12.11			
  .byte 0 # StringLiteral at 12.11	  
  .word CLASS_String # StringLiteral at 12.11	  
  .word 2 # StringLiteral at 12.11 	 
  .word -1 # StringLiteral at 12.11		
3784:strLit_8: # StringLiteral at 12.11	 
  .byte 32 # StringLiteral at 33.13	  
  .byte 0 # StringLiteral at 33.13   
  .byte 0 # StringLiteral at 33.13		
  .byte 0 # StringLiteral at 33.13 	
  .word CLASS_String # StringLiteral at 33.13	 
  .word 2 # StringLiteral at 33.13		 
  .word -1 # StringLiteral at 33.13		 
3800:strLit_83: # StringLiteral at 33.13		
  # ENTER NODE # Program at 7.1   
  .text # Program at 7.1  	
  .globl main # Program at 7.1 	 
0:  main: # Program at 7.1 		
0#  jal vm_init # Program at 7.1 	
    # ENTER NODE # ExpStatement at 0.0 	 
      # ENTER NODE # Call at 0.0	 
        # ENTER NODE # NewObject at 0.0 	 
4#        li $s6, 1 # NewObject at 0.0  	
8#        li $s7, 0 # NewObject at 0.0			
12#        jal newObject # NewObject at 0.0		 
16#        la $t0, CLASS_Main # NewObject at 0.0	
20#        sw $t0, -12($s7) # NewObject at 0.0 
        # EXIT NODE # NewObject at 0.0  
24#      lw $t0, 0($sp) # Call at 0.0 		
28#      beq $t0, $zero, nullPtrException # Call at 0.0	 	
32#      lw $t0, -12($t0) # Call at 0.0 		
36#      lw $t0, 36($t0) # Call at 0.0	 
40#      jalr $t0 # Call at 0.0 	
      # EXIT NODE # Call at 0.0   
    # EXIT NODE # ExpStatement at 0.0  	
44#  li $v0, 10 # Program at 7.1		 
48#  syscall # Program at 7.1	  
    # ENTER NODE # MethodDeclVoid at 10.17	
    .globl fcn_12_main # MethodDeclVoid at 10.17 		
52:    fcn_12_main: # MethodDeclVoid at 10.17		
52#    subu $sp, $sp, 8 # MethodDeclVoid at 10.17  	
56#    sw $ra, 4($sp) # MethodDeclVoid at 10.17  	
60#    sw $s2, ($sp) # MethodDeclVoid at 10.17  	
64#    lw $s2, 8($sp) # MethodDeclVoid at 10.17			
      # ENTER NODE # ExpStatement at 11.2 
        # ENTER NODE # Call at 11.2  	
          # ENTER NODE # This at 11.2 	
68#          subu $sp, $sp, 4 # This at 11.2  
72#          sw $s2, ($sp) # This at 11.2			
          # EXIT NODE # This at 11.2  
          # ENTER NODE # Call at 11.11	 	
            # ENTER NODE # This at 11.11  	
76#            subu $sp, $sp, 4 # This at 11.11			
80#            sw $s2, ($sp) # This at 11.11 
            # EXIT NODE # This at 11.11 	 
            # ENTER NODE # IntegerLiteral at 11.20 	 
84#            subu $sp, $sp, 8 # IntegerLiteral at 11.20		
88#            sw $s5, 4($sp) # IntegerLiteral at 11.20   
92#            li $t0, 50 # IntegerLiteral at 11.20	
96#            sw $t0, ($sp) # IntegerLiteral at 11.20			
            # EXIT NODE # IntegerLiteral at 11.20 	
            # ENTER NODE # IntegerLiteral at 11.24			
100#            subu $sp, $sp, 8 # IntegerLiteral at 11.24	  
104#            sw $s5, 4($sp) # IntegerLiteral at 11.24 
108#            li $t0, 32 # IntegerLiteral at 11.24	 	
112#            sw $t0, ($sp) # IntegerLiteral at 11.24	  
            # EXIT NODE # IntegerLiteral at 11.24 		
            # ENTER NODE # IntegerLiteral at 11.28		 
116#            subu $sp, $sp, 8 # IntegerLiteral at 11.28	
120#            sw $s5, 4($sp) # IntegerLiteral at 11.28	 	
124#            li $t0, 57 # IntegerLiteral at 11.28   
128#            sw $t0, ($sp) # IntegerLiteral at 11.28 	 
            # EXIT NODE # IntegerLiteral at 11.28 	
132#          lw $t0, 24($sp) # Call at 11.11		
136#          beq $t0, $zero, nullPtrException # Call at 11.11		 
140#          lw $t0, -12($t0) # Call at 11.11	
144#          lw $t0, 40($t0) # Call at 11.11 		
148#          jalr $t0 # Call at 11.11	
          # EXIT NODE # Call at 11.11  
152#        lw $t0, 8($sp) # Call at 11.2 	
156#        beq $t0, $zero, nullPtrException # Call at 11.2	  
160#        lw $t0, -12($t0) # Call at 11.2 
164#        lw $t0, 24($t0) # Call at 11.2	  
168#        jalr $t0 # Call at 11.2 	 
        # EXIT NODE # Call at 11.2	 
      # EXIT NODE # ExpStatement at 11.2	  
      # ENTER NODE # ExpStatement at 12.2 
        # ENTER NODE # Call at 12.2	
          # ENTER NODE # This at 12.2 	
172#          subu $sp, $sp, 4 # This at 12.2	 
176#          sw $s2, ($sp) # This at 12.2	
          # EXIT NODE # This at 12.2   
          # ENTER NODE # StringLiteral at 12.11 		
180#          subu $sp, $sp, 4 # StringLiteral at 12.11 
184#          la $t0, strLit_8 # StringLiteral at 12.11	
188#          sw $t0, ($sp) # StringLiteral at 12.11 	
          # EXIT NODE # StringLiteral at 12.11   
192#        lw $t0, 4($sp) # Call at 12.2		 
196#        beq $t0, $zero, nullPtrException # Call at 12.2	
200#        lw $t0, -12($t0) # Call at 12.2   
204#        lw $t0, 16($t0) # Call at 12.2	  
208#        jalr $t0 # Call at 12.2   
        # EXIT NODE # Call at 12.2		
      # EXIT NODE # ExpStatement at 12.2	  
212#    lw $ra, 4($sp) # MethodDeclVoid at 10.17 		
216#    lw $s2, 0($sp) # MethodDeclVoid at 10.17   
220#    addu $sp, $sp, 12 # MethodDeclVoid at 10.17		 
224#    jr $ra # MethodDeclVoid at 10.17 	
    # EXIT NODE # MethodDeclVoid at 10.17   
    # ENTER NODE # MethodDeclNonVoid at 18.16	  
    .globl fcn_103_funnySum # MethodDeclNonVoid at 18.16 	 
228:    fcn_103_funnySum: # MethodDeclNonVoid at 18.16		
228#    subu $sp, $sp, 8 # MethodDeclNonVoid at 18.16 	 
232#    sw $ra, 4($sp) # MethodDeclNonVoid at 18.16 	 
236#    sw $s2, ($sp) # MethodDeclNonVoid at 18.16	
240#    lw $s2, 32($sp) # MethodDeclNonVoid at 18.16 
      # ENTER NODE # LocalVarDecl at 19.6			
        # ENTER NODE # IntegerLiteral at 19.15 		
244#        subu $sp, $sp, 8 # IntegerLiteral at 19.15	
248#        sw $s5, 4($sp) # IntegerLiteral at 19.15	  
252#        li $t0, 227 # IntegerLiteral at 19.15	  
256#        sw $t0, ($sp) # IntegerLiteral at 19.15 		
        # EXIT NODE # IntegerLiteral at 19.15	 	
      # EXIT NODE # LocalVarDecl at 19.6 
      # ENTER NODE # Block at 20.2 		
        # ENTER NODE # LocalVarDecl at 20.11	 	
          # ENTER NODE # IntegerLiteral at 20.15 	 
260#          subu $sp, $sp, 8 # IntegerLiteral at 20.15  	
264#          sw $s5, 4($sp) # IntegerLiteral at 20.15 
268#          li $t0, 0 # IntegerLiteral at 20.15  	
272#          sw $t0, ($sp) # IntegerLiteral at 20.15 	 
          # EXIT NODE # IntegerLiteral at 20.15	  
        # EXIT NODE # LocalVarDecl at 20.11 	
        # ENTER NODE # While at 20.2 		
276#        j while_enter_100 # While at 20.2	 
280:        while_top_100: # While at 20.2 	 
          # ENTER NODE # Block at 20.2   
            # ENTER NODE # Block at 20.25	 	
              # ENTER NODE # LocalVarDecl at 21.10	
                # ENTER NODE # Plus at 21.20 		
                  # ENTER NODE # Plus at 21.16  
                    # ENTER NODE # IdentifierExp at 21.14 	 
280#                    lw $t0, 40($sp) # IdentifierExp at 21.14 		
284#                    subu $sp, $sp, 8 # IdentifierExp at 21.14		
288#                    sw $s5, 4($sp) # IdentifierExp at 21.14		
292#                    sw $t0, ($sp) # IdentifierExp at 21.14 		
                    # EXIT NODE # IdentifierExp at 21.14		 
                    # ENTER NODE # IdentifierExp at 21.18 		
296#                    lw $t0, 40($sp) # IdentifierExp at 21.18		
300#                    subu $sp, $sp, 8 # IdentifierExp at 21.18 		
304#                    sw $s5, 4($sp) # IdentifierExp at 21.18 	
308#                    sw $t0, ($sp) # IdentifierExp at 21.18  	
                    # EXIT NODE # IdentifierExp at 21.18	  
312#                  lw $t0, ($sp) # Plus at 21.16		 
316#                  lw $t1, 8($sp) # Plus at 21.16 
320#                  addu $t0, $t0, $t1 # Plus at 21.16  	
324#                  addu $sp, $sp, 8 # Plus at 21.16  	
328#                  sw $t0, ($sp) # Plus at 21.16	 
                  # EXIT NODE # Plus at 21.16  	
                  # ENTER NODE # IdentifierExp at 21.22	  
332#                  lw $t0, 8($sp) # IdentifierExp at 21.22  
336#                  subu $sp, $sp, 8 # IdentifierExp at 21.22  	
340#                  sw $s5, 4($sp) # IdentifierExp at 21.22  	
344#                  sw $t0, ($sp) # IdentifierExp at 21.22	
                  # EXIT NODE # IdentifierExp at 21.22 		
348#                lw $t0, ($sp) # Plus at 21.20	 
352#                lw $t1, 8($sp) # Plus at 21.20   
356#                addu $t0, $t0, $t1 # Plus at 21.20	 	
360#                addu $sp, $sp, 8 # Plus at 21.20	  
364#                sw $t0, ($sp) # Plus at 21.20		
                # EXIT NODE # Plus at 21.20	 	
              # EXIT NODE # LocalVarDecl at 21.10	  
              # ENTER NODE # If at 22.6   
                # ENTER NODE # GreaterThan at 22.12	  
                  # ENTER NODE # IdentifierExp at 22.10	 
368#                  lw $t0, 0($sp) # IdentifierExp at 22.10		 
372#                  subu $sp, $sp, 8 # IdentifierExp at 22.10	 
376#                  sw $s5, 4($sp) # IdentifierExp at 22.10 	
380#                  sw $t0, ($sp) # IdentifierExp at 22.10	 
                  # EXIT NODE # IdentifierExp at 22.10 	
                  # ENTER NODE # IntegerLiteral at 22.14 		
384#                  subu $sp, $sp, 8 # IntegerLiteral at 22.14	 
388#                  sw $s5, 4($sp) # IntegerLiteral at 22.14		 
392#                  li $t0, 0 # IntegerLiteral at 22.14	 
396#                  sw $t0, ($sp) # IntegerLiteral at 22.14			
                  # EXIT NODE # IntegerLiteral at 22.14	 
400#                lw $t0, ($sp) # GreaterThan at 22.12	 	
404#                lw $t1, 8($sp) # GreaterThan at 22.12	  
408#                sgt $t0, $t1, $t0 # GreaterThan at 22.12   
412#                addu $sp, $sp, 12 # GreaterThan at 22.12		 
416#                sw $t0, ($sp) # GreaterThan at 22.12			
                # EXIT NODE # GreaterThan at 22.12 
420#              lw $t0, ($sp) # If at 22.6  	
424#              addu $sp, $sp, 4 # If at 22.6 		
428#              beq $t0, $zero, if_else_96 # If at 22.6 
                # ENTER NODE # Block at 22.17   
                  # ENTER NODE # LocalVarDecl at 23.7	 
                    # ENTER NODE # Plus at 23.17		
                      # ENTER NODE # Minus at 23.13 	
                        # ENTER NODE # IdentifierExp at 23.11   
432#                        lw $t0, 40($sp) # IdentifierExp at 23.11	 	
436#                        subu $sp, $sp, 8 # IdentifierExp at 23.11	
440#                        sw $s5, 4($sp) # IdentifierExp at 23.11			
444#                        sw $t0, ($sp) # IdentifierExp at 23.11		 
                        # EXIT NODE # IdentifierExp at 23.11	  
                        # ENTER NODE # IdentifierExp at 23.15	 	
448#                        lw $t0, 40($sp) # IdentifierExp at 23.15  	
452#                        subu $sp, $sp, 8 # IdentifierExp at 23.15	 	
456#                        sw $s5, 4($sp) # IdentifierExp at 23.15	
460#                        sw $t0, ($sp) # IdentifierExp at 23.15	  
                        # EXIT NODE # IdentifierExp at 23.15		
464#                      lw $t0, ($sp) # Minus at 23.13 	
468#                      lw $t1, 8($sp) # Minus at 23.13		 
472#                      subu $t0, $t1, $t0 # Minus at 23.13	 	
476#                      addu $sp, $sp, 8 # Minus at 23.13 	
480#                      sw $t0, ($sp) # Minus at 23.13 
                        # ENTER NODE # Minus at 23.13 	 
                          # ENTER NODE # IdentifierExp at 23.19 		
484#                          lw $t0, 16($sp) # IdentifierExp at 23.19			
488#                          subu $sp, $sp, 8 # IdentifierExp at 23.19			
492#                          sw $s5, 4($sp) # IdentifierExp at 23.19			
496#                          sw $t0, ($sp) # IdentifierExp at 23.19 	 
                          # EXIT NODE # IdentifierExp at 23.19 
500#                        lw $t0, ($sp) # Plus at 23.17		
504#                        lw $t1, 8($sp) # Plus at 23.17	
508#                        addu $t0, $t0, $t1 # Plus at 23.17 	
512#                        addu $sp, $sp, 8 # Plus at 23.17 	
516#                        sw $t0, ($sp) # Plus at 23.17		
                        # EXIT NODE # Plus at 23.17	  
                      # EXIT NODE # LocalVarDecl at 23.7		 
                      # ENTER NODE # If at 24.3 		
                        # ENTER NODE # GreaterThan at 24.9 	 
                          # ENTER NODE # IdentifierExp at 24.7 	 
520#                          lw $t0, 0($sp) # IdentifierExp at 24.7		
524#                          subu $sp, $sp, 8 # IdentifierExp at 24.7	
528#                          sw $s5, 4($sp) # IdentifierExp at 24.7 		
532#                          sw $t0, ($sp) # IdentifierExp at 24.7  
                          # EXIT NODE # IdentifierExp at 24.7 
                          # ENTER NODE # IntegerLiteral at 24.11 		
536#                          subu $sp, $sp, 8 # IntegerLiteral at 24.11		
540#                          sw $s5, 4($sp) # IntegerLiteral at 24.11   
544#                          li $t0, 0 # IntegerLiteral at 24.11  
548#                          sw $t0, ($sp) # IntegerLiteral at 24.11  
                          # EXIT NODE # IntegerLiteral at 24.11 		
552#                        lw $t0, ($sp) # GreaterThan at 24.9 	 
556#                        lw $t1, 8($sp) # GreaterThan at 24.9 		
560#                        sgt $t0, $t1, $t0 # GreaterThan at 24.9		 
564#                        addu $sp, $sp, 12 # GreaterThan at 24.9   
568#                        sw $t0, ($sp) # GreaterThan at 24.9  	
                        # EXIT NODE # GreaterThan at 24.9 	
572#                      lw $t0, ($sp) # If at 24.3 		
576#                      addu $sp, $sp, 4 # If at 24.3	  
580#                      beq $t0, $zero, if_else_93 # If at 24.3			
                        # ENTER NODE # Block at 24.14	 	
                          # ENTER NODE # LocalVarDecl at 25.11 		
                            # ENTER NODE # Plus at 25.21		 
                              # ENTER NODE # Minus at 25.17  
                                # ENTER NODE # IdentifierExp at 25.15 	 
584#                                lw $t0, 40($sp) # IdentifierExp at 25.15 		
588#                                subu $sp, $sp, 8 # IdentifierExp at 25.15  
592#                                sw $s5, 4($sp) # IdentifierExp at 25.15 	
596#                                sw $t0, ($sp) # IdentifierExp at 25.15  	
                                # EXIT NODE # IdentifierExp at 25.15   
                                # ENTER NODE # IdentifierExp at 25.19	 	
600#                                lw $t0, 64($sp) # IdentifierExp at 25.19  
604#                                subu $sp, $sp, 8 # IdentifierExp at 25.19		
608#                                sw $s5, 4($sp) # IdentifierExp at 25.19	  
612#                                sw $t0, ($sp) # IdentifierExp at 25.19   
                                # EXIT NODE # IdentifierExp at 25.19   
616#                              lw $t0, ($sp) # Minus at 25.17 	
620#                              lw $t1, 8($sp) # Minus at 25.17		
624#                              subu $t0, $t1, $t0 # Minus at 25.17  
628#                              addu $sp, $sp, 8 # Minus at 25.17   
632#                              sw $t0, ($sp) # Minus at 25.17  
                                # ENTER NODE # Minus at 25.17   
                                  # ENTER NODE # IdentifierExp at 25.23			
636#                                  lw $t0, 24($sp) # IdentifierExp at 25.23 	 
640#                                  subu $sp, $sp, 8 # IdentifierExp at 25.23	 
644#                                  sw $s5, 4($sp) # IdentifierExp at 25.23 
648#                                  sw $t0, ($sp) # IdentifierExp at 25.23  	
                                  # EXIT NODE # IdentifierExp at 25.23	 	
652#                                lw $t0, ($sp) # Plus at 25.21		 
656#                                lw $t1, 8($sp) # Plus at 25.21		
660#                                addu $t0, $t0, $t1 # Plus at 25.21 	
664#                                addu $sp, $sp, 8 # Plus at 25.21		
668#                                sw $t0, ($sp) # Plus at 25.21 	 
                                # EXIT NODE # Plus at 25.21 	
                              # EXIT NODE # LocalVarDecl at 25.11	 
                              # ENTER NODE # LocalVarDecl at 26.11	
                                # ENTER NODE # Plus at 26.22 	 
                                  # ENTER NODE # Plus at 26.18 	
                                    # ENTER NODE # IdentifierExp at 26.16  
672#                                    lw $t0, 48($sp) # IdentifierExp at 26.16 
676#                                    subu $sp, $sp, 8 # IdentifierExp at 26.16  
680#                                    sw $s5, 4($sp) # IdentifierExp at 26.16			
684#                                    sw $t0, ($sp) # IdentifierExp at 26.16  	
                                    # EXIT NODE # IdentifierExp at 26.16	 
                                    # ENTER NODE # IdentifierExp at 26.20	 	
688#                                    lw $t0, 72($sp) # IdentifierExp at 26.20	
692#                                    subu $sp, $sp, 8 # IdentifierExp at 26.20 
696#                                    sw $s5, 4($sp) # IdentifierExp at 26.20 
700#                                    sw $t0, ($sp) # IdentifierExp at 26.20 	 
                                    # EXIT NODE # IdentifierExp at 26.20  	
704#                                  lw $t0, ($sp) # Plus at 26.18   
708#                                  lw $t1, 8($sp) # Plus at 26.18	 	
712#                                  addu $t0, $t0, $t1 # Plus at 26.18 		
716#                                  addu $sp, $sp, 8 # Plus at 26.18 	 
720#                                  sw $t0, ($sp) # Plus at 26.18 		
                                  # EXIT NODE # Plus at 26.18 		
                                  # ENTER NODE # Times at 26.26	 	
                                    # ENTER NODE # IntegerLiteral at 26.24	  
724#                                    subu $sp, $sp, 8 # IntegerLiteral at 26.24	 	
728#                                    sw $s5, 4($sp) # IntegerLiteral at 26.24	 	
732#                                    li $t0, 10 # IntegerLiteral at 26.24  
736#                                    sw $t0, ($sp) # IntegerLiteral at 26.24   
                                    # EXIT NODE # IntegerLiteral at 26.24 
                                    # ENTER NODE # IdentifierExp at 26.27	 	
740#                                    lw $t0, 40($sp) # IdentifierExp at 26.27		
744#                                    subu $sp, $sp, 8 # IdentifierExp at 26.27		 
748#                                    sw $s5, 4($sp) # IdentifierExp at 26.27 	 
752#                                    sw $t0, ($sp) # IdentifierExp at 26.27  	
                                    # EXIT NODE # IdentifierExp at 26.27	
756#                                  lw $t0, ($sp) # Times at 26.26		 
760#                                  lw $t1, 8($sp) # Times at 26.26  	
764#                                  mult $t0, $t1 # Times at 26.26	
768#                                  mflo $t0 # Times at 26.26   
772#                                  addu $sp, $sp, 8 # Times at 26.26			
776#                                  sw $t0, ($sp) # Times at 26.26	 
                                  # EXIT NODE # Times at 26.26	  
780#                                lw $t0, ($sp) # Plus at 26.22 
784#                                lw $t1, 8($sp) # Plus at 26.22 		
788#                                addu $t0, $t0, $t1 # Plus at 26.22   
792#                                addu $sp, $sp, 8 # Plus at 26.22		
796#                                sw $t0, ($sp) # Plus at 26.22 		
                                # EXIT NODE # Plus at 26.22   
                              # EXIT NODE # LocalVarDecl at 26.11		 
                              # ENTER NODE # If at 27.7	 	
                                # ENTER NODE # GreaterThan at 27.14 
                                  # ENTER NODE # IdentifierExp at 27.11	  
800#                                  lw $t0, 0($sp) # IdentifierExp at 27.11	
804#                                  subu $sp, $sp, 8 # IdentifierExp at 27.11	
808#                                  sw $s5, 4($sp) # IdentifierExp at 27.11			
812#                                  sw $t0, ($sp) # IdentifierExp at 27.11  	
                                  # EXIT NODE # IdentifierExp at 27.11 		
                                  # ENTER NODE # IntegerLiteral at 27.16  
816#                                  subu $sp, $sp, 8 # IntegerLiteral at 27.16  	
820#                                  sw $s5, 4($sp) # IntegerLiteral at 27.16		 
824#                                  li $t0, 0 # IntegerLiteral at 27.16	 
828#                                  sw $t0, ($sp) # IntegerLiteral at 27.16	 	
                                  # EXIT NODE # IntegerLiteral at 27.16	  
832#                                lw $t0, ($sp) # GreaterThan at 27.14	  
836#                                lw $t1, 8($sp) # GreaterThan at 27.14 	 
840#                                sgt $t0, $t1, $t0 # GreaterThan at 27.14 	 
844#                                addu $sp, $sp, 12 # GreaterThan at 27.14 
848#                                sw $t0, ($sp) # GreaterThan at 27.14	 
                                # EXIT NODE # GreaterThan at 27.14 	
852#                              lw $t0, ($sp) # If at 27.7 	 
856#                              addu $sp, $sp, 4 # If at 27.7   
860#                              beq $t0, $zero, if_else_90 # If at 27.7		 
                                # ENTER NODE # Block at 27.19	 
                                  # ENTER NODE # Assign at 31.11 	
                                    # ENTER NODE # Plus at 31.28  
                                      # ENTER NODE # Plus at 31.24  	
                                        # ENTER NODE # Plus at 31.20 		
                                          # ENTER NODE # IdentifierExp at 31.13		 
864#                                          lw $t0, 40($sp) # IdentifierExp at 31.13  
868#                                          subu $sp, $sp, 8 # IdentifierExp at 31.13		
872#                                          sw $s5, 4($sp) # IdentifierExp at 31.13 	
876#                                          sw $t0, ($sp) # IdentifierExp at 31.13   
                                          # EXIT NODE # IdentifierExp at 31.13 	 
                                          # ENTER NODE # IdentifierExp at 31.22 
880#                                          lw $t0, 32($sp) # IdentifierExp at 31.22		
884#                                          subu $sp, $sp, 8 # IdentifierExp at 31.22		 
888#                                          sw $s5, 4($sp) # IdentifierExp at 31.22	 
892#                                          sw $t0, ($sp) # IdentifierExp at 31.22		 
                                          # EXIT NODE # IdentifierExp at 31.22  
896#                                        lw $t0, ($sp) # Plus at 31.20	
900#                                        lw $t1, 8($sp) # Plus at 31.20 	 
904#                                        addu $t0, $t0, $t1 # Plus at 31.20 		
908#                                        addu $sp, $sp, 8 # Plus at 31.20	 
912#                                        sw $t0, ($sp) # Plus at 31.20		 
                                        # EXIT NODE # Plus at 31.20 	
                                        # ENTER NODE # IdentifierExp at 31.26 		
916#                                        lw $t0, 24($sp) # IdentifierExp at 31.26		 
920#                                        subu $sp, $sp, 8 # IdentifierExp at 31.26 	
924#                                        sw $s5, 4($sp) # IdentifierExp at 31.26  	
928#                                        sw $t0, ($sp) # IdentifierExp at 31.26 	
                                        # EXIT NODE # IdentifierExp at 31.26	 	
932#                                      lw $t0, ($sp) # Plus at 31.24 	 
936#                                      lw $t1, 8($sp) # Plus at 31.24	 
940#                                      addu $t0, $t0, $t1 # Plus at 31.24  
944#                                      addu $sp, $sp, 8 # Plus at 31.24	
948#                                      sw $t0, ($sp) # Plus at 31.24  
                                      # EXIT NODE # Plus at 31.24			
                                      # ENTER NODE # IdentifierExp at 31.30		
952#                                      lw $t0, 16($sp) # IdentifierExp at 31.30	 
956#                                      subu $sp, $sp, 8 # IdentifierExp at 31.30 	 
960#                                      sw $s5, 4($sp) # IdentifierExp at 31.30 	
964#                                      sw $t0, ($sp) # IdentifierExp at 31.30		
                                      # EXIT NODE # IdentifierExp at 31.30		 
968#                                    lw $t0, ($sp) # Plus at 31.28	 	
972#                                    lw $t1, 8($sp) # Plus at 31.28  	
976#                                    addu $t0, $t0, $t1 # Plus at 31.28 		
980#                                    addu $sp, $sp, 8 # Plus at 31.28	 	
984#                                    sw $t0, ($sp) # Plus at 31.28	  
                                    # EXIT NODE # Plus at 31.28 
988#                                  lw $t0, ($sp) # Assign at 31.11			
992#                                  sw $t0, 48($sp) # Assign at 31.11		 
996#                                  addu $sp, $sp, 8 # Assign at 31.11	 
                                  # EXIT NODE # Assign at 31.11	  
                                  # ENTER NODE # ExpStatement at 32.4  	
                                    # ENTER NODE # Call at 32.4 		
                                      # ENTER NODE # This at 32.4	 
1000#                                      subu $sp, $sp, 4 # This at 32.4 
1004#                                      sw $s2, ($sp) # This at 32.4			
                                      # EXIT NODE # This at 32.4		
                                      # ENTER NODE # IdentifierExp at 32.13  	
1008#                                      lw $t0, 36($sp) # IdentifierExp at 32.13   
1012#                                      subu $sp, $sp, 8 # IdentifierExp at 32.13	
1016#                                      sw $s5, 4($sp) # IdentifierExp at 32.13		
1020#                                      sw $t0, ($sp) # IdentifierExp at 32.13	  
                                      # EXIT NODE # IdentifierExp at 32.13 		
1024#                                    lw $t0, 8($sp) # Call at 32.4 	
1028#                                    beq $t0, $zero, nullPtrException # Call at 32.4	  
1032#                                    lw $t0, -12($t0) # Call at 32.4  
1036#                                    lw $t0, 24($t0) # Call at 32.4 
1040#                                    jalr $t0 # Call at 32.4 	 
                                    # EXIT NODE # Call at 32.4	
                                  # EXIT NODE # ExpStatement at 32.4   
                                  # ENTER NODE # ExpStatement at 33.4	  
                                    # ENTER NODE # Call at 33.4			
                                      # ENTER NODE # This at 33.4  	
1044#                                      subu $sp, $sp, 4 # This at 33.4 	
1048#                                      sw $s2, ($sp) # This at 33.4	 	
                                      # EXIT NODE # This at 33.4	 
                                      # ENTER NODE # StringLiteral at 33.13  	
1052#                                      subu $sp, $sp, 4 # StringLiteral at 33.13	  
1056#                                      la $t0, strLit_83 # StringLiteral at 33.13		 
1060#                                      sw $t0, ($sp) # StringLiteral at 33.13			
                                      # EXIT NODE # StringLiteral at 33.13		
1064#                                    lw $t0, 4($sp) # Call at 33.4 	 
1068#                                    beq $t0, $zero, nullPtrException # Call at 33.4	 
1072#                                    lw $t0, -12($t0) # Call at 33.4 
1076#                                    lw $t0, 16($t0) # Call at 33.4  	
1080#                                    jalr $t0 # Call at 33.4  	
                                    # EXIT NODE # Call at 33.4 
                                  # EXIT NODE # ExpStatement at 33.4 		
                                  # ENTER NODE # Break at 34.4		
1084#                                  addu $sp, 32 # Break at 34.4 
1088#                                  j while_exit_100 # Break at 34.4  
                                  # EXIT NODE # Break at 34.4	 
                                # EXIT NODE # Block at 27.19 		
1092#                              j if_done_90 # If at 27.7	 
1096:                              if_else_90: # If at 27.7 		
                                # ENTER NODE # Block at 36.3	 	
                                # EXIT NODE # Block at 36.3  
1096:                              if_done_90: # If at 27.7   
                              # EXIT NODE # If at 27.7 	
1096#                            addu $sp, 16 # Block at 24.14 		
                            # EXIT NODE # Block at 24.14		
1100#                          j if_done_93 # If at 24.3   
1104:                          if_else_93: # If at 24.3	
                            # ENTER NODE # Block at 37.6	  
                            # EXIT NODE # Block at 37.6 	 
1104:                          if_done_93: # If at 24.3	 	
                          # EXIT NODE # If at 24.3	  
1104#                        addu $sp, 8 # Block at 22.17  	
                        # EXIT NODE # Block at 22.17	 	
1108#                      j if_done_96 # If at 22.6			
1112:                      if_else_96: # If at 22.6		
                        # ENTER NODE # Block at 38.2 		
                        # EXIT NODE # Block at 38.2 
1112:                      if_done_96: # If at 22.6	
                      # EXIT NODE # If at 22.6 	
1112#                    addu $sp, 8 # Block at 20.25			
                    # EXIT NODE # Block at 20.25  
                    # ENTER NODE # Assign at 20.20 		
                      # ENTER NODE # Plus at 20.21	
                        # ENTER NODE # IdentifierExp at 20.20 		
1116#                        lw $t0, 0($sp) # IdentifierExp at 20.20		 
1120#                        subu $sp, $sp, 8 # IdentifierExp at 20.20  	
1124#                        sw $s5, 4($sp) # IdentifierExp at 20.20 	
1128#                        sw $t0, ($sp) # IdentifierExp at 20.20		
                        # EXIT NODE # IdentifierExp at 20.20	 
                        # ENTER NODE # IntegerLiteral at 20.21		 
1132#                        subu $sp, $sp, 8 # IntegerLiteral at 20.21	 	
1136#                        sw $s5, 4($sp) # IntegerLiteral at 20.21			
1140#                        li $t0, 1 # IntegerLiteral at 20.21	  
1144#                        sw $t0, ($sp) # IntegerLiteral at 20.21 	 
                        # EXIT NODE # IntegerLiteral at 20.21		 
1148#                      lw $t0, ($sp) # Plus at 20.21		
1152#                      lw $t1, 8($sp) # Plus at 20.21  	
1156#                      addu $t0, $t0, $t1 # Plus at 20.21			
1160#                      addu $sp, $sp, 8 # Plus at 20.21		 
1164#                      sw $t0, ($sp) # Plus at 20.21 		
                      # EXIT NODE # Plus at 20.21		
1168#                    lw $t0, ($sp) # Assign at 20.20	 	
1172#                    sw $t0, 8($sp) # Assign at 20.20	 
1176#                    addu $sp, $sp, 8 # Assign at 20.20	
                    # EXIT NODE # Assign at 20.20 		
                  # EXIT NODE # Block at 20.2		
1180:                while_enter_100: # While at 20.2 	 
                  # ENTER NODE # True at 20.18		
1180#                  subu $sp, $sp, 4 # True at 20.18  	
1184#                  li $t0, 1 # True at 20.18 		
1188#                  sw $t0, ($sp) # True at 20.18	
                  # EXIT NODE # True at 20.18  	
1192#                lw $t0, ($sp) # While at 20.2  
1196#                addu $sp, $sp, 4 # While at 20.2  	
1200#                bne $t0, $zero, while_top_100 # While at 20.2	  
1204:                while_exit_100: # While at 20.2 		
                # EXIT NODE # While at 20.2		 
1204#              addu $sp, 8 # Block at 20.2 	
              # EXIT NODE # Block at 20.2			
              # ENTER NODE # IdentifierExp at 39.9		
1208#              lw $t0, 0($sp) # IdentifierExp at 39.9			
1212#              subu $sp, $sp, 8 # IdentifierExp at 39.9  	
1216#              sw $s5, 4($sp) # IdentifierExp at 39.9	 	
1220#              sw $t0, ($sp) # IdentifierExp at 39.9   
              # EXIT NODE # IdentifierExp at 39.9		 
1224#            lw $ra, 20($sp) # MethodDeclNonVoid at 18.16  	
1228#            lw $s2, 16($sp) # MethodDeclNonVoid at 18.16	
1232#            lw $t0, ($sp) # MethodDeclNonVoid at 18.16 	
1236#            sw $t0, 44($sp) # MethodDeclNonVoid at 18.16 	
1240#            sw $s5, 48($sp) # MethodDeclNonVoid at 18.16	  
1244#            addu $sp, $sp, 44 # MethodDeclNonVoid at 18.16  	
1248#            jr $ra # MethodDeclNonVoid at 18.16	 	
              # ENTER NODE # MethodDeclNonVoid at 18.16		 
              # EXIT NODE # Program at 7.1 	
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1252:readLine:
	
1252#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1256#	sw $ra, 4($sp) # save $ra
1260#	move $t1,$sp # save "original" sp

1264:  doRead:

	# read the character
1264#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1268#	subu $t2,$v0,13
1272#	bne $t2,$zero,notReturnRL
1276#	jal readLogicalChar
1280#	subu $t2,$v0,10 # check for newline
1284#	beq $t2,$zero,foundNewLine
1288#	sw $v0,lastCharRead # push back character into queue
1292#	j foundNewLine # go process the line

1296:  notReturnRL:

	# at this point, $v0 has our character

1296#	subu $t0,$v0,10
1300#	beq $t0,$zero,foundNewLine
1304#	blt $v0,$zero,foundEof
1305##...slt $at,$v0,$zero
1309##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1312#	subu $sp,$sp,4
1316#	sw $v0,($sp)

	# loop back up to get next character
1320#	j doRead

1324:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1324#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1328#	sw $zero,8($sp) # return-value: null
1332#	j rlReturn # return

1336:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1336#	subu $t0,$t1,$sp # number of chars we read (times 4)
1340#	srl $s6,$t0,2 # number of words on stack with chars
1344#	subu $sp,$sp,4 # push char-count ...
1348#	sw $s6,($sp) # ... onto stack
1352#	addu $t2,$t0,5 # GC tag, incl. for count-word
1356#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1360#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1364#	srl $s6,$s6,2 # data words in object
1368#	move $s7,$zero # # object words in object
1372#	jal newObject # allocate space
	
	# store header words
1376#	la $t0,CLASS_String
1380#	sw $t0,-12($s7) # store class tag (String) into object
1384#	lw $t2,4($sp) # char-count
1388#	sll $t1,$t2,2 # 4 times number of chars
1392#	subu $t2,$zero,$t2 # negative of char-count
1396#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1400#	lw $t0,-8($s7) # data words in object
1404#	sll $t0,$t0,2 # data bytes in object
1408#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1412#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1416#	addu $sp,$sp,8 # pop redundant object-pointer and count
1420#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1424#	beq $sp,$t1,doneCharCopy
1428:  charCopyLoop:
1428#	lw $t2,($sp)
1432#	sb $t2,-9($t0)
1436#	addu $sp,$sp,4
1440#	subu $t0,$t0,1
1444#	bne $sp,$t1,charCopyLoop
1448:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1448#	sw $s7,8($sp)
	
1452:  rlReturn:
	# restore return address and return
1452#	lw $ra,4($sp) # restore return address, ...
1456#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1460#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1464:readInt:

	# save $ra by pushing onto stack
1464#	subu $sp,$sp,4
1468#	sw $ra,($sp)

1472:  riSkipWhiteLoop:
	# read a character
1472#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1476#	subu $t0,$v0,32
1480#	bgt $t0,$zero,nonWhite
1481##...slt $at,$zero,$t0
1485##...bne $at,$zero,$+44
1488#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1492#	subu $t0,$v0,10
1496#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1500#	subu $t0,$v0,9
1504#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1508#	subu $t0,$v0,13
1512#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1516#	subu $t0,$v0,12
1520#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1524#	j badIntegerFormat # illegal integer char: abort program

1528:  nonWhite:
1528#	subu $t0,$v0,'-'
1532#	li $t4,1 # final multiplier
1536#	bne $t0,$zero,helpReadInt # go read
1540#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1544#	jal readLogicalChar

1548:  helpReadInt:
1548#	li $t2,10
1552#	subu $t1,$v0,'0' # convert digit to 0-9 value
1556#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1557##...sltu $at,$t1,$t2
1561##...beq $at,$zero,$+2080
1564#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1568:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1568#	jal readLogicalChar # read next character
1572#	subu $t1,$v0,'0' # convert digit to 0-9 value
1576#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1577##...sltu $at,$t1,$t2
1581##...beq $at,$zero,$+20

1584#	mul $t3,$t3,$t2 # multiply old value by 10
1585##...mult $t3,$t2
1589##...mflo $t3
1592#	addu $t3,$t3,$t1 # add in value of new digit
1596#	j digitLoop

1600:  doneDigitLoop:

	# "push back" unused character into queue
1600#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1604#	lw $ra,($sp)
1608#	mult $t3,$t4 # multiply to account for poss. minus sign
1612#	mflo $t3
1616#	sw $t3,($sp) # result
1620#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1624#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1628:readChar:

	# save $ra by pushing onto stack
1628#	subu $sp,$sp,4
1632#	sw $ra,($sp)

  	# read the character
1636#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1640#	lw $ra,($sp)
1644#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1648#	sw $v0,($sp)

	# return
1652#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1656:printStr:
	# check for null, printing "(null)", if so
1656#	lw $t0,($sp)
1660#	bne $t0,$zero,psNotNull

	# print "(null)"
1664#	la $a0,nullStr
1668#	li $v0,4
1672#	syscall
1676#	j donePrintStr
	
1680:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1680#	subu $t0,$t0,8
1684#	lw $t1,($t0) # word just beyond end of string
1688#	sll $t1,$t1,2
1692#	subu $t1,$t0,$t1 # first word in string
1696#	lw $t0,4($t0) # negative of string-length
1700#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1704#	beq $t0,$t1,donePrintStr
1708:  psLoop:
1708#	lb $a0,($t1) # next byte
1712#	li $v0,11 # code for printing char
1716#        syscall # print the char
1720#	addu $t1,$t1,1 # go to next char
1724#	blt $t1,$t0,psLoop
1725##...slt $at,$t1,$t0
1729##...bne $at,$zero,$-20

1732:  donePrintStr:
	# pop stack and return
1732#	addu $sp,$sp,8
1736#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1740:printInt:
	# pop value off stack, along with 'this'
1740#	lw $a0,($sp)
1744#	addu $sp,$sp,12

	# print it
1748#	li $v0,1 # code for print-int
1752#	syscall

	# return
1756#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1760:printBool:
	# pop value off stack, along with 'this'
1760#	lw $t0,($sp)
1764#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1768#	la $a0,falseString
1772#	beq $t0,$zero,skipPB
1776#	la $a0,trueString
1780:  skipPB:
1780#	li $v0,4 # code for print-string
1784#	syscall

	# return
1788#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1792:substring:

	# save $ra by pushing onto stack
1792#	subu $sp,$sp,4
1796#	sw $ra,($sp)

	# get string value off stack, test for null
1800#	lw $t0,20($sp)
1804#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1808#	lw $t0,-4($t0) # negative of string length
1812#	subu $t0,$zero,$t0 # string length
1816#	lw $t1,4($sp) # k
1820#	lw $t2,12($sp) # n
1824#	bgt $zero,$t2,strIndexOutOfBounds
1825##...slt $at,$t2,$zero
1829##...bne $at,$zero,$+1780
1832#	bgt $t2,$t1,strIndexOutOfBounds
1833##...slt $at,$t1,$t2
1837##...bne $at,$zero,$+1772
1840#	bgt $t1,$t0,strIndexOutOfBounds
1841##...slt $at,$t0,$t1
1845##...bne $at,$zero,$+1764

	# allocate memory
1848#	subu $s6,$t1,$t2 # # chars in target-string
1852#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1856#	srl $s6,$s6,2 # convert bytes-count to word-count
1860#	move $s7,$zero # (no object-bytes in string)
1864#	jal newObject

	# store "String" tag in object-type field
1868#	la $t0,CLASS_String
1872#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1876#	lw $t1,8($sp) # k
1880#	lw $t2,16($sp) # n
1884#	subu $t0,$t2,$t1 # value to store
1888#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1892#	lw $t3,24($sp) # source string pointer
1896#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
1900#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
1904#	lw $t4,-8($t3) # # data words in source string
1908#	sll $t4,$t4,2 # # data bytes in source string
1912#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1916#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1920#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1924#	lw $t2,-8($s7) # # data words in target string
1928#	sll $t2,$t2,2 # # data bytes in target string
1932#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
1936:  subCopyLoopzz:
1936#	lb $t4,-8($t3)
1940#	sb $t4,-8($t2)
1944#	addu $t2,$t2,1
1948#	addu $t3,$t3,1
1952#	blt $t3,$t1,subCopyLoopzz
1953##...slt $at,$t3,$t1
1957##...bne $at,$zero,$-20
	
1960:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1960#	lw $ra,4($sp) # restore $ra
1964#	addu $sp,$sp,24 # pop stack
	
	# return
1968#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1972:length:

	# get string pointer
1972#	lw $t0,($sp)
	
	# grow stack
1976#	subu $sp,$sp,4

	# store GC tag
1980#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1984#	lw $t0,-4($t0) # -length
1988#	subu $t0,$zero,$t0
1992#	sw $t0,($sp) #store length

	# return
1996#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2000:concat:
 	# save $ra by pushing onto stack
2000#	subu $sp,$sp,4
2004#	sw $ra($sp)

	# get string pointers and check parameter for null
2008#	lw $t0,4($sp)
2012#	beq $t0,$zero,nullPtrException
2016#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2020#	lw $t0,-4($t0) # negative size of second object
2024#	lw $t1,-4($t1) # negative size of first object
2028#	addu $s6,$t0,$t1 # sum of negative sizes
2032#	sra $s6,$s6,2 # negative word-size of char part
2036#	subu $s6,$zero,$s6 # word size of char part
2040#	addu $s6,$s6,1 # data word size, including v-table word
2044#	move $s7,$zero
2048#	jal newObject

	# store "String" tag in object-type field
2052#	la $t0,CLASS_String
2056#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2060#	lw $ra,4($sp) # return address
2064#	lw $t0,8($sp) # second object
2068#	lw $t1,12($sp) # first object
2072#	addu $sp,$sp,12 # pop
2076#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2080#	lw $t2,-4($t0) # negative length of second object
2084#	lw $t3,-4($t1) # negative length of first object
2088#	addu $t4,$t2,$t3 # sum of negative lengths
2092#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2096#	lw $t4,-8($t1) # # data words in first string
2100#	sll $t4,$t4,2 # # data bytes in first string
2104#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2108#	lw $t4,-8($s7) # # data words in new string
2112#	sll $t4,$t4,2 # # data bytes in new string
2116#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2120#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2124#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2128:  concatLoop1zz:
2128#	lb $t4,-8($t1)
2132#	sb $t4,-8($s7)
2136#	addu $s7,$s7,1
2140#	addu $t1,$t1,1
2144#	blt $t1,$t3,concatLoop1zz
2145##...slt $at,$t1,$t3
2149##...bne $at,$zero,$-20
2152:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2152#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2156#	lw $t4,-8($t0) # # data words in second string
2160#	sll $t4,$t4,2 # # data bytes in second string
2164#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2168#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2172:  concatLoop2zz:
2172#	lb $t4,-8($t1)
2176#	sb $t4,-8($s7)
2180#	addu $s7,$s7,1
2184#	addu $t1,$t1,1
2188#	blt $t1,$t3,concatLoop2zz
2189##...slt $at,$t1,$t3
2193##...bne $at,$zero,$-20
2196:  doneConcatLoop2zz:
 
2196:  concatRtnzz:
	# return
2196#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2200:charAt:
	# get string
2200#	lw $t0,8($sp)

	# check that index is in bounds
2204#	lw $t1,-4($t0) # negative of # data words in string
2208#	subu $t3,$zero,$t1 # # chars in string
2212#	lw $t2,($sp) # index
2216#	bgeu $t2,$t3,strIndexOutOfBounds
2217##...sltu $at,$t2,$t3
2221##...beq $at,$zero,$+1388

	# access element
2224#	lw $t1,-8($t0) # # data words in object
2228#	sll $t1,$t1,2 # - byte-offset from end of chars
2232#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2236#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2240#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2244#	addu $sp,$sp,4
2248#	sw $t0,($sp)
2252#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2256#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2260:intToString:

	# save return address on stack; allocate space for dummy GC tag
2260#	subu $sp,$sp,8
2264#	sw $ra,4($sp)

	# save current sp
2268#	move $t0,$sp

	# move constant 10 into $t3
2272#	li $t3,10

	# get argument, negate if negative
2276#	lw $t1,8($sp)
2280#	bge $t1,$zero,itsNonNegLoop
2281##...slt $at,$t1,$zero
2285##...beq $at,$zero,$+8
2288#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2292:  itsNonNegLoop:
2292#	divu $t1,$t3
2296#	mflo $t1 # quotient
2300#	mfhi $t4 # remainder
2304#	addu $t4,$t4,'0' # turn remainder into digit
2308#	subu $sp,$sp,4
2312#	sw $t4,($sp) # push digit onto stack
2316#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2320#	lw $t4,8($t0)
2324#	bge $t4,$zero,itsSkipNeg
2325##...slt $at,$t4,$zero
2329##...beq $at,$zero,$+16
2332#	li $t4,'-'
2336#	subu $sp,$sp,4
2340#	sw $t4,($sp)
2344:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2344#	subu $s6,$t0,$sp
2348#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2352#	sw $t3,($t0)
2356#	srl $s6,$s6,2
2360#	subu $sp,$sp,4
2364#	sw $s6,($sp)
	
	# allocate memory
2368#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2372#	srl $s6,$s6,2
2376#	move $s7,$zero # no "object" words in object
2380#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2384#	lw $t0,4($sp)
2388#	addu $sp,$sp,8

	# store "String" tag into class field
2392#	subu $s7,$s7,8 # address of header-1 word
2396#	la $t1,CLASS_String
2400#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2404#	subu $t0,$zero,$t0
2408#	sw $t0,4($s7)

2412#	lw $t1,($s7) # number of data words in string
2416#	sll $t1,$t1,2 # number data bytes in string
2420#	subu $t1,$s7,$t1 # first location to store chars in string
2424#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2428:  itsLoop:
2428#	lw $t2,($sp)
2432#	addu $sp,$sp,4
2436#	sb $t2,($t1)
2440#	addu $t1,$t1,1
2444#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2448#	lw $ra,4($sp)
2452#	addu $sp,$sp,16
2456#	addu $t0,$t0,15
2460#	and $t0,$t0,0xfffffffc
2461##...lui $at,65535
2465##...ori $at,$at,0xfffc
2469##...and $t0,$t0,$at
2472#	sw $t0,($sp)
2476#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2480:intToChar:
	# save return address
2480#	subu $sp,$sp,4
2484#	sw $ra,($sp)

	# allocate object
2488#	li $s6,2
2492#	move $s7,$zero
2496#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2500#	lw $ra,4($sp)
2504#	lw $t1,8($sp)
2508#	addu $sp,$sp,16

	# store "String" tag into class field
2512#	la $t0,CLASS_String
2516#	sw $t0,-12($s7)

	# store data in string
2520#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2524#	li $t0,-1
2528#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2532#	sw $s7,($sp)

	# return
2536#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2540:compareTo:
	# get string pointers and check parameter for null
2540#	lw $t0,($sp) # second string
2544#	beq $t0,$zero,nullPtrException
2548#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2552#	lw $t2,-4($t0) # negative length of second string
2556#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2560#	slt $t4,$t3,$t2
2564#	slt $t5,$t2,$t3
2568#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2572#	lw $t2,-8($t0) # # data words in second string
2576#	lw $t3,-8($t1) # # data words in first string
2580#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2584#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2588#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2592#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2596#	beq $zero,$t5,skipStrCmpLenzz
2600#	move $t2,$t3
2604:  skipStrCmpLenzz:
2604#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2608:  cmpLoopzz:
2608#	lw $t3,-8($t1) # word from str2
2612#	lw $t4,-8($t0) # word from str1
2616#	bne $t3,$t4,cmpNotEqualzz
2620#	addu $t1,$t1,4
2624#	addu $t0,$t0,4
2628#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2632#	j cmpHitLimitzz

2636:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2636#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2640#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2644#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2648:  cmpHitLimitzz:
2648#	sw $t5,($sp) # store value
2652#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2656#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2660:readLogicalChar:

	# check if we already have a character
2660#	lw $v0,lastCharRead
2664#	li $t0,-2
2668#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2672#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2676#	jr $ra # return
	
2680:  doReadCh:
	# we need to actually read a character: read and return
2680#	li $v0,12 # use system call to read a character
2684#	syscall
2688#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2692:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2692#	blt $s7,$zero arraySizeOutOfBounds
2693##...slt $at,$s7,$zero
2697##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2700#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2704:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2704#	move $t3,$s6
2708#	bge $t3,$zero,newSkip
2709##...slt $at,$t3,$zero
2713##...beq $at,$zero,$+8
2716#	move $t3,$zero

2720:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2720#	addu $t0,$t3,$s7
2724#	sll $t0,$t0,2
2728#	addu $t0,$t0,8 # amount of memory needed
2732#	addu $t1,$t0,$s3
2736#	bgtu $t1,$s4,doGC
2737##...sltu $at,$s4,$t1
2741##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2744#	move $t2,$s3
2748:  zeroObjLoop:
2748#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2752#	addu $s3,4
2756#	bltu $s3,$t1,zeroObjLoop
2757##...sltu $at,$s3,$t1
2761##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2764#	sll $t0,$s7,2    # number of post-header bytes
2768#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2772#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2776#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2780#	move $s7,$t0
2784#	subu $sp,$sp,4
2788#	sw $t0,($sp)

2792#	jr $ra
	
2796:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2796#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2800#	subu $sp,$sp,4
2804#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2808#	lw $t0,cur_seg
2812#	move $t7,$s4
2816#	la $t6,seg1_start
2817##...lui $t6,16
2821##...addiu $t6,$t6,4108
2824#	la $s3,seg0_start
2828#	la $s4,seg0_end
2829##...lui $s4,16
2833##...addiu $s4,$s4,4108
2836#	sw $zero,cur_seg
2840#	bne $t0,$zero,skipGc1
2844#	la $t6,seg0_start
2848#	la $s3,seg1_start
2849##...lui $s3,16
2853##...addiu $s3,$s3,4108
2856#	la $s4,seg1_end
2857##...lui $s4,32
2861##...addiu $s4,$s4,4108
2864#	sw $s5,cur_seg
2868:  skipGc1:
2868#	li $t5,-2
2872#	lw $t0,stack_bottom
2876#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2880:  gcStackCopyLoop:
2880#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2884#	sll $t2,$t1,31 # zero iff low bit was zero
2888#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2892#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2896#	bleu $t1,$t6,gcTestIterDone1
2897##...sltu $at,$t6,$t1
2901##...beq $at,$zero,$+148
2904#	bgtu $t1,$t7,gcTestIterDone1
2905##...sltu $at,$t7,$t1
2909##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2912#	lw $t2,-8($t1) # possible forwarding tag
2916#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
2920#	lw $t2,-4($t1) # forwarding pointer: object's new address
2924#	sw $t2,4($t0) # update stack value
2928#	j gcTestIterDone1 # do next iteration

2932:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
2932#	bge $t2,$zero,gcSkip2
2933##...slt $at,$t2,$zero
2937##...beq $at,$zero,$+8
2940#	move $t2,$zero # set to zero if -1 (number of data words)

2944:  gcSkip2:
2944#	sll $t2,$t2,2
2948#	addu $t2,$t2,8
2952#	subu $t4,$t1,$t2 # address of first word of source
2956#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2960#	bge $t3,$zero,gcH2Neg1
2961##...slt $at,$t3,$zero
2965##...beq $at,$zero,$+8
2968#	move $t3,$zero
2972:  gcH2Neg1:
2972#	sll $t3,$t3,2
2976#	addu $t3,$t3,$t1 # address one word past last word of source

2980#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2984#	lw $s0,($t4)
2988#	lw $s1,-8($t1)
2992#	sw $s1,($t4)
2996#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3000:  gCinnerCopy1:
3000#	lw $s0,($t4)
3004#	sw $s0,($s3)
3008#	addu $t4,$t4,4
3012#	addu $s3,$s3,4
3016#	bltu $t4,$t3,gCinnerCopy1
3017##...sltu $at,$t4,$t3
3021##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3024#	sw $t5,-8($t1) # -2 in first header-slot
3028#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3032#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3036#	j gcTestIterDone1

3040:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3040#	subu $t0,$t0,$t1
3044#	subu $t0,$t0,3

3048:  gcTestIterDone1:
3048#	bgeu $t0,$sp,gcStackCopyLoop
3049##...sltu $at,$t0,$sp
3053##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3056#	lw $t1,cur_seg
3060#	la $t0,seg0_start
3064#	beq $t1,$zero,gcSkip4
3068#	la $t0,seg1_start
3069##...lui $t0,16
3073##...addiu $t0,$t0,4108

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3076:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3076#	bgeu $t0,$s3,gcFinishUp
3077##...sltu $at,$t0,$s3
3081##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3084:  gcHeapCopyLoop:
	# check if we have a data array
3084#	lw $t1,($t0) # first header word for current object
3088#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3089##...slt $at,$t1,$zero
3093##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3096#	lw $t1,4($t0) # data words
3100#	addu $t1,$t1,2 # add in # header words
3104#	sll $t1,$t1,2 # convert to byte-count
3108#	addu $t0,$t0,$t1 # skip over object
3112#	j gcTestIterDone2 # go do next object, if any

3116:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3116#	sll $t2,$t1,2 # # data bytes
3120#	addu $t2,$t2,8 # to skip header word
3124#	addu $t2,$t0,$t2 # pointer to new object
3128#	lw $t3,-8($t2) # word to swap
3132#	sw $t1,-8($t2) # store header word
3136#	sw $t3,($t0) # restore first word of object

3140#	lw $t3,-4($t2) # # object words (negative treated as zero)
3144#	bge $t3,$zero,gcH2Neg2
3145##...slt $at,$t3,$zero
3149##...beq $at,$zero,$+8
3152#	move $t3,$zero
3156:  gcH2Neg2:
3156#	sll $t3,$t3,2 # # object bytes
3160#	move $t0,$t2 # address of first pointer in object
3164#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3168#	beq $t0,$s1,gcTestIterDone2
	
3172:  gcNextPointerInObject:
	# get pointer from object
3172#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3176#	bleu $t1,$t6,gcGoNextPointerSlot
3177##...sltu $at,$t6,$t1
3181##...beq $at,$zero,$+136
3184#	bgtu $t1,$t7,gcGoNextPointerSlot
3185##...sltu $at,$t7,$t1
3189##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3192#	lw $t8,-8($t1) # possible forwarding tag
3196#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3200#	lw $t8,-4($t1) # forwarding pointer: object's new address
3204#	sw $t8,($t0) # update pointer in object
3208#	j gcGoNextPointerSlot # do next iteration

3212:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3212#	bge $t8,$zero,gcSkip5
3213##...slt $at,$t8,$zero
3217##...beq $at,$zero,$+8
3220#	move $t8,$zero # set to zero if -1

3224:  gcSkip5:
3224#	sll $t8,$t8,2
3228#	addu $t8,$t8,8
3232#	subu $t4,$t1,$t8 # address of first word of source
3236#	lw $t3,-4($t1)
3240#	bge $t3,$zero,gcNoNeg
3241##...slt $at,$t3,$zero
3245##...beq $at,$zero,$+8
3248#	move $t3,$zero
3252:  gcNoNeg:
3252#	sll $t3,$t3,2
3256#	addu $t3,$t3,$t1 # address one word past last word of source

3260#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3264#	lw $s0,($t4)
3268#	lw $t9,-8($t1)
3272#	sw $t9,($t4)
3276#	sw $s0,-8($t1)

	# copy all source bytes to the target
3280:  gCinnerCopy2:
3280#	lw $s0,($t4)
3284#	sw $s0,($s3)
3288#	addu $t4,$t4,4
3292#	addu $s3,$s3,4
3296#	bltu $t4,$t3,gCinnerCopy2
3297##...sltu $at,$t4,$t3
3301##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3304#	sw $t5,-8($t1) # -2 in first header-slot
3308#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3312#	sw $t8,($t0)

3316:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3316#	addu $t0,$t0,4
3320#	bltu $t0,$s1,gcNextPointerInObject
3321##...sltu $at,$t0,$s1
3325##...bne $at,$zero,$-152

3328:  gcTestIterDone2:
3328#	bltu $t0,$s3,gcHeapCopyLoop
3329##...sltu $at,$t0,$s3
3333##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3336:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3336#	lw $s2,($sp)
3340#	addu $sp,$sp,4

	# mark us as having already GC'd
3344#	move $t5,$s5

	# go try and allocate again
3348#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3352:vm_init:

	# mark bottom of stack
3352#	sw $sp,stack_bottom
3356#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3360#	move $s2,$zero
3364#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3368#	li $s5,5
3372#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3376#	la $s3,seg0_start
3380#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3384#	la $s4,seg0_end
3385##...lui $s4,16
3389##...addiu $s4,$s4,4108
3392#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3396#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3400:divide:
	# get parameters; abort if divisor zero
3400#	lw $t0,($sp)
3404#	lw $t1,8($sp)
3408#	beq $t0,$zero,divByZeroError
	
	# perform division
3412#	div $t1,$t0
3416#	mflo $t0

	# store result, adjust stack and return
3420#	addu $sp,$sp,8 # adjust stack
3424#	sw $t0,($sp) # store result
3428#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3432:remainder:
	# get parameters; abort if divisor zero
3432#	lw $t0,($sp)
3436#	lw $t1,8($sp)
3440#	beq $t0,$zero,divByZeroError
	
	# perform division
3444#	div $t1,$t0
3448#	mfhi $t0

	# store result, adjust stack and return
3452#	addu $sp,$sp,8 # adjust stack
3456#	sw $t0,($sp) # store result
3460#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3464:checkCast:
	# get object, allow immediately if null
3464#	lw $t2,($sp)
3468#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3472#	lw $t3,-8($t2) # <= 0 if array
3476#	lw $t2,-12($t2) # vtable address (unless array)
3480#	bgt $t3,$zero,skipArrayCast
3481##...slt $at,$zero,$t3
3485##...bne $at,$zero,$+8
3488#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3492:  skipArrayCast:
3492#	bge $t2,$t1,castException
3493##...slt $at,$t2,$t1
3497##...beq $at,$zero,$+152
3500#	blt $t2,$t0,castException
3501##...slt $at,$t2,$t0
3505##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3508:  checkCastReturn:	
3508#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3512:instanceOf:
	# get object, go return false if null
3512#	lw $t2,($sp)
3516#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3520#	lw $t3,-8($t2) # <= 0 if array
3524#	lw $t2,-12($t2) # vtable address (unless array)
3528#	bgt $t3,$zero,skipArrayInstanceOf
3529##...slt $at,$zero,$t3
3533##...bne $at,$zero,$+8
3536#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3540:  skipArrayInstanceOf:
3540#	sge $t0,$t2,$t0
3541##...slt $t0,$t2,$t0
3545##...xori $t0,$t0,0x1
3548#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3552#	and $t2,$t0,$t1
3556:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3556#	sw $t2,($sp)
3560#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3564:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3564#	li $v0,4 # syscall-code for print-string
3568#	syscall
3572:exit:
	# print termination message
3572#	li $v0,4
3576#	la $a0,exitString
3580#	syscall

	# terminate execution
3584#	li $v0,10 #syscall-code for "exit"
3588#	syscall

3592:outOfHeapMemory:
3592#	la $a0,heapMemoryMsg
3596#	j exitError
3600:divByZeroError:
3600#	la $a0,divByZeroMsg
3604#	j exitError
3608:strIndexOutOfBounds:
3608#	la $a0,strIndexOutOfBoundsMsg
3612#	j exitError
3616:arrayIndexOutOfBounds:
3616#	la $a0,arrayIndexOutOfBoundsMsg
3620#	j exitError
3624:arraySizeOutOfBounds:
3624#	la $a0,arraySizeOutOfBoundsMsg
3628#	j exitError
3632:nullPtrException:
3632#	la $a0,nullPtrExceptionMsg
3636#	j exitError
3640:badIntegerFormat:
3640#	la $a0,badIntegerFormatMsg
3644#	j exitError
3648:castException:
3648#	la $a0,castExceptionMsg
3652#	j exitError

############## data section ################
	.data
	.align 2

3800:cur_seg:
	.word 0

3804:lastCharRead:
	.word -2 # -2 => no buffered character

3808:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3835:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3858:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3893:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3927:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
3960:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
3991:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4039:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4060:gcMsg: 
      .asciiz "\nGC!\n"

4066:nullStr:
	.asciiz "null"
4071:trueString:
	.asciiz "true"
4076:falseString:
	.asciiz "false"
4082:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4104:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4108:seg0_start:
	.space 0x100000
1052684:seg0_end:
1052684:seg1_start:
	.space 0x100000
2101260:seg1_end:



