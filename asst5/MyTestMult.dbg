 .data # Program at 1.1 
  .byte 10 # StringLiteral at 21.18	 
  .byte 0 # StringLiteral at 21.18  
  .byte 0 # StringLiteral at 21.18	
  .byte 0 # StringLiteral at 21.18			
  .word CLASS_String # StringLiteral at 21.18		 
  .word 2 # StringLiteral at 21.18  
  .word -1 # StringLiteral at 21.18 
4528:strLit_103: # StringLiteral at 21.18	
  .byte 10 # StringLiteral at 23.18	 	
  .byte 0 # StringLiteral at 23.18	  
  .byte 0 # StringLiteral at 23.18	 	
  .byte 0 # StringLiteral at 23.18 	 
  .word CLASS_String # StringLiteral at 23.18		
  .word 2 # StringLiteral at 23.18 
  .word -1 # StringLiteral at 23.18 	 
4544:strLit_111: # StringLiteral at 23.18   
  .byte 10 # StringLiteral at 25.18 		
  .byte 0 # StringLiteral at 25.18		
  .byte 0 # StringLiteral at 25.18		
  .byte 0 # StringLiteral at 25.18 	
  .word CLASS_String # StringLiteral at 25.18	 	
  .word 2 # StringLiteral at 25.18	 	
  .word -1 # StringLiteral at 25.18			
4560:strLit_119: # StringLiteral at 25.18	  
  .byte 10 # StringLiteral at 27.18		 
  .byte 0 # StringLiteral at 27.18	 	
  .byte 0 # StringLiteral at 27.18	
  .byte 0 # StringLiteral at 27.18 	 
  .word CLASS_String # StringLiteral at 27.18 		
  .word 2 # StringLiteral at 27.18  
  .word -1 # StringLiteral at 27.18		 
4576:strLit_127: # StringLiteral at 27.18	
  .byte 10 # StringLiteral at 29.18		
  .byte 0 # StringLiteral at 29.18	  
  .byte 0 # StringLiteral at 29.18  
  .byte 0 # StringLiteral at 29.18 	
  .word CLASS_String # StringLiteral at 29.18	  
  .word 2 # StringLiteral at 29.18	 	
  .word -1 # StringLiteral at 29.18	 
4592:strLit_135: # StringLiteral at 29.18   
  .byte 10 # StringLiteral at 31.18		
  .byte 0 # StringLiteral at 31.18	 
  .byte 0 # StringLiteral at 31.18 		
  .byte 0 # StringLiteral at 31.18   
  .word CLASS_String # StringLiteral at 31.18  	
  .word 2 # StringLiteral at 31.18		 
  .word -1 # StringLiteral at 31.18 	 
4608:strLit_143: # StringLiteral at 31.18 	
  .byte 10 # StringLiteral at 33.18		
  .byte 0 # StringLiteral at 33.18	 	
  .byte 0 # StringLiteral at 33.18  
  .byte 0 # StringLiteral at 33.18  	
  .word CLASS_String # StringLiteral at 33.18 	 
  .word 2 # StringLiteral at 33.18		
  .word -1 # StringLiteral at 33.18 	
4624:strLit_151: # StringLiteral at 33.18 	 
  .byte 10 # StringLiteral at 35.18   
  .byte 0 # StringLiteral at 35.18 
  .byte 0 # StringLiteral at 35.18  	
  .byte 0 # StringLiteral at 35.18 		
  .word CLASS_String # StringLiteral at 35.18	
  .word 2 # StringLiteral at 35.18   
  .word -1 # StringLiteral at 35.18	 	
4640:strLit_159: # StringLiteral at 35.18 		
  .byte 10 # StringLiteral at 37.18		
  .byte 0 # StringLiteral at 37.18		
  .byte 0 # StringLiteral at 37.18   
  .byte 0 # StringLiteral at 37.18 
  .word CLASS_String # StringLiteral at 37.18			
  .word 2 # StringLiteral at 37.18 		
  .word -1 # StringLiteral at 37.18	  
4656:strLit_167: # StringLiteral at 37.18		
  .byte 10 # StringLiteral at 39.18  	
  .byte 0 # StringLiteral at 39.18  	
  .byte 0 # StringLiteral at 39.18 	 
  .byte 0 # StringLiteral at 39.18  	
  .word CLASS_String # StringLiteral at 39.18 		
  .word 2 # StringLiteral at 39.18 	 
  .word -1 # StringLiteral at 39.18 	 
4672:strLit_175: # StringLiteral at 39.18 		
  .byte 10 # StringLiteral at 41.18 
  .byte 0 # StringLiteral at 41.18 	 
  .byte 0 # StringLiteral at 41.18		 
  .byte 0 # StringLiteral at 41.18	 
  .word CLASS_String # StringLiteral at 41.18	 
  .word 2 # StringLiteral at 41.18		
  .word -1 # StringLiteral at 41.18 		
4688:strLit_183: # StringLiteral at 41.18		 
  .byte 10 # StringLiteral at 43.18 	 
  .byte 0 # StringLiteral at 43.18 
  .byte 0 # StringLiteral at 43.18			
  .byte 0 # StringLiteral at 43.18 
  .word CLASS_String # StringLiteral at 43.18			
  .word 2 # StringLiteral at 43.18 	 
  .word -1 # StringLiteral at 43.18	  
4704:strLit_191: # StringLiteral at 43.18 	
  .byte 10 # StringLiteral at 45.18  
  .byte 0 # StringLiteral at 45.18	 	
  .byte 0 # StringLiteral at 45.18 	 
  .byte 0 # StringLiteral at 45.18 	
  .word CLASS_String # StringLiteral at 45.18 
  .word 2 # StringLiteral at 45.18	 
  .word -1 # StringLiteral at 45.18		
4720:strLit_199: # StringLiteral at 45.18		 
  .byte 10 # StringLiteral at 47.18 
  .byte 0 # StringLiteral at 47.18  	
  .byte 0 # StringLiteral at 47.18	 	
  .byte 0 # StringLiteral at 47.18	 
  .word CLASS_String # StringLiteral at 47.18		
  .word 2 # StringLiteral at 47.18 		
  .word -1 # StringLiteral at 47.18 	 
4736:strLit_207: # StringLiteral at 47.18 		
  .byte 10 # StringLiteral at 49.18  
  .byte 0 # StringLiteral at 49.18			
  .byte 0 # StringLiteral at 49.18 		
  .byte 0 # StringLiteral at 49.18	  
  .word CLASS_String # StringLiteral at 49.18  	
  .word 2 # StringLiteral at 49.18  	
  .word -1 # StringLiteral at 49.18 	
4752:strLit_215: # StringLiteral at 49.18  
4752:CLASS_Object: # Program at 1.1  	
4752:CLASS_String: # Program at 1.1 	
.text # Program at 1.1 		
.global main # Program at 1.1 	
0:main: # Program at 1.1 
0#jal vm_init # Program at 1.1	 	
4#subu $sp, $sp, 4 # NewObject at 0.0 
8#sw $zero, ($sp) # NewObject at 0.0		 
12#jal fcn_219_main # Call at 0.0  	
16#li $v0, 10 # Program at 1.1 		
20#syscall # Program at 1.1		
.globl fcn_219_main # MethodDeclVoid at 2.14	 	
24:fcn_219_main: # MethodDeclVoid at 2.14	 
24#subu $sp, $sp, 8 # MethodDeclVoid at 2.14 	
28#sw $ra, 4($sp) # MethodDeclVoid at 2.14 	 
32#sw $s2, ($sp) # MethodDeclVoid at 2.14  
36#lw $s2, 4($sp) # MethodDeclVoid at 2.14 	 
40#subu $sp, $sp, 8 # IntegerLiteral at 3.11   
44#sw $s5, 4($sp) # IntegerLiteral at 3.11			
48#li $t0, 3 # IntegerLiteral at 3.11	 
52#sw $t0, ($sp) # IntegerLiteral at 3.11	
56#subu $sp, $sp, 8 # IntegerLiteral at 3.15 		
60#sw $s5, 4($sp) # IntegerLiteral at 3.15	 	
64#li $t0, 3 # IntegerLiteral at 3.15	
68#sw $t0, ($sp) # IntegerLiteral at 3.15	
72#lw $t0, ($sp) # Times at 3.13   
76#lw $t1, 8($sp) # Times at 3.13	  
80#mult $t0, $t1 # Times at 3.13	
84#mflo $t0 # Times at 3.13 	
88#addu $sp, $sp, 8 # Times at 3.13	
92#sw $t0, ($sp) # Times at 3.13		
96#lw $t0, 0($sp) # IdentifierExp at 4.11	  
100#subu $sp, $sp, 8 # IdentifierExp at 4.11 
104#sw $s5, 4($sp) # IdentifierExp at 4.11 		
108#sw $t0, ($sp) # IdentifierExp at 4.11 		
112#subu $sp, $sp, 8 # IntegerLiteral at 4.15			
116#sw $s5, 4($sp) # IntegerLiteral at 4.15 		
120#li $t0, 2 # IntegerLiteral at 4.15 
124#sw $t0, ($sp) # IntegerLiteral at 4.15 
128#lw $t0, ($sp) # Times at 4.13 	
132#lw $t1, 8($sp) # Times at 4.13		 
136#mult $t0, $t1 # Times at 4.13 	
140#mflo $t0 # Times at 4.13 
144#addu $sp, $sp, 8 # Times at 4.13 	 
148#sw $t0, ($sp) # Times at 4.13	 	
152#subu $sp, $sp, 8 # IntegerLiteral at 5.11			
156#sw $s5, 4($sp) # IntegerLiteral at 5.11 
160#li $t0, 2 # IntegerLiteral at 5.11 
164#sw $t0, ($sp) # IntegerLiteral at 5.11		
168#lw $t0, 16($sp) # IdentifierExp at 5.15			
172#subu $sp, $sp, 8 # IdentifierExp at 5.15		
176#sw $s5, 4($sp) # IdentifierExp at 5.15 	 
180#sw $t0, ($sp) # IdentifierExp at 5.15  
184#lw $t0, ($sp) # Times at 5.13  
188#lw $t1, 8($sp) # Times at 5.13 		
192#mult $t0, $t1 # Times at 5.13   
196#mflo $t0 # Times at 5.13	 	
200#addu $sp, $sp, 8 # Times at 5.13		
204#sw $t0, ($sp) # Times at 5.13	 	
208#lw $t0, 8($sp) # IdentifierExp at 6.11   
212#subu $sp, $sp, 8 # IdentifierExp at 6.11	 
216#sw $s5, 4($sp) # IdentifierExp at 6.11 	
220#sw $t0, ($sp) # IdentifierExp at 6.11  	
224#lw $t0, 8($sp) # IdentifierExp at 6.15  
228#subu $sp, $sp, 8 # IdentifierExp at 6.15		 
232#sw $s5, 4($sp) # IdentifierExp at 6.15 		
236#sw $t0, ($sp) # IdentifierExp at 6.15 	 
240#lw $t0, ($sp) # Times at 6.13		
244#lw $t1, 8($sp) # Times at 6.13	 	
248#mult $t0, $t1 # Times at 6.13 
252#mflo $t0 # Times at 6.13	 
256#addu $sp, $sp, 8 # Times at 6.13		
260#sw $t0, ($sp) # Times at 6.13		
264#lw $t0, 8($sp) # IdentifierExp at 7.11 		
268#subu $sp, $sp, 8 # IdentifierExp at 7.11 	 
272#sw $s5, 4($sp) # IdentifierExp at 7.11 	 
276#sw $t0, ($sp) # IdentifierExp at 7.11 
280#lw $t0, 24($sp) # IdentifierExp at 7.15 
284#subu $sp, $sp, 8 # IdentifierExp at 7.15 	 
288#sw $s5, 4($sp) # IdentifierExp at 7.15   
292#sw $t0, ($sp) # IdentifierExp at 7.15	 
296#lw $t0, ($sp) # Times at 7.13	  
300#lw $t1, 8($sp) # Times at 7.13   
304#mult $t0, $t1 # Times at 7.13	
308#mflo $t0 # Times at 7.13 	
312#addu $sp, $sp, 8 # Times at 7.13	 	
316#sw $t0, ($sp) # Times at 7.13	 
320#subu $sp, $sp, 8 # IntegerLiteral at 9.11	
324#sw $s5, 4($sp) # IntegerLiteral at 9.11	
328#li $t0, 0 # IntegerLiteral at 9.11   
332#sw $t0, ($sp) # IntegerLiteral at 9.11 
336#subu $sp, $sp, 8 # IntegerLiteral at 9.12	
340#sw $s5, 4($sp) # IntegerLiteral at 9.12	  
344#li $t0, 5 # IntegerLiteral at 9.12	
348#sw $t0, ($sp) # IntegerLiteral at 9.12	 	
352#lw $t0, ($sp) # Minus at 9.11 	
356#lw $t1, 8($sp) # Minus at 9.11 
360#subu $t0, $t1, $t0 # Minus at 9.11	  
364#addu $sp, $sp, 8 # Minus at 9.11  	
368#sw $t0, ($sp) # Minus at 9.11	  
372#subu $sp, $sp, 8 # IntegerLiteral at 9.16 	 
376#sw $s5, 4($sp) # IntegerLiteral at 9.16			
380#li $t0, 5 # IntegerLiteral at 9.16 	 
384#sw $t0, ($sp) # IntegerLiteral at 9.16	
388#lw $t0, ($sp) # Times at 9.14 	
392#lw $t1, 8($sp) # Times at 9.14	 
396#mult $t0, $t1 # Times at 9.14 	
400#mflo $t0 # Times at 9.14 
404#addu $sp, $sp, 8 # Times at 9.14 
408#sw $t0, ($sp) # Times at 9.14			
412#subu $sp, $sp, 8 # IntegerLiteral at 10.11		 
416#sw $s5, 4($sp) # IntegerLiteral at 10.11  
420#li $t0, 5 # IntegerLiteral at 10.11		
424#sw $t0, ($sp) # IntegerLiteral at 10.11	  
428#subu $sp, $sp, 8 # IntegerLiteral at 10.15	 
432#sw $s5, 4($sp) # IntegerLiteral at 10.15			
436#li $t0, 0 # IntegerLiteral at 10.15	 
440#sw $t0, ($sp) # IntegerLiteral at 10.15	 
444#subu $sp, $sp, 8 # IntegerLiteral at 10.16		
448#sw $s5, 4($sp) # IntegerLiteral at 10.16   
452#li $t0, 5 # IntegerLiteral at 10.16	
456#sw $t0, ($sp) # IntegerLiteral at 10.16			
460#lw $t0, ($sp) # Minus at 10.15	
464#lw $t1, 8($sp) # Minus at 10.15	 	
468#subu $t0, $t1, $t0 # Minus at 10.15 	 
472#addu $sp, $sp, 8 # Minus at 10.15 	 
476#sw $t0, ($sp) # Minus at 10.15  
480#lw $t0, ($sp) # Times at 10.13   
484#lw $t1, 8($sp) # Times at 10.13 
488#mult $t0, $t1 # Times at 10.13   
492#mflo $t0 # Times at 10.13  	
496#addu $sp, $sp, 8 # Times at 10.13 	 
500#sw $t0, ($sp) # Times at 10.13 
504#lw $t0, 8($sp) # IdentifierExp at 11.11   
508#subu $sp, $sp, 8 # IdentifierExp at 11.11 		
512#sw $s5, 4($sp) # IdentifierExp at 11.11   
516#sw $t0, ($sp) # IdentifierExp at 11.11	 
520#subu $sp, $sp, 8 # IntegerLiteral at 11.15 	 
524#sw $s5, 4($sp) # IntegerLiteral at 11.15   
528#li $t0, 0 # IntegerLiteral at 11.15	 	
532#sw $t0, ($sp) # IntegerLiteral at 11.15 		
536#subu $sp, $sp, 8 # IntegerLiteral at 11.16 
540#sw $s5, 4($sp) # IntegerLiteral at 11.16			
544#li $t0, 5 # IntegerLiteral at 11.16	 
548#sw $t0, ($sp) # IntegerLiteral at 11.16	 
552#lw $t0, ($sp) # Minus at 11.15	 
556#lw $t1, 8($sp) # Minus at 11.15		
560#subu $t0, $t1, $t0 # Minus at 11.15			
564#addu $sp, $sp, 8 # Minus at 11.15			
568#sw $t0, ($sp) # Minus at 11.15 	 
572#lw $t0, ($sp) # Times at 11.13   
576#lw $t1, 8($sp) # Times at 11.13	
580#mult $t0, $t1 # Times at 11.13		 
584#mflo $t0 # Times at 11.13  
588#addu $sp, $sp, 8 # Times at 11.13  
592#sw $t0, ($sp) # Times at 11.13 		
596#subu $sp, $sp, 8 # IntegerLiteral at 12.11 		
600#sw $s5, 4($sp) # IntegerLiteral at 12.11	
604#li $t0, 0 # IntegerLiteral at 12.11	 
608#sw $t0, ($sp) # IntegerLiteral at 12.11	 	
612#subu $sp, $sp, 8 # IntegerLiteral at 12.12 		
616#sw $s5, 4($sp) # IntegerLiteral at 12.12 	
620#li $t0, 5 # IntegerLiteral at 12.12			
624#sw $t0, ($sp) # IntegerLiteral at 12.12	 	
628#lw $t0, ($sp) # Minus at 12.11	 
632#lw $t1, 8($sp) # Minus at 12.11   
636#subu $t0, $t1, $t0 # Minus at 12.11  
640#addu $sp, $sp, 8 # Minus at 12.11 		
644#sw $t0, ($sp) # Minus at 12.11	  
648#lw $t0, 24($sp) # IdentifierExp at 12.16 		
652#subu $sp, $sp, 8 # IdentifierExp at 12.16	  
656#sw $s5, 4($sp) # IdentifierExp at 12.16	 	
660#sw $t0, ($sp) # IdentifierExp at 12.16   
664#lw $t0, ($sp) # Times at 12.14		
668#lw $t1, 8($sp) # Times at 12.14	  
672#mult $t0, $t1 # Times at 12.14  
676#mflo $t0 # Times at 12.14  	
680#addu $sp, $sp, 8 # Times at 12.14 	 
684#sw $t0, ($sp) # Times at 12.14	
688#subu $sp, $sp, 8 # IntegerLiteral at 13.11 	 
692#sw $s5, 4($sp) # IntegerLiteral at 13.11  
696#li $t0, 0 # IntegerLiteral at 13.11   
700#sw $t0, ($sp) # IntegerLiteral at 13.11		
704#lw $t0, 32($sp) # IdentifierExp at 13.12	
708#subu $sp, $sp, 8 # IdentifierExp at 13.12   
712#sw $s5, 4($sp) # IdentifierExp at 13.12 	 
716#sw $t0, ($sp) # IdentifierExp at 13.12			
720#lw $t0, ($sp) # Minus at 13.11	  
724#lw $t1, 8($sp) # Minus at 13.11	
728#subu $t0, $t1, $t0 # Minus at 13.11 		
732#addu $sp, $sp, 8 # Minus at 13.11 		
736#sw $t0, ($sp) # Minus at 13.11	 	
740#subu $sp, $sp, 8 # IntegerLiteral at 13.16	 
744#sw $s5, 4($sp) # IntegerLiteral at 13.16  	
748#li $t0, 0 # IntegerLiteral at 13.16 	
752#sw $t0, ($sp) # IntegerLiteral at 13.16		
756#subu $sp, $sp, 8 # IntegerLiteral at 13.17	  
760#sw $s5, 4($sp) # IntegerLiteral at 13.17 	
764#li $t0, 5 # IntegerLiteral at 13.17 	
768#sw $t0, ($sp) # IntegerLiteral at 13.17		 
772#lw $t0, ($sp) # Minus at 13.16	 
776#lw $t1, 8($sp) # Minus at 13.16	  
780#subu $t0, $t1, $t0 # Minus at 13.16	 
784#addu $sp, $sp, 8 # Minus at 13.16   
788#sw $t0, ($sp) # Minus at 13.16	
792#lw $t0, ($sp) # Times at 13.14  
796#lw $t1, 8($sp) # Times at 13.14	  
800#mult $t0, $t1 # Times at 13.14	
804#mflo $t0 # Times at 13.14 
808#addu $sp, $sp, 8 # Times at 13.14		
812#sw $t0, ($sp) # Times at 13.14	  
816#subu $sp, $sp, 8 # IntegerLiteral at 14.11 	
820#sw $s5, 4($sp) # IntegerLiteral at 14.11		
824#li $t0, 0 # IntegerLiteral at 14.11 
828#sw $t0, ($sp) # IntegerLiteral at 14.11 		
832#subu $sp, $sp, 8 # IntegerLiteral at 14.12	 	
836#sw $s5, 4($sp) # IntegerLiteral at 14.12			
840#li $t0, 5 # IntegerLiteral at 14.12  
844#sw $t0, ($sp) # IntegerLiteral at 14.12	
848#lw $t0, ($sp) # Minus at 14.11 		
852#lw $t1, 8($sp) # Minus at 14.11   
856#subu $t0, $t1, $t0 # Minus at 14.11	
860#addu $sp, $sp, 8 # Minus at 14.11   
864#sw $t0, ($sp) # Minus at 14.11	 
868#subu $sp, $sp, 8 # IntegerLiteral at 14.16		 
872#sw $s5, 4($sp) # IntegerLiteral at 14.16		 
876#li $t0, 0 # IntegerLiteral at 14.16	
880#sw $t0, ($sp) # IntegerLiteral at 14.16 	 
884#lw $t0, 48($sp) # IdentifierExp at 14.17 	 
888#subu $sp, $sp, 8 # IdentifierExp at 14.17	  
892#sw $s5, 4($sp) # IdentifierExp at 14.17	 
896#sw $t0, ($sp) # IdentifierExp at 14.17 		
900#lw $t0, ($sp) # Minus at 14.16  	
904#lw $t1, 8($sp) # Minus at 14.16		
908#subu $t0, $t1, $t0 # Minus at 14.16		
912#addu $sp, $sp, 8 # Minus at 14.16	
916#sw $t0, ($sp) # Minus at 14.16		 
920#lw $t0, ($sp) # Times at 14.14 	 
924#lw $t1, 8($sp) # Times at 14.14	  
928#mult $t0, $t1 # Times at 14.14		
932#mflo $t0 # Times at 14.14		 
936#addu $sp, $sp, 8 # Times at 14.14 
940#sw $t0, ($sp) # Times at 14.14 		
944#lw $t0, 40($sp) # IdentifierExp at 15.11 	
948#subu $sp, $sp, 8 # IdentifierExp at 15.11	
952#sw $s5, 4($sp) # IdentifierExp at 15.11 	
956#sw $t0, ($sp) # IdentifierExp at 15.11		 
960#lw $t0, 40($sp) # IdentifierExp at 15.15  	
964#subu $sp, $sp, 8 # IdentifierExp at 15.15	
968#sw $s5, 4($sp) # IdentifierExp at 15.15	  
972#sw $t0, ($sp) # IdentifierExp at 15.15  
976#lw $t0, ($sp) # Times at 15.13 		
980#lw $t1, 8($sp) # Times at 15.13	  
984#mult $t0, $t1 # Times at 15.13	  
988#mflo $t0 # Times at 15.13		
992#addu $sp, $sp, 8 # Times at 15.13 	 
996#sw $t0, ($sp) # Times at 15.13   
1000#subu $sp, $sp, 8 # IntegerLiteral at 16.11			
1004#sw $s5, 4($sp) # IntegerLiteral at 16.11   
1008#li $t0, 0 # IntegerLiteral at 16.11			
1012#sw $t0, ($sp) # IntegerLiteral at 16.11	  
1016#lw $t0, 56($sp) # IdentifierExp at 16.12  	
1020#subu $sp, $sp, 8 # IdentifierExp at 16.12		
1024#sw $s5, 4($sp) # IdentifierExp at 16.12		
1028#sw $t0, ($sp) # IdentifierExp at 16.12 	
1032#lw $t0, ($sp) # Minus at 16.11   
1036#lw $t1, 8($sp) # Minus at 16.11 	
1040#subu $t0, $t1, $t0 # Minus at 16.11		 
1044#addu $sp, $sp, 8 # Minus at 16.11 	 
1048#sw $t0, ($sp) # Minus at 16.11  	
1052#lw $t0, 48($sp) # IdentifierExp at 16.16  
1056#subu $sp, $sp, 8 # IdentifierExp at 16.16 
1060#sw $s5, 4($sp) # IdentifierExp at 16.16  
1064#sw $t0, ($sp) # IdentifierExp at 16.16 		
1068#lw $t0, ($sp) # Times at 16.14		
1072#lw $t1, 8($sp) # Times at 16.14	 	
1076#mult $t0, $t1 # Times at 16.14	
1080#mflo $t0 # Times at 16.14	  
1084#addu $sp, $sp, 8 # Times at 16.14		
1088#sw $t0, ($sp) # Times at 16.14	  
1092#lw $t0, 56($sp) # IdentifierExp at 17.11 		
1096#subu $sp, $sp, 8 # IdentifierExp at 17.11			
1100#sw $s5, 4($sp) # IdentifierExp at 17.11	 
1104#sw $t0, ($sp) # IdentifierExp at 17.11  	
1108#subu $sp, $sp, 8 # IntegerLiteral at 17.15  
1112#sw $s5, 4($sp) # IntegerLiteral at 17.15 	
1116#li $t0, 0 # IntegerLiteral at 17.15		
1120#sw $t0, ($sp) # IntegerLiteral at 17.15   
1124#lw $t0, 64($sp) # IdentifierExp at 17.16 
1128#subu $sp, $sp, 8 # IdentifierExp at 17.16 
1132#sw $s5, 4($sp) # IdentifierExp at 17.16 	
1136#sw $t0, ($sp) # IdentifierExp at 17.16		
1140#lw $t0, ($sp) # Minus at 17.15 	 
1144#lw $t1, 8($sp) # Minus at 17.15 	
1148#subu $t0, $t1, $t0 # Minus at 17.15		 
1152#addu $sp, $sp, 8 # Minus at 17.15  
1156#sw $t0, ($sp) # Minus at 17.15  	
1160#lw $t0, ($sp) # Times at 17.13   
1164#lw $t1, 8($sp) # Times at 17.13 
1168#mult $t0, $t1 # Times at 17.13 	
1172#mflo $t0 # Times at 17.13	  
1176#addu $sp, $sp, 8 # Times at 17.13	 
1180#sw $t0, ($sp) # Times at 17.13  
1184#subu $sp, $sp, 8 # IntegerLiteral at 18.11   
1188#sw $s5, 4($sp) # IntegerLiteral at 18.11	 
1192#li $t0, 0 # IntegerLiteral at 18.11 	 
1196#sw $t0, ($sp) # IntegerLiteral at 18.11 		
1200#lw $t0, 72($sp) # IdentifierExp at 18.12	  
1204#subu $sp, $sp, 8 # IdentifierExp at 18.12	 
1208#sw $s5, 4($sp) # IdentifierExp at 18.12  	
1212#sw $t0, ($sp) # IdentifierExp at 18.12 	
1216#lw $t0, ($sp) # Minus at 18.11	  
1220#lw $t1, 8($sp) # Minus at 18.11		 
1224#subu $t0, $t1, $t0 # Minus at 18.11	 
1228#addu $sp, $sp, 8 # Minus at 18.11 		
1232#sw $t0, ($sp) # Minus at 18.11		
1236#subu $sp, $sp, 8 # IntegerLiteral at 18.16  	
1240#sw $s5, 4($sp) # IntegerLiteral at 18.16 		
1244#li $t0, 0 # IntegerLiteral at 18.16	 
1248#sw $t0, ($sp) # IntegerLiteral at 18.16	  
1252#lw $t0, 72($sp) # IdentifierExp at 18.17	 
1256#subu $sp, $sp, 8 # IdentifierExp at 18.17	 
1260#sw $s5, 4($sp) # IdentifierExp at 18.17  
1264#sw $t0, ($sp) # IdentifierExp at 18.17  	
1268#lw $t0, ($sp) # Minus at 18.16   
1272#lw $t1, 8($sp) # Minus at 18.16	
1276#subu $t0, $t1, $t0 # Minus at 18.16	  
1280#addu $sp, $sp, 8 # Minus at 18.16 		
1284#sw $t0, ($sp) # Minus at 18.16 	 
1288#lw $t0, ($sp) # Times at 18.14   
1292#lw $t1, 8($sp) # Times at 18.14	 
1296#mult $t0, $t1 # Times at 18.14			
1300#mflo $t0 # Times at 18.14	 	
1304#addu $sp, $sp, 8 # Times at 18.14			
1308#sw $t0, ($sp) # Times at 18.14   
1312#subu $sp, $sp, 4 # Super at 20.9	 	
1316#sw $s2, ($sp) # Super at 20.9   
1320#lw $t0, 116($sp) # IdentifierExp at 20.18		
1324#subu $sp, $sp, 8 # IdentifierExp at 20.18 
1328#sw $s5, 4($sp) # IdentifierExp at 20.18  	
1332#sw $t0, ($sp) # IdentifierExp at 20.18  
1336#jal printInt # Call at 20.9  	
1340#subu $sp, $sp, 4 # Super at 21.9	 
1344#sw $s2, ($sp) # Super at 21.9			
1348#subu $sp, $sp, 4 # StringLiteral at 21.18 
1352#la $t0, strLit_103 # StringLiteral at 21.18 	
1356#sw $t0, ($sp) # StringLiteral at 21.18 		
1360#jal printStr # Call at 21.9	 	
1364#subu $sp, $sp, 4 # Super at 22.9  	
1368#sw $s2, ($sp) # Super at 22.9  	
1372#lw $t0, 108($sp) # IdentifierExp at 22.18  	
1376#subu $sp, $sp, 8 # IdentifierExp at 22.18			
1380#sw $s5, 4($sp) # IdentifierExp at 22.18	 
1384#sw $t0, ($sp) # IdentifierExp at 22.18	
1388#jal printInt # Call at 22.9 	 
1392#subu $sp, $sp, 4 # Super at 23.9		 
1396#sw $s2, ($sp) # Super at 23.9	 
1400#subu $sp, $sp, 4 # StringLiteral at 23.18		 
1404#la $t0, strLit_111 # StringLiteral at 23.18 	 
1408#sw $t0, ($sp) # StringLiteral at 23.18	  
1412#jal printStr # Call at 23.9   
1416#subu $sp, $sp, 4 # Super at 24.9	 	
1420#sw $s2, ($sp) # Super at 24.9	  
1424#lw $t0, 100($sp) # IdentifierExp at 24.18 		
1428#subu $sp, $sp, 8 # IdentifierExp at 24.18	  
1432#sw $s5, 4($sp) # IdentifierExp at 24.18		 
1436#sw $t0, ($sp) # IdentifierExp at 24.18 
1440#jal printInt # Call at 24.9	
1444#subu $sp, $sp, 4 # Super at 25.9 
1448#sw $s2, ($sp) # Super at 25.9		
1452#subu $sp, $sp, 4 # StringLiteral at 25.18  
1456#la $t0, strLit_119 # StringLiteral at 25.18			
1460#sw $t0, ($sp) # StringLiteral at 25.18	 	
1464#jal printStr # Call at 25.9		 
1468#subu $sp, $sp, 4 # Super at 26.9 	 
1472#sw $s2, ($sp) # Super at 26.9 
1476#lw $t0, 92($sp) # IdentifierExp at 26.18   
1480#subu $sp, $sp, 8 # IdentifierExp at 26.18	
1484#sw $s5, 4($sp) # IdentifierExp at 26.18		 
1488#sw $t0, ($sp) # IdentifierExp at 26.18 	 
1492#jal printInt # Call at 26.9 		
1496#subu $sp, $sp, 4 # Super at 27.9			
1500#sw $s2, ($sp) # Super at 27.9 	
1504#subu $sp, $sp, 4 # StringLiteral at 27.18		
1508#la $t0, strLit_127 # StringLiteral at 27.18 		
1512#sw $t0, ($sp) # StringLiteral at 27.18	 	
1516#jal printStr # Call at 27.9 		
1520#subu $sp, $sp, 4 # Super at 28.9   
1524#sw $s2, ($sp) # Super at 28.9	
1528#lw $t0, 84($sp) # IdentifierExp at 28.18  
1532#subu $sp, $sp, 8 # IdentifierExp at 28.18		
1536#sw $s5, 4($sp) # IdentifierExp at 28.18	 
1540#sw $t0, ($sp) # IdentifierExp at 28.18	 	
1544#jal printInt # Call at 28.9		
1548#subu $sp, $sp, 4 # Super at 29.9  	
1552#sw $s2, ($sp) # Super at 29.9		
1556#subu $sp, $sp, 4 # StringLiteral at 29.18		 
1560#la $t0, strLit_135 # StringLiteral at 29.18	
1564#sw $t0, ($sp) # StringLiteral at 29.18  
1568#jal printStr # Call at 29.9	  
1572#subu $sp, $sp, 4 # Super at 30.9 
1576#sw $s2, ($sp) # Super at 30.9	
1580#lw $t0, 76($sp) # IdentifierExp at 30.18  
1584#subu $sp, $sp, 8 # IdentifierExp at 30.18 	
1588#sw $s5, 4($sp) # IdentifierExp at 30.18  
1592#sw $t0, ($sp) # IdentifierExp at 30.18  
1596#jal printInt # Call at 30.9 	
1600#subu $sp, $sp, 4 # Super at 31.9			
1604#sw $s2, ($sp) # Super at 31.9		 
1608#subu $sp, $sp, 4 # StringLiteral at 31.18		
1612#la $t0, strLit_143 # StringLiteral at 31.18		 
1616#sw $t0, ($sp) # StringLiteral at 31.18	
1620#jal printStr # Call at 31.9	
1624#subu $sp, $sp, 4 # Super at 32.9	  
1628#sw $s2, ($sp) # Super at 32.9	
1632#lw $t0, 68($sp) # IdentifierExp at 32.18 
1636#subu $sp, $sp, 8 # IdentifierExp at 32.18	 
1640#sw $s5, 4($sp) # IdentifierExp at 32.18 
1644#sw $t0, ($sp) # IdentifierExp at 32.18 	
1648#jal printInt # Call at 32.9  
1652#subu $sp, $sp, 4 # Super at 33.9 	
1656#sw $s2, ($sp) # Super at 33.9  	
1660#subu $sp, $sp, 4 # StringLiteral at 33.18 	
1664#la $t0, strLit_151 # StringLiteral at 33.18			
1668#sw $t0, ($sp) # StringLiteral at 33.18	  
1672#jal printStr # Call at 33.9			
1676#subu $sp, $sp, 4 # Super at 34.9	  
1680#sw $s2, ($sp) # Super at 34.9			
1684#lw $t0, 60($sp) # IdentifierExp at 34.18 	
1688#subu $sp, $sp, 8 # IdentifierExp at 34.18	  
1692#sw $s5, 4($sp) # IdentifierExp at 34.18 	
1696#sw $t0, ($sp) # IdentifierExp at 34.18 		
1700#jal printInt # Call at 34.9  
1704#subu $sp, $sp, 4 # Super at 35.9			
1708#sw $s2, ($sp) # Super at 35.9  
1712#subu $sp, $sp, 4 # StringLiteral at 35.18  	
1716#la $t0, strLit_159 # StringLiteral at 35.18	 	
1720#sw $t0, ($sp) # StringLiteral at 35.18 	 
1724#jal printStr # Call at 35.9  
1728#subu $sp, $sp, 4 # Super at 36.9		
1732#sw $s2, ($sp) # Super at 36.9   
1736#lw $t0, 52($sp) # IdentifierExp at 36.18 	
1740#subu $sp, $sp, 8 # IdentifierExp at 36.18		
1744#sw $s5, 4($sp) # IdentifierExp at 36.18  
1748#sw $t0, ($sp) # IdentifierExp at 36.18	  
1752#jal printInt # Call at 36.9 	
1756#subu $sp, $sp, 4 # Super at 37.9  	
1760#sw $s2, ($sp) # Super at 37.9  	
1764#subu $sp, $sp, 4 # StringLiteral at 37.18	  
1768#la $t0, strLit_167 # StringLiteral at 37.18 	 
1772#sw $t0, ($sp) # StringLiteral at 37.18		
1776#jal printStr # Call at 37.9		
1780#subu $sp, $sp, 4 # Super at 38.9  	
1784#sw $s2, ($sp) # Super at 38.9  
1788#lw $t0, 44($sp) # IdentifierExp at 38.18  	
1792#subu $sp, $sp, 8 # IdentifierExp at 38.18  
1796#sw $s5, 4($sp) # IdentifierExp at 38.18			
1800#sw $t0, ($sp) # IdentifierExp at 38.18	 	
1804#jal printInt # Call at 38.9	 	
1808#subu $sp, $sp, 4 # Super at 39.9	  
1812#sw $s2, ($sp) # Super at 39.9   
1816#subu $sp, $sp, 4 # StringLiteral at 39.18 		
1820#la $t0, strLit_175 # StringLiteral at 39.18	  
1824#sw $t0, ($sp) # StringLiteral at 39.18 	
1828#jal printStr # Call at 39.9		 
1832#subu $sp, $sp, 4 # Super at 40.9   
1836#sw $s2, ($sp) # Super at 40.9		
1840#lw $t0, 36($sp) # IdentifierExp at 40.18		
1844#subu $sp, $sp, 8 # IdentifierExp at 40.18		 
1848#sw $s5, 4($sp) # IdentifierExp at 40.18 	
1852#sw $t0, ($sp) # IdentifierExp at 40.18 	
1856#jal printInt # Call at 40.9   
1860#subu $sp, $sp, 4 # Super at 41.9			
1864#sw $s2, ($sp) # Super at 41.9  	
1868#subu $sp, $sp, 4 # StringLiteral at 41.18		 
1872#la $t0, strLit_183 # StringLiteral at 41.18 		
1876#sw $t0, ($sp) # StringLiteral at 41.18			
1880#jal printStr # Call at 41.9		 
1884#subu $sp, $sp, 4 # Super at 42.9 	 
1888#sw $s2, ($sp) # Super at 42.9		
1892#lw $t0, 28($sp) # IdentifierExp at 42.18		 
1896#subu $sp, $sp, 8 # IdentifierExp at 42.18	
1900#sw $s5, 4($sp) # IdentifierExp at 42.18   
1904#sw $t0, ($sp) # IdentifierExp at 42.18 	 
1908#jal printInt # Call at 42.9 
1912#subu $sp, $sp, 4 # Super at 43.9			
1916#sw $s2, ($sp) # Super at 43.9	  
1920#subu $sp, $sp, 4 # StringLiteral at 43.18	 
1924#la $t0, strLit_191 # StringLiteral at 43.18	 	
1928#sw $t0, ($sp) # StringLiteral at 43.18		 
1932#jal printStr # Call at 43.9 		
1936#subu $sp, $sp, 4 # Super at 44.9 	
1940#sw $s2, ($sp) # Super at 44.9	 	
1944#lw $t0, 20($sp) # IdentifierExp at 44.18  	
1948#subu $sp, $sp, 8 # IdentifierExp at 44.18 	 
1952#sw $s5, 4($sp) # IdentifierExp at 44.18   
1956#sw $t0, ($sp) # IdentifierExp at 44.18 		
1960#jal printInt # Call at 44.9		 
1964#subu $sp, $sp, 4 # Super at 45.9	
1968#sw $s2, ($sp) # Super at 45.9 		
1972#subu $sp, $sp, 4 # StringLiteral at 45.18	 
1976#la $t0, strLit_199 # StringLiteral at 45.18  	
1980#sw $t0, ($sp) # StringLiteral at 45.18			
1984#jal printStr # Call at 45.9		
1988#subu $sp, $sp, 4 # Super at 46.9	 
1992#sw $s2, ($sp) # Super at 46.9		
1996#lw $t0, 12($sp) # IdentifierExp at 46.18 	
2000#subu $sp, $sp, 8 # IdentifierExp at 46.18   
2004#sw $s5, 4($sp) # IdentifierExp at 46.18		
2008#sw $t0, ($sp) # IdentifierExp at 46.18  	
2012#jal printInt # Call at 46.9 	 
2016#subu $sp, $sp, 4 # Super at 47.9 	
2020#sw $s2, ($sp) # Super at 47.9		 
2024#subu $sp, $sp, 4 # StringLiteral at 47.18  
2028#la $t0, strLit_207 # StringLiteral at 47.18  
2032#sw $t0, ($sp) # StringLiteral at 47.18	
2036#jal printStr # Call at 47.9		
2040#subu $sp, $sp, 4 # Super at 48.9  	
2044#sw $s2, ($sp) # Super at 48.9	 	
2048#lw $t0, 4($sp) # IdentifierExp at 48.18   
2052#subu $sp, $sp, 8 # IdentifierExp at 48.18  
2056#sw $s5, 4($sp) # IdentifierExp at 48.18 	 
2060#sw $t0, ($sp) # IdentifierExp at 48.18 
2064#jal printInt # Call at 48.9 	
2068#subu $sp, $sp, 4 # Super at 49.9 		
2072#sw $s2, ($sp) # Super at 49.9	 	
2076#subu $sp, $sp, 4 # StringLiteral at 49.18 
2080#la $t0, strLit_215 # StringLiteral at 49.18	  
2084#sw $t0, ($sp) # StringLiteral at 49.18 		
2088#jal printStr # Call at 49.9	 	
2092#lw $ra, 124($sp) # MethodDeclVoid at 2.14			
2096#lw $s2, 4($sp) # MethodDeclVoid at 2.14	 	
2100#addu $sp, $sp, 132 # MethodDeclVoid at 2.14 
2104#jr $ra # MethodDeclVoid at 2.14 
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
2108:readLine:
	
2108#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
2112#	sw $ra, 4($sp) # save $ra
2116#	move $t1,$sp # save "original" sp

2120:  doRead:

	# read the character
2120#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
2124#	subu $t2,$v0,13
2128#	bne $t2,$zero,notReturnRL
2132#	jal readLogicalChar
2136#	subu $t2,$v0,10 # check for newline
2140#	beq $t2,$zero,foundNewLine
2144#	sw $v0,lastCharRead # push back character into queue
2148#	j foundNewLine # go process the line

2152:  notReturnRL:

	# at this point, $v0 has our character

2152#	subu $t0,$v0,10
2156#	beq $t0,$zero,foundNewLine
2160#	blt $v0,$zero,foundEof
2161##...slt $at,$v0,$zero
2165##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
2168#	subu $sp,$sp,4
2172#	sw $v0,($sp)

	# loop back up to get next character
2176#	j doRead

2180:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2180#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
2184#	sw $zero,8($sp) # return-value: null
2188#	j rlReturn # return

2192:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
2192#	subu $t0,$t1,$sp # number of chars we read (times 4)
2196#	srl $s6,$t0,2 # number of words on stack with chars
2200#	subu $sp,$sp,4 # push char-count ...
2204#	sw $s6,($sp) # ... onto stack
2208#	addu $t2,$t0,5 # GC tag, incl. for count-word
2212#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
2216#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2220#	srl $s6,$s6,2 # data words in object
2224#	move $s7,$zero # # object words in object
2228#	jal newObject # allocate space
	
	# store header words
2232#	la $t0,CLASS_String
2236#	sw $t0,-12($s7) # store class tag (String) into object
2240#	lw $t2,4($sp) # char-count
2244#	sll $t1,$t2,2 # 4 times number of chars
2248#	subu $t2,$zero,$t2 # negative of char-count
2252#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
2256#	lw $t0,-8($s7) # data words in object
2260#	sll $t0,$t0,2 # data bytes in object
2264#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
2268#	subu $t0,$t0,$t2 # place to store last character (plus 9)
2272#	addu $sp,$sp,8 # pop redundant object-pointer and count
2276#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

2280#	beq $sp,$t1,doneCharCopy
2284:  charCopyLoop:
2284#	lw $t2,($sp)
2288#	sb $t2,-9($t0)
2292#	addu $sp,$sp,4
2296#	subu $t0,$t0,1
2300#	bne $sp,$t1,charCopyLoop
2304:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
2304#	sw $s7,8($sp)
	
2308:  rlReturn:
	# restore return address and return
2308#	lw $ra,4($sp) # restore return address, ...
2312#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
2316#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2320:readInt:

	# save $ra by pushing onto stack
2320#	subu $sp,$sp,4
2324#	sw $ra,($sp)

2328:  riSkipWhiteLoop:
	# read a character
2328#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
2332#	subu $t0,$v0,32
2336#	bgt $t0,$zero,nonWhite
2337##...slt $at,$zero,$t0
2341##...bne $at,$zero,$+44
2344#	beq $t0,$zero,riSkipWhiteLoop # start over if space
2348#	subu $t0,$v0,10
2352#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
2356#	subu $t0,$v0,9
2360#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
2364#	subu $t0,$v0,13
2368#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
2372#	subu $t0,$v0,12
2376#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
2380#	j badIntegerFormat # illegal integer char: abort program

2384:  nonWhite:
2384#	subu $t0,$v0,'-'
2388#	li $t4,1 # final multiplier
2392#	bne $t0,$zero,helpReadInt # go read
2396#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
2400#	jal readLogicalChar

2404:  helpReadInt:
2404#	li $t2,10
2408#	subu $t1,$v0,'0' # convert digit to 0-9 value
2412#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
2413##...sltu $at,$t1,$t2
2417##...beq $at,$zero,$+2080
2420#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

2424:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

2424#	jal readLogicalChar # read next character
2428#	subu $t1,$v0,'0' # convert digit to 0-9 value
2432#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
2433##...sltu $at,$t1,$t2
2437##...beq $at,$zero,$+20

2440#	mul $t3,$t3,$t2 # multiply old value by 10
2441##...mult $t3,$t2
2445##...mflo $t3
2448#	addu $t3,$t3,$t1 # add in value of new digit
2452#	j digitLoop

2456:  doneDigitLoop:

	# "push back" unused character into queue
2456#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
2460#	lw $ra,($sp)
2464#	mult $t3,$t4 # multiply to account for poss. minus sign
2468#	mflo $t3
2472#	sw $t3,($sp) # result
2476#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
2480#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2484:readChar:

	# save $ra by pushing onto stack
2484#	subu $sp,$sp,4
2488#	sw $ra,($sp)

  	# read the character
2492#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
2496#	lw $ra,($sp)
2500#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2504#	sw $v0,($sp)

	# return
2508#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
2512:printStr:
	# check for null, printing "(null)", if so
2512#	lw $t0,($sp)
2516#	bne $t0,$zero,psNotNull

	# print "(null)"
2520#	la $a0,nullStr
2524#	li $v0,4
2528#	syscall
2532#	j donePrintStr
	
2536:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2536#	subu $t0,$t0,8
2540#	lw $t1,($t0) # word just beyond end of string
2544#	sll $t1,$t1,2
2548#	subu $t1,$t0,$t1 # first word in string
2552#	lw $t0,4($t0) # negative of string-length
2556#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
2560#	beq $t0,$t1,donePrintStr
2564:  psLoop:
2564#	lb $a0,($t1) # next byte
2568#	li $v0,11 # code for printing char
2572#        syscall # print the char
2576#	addu $t1,$t1,1 # go to next char
2580#	blt $t1,$t0,psLoop
2581##...slt $at,$t1,$t0
2585##...bne $at,$zero,$-20

2588:  donePrintStr:
	# pop stack and return
2588#	addu $sp,$sp,8
2592#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2596:printInt:
	# pop value off stack, along with 'this'
2596#	lw $a0,($sp)
2600#	addu $sp,$sp,12

	# print it
2604#	li $v0,1 # code for print-int
2608#	syscall

	# return
2612#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2616:printBool:
	# pop value off stack, along with 'this'
2616#	lw $t0,($sp)
2620#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2624#	la $a0,falseString
2628#	beq $t0,$zero,skipPB
2632#	la $a0,trueString
2636:  skipPB:
2636#	li $v0,4 # code for print-string
2640#	syscall

	# return
2644#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2648:substring:

	# save $ra by pushing onto stack
2648#	subu $sp,$sp,4
2652#	sw $ra,($sp)

	# get string value off stack, test for null
2656#	lw $t0,20($sp)
2660#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2664#	lw $t0,-4($t0) # negative of string length
2668#	subu $t0,$zero,$t0 # string length
2672#	lw $t1,4($sp) # k
2676#	lw $t2,12($sp) # n
2680#	bgt $zero,$t2,strIndexOutOfBounds
2681##...slt $at,$t2,$zero
2685##...bne $at,$zero,$+1780
2688#	bgt $t2,$t1,strIndexOutOfBounds
2689##...slt $at,$t1,$t2
2693##...bne $at,$zero,$+1772
2696#	bgt $t1,$t0,strIndexOutOfBounds
2697##...slt $at,$t0,$t1
2701##...bne $at,$zero,$+1764

	# allocate memory
2704#	subu $s6,$t1,$t2 # # chars in target-string
2708#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2712#	srl $s6,$s6,2 # convert bytes-count to word-count
2716#	move $s7,$zero # (no object-bytes in string)
2720#	jal newObject

	# store "String" tag in object-type field
2724#	la $t0,CLASS_String
2728#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2732#	lw $t1,8($sp) # k
2736#	lw $t2,16($sp) # n
2740#	subu $t0,$t2,$t1 # value to store
2744#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2748#	lw $t3,24($sp) # source string pointer
2752#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2756#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2760#	lw $t4,-8($t3) # # data words in source string
2764#	sll $t4,$t4,2 # # data bytes in source string
2768#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2772#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2776#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2780#	lw $t2,-8($s7) # # data words in target string
2784#	sll $t2,$t2,2 # # data bytes in target string
2788#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2792:  subCopyLoopzz:
2792#	lb $t4,-8($t3)
2796#	sb $t4,-8($t2)
2800#	addu $t2,$t2,1
2804#	addu $t3,$t3,1
2808#	blt $t3,$t1,subCopyLoopzz
2809##...slt $at,$t3,$t1
2813##...bne $at,$zero,$-20
	
2816:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2816#	lw $ra,4($sp) # restore $ra
2820#	addu $sp,$sp,24 # pop stack
	
	# return
2824#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2828:length:

	# get string pointer
2828#	lw $t0,($sp)
	
	# grow stack
2832#	subu $sp,$sp,4

	# store GC tag
2836#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2840#	lw $t0,-4($t0) # -length
2844#	subu $t0,$zero,$t0
2848#	sw $t0,($sp) #store length

	# return
2852#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2856:concat:
 	# save $ra by pushing onto stack
2856#	subu $sp,$sp,4
2860#	sw $ra($sp)

	# get string pointers and check parameter for null
2864#	lw $t0,4($sp)
2868#	beq $t0,$zero,nullPtrException
2872#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2876#	lw $t0,-4($t0) # negative size of second object
2880#	lw $t1,-4($t1) # negative size of first object
2884#	addu $s6,$t0,$t1 # sum of negative sizes
2888#	sra $s6,$s6,2 # negative word-size of char part
2892#	subu $s6,$zero,$s6 # word size of char part
2896#	addu $s6,$s6,1 # data word size, including v-table word
2900#	move $s7,$zero
2904#	jal newObject

	# store "String" tag in object-type field
2908#	la $t0,CLASS_String
2912#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2916#	lw $ra,4($sp) # return address
2920#	lw $t0,8($sp) # second object
2924#	lw $t1,12($sp) # first object
2928#	addu $sp,$sp,12 # pop
2932#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2936#	lw $t2,-4($t0) # negative length of second object
2940#	lw $t3,-4($t1) # negative length of first object
2944#	addu $t4,$t2,$t3 # sum of negative lengths
2948#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2952#	lw $t4,-8($t1) # # data words in first string
2956#	sll $t4,$t4,2 # # data bytes in first string
2960#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2964#	lw $t4,-8($s7) # # data words in new string
2968#	sll $t4,$t4,2 # # data bytes in new string
2972#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2976#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2980#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2984:  concatLoop1zz:
2984#	lb $t4,-8($t1)
2988#	sb $t4,-8($s7)
2992#	addu $s7,$s7,1
2996#	addu $t1,$t1,1
3000#	blt $t1,$t3,concatLoop1zz
3001##...slt $at,$t1,$t3
3005##...bne $at,$zero,$-20
3008:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
3008#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
3012#	lw $t4,-8($t0) # # data words in second string
3016#	sll $t4,$t4,2 # # data bytes in second string
3020#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
3024#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
3028:  concatLoop2zz:
3028#	lb $t4,-8($t1)
3032#	sb $t4,-8($s7)
3036#	addu $s7,$s7,1
3040#	addu $t1,$t1,1
3044#	blt $t1,$t3,concatLoop2zz
3045##...slt $at,$t1,$t3
3049##...bne $at,$zero,$-20
3052:  doneConcatLoop2zz:
 
3052:  concatRtnzz:
	# return
3052#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
3056:charAt:
	# get string
3056#	lw $t0,8($sp)

	# check that index is in bounds
3060#	lw $t1,-4($t0) # negative of # data words in string
3064#	subu $t3,$zero,$t1 # # chars in string
3068#	lw $t2,($sp) # index
3072#	bgeu $t2,$t3,strIndexOutOfBounds
3073##...sltu $at,$t2,$t3
3077##...beq $at,$zero,$+1388

	# access element
3080#	lw $t1,-8($t0) # # data words in object
3084#	sll $t1,$t1,2 # - byte-offset from end of chars
3088#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3092#	addu $t0,$t0,$t1 # - address of our char, offset by 8
3096#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
3100#	addu $sp,$sp,4
3104#	sw $t0,($sp)
3108#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
3112#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
3116:intToString:

	# save return address on stack; allocate space for dummy GC tag
3116#	subu $sp,$sp,8
3120#	sw $ra,4($sp)

	# save current sp
3124#	move $t0,$sp

	# move constant 10 into $t3
3128#	li $t3,10

	# get argument, negate if negative
3132#	lw $t1,8($sp)
3136#	bge $t1,$zero,itsNonNegLoop
3137##...slt $at,$t1,$zero
3141##...beq $at,$zero,$+8
3144#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
3148:  itsNonNegLoop:
3148#	divu $t1,$t3
3152#	mflo $t1 # quotient
3156#	mfhi $t4 # remainder
3160#	addu $t4,$t4,'0' # turn remainder into digit
3164#	subu $sp,$sp,4
3168#	sw $t4,($sp) # push digit onto stack
3172#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
3176#	lw $t4,8($t0)
3180#	bge $t4,$zero,itsSkipNeg
3181##...slt $at,$t4,$zero
3185##...beq $at,$zero,$+16
3188#	li $t4,'-'
3192#	subu $sp,$sp,4
3196#	sw $t4,($sp)
3200:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
3200#	subu $s6,$t0,$sp
3204#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
3208#	sw $t3,($t0)
3212#	srl $s6,$s6,2
3216#	subu $sp,$sp,4
3220#	sw $s6,($sp)
	
	# allocate memory
3224#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3228#	srl $s6,$s6,2
3232#	move $s7,$zero # no "object" words in object
3236#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
3240#	lw $t0,4($sp)
3244#	addu $sp,$sp,8

	# store "String" tag into class field
3248#	subu $s7,$s7,8 # address of header-1 word
3252#	la $t1,CLASS_String
3256#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
3260#	subu $t0,$zero,$t0
3264#	sw $t0,4($s7)

3268#	lw $t1,($s7) # number of data words in string
3272#	sll $t1,$t1,2 # number data bytes in string
3276#	subu $t1,$s7,$t1 # first location to store chars in string
3280#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
3284:  itsLoop:
3284#	lw $t2,($sp)
3288#	addu $sp,$sp,4
3292#	sb $t2,($t1)
3296#	addu $t1,$t1,1
3300#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
3304#	lw $ra,4($sp)
3308#	addu $sp,$sp,16
3312#	addu $t0,$t0,15
3316#	and $t0,$t0,0xfffffffc
3317##...lui $at,65535
3321##...ori $at,$at,0xfffc
3325##...and $t0,$t0,$at
3328#	sw $t0,($sp)
3332#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3336:intToChar:
	# save return address
3336#	subu $sp,$sp,4
3340#	sw $ra,($sp)

	# allocate object
3344#	li $s6,2
3348#	move $s7,$zero
3352#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
3356#	lw $ra,4($sp)
3360#	lw $t1,8($sp)
3364#	addu $sp,$sp,16

	# store "String" tag into class field
3368#	la $t0,CLASS_String
3372#	sw $t0,-12($s7)

	# store data in string
3376#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
3380#	li $t0,-1
3384#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
3388#	sw $s7,($sp)

	# return
3392#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
3396:compareTo:
	# get string pointers and check parameter for null
3396#	lw $t0,($sp) # second string
3400#	beq $t0,$zero,nullPtrException
3404#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
3408#	lw $t2,-4($t0) # negative length of second string
3412#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
3416#	slt $t4,$t3,$t2
3420#	slt $t5,$t2,$t3
3424#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
3428#	lw $t2,-8($t0) # # data words in second string
3432#	lw $t3,-8($t1) # # data words in first string
3436#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3440#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3444#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
3448#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
3452#	beq $zero,$t5,skipStrCmpLenzz
3456#	move $t2,$t3
3460:  skipStrCmpLenzz:
3460#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
3464:  cmpLoopzz:
3464#	lw $t3,-8($t1) # word from str2
3468#	lw $t4,-8($t0) # word from str1
3472#	bne $t3,$t4,cmpNotEqualzz
3476#	addu $t1,$t1,4
3480#	addu $t0,$t0,4
3484#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
3488#	j cmpHitLimitzz

3492:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
3492#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3496#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
3500#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
3504:  cmpHitLimitzz:
3504#	sw $t5,($sp) # store value
3508#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
3512#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3516:readLogicalChar:

	# check if we already have a character
3516#	lw $v0,lastCharRead
3520#	li $t0,-2
3524#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
3528#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3532#	jr $ra # return
	
3536:  doReadCh:
	# we need to actually read a character: read and return
3536#	li $v0,12 # use system call to read a character
3540#	syscall
3544#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3548:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
3548#	blt $s7,$zero arraySizeOutOfBounds
3549##...slt $at,$s7,$zero
3553##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
3556#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

3560:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
3560#	move $t3,$s6
3564#	bge $t3,$zero,newSkip
3565##...slt $at,$t3,$zero
3569##...beq $at,$zero,$+8
3572#	move $t3,$zero

3576:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3576#	addu $t0,$t3,$s7
3580#	sll $t0,$t0,2
3584#	addu $t0,$t0,8 # amount of memory needed
3588#	addu $t1,$t0,$s3
3592#	bgtu $t1,$s4,doGC
3593##...sltu $at,$s4,$t1
3597##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3600#	move $t2,$s3
3604:  zeroObjLoop:
3604#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3608#	addu $s3,4
3612#	bltu $s3,$t1,zeroObjLoop
3613##...sltu $at,$s3,$t1
3617##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3620#	sll $t0,$s7,2    # number of post-header bytes
3624#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3628#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3632#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3636#	move $s7,$t0
3640#	subu $sp,$sp,4
3644#	sw $t0,($sp)

3648#	jr $ra
	
3652:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3652#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3656#	subu $sp,$sp,4
3660#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3664#	lw $t0,cur_seg
3668#	move $t7,$s4
3672#	la $t6,seg1_start
3673##...lui $t6,16
3677##...addiu $t6,$t6,5060
3680#	la $s3,seg0_start
3684#	la $s4,seg0_end
3685##...lui $s4,16
3689##...addiu $s4,$s4,5060
3692#	sw $zero,cur_seg
3696#	bne $t0,$zero,skipGc1
3700#	la $t6,seg0_start
3704#	la $s3,seg1_start
3705##...lui $s3,16
3709##...addiu $s3,$s3,5060
3712#	la $s4,seg1_end
3713##...lui $s4,32
3717##...addiu $s4,$s4,5060
3720#	sw $s5,cur_seg
3724:  skipGc1:
3724#	li $t5,-2
3728#	lw $t0,stack_bottom
3732#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3736:  gcStackCopyLoop:
3736#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3740#	sll $t2,$t1,31 # zero iff low bit was zero
3744#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3748#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3752#	bleu $t1,$t6,gcTestIterDone1
3753##...sltu $at,$t6,$t1
3757##...beq $at,$zero,$+148
3760#	bgtu $t1,$t7,gcTestIterDone1
3761##...sltu $at,$t7,$t1
3765##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3768#	lw $t2,-8($t1) # possible forwarding tag
3772#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3776#	lw $t2,-4($t1) # forwarding pointer: object's new address
3780#	sw $t2,4($t0) # update stack value
3784#	j gcTestIterDone1 # do next iteration

3788:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3788#	bge $t2,$zero,gcSkip2
3789##...slt $at,$t2,$zero
3793##...beq $at,$zero,$+8
3796#	move $t2,$zero # set to zero if -1 (number of data words)

3800:  gcSkip2:
3800#	sll $t2,$t2,2
3804#	addu $t2,$t2,8
3808#	subu $t4,$t1,$t2 # address of first word of source
3812#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3816#	bge $t3,$zero,gcH2Neg1
3817##...slt $at,$t3,$zero
3821##...beq $at,$zero,$+8
3824#	move $t3,$zero
3828:  gcH2Neg1:
3828#	sll $t3,$t3,2
3832#	addu $t3,$t3,$t1 # address one word past last word of source

3836#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3840#	lw $s0,($t4)
3844#	lw $s1,-8($t1)
3848#	sw $s1,($t4)
3852#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3856:  gCinnerCopy1:
3856#	lw $s0,($t4)
3860#	sw $s0,($s3)
3864#	addu $t4,$t4,4
3868#	addu $s3,$s3,4
3872#	bltu $t4,$t3,gCinnerCopy1
3873##...sltu $at,$t4,$t3
3877##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3880#	sw $t5,-8($t1) # -2 in first header-slot
3884#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3888#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3892#	j gcTestIterDone1

3896:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3896#	subu $t0,$t0,$t1
3900#	subu $t0,$t0,3

3904:  gcTestIterDone1:
3904#	bgeu $t0,$sp,gcStackCopyLoop
3905##...sltu $at,$t0,$sp
3909##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3912#	lw $t1,cur_seg
3916#	la $t0,seg0_start
3920#	beq $t1,$zero,gcSkip4
3924#	la $t0,seg1_start
3925##...lui $t0,16
3929##...addiu $t0,$t0,5060

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3932:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3932#	bgeu $t0,$s3,gcFinishUp
3933##...sltu $at,$t0,$s3
3937##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3940:  gcHeapCopyLoop:
	# check if we have a data array
3940#	lw $t1,($t0) # first header word for current object
3944#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3945##...slt $at,$t1,$zero
3949##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3952#	lw $t1,4($t0) # data words
3956#	addu $t1,$t1,2 # add in # header words
3960#	sll $t1,$t1,2 # convert to byte-count
3964#	addu $t0,$t0,$t1 # skip over object
3968#	j gcTestIterDone2 # go do next object, if any

3972:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3972#	sll $t2,$t1,2 # # data bytes
3976#	addu $t2,$t2,8 # to skip header word
3980#	addu $t2,$t0,$t2 # pointer to new object
3984#	lw $t3,-8($t2) # word to swap
3988#	sw $t1,-8($t2) # store header word
3992#	sw $t3,($t0) # restore first word of object

3996#	lw $t3,-4($t2) # # object words (negative treated as zero)
4000#	bge $t3,$zero,gcH2Neg2
4001##...slt $at,$t3,$zero
4005##...beq $at,$zero,$+8
4008#	move $t3,$zero
4012:  gcH2Neg2:
4012#	sll $t3,$t3,2 # # object bytes
4016#	move $t0,$t2 # address of first pointer in object
4020#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
4024#	beq $t0,$s1,gcTestIterDone2
	
4028:  gcNextPointerInObject:
	# get pointer from object
4028#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
4032#	bleu $t1,$t6,gcGoNextPointerSlot
4033##...sltu $at,$t6,$t1
4037##...beq $at,$zero,$+136
4040#	bgtu $t1,$t7,gcGoNextPointerSlot
4041##...sltu $at,$t7,$t1
4045##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4048#	lw $t8,-8($t1) # possible forwarding tag
4052#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
4056#	lw $t8,-4($t1) # forwarding pointer: object's new address
4060#	sw $t8,($t0) # update pointer in object
4064#	j gcGoNextPointerSlot # do next iteration

4068:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
4068#	bge $t8,$zero,gcSkip5
4069##...slt $at,$t8,$zero
4073##...beq $at,$zero,$+8
4076#	move $t8,$zero # set to zero if -1

4080:  gcSkip5:
4080#	sll $t8,$t8,2
4084#	addu $t8,$t8,8
4088#	subu $t4,$t1,$t8 # address of first word of source
4092#	lw $t3,-4($t1)
4096#	bge $t3,$zero,gcNoNeg
4097##...slt $at,$t3,$zero
4101##...beq $at,$zero,$+8
4104#	move $t3,$zero
4108:  gcNoNeg:
4108#	sll $t3,$t3,2
4112#	addu $t3,$t3,$t1 # address one word past last word of source

4116#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
4120#	lw $s0,($t4)
4124#	lw $t9,-8($t1)
4128#	sw $t9,($t4)
4132#	sw $s0,-8($t1)

	# copy all source bytes to the target
4136:  gCinnerCopy2:
4136#	lw $s0,($t4)
4140#	sw $s0,($s3)
4144#	addu $t4,$t4,4
4148#	addu $s3,$s3,4
4152#	bltu $t4,$t3,gCinnerCopy2
4153##...sltu $at,$t4,$t3
4157##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4160#	sw $t5,-8($t1) # -2 in first header-slot
4164#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
4168#	sw $t8,($t0)

4172:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
4172#	addu $t0,$t0,4
4176#	bltu $t0,$s1,gcNextPointerInObject
4177##...sltu $at,$t0,$s1
4181##...bne $at,$zero,$-152

4184:  gcTestIterDone2:
4184#	bltu $t0,$s3,gcHeapCopyLoop
4185##...sltu $at,$t0,$s3
4189##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

4192:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
4192#	lw $s2,($sp)
4196#	addu $sp,$sp,4

	# mark us as having already GC'd
4200#	move $t5,$s5

	# go try and allocate again
4204#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4208:vm_init:

	# mark bottom of stack
4208#	sw $sp,stack_bottom
4212#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
4216#	move $s2,$zero
4220#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
4224#	li $s5,5
4228#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

4232#	la $s3,seg0_start
4236#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
4240#	la $s4,seg0_end
4241##...lui $s4,16
4245##...addiu $s4,$s4,5060
4248#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
4252#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4256:divide:
	# get parameters; abort if divisor zero
4256#	lw $t0,($sp)
4260#	lw $t1,8($sp)
4264#	beq $t0,$zero,divByZeroError
	
	# perform division
4268#	div $t1,$t0
4272#	mflo $t0

	# store result, adjust stack and return
4276#	addu $sp,$sp,8 # adjust stack
4280#	sw $t0,($sp) # store result
4284#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4288:remainder:
	# get parameters; abort if divisor zero
4288#	lw $t0,($sp)
4292#	lw $t1,8($sp)
4296#	beq $t0,$zero,divByZeroError
	
	# perform division
4300#	div $t1,$t0
4304#	mfhi $t0

	# store result, adjust stack and return
4308#	addu $sp,$sp,8 # adjust stack
4312#	sw $t0,($sp) # store result
4316#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4320:checkCast:
	# get object, allow immediately if null
4320#	lw $t2,($sp)
4324#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
4328#	lw $t3,-8($t2) # <= 0 if array
4332#	lw $t2,-12($t2) # vtable address (unless array)
4336#	bgt $t3,$zero,skipArrayCast
4337##...slt $at,$zero,$t3
4341##...bne $at,$zero,$+8
4344#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4348:  skipArrayCast:
4348#	bge $t2,$t1,castException
4349##...slt $at,$t2,$t1
4353##...beq $at,$zero,$+152
4356#	blt $t2,$t0,castException
4357##...slt $at,$t2,$t0
4361##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
4364:  checkCastReturn:	
4364#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4368:instanceOf:
	# get object, go return false if null
4368#	lw $t2,($sp)
4372#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
4376#	lw $t3,-8($t2) # <= 0 if array
4380#	lw $t2,-12($t2) # vtable address (unless array)
4384#	bgt $t3,$zero,skipArrayInstanceOf
4385##...slt $at,$zero,$t3
4389##...bne $at,$zero,$+8
4392#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4396:  skipArrayInstanceOf:
4396#	sge $t0,$t2,$t0
4397##...slt $t0,$t2,$t0
4401##...xori $t0,$t0,0x1
4404#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
4408#	and $t2,$t0,$t1
4412:  doneInstanceOf: # if we reach here via branch, we know $t2=0
4412#	sw $t2,($sp)
4416#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4420:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
4420#	li $v0,4 # syscall-code for print-string
4424#	syscall
4428:exit:
	# print termination message
4428#	li $v0,4
4432#	la $a0,exitString
4436#	syscall

	# terminate execution
4440#	li $v0,10 #syscall-code for "exit"
4444#	syscall

4448:outOfHeapMemory:
4448#	la $a0,heapMemoryMsg
4452#	j exitError
4456:divByZeroError:
4456#	la $a0,divByZeroMsg
4460#	j exitError
4464:strIndexOutOfBounds:
4464#	la $a0,strIndexOutOfBoundsMsg
4468#	j exitError
4472:arrayIndexOutOfBounds:
4472#	la $a0,arrayIndexOutOfBoundsMsg
4476#	j exitError
4480:arraySizeOutOfBounds:
4480#	la $a0,arraySizeOutOfBoundsMsg
4484#	j exitError
4488:nullPtrException:
4488#	la $a0,nullPtrExceptionMsg
4492#	j exitError
4496:badIntegerFormat:
4496#	la $a0,badIntegerFormatMsg
4500#	j exitError
4504:castException:
4504#	la $a0,castExceptionMsg
4508#	j exitError

############## data section ################
	.data
	.align 2

4752:cur_seg:
	.word 0

4756:lastCharRead:
	.word -2 # -2 => no buffered character

4760:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4787:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4810:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4845:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4879:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4912:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4943:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4991:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
5012:gcMsg: 
      .asciiz "\nGC!\n"

5018:nullStr:
	.asciiz "null"
5023:trueString:
	.asciiz "true"
5028:falseString:
	.asciiz "false"
5034:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
5056:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

5060:seg0_start:
	.space 0x100000
1053636:seg0_end:
1053636:seg1_start:
	.space 0x100000
2102212:seg1_end:



