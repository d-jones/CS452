.data # Program at 19.1	  
4468:CLASS_Object: # ClassDecl at 0.0	 	
.word 0 # ClassDecl at 0.0 
4472:CLASS_Lib: # ClassDecl at 0.0 	 
.word CLASS_Object # ClassDecl at 0.0		
.word readLine # ClassDecl at 0.0   
.word readInt # ClassDecl at 0.0  	
.word readChar # ClassDecl at 0.0 	 
.word printStr # ClassDecl at 0.0  	
.word printBool # ClassDecl at 0.0 	
.word printInt # ClassDecl at 0.0  	
.word intToString # ClassDecl at 0.0		 
.word intToChar # ClassDecl at 0.0			
4508:CLASS_END_Lib: # ClassDecl at 0.0	
4508:CLASS_String: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0 		
.word concat # ClassDecl at 0.0 	 
.word substring # ClassDecl at 0.0 	
.word length # ClassDecl at 0.0 	 
.word charAt # ClassDecl at 0.0 	 
.word compareTo # ClassDecl at 0.0	  
4532:CLASS_END_String: # ClassDecl at 0.0 
4532:CLASS_RunMain: # ClassDecl at 0.0  
.word CLASS_Object # ClassDecl at 0.0	  
4536:CLASS_END_RunMain: # ClassDecl at 0.0			
4536:CLASS_Main: # ClassDecl at 19.7 
.word CLASS_Object # ClassDecl at 19.7 	
.word fcn_41_main # ClassDecl at 19.7 
.word fcn_76_add100Elements # ClassDecl at 19.7 	 
.word fcn_123_removeAlternateElements # ClassDecl at 19.7	 
4552:CLASS_END_Main: # ClassDecl at 19.7 	
4552:CLASS_IntList: # ClassDecl at 82.7	
.word CLASS_Object # ClassDecl at 82.7		 
.word fcn_141_init # ClassDecl at 82.7 	 
.word fcn_211_print # ClassDecl at 82.7	 
4564:CLASS_END_IntList: # ClassDecl at 82.7 
4564:CLASS_END_Object: # ClassDecl at 0.0			
 .data # Program at 19.1 		
  .word CLASS_String # StringLiteral at 102.21  
  .word 1 # StringLiteral at 102.21  
  .word 0 # StringLiteral at 102.21	
4576:strLit_150: # StringLiteral at 102.21 
  .byte 32 # StringLiteral at 114.18			
  .byte 0 # StringLiteral at 114.18 		
  .byte 0 # StringLiteral at 114.18		 
  .byte 0 # StringLiteral at 114.18 
  .word CLASS_String # StringLiteral at 114.18		 
  .word 2 # StringLiteral at 114.18   
  .word -1 # StringLiteral at 114.18	 
4592:strLit_178: # StringLiteral at 114.18	 
  .byte 10 # StringLiteral at 120.16	
  .byte 0 # StringLiteral at 120.16	
  .byte 0 # StringLiteral at 120.16 
  .byte 0 # StringLiteral at 120.16			
  .word CLASS_String # StringLiteral at 120.16	 	
  .word 2 # StringLiteral at 120.16 	 
  .word -1 # StringLiteral at 120.16 		
4608:strLit_185: # StringLiteral at 120.16 
  .word CLASS_String # StringLiteral at 121.15 
  .word 1 # StringLiteral at 121.15 		
  .word 0 # StringLiteral at 121.15   
4620:strLit_189: # StringLiteral at 121.15  	
  .byte 10 # StringLiteral at 129.19		
  .byte 0 # StringLiteral at 129.19  
  .byte 0 # StringLiteral at 129.19	  
  .byte 0 # StringLiteral at 129.19		 
  .word CLASS_String # StringLiteral at 129.19		
  .word 2 # StringLiteral at 129.19 	 
  .word -1 # StringLiteral at 129.19		
4636:strLit_205: # StringLiteral at 129.19 		
  # ENTER NODE # Program at 19.1	
  .text # Program at 19.1 		
  .globl main # Program at 19.1 	
0:  main: # Program at 19.1 	 
0#  jal vm_init # Program at 19.1  	
    # ENTER NODE # ExpStatement at 0.0	  
      # ENTER NODE # Call at 0.0		 
        # ENTER NODE # NewObject at 0.0			
4#        li $s6, 1 # NewObject at 0.0		 
8#        li $s7, 0 # NewObject at 0.0   
12#        jal newObject # NewObject at 0.0 		
16#        la $t0, CLASS_Main # NewObject at 0.0 	
20#        sw $t0, -12($s7) # NewObject at 0.0	 
        # EXIT NODE # NewObject at 0.0 	
24#      lw $t0, 0($sp) # Call at 0.0 		
28#      beq $t0, $zero, nullPtrException # Call at 0.0		 
32#      lw $t0, -12($t0) # Call at 0.0 		
36#      lw $t0, 4($t0) # Call at 0.0 		
40#      jalr $t0 # Call at 0.0		 
      # EXIT NODE # Call at 0.0  	
    # EXIT NODE # ExpStatement at 0.0 
44#  li $v0, 10 # Program at 19.1	 
48#  syscall # Program at 19.1		 
    # ENTER NODE # MethodDeclVoid at 24.17	  
    .globl fcn_41_main # MethodDeclVoid at 24.17		 
52:    fcn_41_main: # MethodDeclVoid at 24.17  	
52#    subu $sp, $sp, 8 # MethodDeclVoid at 24.17 	
56#    sw $ra, 4($sp) # MethodDeclVoid at 24.17   
60#    sw $s2, ($sp) # MethodDeclVoid at 24.17		 
64#    lw $s2, 8($sp) # MethodDeclVoid at 24.17  	
      # ENTER NODE # LocalVarDecl at 26.10 	
        # ENTER NODE # Null at 26.19   
68#        subu $sp, $sp, 4 # Null at 26.19		
72#        sw $zero, ($sp) # Null at 26.19		
        # EXIT NODE # Null at 26.19	
      # EXIT NODE # LocalVarDecl at 26.10 		
      # ENTER NODE # LocalVarDecl at 30.10			
        # ENTER NODE # False at 30.24		
76#        subu $sp, $sp, 4 # False at 30.24	
80#        sw $zero, ($sp) # False at 30.24  
        # EXIT NODE # False at 30.24  	
      # EXIT NODE # LocalVarDecl at 30.10 
      # ENTER NODE # Block at 34.2   
        # ENTER NODE # LocalVarDecl at 34.11		
          # ENTER NODE # IntegerLiteral at 34.15	
84#          subu $sp, $sp, 8 # IntegerLiteral at 34.15	  
88#          sw $s5, 4($sp) # IntegerLiteral at 34.15   
92#          li $t0, 0 # IntegerLiteral at 34.15 
96#          sw $t0, ($sp) # IntegerLiteral at 34.15	  
          # EXIT NODE # IntegerLiteral at 34.15  	
        # EXIT NODE # LocalVarDecl at 34.11		 
        # ENTER NODE # While at 34.2 	 
100#        j while_enter_36 # While at 34.2	  
104:        while_top_36: # While at 34.2 	 
          # ENTER NODE # Block at 34.2  	
            # ENTER NODE # Block at 34.33	 
              # ENTER NODE # Assign at 35.13	  
                # ENTER NODE # Call at 35.15  
                  # ENTER NODE # This at 35.15	 
104#                  subu $sp, $sp, 4 # This at 35.15   
108#                  sw $s2, ($sp) # This at 35.15	  
                  # EXIT NODE # This at 35.15			
                  # ENTER NODE # IdentifierExp at 35.30 	
112#                  lw $t0, 16($sp) # IdentifierExp at 35.30  	
116#                  subu $sp, $sp, 4 # IdentifierExp at 35.30  	
120#                  sw $t0, ($sp) # IdentifierExp at 35.30		 
                  # EXIT NODE # IdentifierExp at 35.30		
124#                lw $t0, 4($sp) # Call at 35.15   
128#                beq $t0, $zero, nullPtrException # Call at 35.15	  
132#                lw $t0, -12($t0) # Call at 35.15	
136#                lw $t0, 8($t0) # Call at 35.15  	
140#                jalr $t0 # Call at 35.15	 	
                # EXIT NODE # Call at 35.15 
144#              lw $t0, ($sp) # Assign at 35.13 	 
148#              sw $t0, 16($sp) # Assign at 35.13  
152#              addu $sp, $sp, 4 # Assign at 35.13 	
              # EXIT NODE # Assign at 35.13	 	
              # ENTER NODE # Assign at 36.13			
                # ENTER NODE # Call at 36.15  
                  # ENTER NODE # This at 36.15 		
156#                  subu $sp, $sp, 4 # This at 36.15	
160#                  sw $s2, ($sp) # This at 36.15	 
                  # EXIT NODE # This at 36.15 		
                  # ENTER NODE # IdentifierExp at 36.39 
164#                  lw $t0, 16($sp) # IdentifierExp at 36.39	  
168#                  subu $sp, $sp, 4 # IdentifierExp at 36.39  	
172#                  sw $t0, ($sp) # IdentifierExp at 36.39  	
                  # EXIT NODE # IdentifierExp at 36.39 
                  # ENTER NODE # IdentifierExp at 36.47 	
176#                  lw $t0, 16($sp) # IdentifierExp at 36.47  	
180#                  subu $sp, $sp, 4 # IdentifierExp at 36.47	 
184#                  sw $t0, ($sp) # IdentifierExp at 36.47	  
                  # EXIT NODE # IdentifierExp at 36.47	 
188#                lw $t0, 8($sp) # Call at 36.15			
192#                beq $t0, $zero, nullPtrException # Call at 36.15  
196#                lw $t0, -12($t0) # Call at 36.15	 	
200#                lw $t0, 12($t0) # Call at 36.15	 	
204#                jalr $t0 # Call at 36.15  	
                # EXIT NODE # Call at 36.15			
208#              lw $t0, ($sp) # Assign at 36.13	 
212#              sw $t0, 16($sp) # Assign at 36.13	 
216#              addu $sp, $sp, 4 # Assign at 36.13	 
              # EXIT NODE # Assign at 36.13   
              # ENTER NODE # Assign at 37.18		 
                # ENTER NODE # Not at 37.20  	
                  # ENTER NODE # IdentifierExp at 37.21 
220#                  lw $t0, 8($sp) # IdentifierExp at 37.21	
224#                  subu $sp, $sp, 4 # IdentifierExp at 37.21			
228#                  sw $t0, ($sp) # IdentifierExp at 37.21 
                  # EXIT NODE # IdentifierExp at 37.21	  
232#                lw $t0, ($sp) # Not at 37.20	 	
236#                xor $t0, $t0, 1 # Not at 37.20	  
240#                sw $t0, ($sp) # Not at 37.20 	
                # EXIT NODE # Not at 37.20   
244#              lw $t0, ($sp) # Assign at 37.18		 
248#              sw $t0, 12($sp) # Assign at 37.18	 
252#              addu $sp, $sp, 4 # Assign at 37.18	 	
              # EXIT NODE # Assign at 37.18		 
            # EXIT NODE # Block at 34.33 
            # ENTER NODE # Assign at 34.28		
              # ENTER NODE # Plus at 34.29 	
                # ENTER NODE # IdentifierExp at 34.28 	 
256#                lw $t0, 0($sp) # IdentifierExp at 34.28			
260#                subu $sp, $sp, 8 # IdentifierExp at 34.28	
264#                sw $s5, 4($sp) # IdentifierExp at 34.28 
268#                sw $t0, ($sp) # IdentifierExp at 34.28	 
                # EXIT NODE # IdentifierExp at 34.28	
                # ENTER NODE # IntegerLiteral at 34.29	 
272#                subu $sp, $sp, 8 # IntegerLiteral at 34.29 		
276#                sw $s5, 4($sp) # IntegerLiteral at 34.29   
280#                li $t0, 1 # IntegerLiteral at 34.29		 
284#                sw $t0, ($sp) # IntegerLiteral at 34.29		 
                # EXIT NODE # IntegerLiteral at 34.29	
288#              lw $t0, ($sp) # Plus at 34.29  
292#              lw $t1, 8($sp) # Plus at 34.29	
296#              addu $t0, $t0, $t1 # Plus at 34.29 		
300#              addu $sp, $sp, 8 # Plus at 34.29	 	
304#              sw $t0, ($sp) # Plus at 34.29 		
              # EXIT NODE # Plus at 34.29 		
308#            lw $t0, ($sp) # Assign at 34.28 	 
312#            sw $t0, 8($sp) # Assign at 34.28			
316#            addu $sp, $sp, 8 # Assign at 34.28	 
            # EXIT NODE # Assign at 34.28 	 
          # EXIT NODE # Block at 34.2	
320:        while_enter_36: # While at 34.2  	
          # ENTER NODE # LessThan at 34.20   
            # ENTER NODE # IdentifierExp at 34.18	  
320#            lw $t0, 0($sp) # IdentifierExp at 34.18 		
324#            subu $sp, $sp, 8 # IdentifierExp at 34.18 
328#            sw $s5, 4($sp) # IdentifierExp at 34.18	 	
332#            sw $t0, ($sp) # IdentifierExp at 34.18  
            # EXIT NODE # IdentifierExp at 34.18	 	
            # ENTER NODE # IntegerLiteral at 34.22 	 
336#            subu $sp, $sp, 8 # IntegerLiteral at 34.22		 
340#            sw $s5, 4($sp) # IntegerLiteral at 34.22 	
344#            li $t0, 1000 # IntegerLiteral at 34.22 	
348#            sw $t0, ($sp) # IntegerLiteral at 34.22		
            # EXIT NODE # IntegerLiteral at 34.22		
352#          lw $t0, ($sp) # LessThan at 34.20		
356#          lw $t1, 8($sp) # LessThan at 34.20 	 
360#          slt $t0, $t1, $t0 # LessThan at 34.20	 
364#          addu $sp, $sp, 12 # LessThan at 34.20  	
368#          sw $t0, ($sp) # LessThan at 34.20	 
          # EXIT NODE # LessThan at 34.20 	
372#        lw $t0, ($sp) # While at 34.2 		
376#        addu $sp, $sp, 4 # While at 34.2 		
380#        bne $t0, $zero, while_top_36 # While at 34.2	 
384:        while_exit_36: # While at 34.2	 	
        # EXIT NODE # While at 34.2			
384#      addu $sp, 8 # Block at 34.2		
      # EXIT NODE # Block at 34.2 		
      # ENTER NODE # ExpStatement at 41.9	 
        # ENTER NODE # Call at 41.9		
          # ENTER NODE # IdentifierExp at 41.2  	
388#          lw $t0, 4($sp) # IdentifierExp at 41.2  	
392#          subu $sp, $sp, 4 # IdentifierExp at 41.2 	 
396#          sw $t0, ($sp) # IdentifierExp at 41.2	
          # EXIT NODE # IdentifierExp at 41.2		
400#        lw $t0, 0($sp) # Call at 41.9  	
404#        beq $t0, $zero, nullPtrException # Call at 41.9  	
408#        lw $t0, -12($t0) # Call at 41.9		
412#        lw $t0, 8($t0) # Call at 41.9   
416#        jalr $t0 # Call at 41.9 		
        # EXIT NODE # Call at 41.9 	 
      # EXIT NODE # ExpStatement at 41.9  
420#    lw $ra, 12($sp) # MethodDeclVoid at 24.17  	
424#    lw $s2, 8($sp) # MethodDeclVoid at 24.17		 
428#    addu $sp, $sp, 20 # MethodDeclVoid at 24.17	
432#    jr $ra # MethodDeclVoid at 24.17	  
    # EXIT NODE # MethodDeclVoid at 24.17 	 
    # ENTER NODE # MethodDeclNonVoid at 47.20	  
    .globl fcn_76_add100Elements # MethodDeclNonVoid at 47.20 	
436:    fcn_76_add100Elements: # MethodDeclNonVoid at 47.20   
436#    subu $sp, $sp, 8 # MethodDeclNonVoid at 47.20 		
440#    sw $ra, 4($sp) # MethodDeclNonVoid at 47.20 	
444#    sw $s2, ($sp) # MethodDeclNonVoid at 47.20  
448#    lw $s2, 12($sp) # MethodDeclNonVoid at 47.20			
      # ENTER NODE # LocalVarDecl at 49.10 
        # ENTER NODE # IdentifierExp at 49.19	 
452#        lw $t0, 8($sp) # IdentifierExp at 49.19 
456#        subu $sp, $sp, 4 # IdentifierExp at 49.19	
460#        sw $t0, ($sp) # IdentifierExp at 49.19  
        # EXIT NODE # IdentifierExp at 49.19	 
      # EXIT NODE # LocalVarDecl at 49.10			
      # ENTER NODE # Block at 52.2 	
        # ENTER NODE # LocalVarDecl at 52.11	
          # ENTER NODE # IntegerLiteral at 52.15 
464#          subu $sp, $sp, 8 # IntegerLiteral at 52.15			
468#          sw $s5, 4($sp) # IntegerLiteral at 52.15		
472#          li $t0, 0 # IntegerLiteral at 52.15 
476#          sw $t0, ($sp) # IntegerLiteral at 52.15 	 
          # EXIT NODE # IntegerLiteral at 52.15			
        # EXIT NODE # LocalVarDecl at 52.11  	
        # ENTER NODE # While at 52.2		 
480#        j while_enter_73 # While at 52.2	  
484:        while_top_73: # While at 52.2	
          # ENTER NODE # Block at 52.2	 	
            # ENTER NODE # Block at 52.32	
              # ENTER NODE # Assign at 53.13 		
                # ENTER NODE # Call at 53.29	 	
                  # ENTER NODE # NewObject at 53.15			
484#                  li $s6, 1 # NewObject at 53.15			
488#                  li $s7, 0 # NewObject at 53.15 	 
492#                  jal newObject # NewObject at 53.15 	
496#                  la $t0, CLASS_IntList # NewObject at 53.15  	
500#                  sw $t0, -12($s7) # NewObject at 53.15 		
                  # EXIT NODE # NewObject at 53.15   
                  # ENTER NODE # IdentifierExp at 53.34  
504#                  lw $t0, -16($s2) # IdentifierExp at 53.34   
508#                  subu $sp, $sp, 8 # IdentifierExp at 53.34		
512#                  sw $s5, 4($sp) # IdentifierExp at 53.34 	
516#                  sw $t0, ($sp) # IdentifierExp at 53.34		
                  # EXIT NODE # IdentifierExp at 53.34	 	
                  # ENTER NODE # IdentifierExp at 53.41		
520#                  lw $t0, 20($sp) # IdentifierExp at 53.41	 
524#                  subu $sp, $sp, 4 # IdentifierExp at 53.41	  
528#                  sw $t0, ($sp) # IdentifierExp at 53.41 	 
                  # EXIT NODE # IdentifierExp at 53.41  	
532#                lw $t0, 12($sp) # Call at 53.29 	
536#                beq $t0, $zero, nullPtrException # Call at 53.29		
540#                lw $t0, -12($t0) # Call at 53.29 
544#                lw $t0, 4($t0) # Call at 53.29		 
548#                jalr $t0 # Call at 53.29	  
                # EXIT NODE # Call at 53.29 	 
552#              lw $t0, ($sp) # Assign at 53.13			
556#              sw $t0, 12($sp) # Assign at 53.13 	 
560#              addu $sp, $sp, 4 # Assign at 53.13 
              # EXIT NODE # Assign at 53.13	
              # ENTER NODE # Assign at 54.6  	
                # ENTER NODE # Plus at 54.11	
                  # ENTER NODE # IdentifierExp at 54.6 		
564#                  lw $t0, -16($s2) # IdentifierExp at 54.6		
568#                  subu $sp, $sp, 8 # IdentifierExp at 54.6 	 
572#                  sw $s5, 4($sp) # IdentifierExp at 54.6 	 
576#                  sw $t0, ($sp) # IdentifierExp at 54.6 	 
                  # EXIT NODE # IdentifierExp at 54.6  
                  # ENTER NODE # IntegerLiteral at 54.11			
580#                  subu $sp, $sp, 8 # IntegerLiteral at 54.11 	 
584#                  sw $s5, 4($sp) # IntegerLiteral at 54.11  
588#                  li $t0, 1 # IntegerLiteral at 54.11	 
592#                  sw $t0, ($sp) # IntegerLiteral at 54.11			
                  # EXIT NODE # IntegerLiteral at 54.11  	
596#                lw $t0, ($sp) # Plus at 54.11	 	
600#                lw $t1, 8($sp) # Plus at 54.11	
604#                addu $t0, $t0, $t1 # Plus at 54.11 	
608#                addu $sp, $sp, 8 # Plus at 54.11		
612#                sw $t0, ($sp) # Plus at 54.11 		
                # EXIT NODE # Plus at 54.11 	 
616#              lw $t0, ($sp) # Assign at 54.6 		
620#              sw $t0, -16($s2) # Assign at 54.6	  
624#              addu $sp, $sp, 8 # Assign at 54.6 		
              # EXIT NODE # Assign at 54.6 		
            # EXIT NODE # Block at 52.32 		
            # ENTER NODE # Assign at 52.27			
              # ENTER NODE # Plus at 52.28  	
                # ENTER NODE # IdentifierExp at 52.27	  
628#                lw $t0, 0($sp) # IdentifierExp at 52.27			
632#                subu $sp, $sp, 8 # IdentifierExp at 52.27 		
636#                sw $s5, 4($sp) # IdentifierExp at 52.27	 	
640#                sw $t0, ($sp) # IdentifierExp at 52.27 	
                # EXIT NODE # IdentifierExp at 52.27	
                # ENTER NODE # IntegerLiteral at 52.28  
644#                subu $sp, $sp, 8 # IntegerLiteral at 52.28		 
648#                sw $s5, 4($sp) # IntegerLiteral at 52.28			
652#                li $t0, 1 # IntegerLiteral at 52.28 	
656#                sw $t0, ($sp) # IntegerLiteral at 52.28   
                # EXIT NODE # IntegerLiteral at 52.28	  
660#              lw $t0, ($sp) # Plus at 52.28		
664#              lw $t1, 8($sp) # Plus at 52.28 
668#              addu $t0, $t0, $t1 # Plus at 52.28	 
672#              addu $sp, $sp, 8 # Plus at 52.28	  
676#              sw $t0, ($sp) # Plus at 52.28 	 
              # EXIT NODE # Plus at 52.28   
680#            lw $t0, ($sp) # Assign at 52.27	
684#            sw $t0, 8($sp) # Assign at 52.27	
688#            addu $sp, $sp, 8 # Assign at 52.27		 
            # EXIT NODE # Assign at 52.27	
          # EXIT NODE # Block at 52.2 	 
692:        while_enter_73: # While at 52.2	  
          # ENTER NODE # LessThan at 52.20			
            # ENTER NODE # IdentifierExp at 52.18 	 
692#            lw $t0, 0($sp) # IdentifierExp at 52.18	  
696#            subu $sp, $sp, 8 # IdentifierExp at 52.18 	
700#            sw $s5, 4($sp) # IdentifierExp at 52.18 	 
704#            sw $t0, ($sp) # IdentifierExp at 52.18 	
            # EXIT NODE # IdentifierExp at 52.18			
            # ENTER NODE # IntegerLiteral at 52.22  
708#            subu $sp, $sp, 8 # IntegerLiteral at 52.22	 	
712#            sw $s5, 4($sp) # IntegerLiteral at 52.22	 
716#            li $t0, 100 # IntegerLiteral at 52.22	  
720#            sw $t0, ($sp) # IntegerLiteral at 52.22	  
            # EXIT NODE # IntegerLiteral at 52.22   
724#          lw $t0, ($sp) # LessThan at 52.20  
728#          lw $t1, 8($sp) # LessThan at 52.20	 
732#          slt $t0, $t1, $t0 # LessThan at 52.20 		
736#          addu $sp, $sp, 12 # LessThan at 52.20 	
740#          sw $t0, ($sp) # LessThan at 52.20	
          # EXIT NODE # LessThan at 52.20	  
744#        lw $t0, ($sp) # While at 52.2			
748#        addu $sp, $sp, 4 # While at 52.2  	
752#        bne $t0, $zero, while_top_73 # While at 52.2 	
756:        while_exit_73: # While at 52.2	  
        # EXIT NODE # While at 52.2	
756#      addu $sp, 8 # Block at 52.2	
      # EXIT NODE # Block at 52.2 	
      # ENTER NODE # IdentifierExp at 58.9			
760#      lw $t0, 0($sp) # IdentifierExp at 58.9	 	
764#      subu $sp, $sp, 4 # IdentifierExp at 58.9   
768#      sw $t0, ($sp) # IdentifierExp at 58.9	 
      # EXIT NODE # IdentifierExp at 58.9	
772#    lw $ra, 12($sp) # MethodDeclNonVoid at 47.20		 
776#    lw $s2, 8($sp) # MethodDeclNonVoid at 47.20	 	
780#    lw $t0, ($sp) # MethodDeclNonVoid at 47.20		 
784#    sw $t0, 20($sp) # MethodDeclNonVoid at 47.20   
788#    addu $sp, $sp, 20 # MethodDeclNonVoid at 47.20 	 
792#    jr $ra # MethodDeclNonVoid at 47.20   
      # ENTER NODE # MethodDeclNonVoid at 47.20 	 
        # ENTER NODE # MethodDeclNonVoid at 64.20		 
        .globl fcn_123_removeAlternateElements # MethodDeclNonVoid at 64.20 		
796:        fcn_123_removeAlternateElements: # MethodDeclNonVoid at 64.20 		
796#        subu $sp, $sp, 8 # MethodDeclNonVoid at 64.20 
800#        sw $ra, 4($sp) # MethodDeclNonVoid at 64.20			
804#        sw $s2, ($sp) # MethodDeclNonVoid at 64.20		
808#        lw $s2, 16($sp) # MethodDeclNonVoid at 64.20	 
          # ENTER NODE # If at 66.2 		
            # ENTER NODE # And at 66.18	 
              # ENTER NODE # IdentifierExp at 66.6  	
812#              lw $t0, 8($sp) # IdentifierExp at 66.6			
816#              subu $sp, $sp, 4 # IdentifierExp at 66.6  	
820#              sw $t0, ($sp) # IdentifierExp at 66.6		
              # EXIT NODE # IdentifierExp at 66.6 
824#            lw $t0, ($sp) # And at 66.18			
828#            beq $t0, $zero, skip_87 # And at 66.18  
832#            addu $sp, $sp, 4 # And at 66.18	
              # ENTER NODE # Not at 66.26 	
                # ENTER NODE # Equals at 66.26  
                  # ENTER NODE # IdentifierExp at 66.21		
836#                  lw $t0, 12($sp) # IdentifierExp at 66.21		 
840#                  subu $sp, $sp, 4 # IdentifierExp at 66.21	 	
844#                  sw $t0, ($sp) # IdentifierExp at 66.21  
                  # EXIT NODE # IdentifierExp at 66.21 	 
                  # ENTER NODE # Null at 66.29 	
848#                  subu $sp, $sp, 4 # Null at 66.29	
852#                  sw $zero, ($sp) # Null at 66.29	
                  # EXIT NODE # Null at 66.29  	
856#                lw $t0, ($sp) # Equals at 66.26		 
860#                lw $t1, 4($sp) # Equals at 66.26	 
864#                seq $t0, $t0, $t1 # Equals at 66.26 		
865##...subu $at,$t0,$t1
869##...sltiu $t0,$at,1
872#                addu $sp, $sp, 4 # Equals at 66.26	
876#                sw $t0, ($sp) # Equals at 66.26 	 
                # EXIT NODE # Equals at 66.26 		
880#              lw $t0, ($sp) # Not at 66.26		 
884#              xor $t0, $t0, 1 # Not at 66.26		
888#              sw $t0, ($sp) # Not at 66.26	
              # EXIT NODE # Not at 66.26		
892:            skip_87: # And at 66.18 	
            # EXIT NODE # And at 66.18	  
892#          lw $t0, ($sp) # If at 66.2	  
896#          addu $sp, $sp, 4 # If at 66.2 	 
900#          beq $t0, $zero, if_else_94 # If at 66.2	
            # ENTER NODE # Block at 66.35	  
              # ENTER NODE # Assign at 67.11 
                # ENTER NODE # InstVarAccess at 67.17	 	
                  # ENTER NODE # IdentifierExp at 67.13		 
904#                  lw $t0, 12($sp) # IdentifierExp at 67.13		 
908#                  subu $sp, $sp, 4 # IdentifierExp at 67.13	
912#                  sw $t0, ($sp) # IdentifierExp at 67.13 		
                  # EXIT NODE # IdentifierExp at 67.13	 	
916#                lw $t0, ($sp) # InstVarAccess at 67.17  
920#                beq $t0, $zero, nullPtrException # InstVarAccess at 67.17	
924#                lw $t0, 0($t0) # InstVarAccess at 67.17   
928#                sw $t0, ($sp) # InstVarAccess at 67.17	
                # EXIT NODE # InstVarAccess at 67.17 	
932#              lw $t0, ($sp) # Assign at 67.11   
936#              sw $t0, 16($sp) # Assign at 67.11	 	
940#              addu $sp, $sp, 4 # Assign at 67.11	
              # EXIT NODE # Assign at 67.11 
            # EXIT NODE # Block at 66.35	  
944#          j if_done_94 # If at 66.2			
948:          if_else_94: # If at 66.2   
            # ENTER NODE # Block at 71.2   
            # EXIT NODE # Block at 71.2			
948:          if_done_94: # If at 66.2		
          # EXIT NODE # If at 66.2		
          # ENTER NODE # Block at 71.2	 
            # ENTER NODE # LocalVarDecl at 71.15	 
              # ENTER NODE # IdentifierExp at 71.19		 
948#              lw $t0, 12($sp) # IdentifierExp at 71.19   
952#              subu $sp, $sp, 4 # IdentifierExp at 71.19		 
956#              sw $t0, ($sp) # IdentifierExp at 71.19 		
              # EXIT NODE # IdentifierExp at 71.19 
            # EXIT NODE # LocalVarDecl at 71.15			
            # ENTER NODE # While at 71.2   
960#            j while_enter_120 # While at 71.2 	 
964:            while_top_120: # While at 71.2 
              # ENTER NODE # Block at 71.2	  
                # ENTER NODE # Block at 71.66   
                  # ENTER NODE # Assign at 72.13			
                    # ENTER NODE # IdentifierExp at 72.6  	
964#                    lw $t0, 0($sp) # IdentifierExp at 72.6 		
968#                    subu $sp, $sp, 4 # IdentifierExp at 72.6	 
972#                    sw $t0, ($sp) # IdentifierExp at 72.6			
                    # EXIT NODE # IdentifierExp at 72.6	  
                    # ENTER NODE # InstVarAccess at 72.21		
                      # ENTER NODE # InstVarAccess at 72.16		
                        # ENTER NODE # IdentifierExp at 72.15  	
976#                        lw $t0, 4($sp) # IdentifierExp at 72.15	 
980#                        subu $sp, $sp, 4 # IdentifierExp at 72.15	 
984#                        sw $t0, ($sp) # IdentifierExp at 72.15	
                        # EXIT NODE # IdentifierExp at 72.15		 
988#                      lw $t0, ($sp) # InstVarAccess at 72.16 		
992#                      beq $t0, $zero, nullPtrException # InstVarAccess at 72.16	 
996#                      lw $t0, 0($t0) # InstVarAccess at 72.16		
1000#                      sw $t0, ($sp) # InstVarAccess at 72.16			
                      # EXIT NODE # InstVarAccess at 72.16			
1004#                    lw $t0, ($sp) # InstVarAccess at 72.21  
1008#                    beq $t0, $zero, nullPtrException # InstVarAccess at 72.21 	 
1012#                    lw $t0, 0($t0) # InstVarAccess at 72.21 	 
1016#                    sw $t0, ($sp) # InstVarAccess at 72.21	  
                    # EXIT NODE # InstVarAccess at 72.21 	
1020#                  lw $t0, ($sp) # Assign at 72.13			
1024#                  lw $t1, 4($sp) # Assign at 72.13		
1028#                  beq $t1, $zero, nullPtrException # Assign at 72.13			
1032#                  sw $t0, 0($t1) # Assign at 72.13	 
1036#                  addu $sp, $sp, 8 # Assign at 72.13 
                  # EXIT NODE # Assign at 72.13   
                # EXIT NODE # Block at 71.66	  
                # ENTER NODE # Assign at 71.56  
                  # ENTER NODE # InstVarAccess at 71.59	
                    # ENTER NODE # IdentifierExp at 71.58	  
1040#                    lw $t0, 0($sp) # IdentifierExp at 71.58	
1044#                    subu $sp, $sp, 4 # IdentifierExp at 71.58	 	
1048#                    sw $t0, ($sp) # IdentifierExp at 71.58	 	
                    # EXIT NODE # IdentifierExp at 71.58 		
1052#                  lw $t0, ($sp) # InstVarAccess at 71.59		
1056#                  beq $t0, $zero, nullPtrException # InstVarAccess at 71.59 	 
1060#                  lw $t0, 0($t0) # InstVarAccess at 71.59 	 
1064#                  sw $t0, ($sp) # InstVarAccess at 71.59	  
                  # EXIT NODE # InstVarAccess at 71.59		 
1068#                lw $t0, ($sp) # Assign at 71.56   
1072#                sw $t0, 4($sp) # Assign at 71.56	
1076#                addu $sp, $sp, 4 # Assign at 71.56		
                # EXIT NODE # Assign at 71.56		 
              # EXIT NODE # Block at 71.2		
1080:            while_enter_120: # While at 71.2 	 
              # ENTER NODE # And at 71.35		 
                # ENTER NODE # Not at 71.27		 
                  # ENTER NODE # Equals at 71.27	  
                    # ENTER NODE # IdentifierExp at 71.25	 	
1080#                    lw $t0, 0($sp) # IdentifierExp at 71.25		 
1084#                    subu $sp, $sp, 4 # IdentifierExp at 71.25  	
1088#                    sw $t0, ($sp) # IdentifierExp at 71.25			
                    # EXIT NODE # IdentifierExp at 71.25  
                    # ENTER NODE # Null at 71.30		
1092#                    subu $sp, $sp, 4 # Null at 71.30		
1096#                    sw $zero, ($sp) # Null at 71.30  	
                    # EXIT NODE # Null at 71.30	 	
1100#                  lw $t0, ($sp) # Equals at 71.27 
1104#                  lw $t1, 4($sp) # Equals at 71.27		
1108#                  seq $t0, $t0, $t1 # Equals at 71.27  
1109##...subu $at,$t0,$t1
1113##...sltiu $t0,$at,1
1116#                  addu $sp, $sp, 4 # Equals at 71.27 
1120#                  sw $t0, ($sp) # Equals at 71.27	  
                  # EXIT NODE # Equals at 71.27  	
1124#                lw $t0, ($sp) # Not at 71.27	  
1128#                xor $t0, $t0, 1 # Not at 71.27   
1132#                sw $t0, ($sp) # Not at 71.27  	
                # EXIT NODE # Not at 71.27   
1136#              lw $t0, ($sp) # And at 71.35 		
1140#              beq $t0, $zero, skip_107 # And at 71.35 	
1144#              addu $sp, $sp, 4 # And at 71.35			
                # ENTER NODE # Not at 71.45	  
                  # ENTER NODE # Equals at 71.45		 
                    # ENTER NODE # InstVarAccess at 71.39  
                      # ENTER NODE # IdentifierExp at 71.38	  
1148#                      lw $t0, 0($sp) # IdentifierExp at 71.38  
1152#                      subu $sp, $sp, 4 # IdentifierExp at 71.38	  
1156#                      sw $t0, ($sp) # IdentifierExp at 71.38 
                      # EXIT NODE # IdentifierExp at 71.38 		
1160#                    lw $t0, ($sp) # InstVarAccess at 71.39	 	
1164#                    beq $t0, $zero, nullPtrException # InstVarAccess at 71.39 
1168#                    lw $t0, 0($t0) # InstVarAccess at 71.39 	 
1172#                    sw $t0, ($sp) # InstVarAccess at 71.39   
                    # EXIT NODE # InstVarAccess at 71.39   
                    # ENTER NODE # Null at 71.48  	
1176#                    subu $sp, $sp, 4 # Null at 71.48 	
1180#                    sw $zero, ($sp) # Null at 71.48  	
                    # EXIT NODE # Null at 71.48	 	
1184#                  lw $t0, ($sp) # Equals at 71.45	
1188#                  lw $t1, 4($sp) # Equals at 71.45 		
1192#                  seq $t0, $t0, $t1 # Equals at 71.45	 
1193##...subu $at,$t0,$t1
1197##...sltiu $t0,$at,1
1200#                  addu $sp, $sp, 4 # Equals at 71.45		
1204#                  sw $t0, ($sp) # Equals at 71.45	  
                  # EXIT NODE # Equals at 71.45			
1208#                lw $t0, ($sp) # Not at 71.45 		
1212#                xor $t0, $t0, 1 # Not at 71.45 	
1216#                sw $t0, ($sp) # Not at 71.45  	
                # EXIT NODE # Not at 71.45   
1220:              skip_107: # And at 71.35 	
              # EXIT NODE # And at 71.35		
1220#            lw $t0, ($sp) # While at 71.2 		
1224#            addu $sp, $sp, 4 # While at 71.2 		
1228#            bne $t0, $zero, while_top_120 # While at 71.2	
1232:            while_exit_120: # While at 71.2	
            # EXIT NODE # While at 71.2	  
1232#          addu $sp, 4 # Block at 71.2   
          # EXIT NODE # Block at 71.2	
          # ENTER NODE # IdentifierExp at 76.9 	 
1236#          lw $t0, 12($sp) # IdentifierExp at 76.9 	 
1240#          subu $sp, $sp, 4 # IdentifierExp at 76.9		
1244#          sw $t0, ($sp) # IdentifierExp at 76.9 	
          # EXIT NODE # IdentifierExp at 76.9   
1248#        lw $ra, 8($sp) # MethodDeclNonVoid at 64.20		
1252#        lw $s2, 4($sp) # MethodDeclNonVoid at 64.20		
1256#        lw $t0, ($sp) # MethodDeclNonVoid at 64.20	
1260#        sw $t0, 20($sp) # MethodDeclNonVoid at 64.20	  
1264#        addu $sp, $sp, 20 # MethodDeclNonVoid at 64.20	 	
1268#        jr $ra # MethodDeclNonVoid at 64.20 	
          # ENTER NODE # MethodDeclNonVoid at 64.20			
            # ENTER NODE # MethodDeclNonVoid at 87.20	 
            .globl fcn_141_init # MethodDeclNonVoid at 87.20			
1272:            fcn_141_init: # MethodDeclNonVoid at 87.20	 	
1272#            subu $sp, $sp, 8 # MethodDeclNonVoid at 87.20   
1276#            sw $ra, 4($sp) # MethodDeclNonVoid at 87.20 	
1280#            sw $s2, ($sp) # MethodDeclNonVoid at 87.20 	
1284#            lw $s2, 20($sp) # MethodDeclNonVoid at 87.20  	
              # ENTER NODE # Assign at 88.6		
                # ENTER NODE # IdentifierExp at 88.8	  
1288#                lw $t0, 12($sp) # IdentifierExp at 88.8	  
1292#                subu $sp, $sp, 8 # IdentifierExp at 88.8		
1296#                sw $s5, 4($sp) # IdentifierExp at 88.8 	 
1300#                sw $t0, ($sp) # IdentifierExp at 88.8	 	
                # EXIT NODE # IdentifierExp at 88.8 	
1304#              lw $t0, ($sp) # Assign at 88.6	 
1308#              sw $t0, -20($s2) # Assign at 88.6  	
1312#              addu $sp, $sp, 8 # Assign at 88.6	  
              # EXIT NODE # Assign at 88.6   
              # ENTER NODE # Assign at 89.7		
                # ENTER NODE # IdentifierExp at 89.9 	
1316#                lw $t0, 8($sp) # IdentifierExp at 89.9  
1320#                subu $sp, $sp, 4 # IdentifierExp at 89.9	 	
1324#                sw $t0, ($sp) # IdentifierExp at 89.9 		
                # EXIT NODE # IdentifierExp at 89.9 
1328#              lw $t0, ($sp) # Assign at 89.7 
1332#              sw $t0, 0($s2) # Assign at 89.7 
1336#              addu $sp, $sp, 4 # Assign at 89.7		
              # EXIT NODE # Assign at 89.7 	
              # ENTER NODE # This at 90.9 	
1340#              subu $sp, $sp, 4 # This at 90.9			
1344#              sw $s2, ($sp) # This at 90.9	
              # EXIT NODE # This at 90.9		
1348#            lw $ra, 8($sp) # MethodDeclNonVoid at 87.20 
1352#            lw $s2, 4($sp) # MethodDeclNonVoid at 87.20			
1356#            lw $t0, ($sp) # MethodDeclNonVoid at 87.20 
1360#            sw $t0, 24($sp) # MethodDeclNonVoid at 87.20  	
1364#            addu $sp, $sp, 24 # MethodDeclNonVoid at 87.20  
1368#            jr $ra # MethodDeclNonVoid at 87.20	 	
              # ENTER NODE # MethodDeclNonVoid at 87.20	 
                # ENTER NODE # MethodDeclVoid at 94.17 	 
                .globl fcn_211_print # MethodDeclVoid at 94.17		
1372:                fcn_211_print: # MethodDeclVoid at 94.17	
1372#                subu $sp, $sp, 8 # MethodDeclVoid at 94.17  
1376#                sw $ra, 4($sp) # MethodDeclVoid at 94.17  
1380#                sw $s2, ($sp) # MethodDeclVoid at 94.17		 
1384#                lw $s2, 8($sp) # MethodDeclVoid at 94.17  
                  # ENTER NODE # LocalVarDecl at 96.6			
                    # ENTER NODE # NewObject at 96.12	 
1388#                    li $s6, 1 # NewObject at 96.12 	
1392#                    li $s7, 0 # NewObject at 96.12	 	
1396#                    jal newObject # NewObject at 96.12   
1400#                    la $t0, CLASS_Lib # NewObject at 96.12 	
1404#                    sw $t0, -12($s7) # NewObject at 96.12   
                    # EXIT NODE # NewObject at 96.12	 
                  # EXIT NODE # LocalVarDecl at 96.6  	
                  # ENTER NODE # LocalVarDecl at 99.6  	
                    # ENTER NODE # IntegerLiteral at 99.23  	
1408#                    subu $sp, $sp, 8 # IntegerLiteral at 99.23 	 
1412#                    sw $s5, 4($sp) # IntegerLiteral at 99.23	
1416#                    li $t0, 0 # IntegerLiteral at 99.23  	
1420#                    sw $t0, ($sp) # IntegerLiteral at 99.23			
                    # EXIT NODE # IntegerLiteral at 99.23	 	
                  # EXIT NODE # LocalVarDecl at 99.6		 
                  # ENTER NODE # LocalVarDecl at 102.9		
                    # ENTER NODE # StringLiteral at 102.21	 
1424#                    subu $sp, $sp, 4 # StringLiteral at 102.21		
1428#                    la $t0, strLit_150 # StringLiteral at 102.21	 	
1432#                    sw $t0, ($sp) # StringLiteral at 102.21   
                    # EXIT NODE # StringLiteral at 102.21 
                  # EXIT NODE # LocalVarDecl at 102.9	
                  # ENTER NODE # Block at 106.2 
                    # ENTER NODE # LocalVarDecl at 106.15 
                      # ENTER NODE # This at 106.19   
1436#                      subu $sp, $sp, 4 # This at 106.19 	
1440#                      sw $s2, ($sp) # This at 106.19	  
                      # EXIT NODE # This at 106.19	  
                    # EXIT NODE # LocalVarDecl at 106.15 	
                    # ENTER NODE # While at 106.2		 
1444#                    j while_enter_199 # While at 106.2 	 
1448:                    while_top_199: # While at 106.2 
                      # ENTER NODE # Block at 106.2	
                        # ENTER NODE # Block at 106.48		
                          # ENTER NODE # ExpStatement at 111.10		
                            # ENTER NODE # Call at 111.10			
                              # ENTER NODE # IdentifierExp at 111.6	  
1448#                              lw $t0, 16($sp) # IdentifierExp at 111.6	  
1452#                              subu $sp, $sp, 4 # IdentifierExp at 111.6 
1456#                              sw $t0, ($sp) # IdentifierExp at 111.6 		
                              # EXIT NODE # IdentifierExp at 111.6 	 
                              # ENTER NODE # IdentifierExp at 111.19	
1460#                              lw $t0, 8($sp) # IdentifierExp at 111.19  	
1464#                              subu $sp, $sp, 4 # IdentifierExp at 111.19   
1468#                              sw $t0, ($sp) # IdentifierExp at 111.19  
                              # EXIT NODE # IdentifierExp at 111.19 	
1472#                            lw $t0, 4($sp) # Call at 111.10		 
1476#                            beq $t0, $zero, nullPtrException # Call at 111.10	  
1480#                            lw $t0, -12($t0) # Call at 111.10 
1484#                            lw $t0, 16($t0) # Call at 111.10			
1488#                            jalr $t0 # Call at 111.10	
                            # EXIT NODE # Call at 111.10 	 
                          # EXIT NODE # ExpStatement at 111.10		
                          # ENTER NODE # ExpStatement at 112.10			
                            # ENTER NODE # Call at 112.10 	 
                              # ENTER NODE # IdentifierExp at 112.6 	 
1492#                              lw $t0, 16($sp) # IdentifierExp at 112.6 	 
1496#                              subu $sp, $sp, 4 # IdentifierExp at 112.6  	
1500#                              sw $t0, ($sp) # IdentifierExp at 112.6	 
                              # EXIT NODE # IdentifierExp at 112.6  
                              # ENTER NODE # InstVarAccess at 112.20	 
                                # ENTER NODE # IdentifierExp at 112.19 	 
1504#                                lw $t0, 4($sp) # IdentifierExp at 112.19	 
1508#                                subu $sp, $sp, 4 # IdentifierExp at 112.19  	
1512#                                sw $t0, ($sp) # IdentifierExp at 112.19			
                                # EXIT NODE # IdentifierExp at 112.19		 
1516#                              lw $t0, ($sp) # InstVarAccess at 112.20			
1520#                              beq $t0, $zero, nullPtrException # InstVarAccess at 112.20			
1524#                              lw $t0, -20($t0) # InstVarAccess at 112.20			
1528#                              subu $sp, $sp, 4 # InstVarAccess at 112.20		 
1532#                              sw $s5, 4($sp) # InstVarAccess at 112.20 	 
1536#                              sw $t0, ($sp) # InstVarAccess at 112.20 
                              # EXIT NODE # InstVarAccess at 112.20   
1540#                            lw $t0, 8($sp) # Call at 112.10		 
1544#                            beq $t0, $zero, nullPtrException # Call at 112.10 	
1548#                            lw $t0, -12($t0) # Call at 112.10  	
1552#                            lw $t0, 24($t0) # Call at 112.10		 
1556#                            jalr $t0 # Call at 112.10		 
                            # EXIT NODE # Call at 112.10	 
                          # EXIT NODE # ExpStatement at 112.10	 	
                          # ENTER NODE # Assign at 113.6		
                            # ENTER NODE # Plus at 113.20			
                              # ENTER NODE # IdentifierExp at 113.6		 
1560#                              lw $t0, 8($sp) # IdentifierExp at 113.6	
1564#                              subu $sp, $sp, 8 # IdentifierExp at 113.6 		
1568#                              sw $s5, 4($sp) # IdentifierExp at 113.6 
1572#                              sw $t0, ($sp) # IdentifierExp at 113.6	
                              # EXIT NODE # IdentifierExp at 113.6  	
                              # ENTER NODE # IntegerLiteral at 113.20		
1576#                              subu $sp, $sp, 8 # IntegerLiteral at 113.20		
1580#                              sw $s5, 4($sp) # IntegerLiteral at 113.20 		
1584#                              li $t0, 1 # IntegerLiteral at 113.20 		
1588#                              sw $t0, ($sp) # IntegerLiteral at 113.20   
                              # EXIT NODE # IntegerLiteral at 113.20	  
1592#                            lw $t0, ($sp) # Plus at 113.20   
1596#                            lw $t1, 8($sp) # Plus at 113.20 	
1600#                            addu $t0, $t0, $t1 # Plus at 113.20  	
1604#                            addu $sp, $sp, 8 # Plus at 113.20	
1608#                            sw $t0, ($sp) # Plus at 113.20		 
                            # EXIT NODE # Plus at 113.20	  
1612#                          lw $t0, ($sp) # Assign at 113.6  	
1616#                          sw $t0, 16($sp) # Assign at 113.6	 	
1620#                          addu $sp, $sp, 8 # Assign at 113.6  	
                          # EXIT NODE # Assign at 113.6	
                          # ENTER NODE # Assign at 114.16   
                            # ENTER NODE # StringLiteral at 114.18	
1624#                            subu $sp, $sp, 4 # StringLiteral at 114.18		 
1628#                            la $t0, strLit_178 # StringLiteral at 114.18	 
1632#                            sw $t0, ($sp) # StringLiteral at 114.18 	
                            # EXIT NODE # StringLiteral at 114.18 	 
1636#                          lw $t0, ($sp) # Assign at 114.16	
1640#                          sw $t0, 8($sp) # Assign at 114.16 	
1644#                          addu $sp, $sp, 4 # Assign at 114.16  
                          # EXIT NODE # Assign at 114.16	 	
                          # ENTER NODE # If at 119.6 	 
                            # ENTER NODE # Not at 119.25 	 
                              # ENTER NODE # LessThan at 119.25 	
                                # ENTER NODE # IdentifierExp at 119.10			
1648#                                lw $t0, 8($sp) # IdentifierExp at 119.10		
1652#                                subu $sp, $sp, 8 # IdentifierExp at 119.10 	
1656#                                sw $s5, 4($sp) # IdentifierExp at 119.10	 
1660#                                sw $t0, ($sp) # IdentifierExp at 119.10	  
                                # EXIT NODE # IdentifierExp at 119.10 
                                # ENTER NODE # IntegerLiteral at 119.28	
1664#                                subu $sp, $sp, 8 # IntegerLiteral at 119.28	 	
1668#                                sw $s5, 4($sp) # IntegerLiteral at 119.28 	
1672#                                li $t0, 10 # IntegerLiteral at 119.28			
1676#                                sw $t0, ($sp) # IntegerLiteral at 119.28		
                                # EXIT NODE # IntegerLiteral at 119.28		
1680#                              lw $t0, ($sp) # LessThan at 119.25		 
1684#                              lw $t1, 8($sp) # LessThan at 119.25		 
1688#                              slt $t0, $t1, $t0 # LessThan at 119.25		
1692#                              addu $sp, $sp, 12 # LessThan at 119.25 		
1696#                              sw $t0, ($sp) # LessThan at 119.25   
                              # EXIT NODE # LessThan at 119.25	 	
1700#                            lw $t0, ($sp) # Not at 119.25   
1704#                            xor $t0, $t0, 1 # Not at 119.25 
1708#                            sw $t0, ($sp) # Not at 119.25 	
                            # EXIT NODE # Not at 119.25 	
1712#                          lw $t0, ($sp) # If at 119.6 	
1716#                          addu $sp, $sp, 4 # If at 119.6  
1720#                          beq $t0, $zero, if_else_196 # If at 119.6 	
                            # ENTER NODE # Block at 119.32		 
                              # ENTER NODE # ExpStatement at 120.7 	
                                # ENTER NODE # Call at 120.7   
                                  # ENTER NODE # IdentifierExp at 120.3  	
1724#                                  lw $t0, 16($sp) # IdentifierExp at 120.3  
1728#                                  subu $sp, $sp, 4 # IdentifierExp at 120.3  	
1732#                                  sw $t0, ($sp) # IdentifierExp at 120.3   
                                  # EXIT NODE # IdentifierExp at 120.3	
                                  # ENTER NODE # StringLiteral at 120.16 	
1736#                                  subu $sp, $sp, 4 # StringLiteral at 120.16  	
1740#                                  la $t0, strLit_185 # StringLiteral at 120.16		 
1744#                                  sw $t0, ($sp) # StringLiteral at 120.16		 
                                  # EXIT NODE # StringLiteral at 120.16  	
1748#                                lw $t0, 4($sp) # Call at 120.7		
1752#                                beq $t0, $zero, nullPtrException # Call at 120.7		
1756#                                lw $t0, -12($t0) # Call at 120.7	 
1760#                                lw $t0, 16($t0) # Call at 120.7	
1764#                                jalr $t0 # Call at 120.7 		
                                # EXIT NODE # Call at 120.7		
                              # EXIT NODE # ExpStatement at 120.7	 
                              # ENTER NODE # Assign at 121.13  	
                                # ENTER NODE # StringLiteral at 121.15	  
1768#                                subu $sp, $sp, 4 # StringLiteral at 121.15		 
1772#                                la $t0, strLit_189 # StringLiteral at 121.15 	
1776#                                sw $t0, ($sp) # StringLiteral at 121.15	  
                                # EXIT NODE # StringLiteral at 121.15	  
1780#                              lw $t0, ($sp) # Assign at 121.13			
1784#                              sw $t0, 8($sp) # Assign at 121.13			
1788#                              addu $sp, $sp, 4 # Assign at 121.13			
                              # EXIT NODE # Assign at 121.13	  
                              # ENTER NODE # Assign at 122.18	  
                                # ENTER NODE # IntegerLiteral at 122.20  	
1792#                                subu $sp, $sp, 8 # IntegerLiteral at 122.20  
1796#                                sw $s5, 4($sp) # IntegerLiteral at 122.20  	
1800#                                li $t0, 0 # IntegerLiteral at 122.20		
1804#                                sw $t0, ($sp) # IntegerLiteral at 122.20 		
                                # EXIT NODE # IntegerLiteral at 122.20	  
1808#                              lw $t0, ($sp) # Assign at 122.18   
1812#                              sw $t0, 16($sp) # Assign at 122.18	  
1816#                              addu $sp, $sp, 8 # Assign at 122.18   
                              # EXIT NODE # Assign at 122.18	 	
                            # EXIT NODE # Block at 119.32		 
1820#                          j if_done_196 # If at 119.6		 
1824:                          if_else_196: # If at 119.6 	
                            # ENTER NODE # Block at 124.2		 
                            # EXIT NODE # Block at 124.2		 
1824:                          if_done_196: # If at 119.6	 	
                          # EXIT NODE # If at 119.6 	 
                        # EXIT NODE # Block at 106.48  	
                        # ENTER NODE # Assign at 106.38	 
                          # ENTER NODE # InstVarAccess at 106.41 		
                            # ENTER NODE # IdentifierExp at 106.40  	
1824#                            lw $t0, 0($sp) # IdentifierExp at 106.40 	 
1828#                            subu $sp, $sp, 4 # IdentifierExp at 106.40		 
1832#                            sw $t0, ($sp) # IdentifierExp at 106.40  	
                            # EXIT NODE # IdentifierExp at 106.40 	 
1836#                          lw $t0, ($sp) # InstVarAccess at 106.41 	
1840#                          beq $t0, $zero, nullPtrException # InstVarAccess at 106.41 	 
1844#                          lw $t0, 0($t0) # InstVarAccess at 106.41			
1848#                          sw $t0, ($sp) # InstVarAccess at 106.41 	
                          # EXIT NODE # InstVarAccess at 106.41		 
1852#                        lw $t0, ($sp) # Assign at 106.38 
1856#                        sw $t0, 4($sp) # Assign at 106.38	
1860#                        addu $sp, $sp, 4 # Assign at 106.38			
                        # EXIT NODE # Assign at 106.38 	
                      # EXIT NODE # Block at 106.2		
1864:                    while_enter_199: # While at 106.2 	
                      # ENTER NODE # Not at 106.27  	
                        # ENTER NODE # Equals at 106.27		
                          # ENTER NODE # IdentifierExp at 106.25  
1864#                          lw $t0, 0($sp) # IdentifierExp at 106.25	
1868#                          subu $sp, $sp, 4 # IdentifierExp at 106.25 
1872#                          sw $t0, ($sp) # IdentifierExp at 106.25	
                          # EXIT NODE # IdentifierExp at 106.25			
                          # ENTER NODE # Null at 106.30	
1876#                          subu $sp, $sp, 4 # Null at 106.30 	 
1880#                          sw $zero, ($sp) # Null at 106.30 	
                          # EXIT NODE # Null at 106.30	  
1884#                        lw $t0, ($sp) # Equals at 106.27		 
1888#                        lw $t1, 4($sp) # Equals at 106.27  
1892#                        seq $t0, $t0, $t1 # Equals at 106.27 	
1893##...subu $at,$t0,$t1
1897##...sltiu $t0,$at,1
1900#                        addu $sp, $sp, 4 # Equals at 106.27			
1904#                        sw $t0, ($sp) # Equals at 106.27		 
                        # EXIT NODE # Equals at 106.27 	
1908#                      lw $t0, ($sp) # Not at 106.27  
1912#                      xor $t0, $t0, 1 # Not at 106.27 
1916#                      sw $t0, ($sp) # Not at 106.27		 
                      # EXIT NODE # Not at 106.27		 
1920#                    lw $t0, ($sp) # While at 106.2 	
1924#                    addu $sp, $sp, 4 # While at 106.2 		
1928#                    bne $t0, $zero, while_top_199 # While at 106.2		
1932:                    while_exit_199: # While at 106.2	 	
                    # EXIT NODE # While at 106.2  	
1932#                  addu $sp, 4 # Block at 106.2	  
                  # EXIT NODE # Block at 106.2  
                  # ENTER NODE # If at 128.2  	
                    # ENTER NODE # GreaterThan at 128.21 		
                      # ENTER NODE # IdentifierExp at 128.6 	 
1936#                      lw $t0, 4($sp) # IdentifierExp at 128.6 		
1940#                      subu $sp, $sp, 8 # IdentifierExp at 128.6 	 
1944#                      sw $s5, 4($sp) # IdentifierExp at 128.6  	
1948#                      sw $t0, ($sp) # IdentifierExp at 128.6  
                      # EXIT NODE # IdentifierExp at 128.6  
                      # ENTER NODE # IntegerLiteral at 128.23			
1952#                      subu $sp, $sp, 8 # IntegerLiteral at 128.23	
1956#                      sw $s5, 4($sp) # IntegerLiteral at 128.23	 	
1960#                      li $t0, 0 # IntegerLiteral at 128.23  
1964#                      sw $t0, ($sp) # IntegerLiteral at 128.23			
                      # EXIT NODE # IntegerLiteral at 128.23	 
1968#                    lw $t0, ($sp) # GreaterThan at 128.21  
1972#                    lw $t1, 8($sp) # GreaterThan at 128.21	 
1976#                    sgt $t0, $t1, $t0 # GreaterThan at 128.21   
1980#                    addu $sp, $sp, 12 # GreaterThan at 128.21  
1984#                    sw $t0, ($sp) # GreaterThan at 128.21  	
                    # EXIT NODE # GreaterThan at 128.21 		
1988#                  lw $t0, ($sp) # If at 128.2		 
1992#                  addu $sp, $sp, 4 # If at 128.2 		
1996#                  beq $t0, $zero, if_else_210 # If at 128.2		 
                    # ENTER NODE # Block at 128.26  	
                      # ENTER NODE # ExpStatement at 129.10  
                        # ENTER NODE # Call at 129.10		
                          # ENTER NODE # IdentifierExp at 129.6   
2000#                          lw $t0, 12($sp) # IdentifierExp at 129.6  
2004#                          subu $sp, $sp, 4 # IdentifierExp at 129.6  	
2008#                          sw $t0, ($sp) # IdentifierExp at 129.6	
                          # EXIT NODE # IdentifierExp at 129.6 		
                          # ENTER NODE # StringLiteral at 129.19  	
2012#                          subu $sp, $sp, 4 # StringLiteral at 129.19 
2016#                          la $t0, strLit_205 # StringLiteral at 129.19   
2020#                          sw $t0, ($sp) # StringLiteral at 129.19   
                          # EXIT NODE # StringLiteral at 129.19		
2024#                        lw $t0, 4($sp) # Call at 129.10		
2028#                        beq $t0, $zero, nullPtrException # Call at 129.10 		
2032#                        lw $t0, -12($t0) # Call at 129.10  
2036#                        lw $t0, 16($t0) # Call at 129.10	  
2040#                        jalr $t0 # Call at 129.10 		
                        # EXIT NODE # Call at 129.10		
                      # EXIT NODE # ExpStatement at 129.10 	
                    # EXIT NODE # Block at 128.26	 	
2044#                  j if_done_210 # If at 128.2	  
2048:                  if_else_210: # If at 128.2	 	
                    # ENTER NODE # Block at 131.5 	
                    # EXIT NODE # Block at 131.5	 	
2048:                  if_done_210: # If at 128.2   
                  # EXIT NODE # If at 128.2  	
2048#                lw $ra, 20($sp) # MethodDeclVoid at 94.17 	
2052#                lw $s2, 16($sp) # MethodDeclVoid at 94.17  
2056#                addu $sp, $sp, 28 # MethodDeclVoid at 94.17		 
2060#                jr $ra # MethodDeclVoid at 94.17 	 
                # EXIT NODE # MethodDeclVoid at 94.17   
              # EXIT NODE # Program at 19.1   
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
2064:readLine:
	
2064#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
2068#	sw $ra, 4($sp) # save $ra
2072#	move $t1,$sp # save "original" sp

2076:  doRead:

	# read the character
2076#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
2080#	subu $t2,$v0,13
2084#	bne $t2,$zero,notReturnRL
2088#	jal readLogicalChar
2092#	subu $t2,$v0,10 # check for newline
2096#	beq $t2,$zero,foundNewLine
2100#	sw $v0,lastCharRead # push back character into queue
2104#	j foundNewLine # go process the line

2108:  notReturnRL:

	# at this point, $v0 has our character

2108#	subu $t0,$v0,10
2112#	beq $t0,$zero,foundNewLine
2116#	blt $v0,$zero,foundEof
2117##...slt $at,$v0,$zero
2121##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
2124#	subu $sp,$sp,4
2128#	sw $v0,($sp)

	# loop back up to get next character
2132#	j doRead

2136:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2136#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
2140#	sw $zero,8($sp) # return-value: null
2144#	j rlReturn # return

2148:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
2148#	subu $t0,$t1,$sp # number of chars we read (times 4)
2152#	srl $s6,$t0,2 # number of words on stack with chars
2156#	subu $sp,$sp,4 # push char-count ...
2160#	sw $s6,($sp) # ... onto stack
2164#	addu $t2,$t0,5 # GC tag, incl. for count-word
2168#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
2172#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2176#	srl $s6,$s6,2 # data words in object
2180#	move $s7,$zero # # object words in object
2184#	jal newObject # allocate space
	
	# store header words
2188#	la $t0,CLASS_String
2192#	sw $t0,-12($s7) # store class tag (String) into object
2196#	lw $t2,4($sp) # char-count
2200#	sll $t1,$t2,2 # 4 times number of chars
2204#	subu $t2,$zero,$t2 # negative of char-count
2208#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
2212#	lw $t0,-8($s7) # data words in object
2216#	sll $t0,$t0,2 # data bytes in object
2220#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
2224#	subu $t0,$t0,$t2 # place to store last character (plus 9)
2228#	addu $sp,$sp,8 # pop redundant object-pointer and count
2232#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

2236#	beq $sp,$t1,doneCharCopy
2240:  charCopyLoop:
2240#	lw $t2,($sp)
2244#	sb $t2,-9($t0)
2248#	addu $sp,$sp,4
2252#	subu $t0,$t0,1
2256#	bne $sp,$t1,charCopyLoop
2260:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
2260#	sw $s7,8($sp)
	
2264:  rlReturn:
	# restore return address and return
2264#	lw $ra,4($sp) # restore return address, ...
2268#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
2272#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2276:readInt:

	# save $ra by pushing onto stack
2276#	subu $sp,$sp,4
2280#	sw $ra,($sp)

2284:  riSkipWhiteLoop:
	# read a character
2284#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
2288#	subu $t0,$v0,32
2292#	bgt $t0,$zero,nonWhite
2293##...slt $at,$zero,$t0
2297##...bne $at,$zero,$+44
2300#	beq $t0,$zero,riSkipWhiteLoop # start over if space
2304#	subu $t0,$v0,10
2308#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
2312#	subu $t0,$v0,9
2316#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
2320#	subu $t0,$v0,13
2324#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
2328#	subu $t0,$v0,12
2332#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
2336#	j badIntegerFormat # illegal integer char: abort program

2340:  nonWhite:
2340#	subu $t0,$v0,'-'
2344#	li $t4,1 # final multiplier
2348#	bne $t0,$zero,helpReadInt # go read
2352#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
2356#	jal readLogicalChar

2360:  helpReadInt:
2360#	li $t2,10
2364#	subu $t1,$v0,'0' # convert digit to 0-9 value
2368#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
2369##...sltu $at,$t1,$t2
2373##...beq $at,$zero,$+2080
2376#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

2380:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

2380#	jal readLogicalChar # read next character
2384#	subu $t1,$v0,'0' # convert digit to 0-9 value
2388#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
2389##...sltu $at,$t1,$t2
2393##...beq $at,$zero,$+20

2396#	mul $t3,$t3,$t2 # multiply old value by 10
2397##...mult $t3,$t2
2401##...mflo $t3
2404#	addu $t3,$t3,$t1 # add in value of new digit
2408#	j digitLoop

2412:  doneDigitLoop:

	# "push back" unused character into queue
2412#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
2416#	lw $ra,($sp)
2420#	mult $t3,$t4 # multiply to account for poss. minus sign
2424#	mflo $t3
2428#	sw $t3,($sp) # result
2432#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
2436#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2440:readChar:

	# save $ra by pushing onto stack
2440#	subu $sp,$sp,4
2444#	sw $ra,($sp)

  	# read the character
2448#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
2452#	lw $ra,($sp)
2456#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2460#	sw $v0,($sp)

	# return
2464#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
2468:printStr:
	# check for null, printing "(null)", if so
2468#	lw $t0,($sp)
2472#	bne $t0,$zero,psNotNull

	# print "(null)"
2476#	la $a0,nullStr
2480#	li $v0,4
2484#	syscall
2488#	j donePrintStr
	
2492:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2492#	subu $t0,$t0,8
2496#	lw $t1,($t0) # word just beyond end of string
2500#	sll $t1,$t1,2
2504#	subu $t1,$t0,$t1 # first word in string
2508#	lw $t0,4($t0) # negative of string-length
2512#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
2516#	beq $t0,$t1,donePrintStr
2520:  psLoop:
2520#	lb $a0,($t1) # next byte
2524#	li $v0,11 # code for printing char
2528#        syscall # print the char
2532#	addu $t1,$t1,1 # go to next char
2536#	blt $t1,$t0,psLoop
2537##...slt $at,$t1,$t0
2541##...bne $at,$zero,$-20

2544:  donePrintStr:
	# pop stack and return
2544#	addu $sp,$sp,8
2548#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2552:printInt:
	# pop value off stack, along with 'this'
2552#	lw $a0,($sp)
2556#	addu $sp,$sp,12

	# print it
2560#	li $v0,1 # code for print-int
2564#	syscall

	# return
2568#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2572:printBool:
	# pop value off stack, along with 'this'
2572#	lw $t0,($sp)
2576#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2580#	la $a0,falseString
2584#	beq $t0,$zero,skipPB
2588#	la $a0,trueString
2592:  skipPB:
2592#	li $v0,4 # code for print-string
2596#	syscall

	# return
2600#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2604:substring:

	# save $ra by pushing onto stack
2604#	subu $sp,$sp,4
2608#	sw $ra,($sp)

	# get string value off stack, test for null
2612#	lw $t0,20($sp)
2616#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2620#	lw $t0,-4($t0) # negative of string length
2624#	subu $t0,$zero,$t0 # string length
2628#	lw $t1,4($sp) # k
2632#	lw $t2,12($sp) # n
2636#	bgt $zero,$t2,strIndexOutOfBounds
2637##...slt $at,$t2,$zero
2641##...bne $at,$zero,$+1780
2644#	bgt $t2,$t1,strIndexOutOfBounds
2645##...slt $at,$t1,$t2
2649##...bne $at,$zero,$+1772
2652#	bgt $t1,$t0,strIndexOutOfBounds
2653##...slt $at,$t0,$t1
2657##...bne $at,$zero,$+1764

	# allocate memory
2660#	subu $s6,$t1,$t2 # # chars in target-string
2664#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2668#	srl $s6,$s6,2 # convert bytes-count to word-count
2672#	move $s7,$zero # (no object-bytes in string)
2676#	jal newObject

	# store "String" tag in object-type field
2680#	la $t0,CLASS_String
2684#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2688#	lw $t1,8($sp) # k
2692#	lw $t2,16($sp) # n
2696#	subu $t0,$t2,$t1 # value to store
2700#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2704#	lw $t3,24($sp) # source string pointer
2708#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2712#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2716#	lw $t4,-8($t3) # # data words in source string
2720#	sll $t4,$t4,2 # # data bytes in source string
2724#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2728#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2732#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2736#	lw $t2,-8($s7) # # data words in target string
2740#	sll $t2,$t2,2 # # data bytes in target string
2744#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2748:  subCopyLoopzz:
2748#	lb $t4,-8($t3)
2752#	sb $t4,-8($t2)
2756#	addu $t2,$t2,1
2760#	addu $t3,$t3,1
2764#	blt $t3,$t1,subCopyLoopzz
2765##...slt $at,$t3,$t1
2769##...bne $at,$zero,$-20
	
2772:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2772#	lw $ra,4($sp) # restore $ra
2776#	addu $sp,$sp,24 # pop stack
	
	# return
2780#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2784:length:

	# get string pointer
2784#	lw $t0,($sp)
	
	# grow stack
2788#	subu $sp,$sp,4

	# store GC tag
2792#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2796#	lw $t0,-4($t0) # -length
2800#	subu $t0,$zero,$t0
2804#	sw $t0,($sp) #store length

	# return
2808#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2812:concat:
 	# save $ra by pushing onto stack
2812#	subu $sp,$sp,4
2816#	sw $ra($sp)

	# get string pointers and check parameter for null
2820#	lw $t0,4($sp)
2824#	beq $t0,$zero,nullPtrException
2828#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2832#	lw $t0,-4($t0) # negative size of second object
2836#	lw $t1,-4($t1) # negative size of first object
2840#	addu $s6,$t0,$t1 # sum of negative sizes
2844#	sra $s6,$s6,2 # negative word-size of char part
2848#	subu $s6,$zero,$s6 # word size of char part
2852#	addu $s6,$s6,1 # data word size, including v-table word
2856#	move $s7,$zero
2860#	jal newObject

	# store "String" tag in object-type field
2864#	la $t0,CLASS_String
2868#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2872#	lw $ra,4($sp) # return address
2876#	lw $t0,8($sp) # second object
2880#	lw $t1,12($sp) # first object
2884#	addu $sp,$sp,12 # pop
2888#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2892#	lw $t2,-4($t0) # negative length of second object
2896#	lw $t3,-4($t1) # negative length of first object
2900#	addu $t4,$t2,$t3 # sum of negative lengths
2904#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2908#	lw $t4,-8($t1) # # data words in first string
2912#	sll $t4,$t4,2 # # data bytes in first string
2916#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2920#	lw $t4,-8($s7) # # data words in new string
2924#	sll $t4,$t4,2 # # data bytes in new string
2928#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2932#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2936#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2940:  concatLoop1zz:
2940#	lb $t4,-8($t1)
2944#	sb $t4,-8($s7)
2948#	addu $s7,$s7,1
2952#	addu $t1,$t1,1
2956#	blt $t1,$t3,concatLoop1zz
2957##...slt $at,$t1,$t3
2961##...bne $at,$zero,$-20
2964:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2964#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2968#	lw $t4,-8($t0) # # data words in second string
2972#	sll $t4,$t4,2 # # data bytes in second string
2976#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2980#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2984:  concatLoop2zz:
2984#	lb $t4,-8($t1)
2988#	sb $t4,-8($s7)
2992#	addu $s7,$s7,1
2996#	addu $t1,$t1,1
3000#	blt $t1,$t3,concatLoop2zz
3001##...slt $at,$t1,$t3
3005##...bne $at,$zero,$-20
3008:  doneConcatLoop2zz:
 
3008:  concatRtnzz:
	# return
3008#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
3012:charAt:
	# get string
3012#	lw $t0,8($sp)

	# check that index is in bounds
3016#	lw $t1,-4($t0) # negative of # data words in string
3020#	subu $t3,$zero,$t1 # # chars in string
3024#	lw $t2,($sp) # index
3028#	bgeu $t2,$t3,strIndexOutOfBounds
3029##...sltu $at,$t2,$t3
3033##...beq $at,$zero,$+1388

	# access element
3036#	lw $t1,-8($t0) # # data words in object
3040#	sll $t1,$t1,2 # - byte-offset from end of chars
3044#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3048#	addu $t0,$t0,$t1 # - address of our char, offset by 8
3052#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
3056#	addu $sp,$sp,4
3060#	sw $t0,($sp)
3064#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
3068#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
3072:intToString:

	# save return address on stack; allocate space for dummy GC tag
3072#	subu $sp,$sp,8
3076#	sw $ra,4($sp)

	# save current sp
3080#	move $t0,$sp

	# move constant 10 into $t3
3084#	li $t3,10

	# get argument, negate if negative
3088#	lw $t1,8($sp)
3092#	bge $t1,$zero,itsNonNegLoop
3093##...slt $at,$t1,$zero
3097##...beq $at,$zero,$+8
3100#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
3104:  itsNonNegLoop:
3104#	divu $t1,$t3
3108#	mflo $t1 # quotient
3112#	mfhi $t4 # remainder
3116#	addu $t4,$t4,'0' # turn remainder into digit
3120#	subu $sp,$sp,4
3124#	sw $t4,($sp) # push digit onto stack
3128#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
3132#	lw $t4,8($t0)
3136#	bge $t4,$zero,itsSkipNeg
3137##...slt $at,$t4,$zero
3141##...beq $at,$zero,$+16
3144#	li $t4,'-'
3148#	subu $sp,$sp,4
3152#	sw $t4,($sp)
3156:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
3156#	subu $s6,$t0,$sp
3160#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
3164#	sw $t3,($t0)
3168#	srl $s6,$s6,2
3172#	subu $sp,$sp,4
3176#	sw $s6,($sp)
	
	# allocate memory
3180#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3184#	srl $s6,$s6,2
3188#	move $s7,$zero # no "object" words in object
3192#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
3196#	lw $t0,4($sp)
3200#	addu $sp,$sp,8

	# store "String" tag into class field
3204#	subu $s7,$s7,8 # address of header-1 word
3208#	la $t1,CLASS_String
3212#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
3216#	subu $t0,$zero,$t0
3220#	sw $t0,4($s7)

3224#	lw $t1,($s7) # number of data words in string
3228#	sll $t1,$t1,2 # number data bytes in string
3232#	subu $t1,$s7,$t1 # first location to store chars in string
3236#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
3240:  itsLoop:
3240#	lw $t2,($sp)
3244#	addu $sp,$sp,4
3248#	sb $t2,($t1)
3252#	addu $t1,$t1,1
3256#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
3260#	lw $ra,4($sp)
3264#	addu $sp,$sp,16
3268#	addu $t0,$t0,15
3272#	and $t0,$t0,0xfffffffc
3273##...lui $at,65535
3277##...ori $at,$at,0xfffc
3281##...and $t0,$t0,$at
3284#	sw $t0,($sp)
3288#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3292:intToChar:
	# save return address
3292#	subu $sp,$sp,4
3296#	sw $ra,($sp)

	# allocate object
3300#	li $s6,2
3304#	move $s7,$zero
3308#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
3312#	lw $ra,4($sp)
3316#	lw $t1,8($sp)
3320#	addu $sp,$sp,16

	# store "String" tag into class field
3324#	la $t0,CLASS_String
3328#	sw $t0,-12($s7)

	# store data in string
3332#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
3336#	li $t0,-1
3340#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
3344#	sw $s7,($sp)

	# return
3348#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
3352:compareTo:
	# get string pointers and check parameter for null
3352#	lw $t0,($sp) # second string
3356#	beq $t0,$zero,nullPtrException
3360#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
3364#	lw $t2,-4($t0) # negative length of second string
3368#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
3372#	slt $t4,$t3,$t2
3376#	slt $t5,$t2,$t3
3380#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
3384#	lw $t2,-8($t0) # # data words in second string
3388#	lw $t3,-8($t1) # # data words in first string
3392#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3396#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3400#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
3404#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
3408#	beq $zero,$t5,skipStrCmpLenzz
3412#	move $t2,$t3
3416:  skipStrCmpLenzz:
3416#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
3420:  cmpLoopzz:
3420#	lw $t3,-8($t1) # word from str2
3424#	lw $t4,-8($t0) # word from str1
3428#	bne $t3,$t4,cmpNotEqualzz
3432#	addu $t1,$t1,4
3436#	addu $t0,$t0,4
3440#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
3444#	j cmpHitLimitzz

3448:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
3448#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3452#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
3456#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
3460:  cmpHitLimitzz:
3460#	sw $t5,($sp) # store value
3464#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
3468#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3472:readLogicalChar:

	# check if we already have a character
3472#	lw $v0,lastCharRead
3476#	li $t0,-2
3480#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
3484#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3488#	jr $ra # return
	
3492:  doReadCh:
	# we need to actually read a character: read and return
3492#	li $v0,12 # use system call to read a character
3496#	syscall
3500#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3504:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
3504#	blt $s7,$zero arraySizeOutOfBounds
3505##...slt $at,$s7,$zero
3509##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
3512#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

3516:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
3516#	move $t3,$s6
3520#	bge $t3,$zero,newSkip
3521##...slt $at,$t3,$zero
3525##...beq $at,$zero,$+8
3528#	move $t3,$zero

3532:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3532#	addu $t0,$t3,$s7
3536#	sll $t0,$t0,2
3540#	addu $t0,$t0,8 # amount of memory needed
3544#	addu $t1,$t0,$s3
3548#	bgtu $t1,$s4,doGC
3549##...sltu $at,$s4,$t1
3553##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3556#	move $t2,$s3
3560:  zeroObjLoop:
3560#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3564#	addu $s3,4
3568#	bltu $s3,$t1,zeroObjLoop
3569##...sltu $at,$s3,$t1
3573##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3576#	sll $t0,$s7,2    # number of post-header bytes
3580#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3584#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3588#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3592#	move $s7,$t0
3596#	subu $sp,$sp,4
3600#	sw $t0,($sp)

3604#	jr $ra
	
3608:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3608#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3612#	subu $sp,$sp,4
3616#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3620#	lw $t0,cur_seg
3624#	move $t7,$s4
3628#	la $t6,seg1_start
3629##...lui $t6,16
3633##...addiu $t6,$t6,4944
3636#	la $s3,seg0_start
3640#	la $s4,seg0_end
3641##...lui $s4,16
3645##...addiu $s4,$s4,4944
3648#	sw $zero,cur_seg
3652#	bne $t0,$zero,skipGc1
3656#	la $t6,seg0_start
3660#	la $s3,seg1_start
3661##...lui $s3,16
3665##...addiu $s3,$s3,4944
3668#	la $s4,seg1_end
3669##...lui $s4,32
3673##...addiu $s4,$s4,4944
3676#	sw $s5,cur_seg
3680:  skipGc1:
3680#	li $t5,-2
3684#	lw $t0,stack_bottom
3688#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3692:  gcStackCopyLoop:
3692#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3696#	sll $t2,$t1,31 # zero iff low bit was zero
3700#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3704#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3708#	bleu $t1,$t6,gcTestIterDone1
3709##...sltu $at,$t6,$t1
3713##...beq $at,$zero,$+148
3716#	bgtu $t1,$t7,gcTestIterDone1
3717##...sltu $at,$t7,$t1
3721##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3724#	lw $t2,-8($t1) # possible forwarding tag
3728#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3732#	lw $t2,-4($t1) # forwarding pointer: object's new address
3736#	sw $t2,4($t0) # update stack value
3740#	j gcTestIterDone1 # do next iteration

3744:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3744#	bge $t2,$zero,gcSkip2
3745##...slt $at,$t2,$zero
3749##...beq $at,$zero,$+8
3752#	move $t2,$zero # set to zero if -1 (number of data words)

3756:  gcSkip2:
3756#	sll $t2,$t2,2
3760#	addu $t2,$t2,8
3764#	subu $t4,$t1,$t2 # address of first word of source
3768#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3772#	bge $t3,$zero,gcH2Neg1
3773##...slt $at,$t3,$zero
3777##...beq $at,$zero,$+8
3780#	move $t3,$zero
3784:  gcH2Neg1:
3784#	sll $t3,$t3,2
3788#	addu $t3,$t3,$t1 # address one word past last word of source

3792#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3796#	lw $s0,($t4)
3800#	lw $s1,-8($t1)
3804#	sw $s1,($t4)
3808#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3812:  gCinnerCopy1:
3812#	lw $s0,($t4)
3816#	sw $s0,($s3)
3820#	addu $t4,$t4,4
3824#	addu $s3,$s3,4
3828#	bltu $t4,$t3,gCinnerCopy1
3829##...sltu $at,$t4,$t3
3833##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3836#	sw $t5,-8($t1) # -2 in first header-slot
3840#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3844#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3848#	j gcTestIterDone1

3852:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3852#	subu $t0,$t0,$t1
3856#	subu $t0,$t0,3

3860:  gcTestIterDone1:
3860#	bgeu $t0,$sp,gcStackCopyLoop
3861##...sltu $at,$t0,$sp
3865##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3868#	lw $t1,cur_seg
3872#	la $t0,seg0_start
3876#	beq $t1,$zero,gcSkip4
3880#	la $t0,seg1_start
3881##...lui $t0,16
3885##...addiu $t0,$t0,4944

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3888:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3888#	bgeu $t0,$s3,gcFinishUp
3889##...sltu $at,$t0,$s3
3893##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3896:  gcHeapCopyLoop:
	# check if we have a data array
3896#	lw $t1,($t0) # first header word for current object
3900#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3901##...slt $at,$t1,$zero
3905##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3908#	lw $t1,4($t0) # data words
3912#	addu $t1,$t1,2 # add in # header words
3916#	sll $t1,$t1,2 # convert to byte-count
3920#	addu $t0,$t0,$t1 # skip over object
3924#	j gcTestIterDone2 # go do next object, if any

3928:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3928#	sll $t2,$t1,2 # # data bytes
3932#	addu $t2,$t2,8 # to skip header word
3936#	addu $t2,$t0,$t2 # pointer to new object
3940#	lw $t3,-8($t2) # word to swap
3944#	sw $t1,-8($t2) # store header word
3948#	sw $t3,($t0) # restore first word of object

3952#	lw $t3,-4($t2) # # object words (negative treated as zero)
3956#	bge $t3,$zero,gcH2Neg2
3957##...slt $at,$t3,$zero
3961##...beq $at,$zero,$+8
3964#	move $t3,$zero
3968:  gcH2Neg2:
3968#	sll $t3,$t3,2 # # object bytes
3972#	move $t0,$t2 # address of first pointer in object
3976#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3980#	beq $t0,$s1,gcTestIterDone2
	
3984:  gcNextPointerInObject:
	# get pointer from object
3984#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3988#	bleu $t1,$t6,gcGoNextPointerSlot
3989##...sltu $at,$t6,$t1
3993##...beq $at,$zero,$+136
3996#	bgtu $t1,$t7,gcGoNextPointerSlot
3997##...sltu $at,$t7,$t1
4001##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
4004#	lw $t8,-8($t1) # possible forwarding tag
4008#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
4012#	lw $t8,-4($t1) # forwarding pointer: object's new address
4016#	sw $t8,($t0) # update pointer in object
4020#	j gcGoNextPointerSlot # do next iteration

4024:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
4024#	bge $t8,$zero,gcSkip5
4025##...slt $at,$t8,$zero
4029##...beq $at,$zero,$+8
4032#	move $t8,$zero # set to zero if -1

4036:  gcSkip5:
4036#	sll $t8,$t8,2
4040#	addu $t8,$t8,8
4044#	subu $t4,$t1,$t8 # address of first word of source
4048#	lw $t3,-4($t1)
4052#	bge $t3,$zero,gcNoNeg
4053##...slt $at,$t3,$zero
4057##...beq $at,$zero,$+8
4060#	move $t3,$zero
4064:  gcNoNeg:
4064#	sll $t3,$t3,2
4068#	addu $t3,$t3,$t1 # address one word past last word of source

4072#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
4076#	lw $s0,($t4)
4080#	lw $t9,-8($t1)
4084#	sw $t9,($t4)
4088#	sw $s0,-8($t1)

	# copy all source bytes to the target
4092:  gCinnerCopy2:
4092#	lw $s0,($t4)
4096#	sw $s0,($s3)
4100#	addu $t4,$t4,4
4104#	addu $s3,$s3,4
4108#	bltu $t4,$t3,gCinnerCopy2
4109##...sltu $at,$t4,$t3
4113##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
4116#	sw $t5,-8($t1) # -2 in first header-slot
4120#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
4124#	sw $t8,($t0)

4128:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
4128#	addu $t0,$t0,4
4132#	bltu $t0,$s1,gcNextPointerInObject
4133##...sltu $at,$t0,$s1
4137##...bne $at,$zero,$-152

4140:  gcTestIterDone2:
4140#	bltu $t0,$s3,gcHeapCopyLoop
4141##...sltu $at,$t0,$s3
4145##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

4148:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
4148#	lw $s2,($sp)
4152#	addu $sp,$sp,4

	# mark us as having already GC'd
4156#	move $t5,$s5

	# go try and allocate again
4160#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4164:vm_init:

	# mark bottom of stack
4164#	sw $sp,stack_bottom
4168#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
4172#	move $s2,$zero
4176#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
4180#	li $s5,5
4184#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

4188#	la $s3,seg0_start
4192#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
4196#	la $s4,seg0_end
4197##...lui $s4,16
4201##...addiu $s4,$s4,4944
4204#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
4208#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4212:divide:
	# get parameters; abort if divisor zero
4212#	lw $t0,($sp)
4216#	lw $t1,8($sp)
4220#	beq $t0,$zero,divByZeroError
	
	# perform division
4224#	div $t1,$t0
4228#	mflo $t0

	# store result, adjust stack and return
4232#	addu $sp,$sp,8 # adjust stack
4236#	sw $t0,($sp) # store result
4240#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4244:remainder:
	# get parameters; abort if divisor zero
4244#	lw $t0,($sp)
4248#	lw $t1,8($sp)
4252#	beq $t0,$zero,divByZeroError
	
	# perform division
4256#	div $t1,$t0
4260#	mfhi $t0

	# store result, adjust stack and return
4264#	addu $sp,$sp,8 # adjust stack
4268#	sw $t0,($sp) # store result
4272#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4276:checkCast:
	# get object, allow immediately if null
4276#	lw $t2,($sp)
4280#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
4284#	lw $t3,-8($t2) # <= 0 if array
4288#	lw $t2,-12($t2) # vtable address (unless array)
4292#	bgt $t3,$zero,skipArrayCast
4293##...slt $at,$zero,$t3
4297##...bne $at,$zero,$+8
4300#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4304:  skipArrayCast:
4304#	bge $t2,$t1,castException
4305##...slt $at,$t2,$t1
4309##...beq $at,$zero,$+152
4312#	blt $t2,$t0,castException
4313##...slt $at,$t2,$t0
4317##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
4320:  checkCastReturn:	
4320#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4324:instanceOf:
	# get object, go return false if null
4324#	lw $t2,($sp)
4328#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
4332#	lw $t3,-8($t2) # <= 0 if array
4336#	lw $t2,-12($t2) # vtable address (unless array)
4340#	bgt $t3,$zero,skipArrayInstanceOf
4341##...slt $at,$zero,$t3
4345##...bne $at,$zero,$+8
4348#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
4352:  skipArrayInstanceOf:
4352#	sge $t0,$t2,$t0
4353##...slt $t0,$t2,$t0
4357##...xori $t0,$t0,0x1
4360#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
4364#	and $t2,$t0,$t1
4368:  doneInstanceOf: # if we reach here via branch, we know $t2=0
4368#	sw $t2,($sp)
4372#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4376:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
4376#	li $v0,4 # syscall-code for print-string
4380#	syscall
4384:exit:
	# print termination message
4384#	li $v0,4
4388#	la $a0,exitString
4392#	syscall

	# terminate execution
4396#	li $v0,10 #syscall-code for "exit"
4400#	syscall

4404:outOfHeapMemory:
4404#	la $a0,heapMemoryMsg
4408#	j exitError
4412:divByZeroError:
4412#	la $a0,divByZeroMsg
4416#	j exitError
4420:strIndexOutOfBounds:
4420#	la $a0,strIndexOutOfBoundsMsg
4424#	j exitError
4428:arrayIndexOutOfBounds:
4428#	la $a0,arrayIndexOutOfBoundsMsg
4432#	j exitError
4436:arraySizeOutOfBounds:
4436#	la $a0,arraySizeOutOfBoundsMsg
4440#	j exitError
4444:nullPtrException:
4444#	la $a0,nullPtrExceptionMsg
4448#	j exitError
4452:badIntegerFormat:
4452#	la $a0,badIntegerFormatMsg
4456#	j exitError
4460:castException:
4460#	la $a0,castExceptionMsg
4464#	j exitError

############## data section ################
	.data
	.align 2

4636:cur_seg:
	.word 0

4640:lastCharRead:
	.word -2 # -2 => no buffered character

4644:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4671:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4694:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4729:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4763:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4796:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4827:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4875:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4896:gcMsg: 
      .asciiz "\nGC!\n"

4902:nullStr:
	.asciiz "null"
4907:trueString:
	.asciiz "true"
4912:falseString:
	.asciiz "false"
4918:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4940:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4944:seg0_start:
	.space 0x100000
1053520:seg0_end:
1053520:seg1_start:
	.space 0x100000
2102096:seg1_end:



