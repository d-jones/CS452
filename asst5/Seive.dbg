.data # Program at 5.1			
4076:CLASS_Object: # ClassDecl at 0.0	 	
.word 0 # ClassDecl at 0.0 	 
4080:CLASS_Lib: # ClassDecl at 0.0  
.word CLASS_Object # ClassDecl at 0.0 
.word readLine # ClassDecl at 0.0	
.word readInt # ClassDecl at 0.0		 
.word readChar # ClassDecl at 0.0	 
.word printStr # ClassDecl at 0.0	 	
.word printBool # ClassDecl at 0.0  
.word printInt # ClassDecl at 0.0	 	
.word intToString # ClassDecl at 0.0		
.word intToChar # ClassDecl at 0.0	 
4116:CLASS_Seive: # ClassDecl at 12.7   
.word CLASS_Lib # ClassDecl at 12.7 	
.word readLine # ClassDecl at 12.7	
.word readInt # ClassDecl at 12.7		 
.word readChar # ClassDecl at 12.7   
.word printStr # ClassDecl at 12.7   
.word printBool # ClassDecl at 12.7   
.word printInt # ClassDecl at 12.7 		
.word intToString # ClassDecl at 12.7	 
.word intToChar # ClassDecl at 12.7		
.word fcn_148_exec # ClassDecl at 12.7	 	
4156:CLASS_END_Seive: # ClassDecl at 12.7			
4156:CLASS_END_Lib: # ClassDecl at 0.0	
4156:CLASS_String: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0	 	
.word concat # ClassDecl at 0.0	
.word substring # ClassDecl at 0.0		 
.word length # ClassDecl at 0.0 	
.word charAt # ClassDecl at 0.0			
.word compareTo # ClassDecl at 0.0	 
4180:CLASS_END_String: # ClassDecl at 0.0 		
4180:CLASS_RunMain: # ClassDecl at 0.0  
.word CLASS_Object # ClassDecl at 0.0		 
4184:CLASS_END_RunMain: # ClassDecl at 0.0		
4184:CLASS_Main: # ClassDecl at 5.7		 
.word CLASS_Object # ClassDecl at 5.7 
.word fcn_4_main # ClassDecl at 5.7		
4192:CLASS_END_Main: # ClassDecl at 5.7		 
4192:CLASS_END_Object: # ClassDecl at 0.0  
 .data # Program at 5.1 		
  .byte 70 # StringLiteral at 18.11			
  .byte 105 # StringLiteral at 18.11			
  .byte 110 # StringLiteral at 18.11	
  .byte 100 # StringLiteral at 18.11	 
  .byte 32 # StringLiteral at 18.11		 
  .byte 112 # StringLiteral at 18.11		
  .byte 114 # StringLiteral at 18.11 	
  .byte 105 # StringLiteral at 18.11 
  .byte 109 # StringLiteral at 18.11   
  .byte 101 # StringLiteral at 18.11			
  .byte 115 # StringLiteral at 18.11  
  .byte 32 # StringLiteral at 18.11 	 
  .byte 116 # StringLiteral at 18.11 	
  .byte 104 # StringLiteral at 18.11		 
  .byte 114 # StringLiteral at 18.11	
  .byte 111 # StringLiteral at 18.11 
  .byte 117 # StringLiteral at 18.11   
  .byte 103 # StringLiteral at 18.11	  
  .byte 104 # StringLiteral at 18.11	 	
  .byte 58 # StringLiteral at 18.11	  
  .byte 32 # StringLiteral at 18.11 	
  .byte 0 # StringLiteral at 18.11	  
  .byte 0 # StringLiteral at 18.11	  
  .byte 0 # StringLiteral at 18.11  
  .word CLASS_String # StringLiteral at 18.11  	
  .word 7 # StringLiteral at 18.11   
  .word -21 # StringLiteral at 18.11 	
4228:strLit_6: # StringLiteral at 18.11		 
  .byte 112 # StringLiteral at 48.11  
  .byte 114 # StringLiteral at 48.11 	
  .byte 105 # StringLiteral at 48.11 		
  .byte 109 # StringLiteral at 48.11   
  .byte 101 # StringLiteral at 48.11			
  .byte 115 # StringLiteral at 48.11 
  .byte 32 # StringLiteral at 48.11	
  .byte 117 # StringLiteral at 48.11	 	
  .byte 112 # StringLiteral at 48.11  
  .byte 32 # StringLiteral at 48.11 	 
  .byte 116 # StringLiteral at 48.11		 
  .byte 104 # StringLiteral at 48.11 		
  .byte 114 # StringLiteral at 48.11		 
  .byte 111 # StringLiteral at 48.11			
  .byte 117 # StringLiteral at 48.11		
  .byte 103 # StringLiteral at 48.11  
  .byte 104 # StringLiteral at 48.11	
  .byte 32 # StringLiteral at 48.11 	
  .byte 0 # StringLiteral at 48.11			
  .byte 0 # StringLiteral at 48.11	  
  .word CLASS_String # StringLiteral at 48.11 	
  .word 6 # StringLiteral at 48.11	
  .word -18 # StringLiteral at 48.11 		
4260:strLit_80: # StringLiteral at 48.11	
  .byte 58 # StringLiteral at 50.11 	
  .byte 10 # StringLiteral at 50.11	 	
  .byte 0 # StringLiteral at 50.11  	
  .byte 0 # StringLiteral at 50.11  
  .word CLASS_String # StringLiteral at 50.11  	
  .word 2 # StringLiteral at 50.11 		
  .word -2 # StringLiteral at 50.11		
4276:strLit_88: # StringLiteral at 50.11	  
  .byte 10 # StringLiteral at 61.16  	
  .byte 0 # StringLiteral at 61.16	
  .byte 0 # StringLiteral at 61.16  
  .byte 0 # StringLiteral at 61.16	 
  .word CLASS_String # StringLiteral at 61.16 		
  .word 2 # StringLiteral at 61.16 		
  .word -1 # StringLiteral at 61.16	
4292:strLit_123: # StringLiteral at 61.16	 
  .byte 32 # StringLiteral at 66.16		 
  .byte 0 # StringLiteral at 66.16	 	
  .byte 0 # StringLiteral at 66.16 	 
  .byte 0 # StringLiteral at 66.16			
  .word CLASS_String # StringLiteral at 66.16	
  .word 2 # StringLiteral at 66.16	 
  .word -1 # StringLiteral at 66.16	 
4308:strLit_131: # StringLiteral at 66.16   
  .byte 10 # StringLiteral at 72.11 
  .byte 0 # StringLiteral at 72.11   
  .byte 0 # StringLiteral at 72.11	 
  .byte 0 # StringLiteral at 72.11	  
  .word CLASS_String # StringLiteral at 72.11	  
  .word 2 # StringLiteral at 72.11			
  .word -1 # StringLiteral at 72.11	 
4324:strLit_144: # StringLiteral at 72.11	  
  # ENTER NODE # Program at 5.1	
  .text # Program at 5.1  	
  .globl main # Program at 5.1   
0:  main: # Program at 5.1  	
0#  jal vm_init # Program at 5.1  	
    # ENTER NODE # ExpStatement at 0.0  
      # ENTER NODE # Call at 0.0			
        # ENTER NODE # NewObject at 0.0	
4#        li $s6, 1 # NewObject at 0.0 	 
8#        li $s7, 0 # NewObject at 0.0 	
12#        jal newObject # NewObject at 0.0  	
16#        la $t0, CLASS_Main # NewObject at 0.0	 
20#        sw $t0, -12($s7) # NewObject at 0.0	 
        # EXIT NODE # NewObject at 0.0			
24#      lw $t0, 0($sp) # Call at 0.0   
28#      beq $t0, $zero, nullPtrException # Call at 0.0		 
32#      lw $t0, -12($t0) # Call at 0.0	 	
36#      lw $t0, 4($t0) # Call at 0.0	 	
40#      jalr $t0 # Call at 0.0  	
      # EXIT NODE # Call at 0.0	
    # EXIT NODE # ExpStatement at 0.0 	
44#  li $v0, 10 # Program at 5.1  	
48#  syscall # Program at 5.1			
    # ENTER NODE # MethodDeclVoid at 6.17		
    .globl fcn_4_main # MethodDeclVoid at 6.17   
52:    fcn_4_main: # MethodDeclVoid at 6.17 	
52#    subu $sp, $sp, 8 # MethodDeclVoid at 6.17	 
56#    sw $ra, 4($sp) # MethodDeclVoid at 6.17		
60#    sw $s2, ($sp) # MethodDeclVoid at 6.17 		
64#    lw $s2, 8($sp) # MethodDeclVoid at 6.17 
      # ENTER NODE # ExpStatement at 7.14			
        # ENTER NODE # Call at 7.14 
          # ENTER NODE # NewObject at 7.2 	 
68#          li $s6, 1 # NewObject at 7.2 
72#          li $s7, 0 # NewObject at 7.2			
76#          jal newObject # NewObject at 7.2  
80#          la $t0, CLASS_Seive # NewObject at 7.2		 
84#          sw $t0, -12($s7) # NewObject at 7.2	  
          # EXIT NODE # NewObject at 7.2	 	
88#        lw $t0, 0($sp) # Call at 7.14	
92#        beq $t0, $zero, nullPtrException # Call at 7.14		
96#        lw $t0, -12($t0) # Call at 7.14   
100#        lw $t0, 36($t0) # Call at 7.14		
104#        jalr $t0 # Call at 7.14	 
        # EXIT NODE # Call at 7.14  	
      # EXIT NODE # ExpStatement at 7.14 	 
108#    lw $ra, 4($sp) # MethodDeclVoid at 6.17		
112#    lw $s2, 0($sp) # MethodDeclVoid at 6.17  	
116#    addu $sp, $sp, 12 # MethodDeclVoid at 6.17 		
120#    jr $ra # MethodDeclVoid at 6.17 	
    # EXIT NODE # MethodDeclVoid at 6.17 	
    # ENTER NODE # MethodDeclVoid at 15.17	
    .globl fcn_148_exec # MethodDeclVoid at 15.17	
124:    fcn_148_exec: # MethodDeclVoid at 15.17 	 
124#    subu $sp, $sp, 8 # MethodDeclVoid at 15.17 	 
128#    sw $ra, 4($sp) # MethodDeclVoid at 15.17	
132#    sw $s2, ($sp) # MethodDeclVoid at 15.17 	
136#    lw $s2, 8($sp) # MethodDeclVoid at 15.17	  
      # ENTER NODE # ExpStatement at 18.2		
        # ENTER NODE # Call at 18.2		
          # ENTER NODE # This at 18.2	  
140#          subu $sp, $sp, 4 # This at 18.2	
144#          sw $s2, ($sp) # This at 18.2  
          # EXIT NODE # This at 18.2		
          # ENTER NODE # StringLiteral at 18.11  	
148#          subu $sp, $sp, 4 # StringLiteral at 18.11  	
152#          la $t0, strLit_6 # StringLiteral at 18.11 	 
156#          sw $t0, ($sp) # StringLiteral at 18.11  
          # EXIT NODE # StringLiteral at 18.11	  
160#        lw $t0, 4($sp) # Call at 18.2			
164#        beq $t0, $zero, nullPtrException # Call at 18.2 	 
168#        lw $t0, -12($t0) # Call at 18.2			
172#        lw $t0, 16($t0) # Call at 18.2		 
176#        jalr $t0 # Call at 18.2   
        # EXIT NODE # Call at 18.2 	
      # EXIT NODE # ExpStatement at 18.2	  
      # ENTER NODE # LocalVarDecl at 19.6	 	
        # ENTER NODE # Call at 19.12  
          # ENTER NODE # This at 19.12		
180#          subu $sp, $sp, 4 # This at 19.12	  
184#          sw $s2, ($sp) # This at 19.12		 
          # EXIT NODE # This at 19.12	 	
188#        lw $t0, 0($sp) # Call at 19.12	 	
192#        beq $t0, $zero, nullPtrException # Call at 19.12	
196#        lw $t0, -12($t0) # Call at 19.12  
200#        lw $t0, 8($t0) # Call at 19.12   
204#        jalr $t0 # Call at 19.12 	 
        # EXIT NODE # Call at 19.12		
      # EXIT NODE # LocalVarDecl at 19.6   
      # ENTER NODE # LocalVarDecl at 22.6 
        # ENTER NODE # IdentifierExp at 22.10 	
208#        lw $t0, 0($sp) # IdentifierExp at 22.10 
212#        subu $sp, $sp, 8 # IdentifierExp at 22.10 
216#        sw $s5, 4($sp) # IdentifierExp at 22.10 
220#        sw $t0, ($sp) # IdentifierExp at 22.10	 	
        # EXIT NODE # IdentifierExp at 22.10 	 
      # EXIT NODE # LocalVarDecl at 22.6		
      # ENTER NODE # If at 23.2			
        # ENTER NODE # LessThan at 23.8	 	
          # ENTER NODE # IdentifierExp at 23.6		 
224#          lw $t0, 0($sp) # IdentifierExp at 23.6		 
228#          subu $sp, $sp, 8 # IdentifierExp at 23.6 	
232#          sw $s5, 4($sp) # IdentifierExp at 23.6  
236#          sw $t0, ($sp) # IdentifierExp at 23.6 		
          # EXIT NODE # IdentifierExp at 23.6  
          # ENTER NODE # IntegerLiteral at 23.10 
240#          subu $sp, $sp, 8 # IntegerLiteral at 23.10 	
244#          sw $s5, 4($sp) # IntegerLiteral at 23.10  	
248#          li $t0, 0 # IntegerLiteral at 23.10  
252#          sw $t0, ($sp) # IntegerLiteral at 23.10 	
          # EXIT NODE # IntegerLiteral at 23.10		 
256#        lw $t0, ($sp) # LessThan at 23.8			
260#        lw $t1, 8($sp) # LessThan at 23.8 
264#        slt $t0, $t1, $t0 # LessThan at 23.8 
268#        addu $sp, $sp, 12 # LessThan at 23.8 
272#        sw $t0, ($sp) # LessThan at 23.8	 
        # EXIT NODE # LessThan at 23.8 	
276#      lw $t0, ($sp) # If at 23.2	
280#      addu $sp, $sp, 4 # If at 23.2   
284#      beq $t0, $zero, if_else_25 # If at 23.2	  
        # ENTER NODE # Block at 23.13 	
          # ENTER NODE # Assign at 24.8 
            # ENTER NODE # IntegerLiteral at 24.10 
288#            subu $sp, $sp, 8 # IntegerLiteral at 24.10  	
292#            sw $s5, 4($sp) # IntegerLiteral at 24.10			
296#            li $t0, 0 # IntegerLiteral at 24.10   
300#            sw $t0, ($sp) # IntegerLiteral at 24.10		
            # EXIT NODE # IntegerLiteral at 24.10  
304#          lw $t0, ($sp) # Assign at 24.8 
308#          sw $t0, 8($sp) # Assign at 24.8  	
312#          addu $sp, $sp, 8 # Assign at 24.8		
          # EXIT NODE # Assign at 24.8		
        # EXIT NODE # Block at 23.13 	 
316#      j if_done_25 # If at 23.2 	 
320:      if_else_25: # If at 23.2 	
        # ENTER NODE # Block at 32.2 	 
        # EXIT NODE # Block at 32.2			
320:      if_done_25: # If at 23.2  	
      # EXIT NODE # If at 23.2	 	
      # ENTER NODE # LocalVarDecl at 32.12	  
        # ENTER NODE # NewArray at 32.20  
          # ENTER NODE # Plus at 32.33		
            # ENTER NODE # IdentifierExp at 32.32	
320#            lw $t0, 0($sp) # IdentifierExp at 32.32	  
324#            subu $sp, $sp, 8 # IdentifierExp at 32.32  
328#            sw $s5, 4($sp) # IdentifierExp at 32.32	
332#            sw $t0, ($sp) # IdentifierExp at 32.32 	 
            # EXIT NODE # IdentifierExp at 32.32	  
            # ENTER NODE # IntegerLiteral at 32.34	 
336#            subu $sp, $sp, 8 # IntegerLiteral at 32.34		 
340#            sw $s5, 4($sp) # IntegerLiteral at 32.34			
344#            li $t0, 1 # IntegerLiteral at 32.34	  
348#            sw $t0, ($sp) # IntegerLiteral at 32.34			
            # EXIT NODE # IntegerLiteral at 32.34 	
352#          lw $t0, ($sp) # Plus at 32.33 	 
356#          lw $t1, 8($sp) # Plus at 32.33   
360#          addu $t0, $t0, $t1 # Plus at 32.33 
364#          addu $sp, $sp, 8 # Plus at 32.33  	
368#          sw $t0, ($sp) # Plus at 32.33 	
          # EXIT NODE # Plus at 32.33 	
372#        lw $s7, ($sp) # NewArray at 32.20		
376#        addu $sp, $sp, 8 # NewArray at 32.20	 
380#        li $s6, 0 # NewArray at 32.20		 
384#        jal newObject # NewArray at 32.20		 
        # EXIT NODE # NewArray at 32.20		 
      # EXIT NODE # LocalVarDecl at 32.12	 	
      # ENTER NODE # Block at 35.2	  
        # ENTER NODE # LocalVarDecl at 35.11	 
          # ENTER NODE # IntegerLiteral at 35.15			
388#          subu $sp, $sp, 8 # IntegerLiteral at 35.15 	
392#          sw $s5, 4($sp) # IntegerLiteral at 35.15			
396#          li $t0, 2 # IntegerLiteral at 35.15  
400#          sw $t0, ($sp) # IntegerLiteral at 35.15	
          # EXIT NODE # IntegerLiteral at 35.15 
        # EXIT NODE # LocalVarDecl at 35.11 
        # ENTER NODE # While at 35.2	 
404#        j while_enter_78 # While at 35.2		 
408:        while_top_78: # While at 35.2	 
          # ENTER NODE # Block at 35.2	 	
            # ENTER NODE # Block at 35.31   
              # ENTER NODE # If at 36.6			
                # ENTER NODE # Not at 36.10 		
                  # ENTER NODE # ArrayLookup at 36.16	  
                    # ENTER NODE # IdentifierExp at 36.11  
408#                    lw $t0, 8($sp) # IdentifierExp at 36.11 	
412#                    subu $sp, $sp, 4 # IdentifierExp at 36.11 	
416#                    sw $t0, ($sp) # IdentifierExp at 36.11 		
                    # EXIT NODE # IdentifierExp at 36.11	 
                    # ENTER NODE # IdentifierExp at 36.17		 
420#                    lw $t0, 4($sp) # IdentifierExp at 36.17 
424#                    subu $sp, $sp, 8 # IdentifierExp at 36.17 		
428#                    sw $s5, 4($sp) # IdentifierExp at 36.17 		
432#                    sw $t0, ($sp) # IdentifierExp at 36.17			
                    # EXIT NODE # IdentifierExp at 36.17 
436#                  lw $t0, 8($sp) # ArrayLookup at 36.16  	
440#                  beq $t0, $zero, nullPtrException # ArrayLookup at 36.16   
444#                  lw $t1, -4($t0) # ArrayLookup at 36.16	  
448#                  lw $t2, ($sp) # ArrayLookup at 36.16 	 
452#                  bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 36.16			
453##...sltu $at,$t2,$t1
457##...beq $at,$zero,$+3580
460#                  sll $t2, $t2, 2 # ArrayLookup at 36.16  	
464#                  addu $t2, $t2, $t0 # ArrayLookup at 36.16   
468#                  lw $t0, ($t2) # ArrayLookup at 36.16  
472#                  sw $t0, 8($sp) # ArrayLookup at 36.16	 
476#                  addu $sp, $sp, 8 # ArrayLookup at 36.16  
                  # EXIT NODE # ArrayLookup at 36.16   
480#                lw $t0, ($sp) # Not at 36.10  
484#                xor $t0, $t0, 1 # Not at 36.10		 
488#                sw $t0, ($sp) # Not at 36.10 	
                # EXIT NODE # Not at 36.10		 
492#              lw $t0, ($sp) # If at 36.6 
496#              addu $sp, $sp, 4 # If at 36.6	  
500#              beq $t0, $zero, if_else_75 # If at 36.6 
                # ENTER NODE # Block at 36.21  
                  # ENTER NODE # Block at 37.3	 	
                    # ENTER NODE # LocalVarDecl at 37.12 	
                      # ENTER NODE # Times at 37.17 	
                        # ENTER NODE # IntegerLiteral at 37.16		 
504#                        subu $sp, $sp, 8 # IntegerLiteral at 37.16	  
508#                        sw $s5, 4($sp) # IntegerLiteral at 37.16		
512#                        li $t0, 2 # IntegerLiteral at 37.16		 
516#                        sw $t0, ($sp) # IntegerLiteral at 37.16	
                        # EXIT NODE # IntegerLiteral at 37.16	 
                        # ENTER NODE # IdentifierExp at 37.18 		
520#                        lw $t0, 8($sp) # IdentifierExp at 37.18	
524#                        subu $sp, $sp, 8 # IdentifierExp at 37.18	 
528#                        sw $s5, 4($sp) # IdentifierExp at 37.18		 
532#                        sw $t0, ($sp) # IdentifierExp at 37.18			
                        # EXIT NODE # IdentifierExp at 37.18  	
536#                      lw $t0, ($sp) # Times at 37.17  
540#                      lw $t1, 8($sp) # Times at 37.17 
544#                      mult $t0, $t1 # Times at 37.17	
548#                      mflo $t0 # Times at 37.17 		
552#                      addu $sp, $sp, 8 # Times at 37.17	  
556#                      sw $t0, ($sp) # Times at 37.17 		
                      # EXIT NODE # Times at 37.17 	
                    # EXIT NODE # LocalVarDecl at 37.12 	 
                    # ENTER NODE # While at 37.3			
560#                    j while_enter_71 # While at 37.3	 
564:                    while_top_71: # While at 37.3			
                      # ENTER NODE # Block at 37.3 
                        # ENTER NODE # Block at 37.39  	
                          # ENTER NODE # Assign at 38.16	 	
                            # ENTER NODE # IdentifierExp at 38.7		 
564#                            lw $t0, 16($sp) # IdentifierExp at 38.7	 
568#                            subu $sp, $sp, 4 # IdentifierExp at 38.7   
572#                            sw $t0, ($sp) # IdentifierExp at 38.7			
                            # EXIT NODE # IdentifierExp at 38.7  
                            # ENTER NODE # IdentifierExp at 38.13 
576#                            lw $t0, 4($sp) # IdentifierExp at 38.13   
580#                            subu $sp, $sp, 8 # IdentifierExp at 38.13		 
584#                            sw $s5, 4($sp) # IdentifierExp at 38.13	  
588#                            sw $t0, ($sp) # IdentifierExp at 38.13 
                            # EXIT NODE # IdentifierExp at 38.13 		
                            # ENTER NODE # True at 38.18 	
592#                            subu $sp, $sp, 4 # True at 38.18  
596#                            li $t0, 1 # True at 38.18	 	
600#                            sw $t0, ($sp) # True at 38.18		
                            # EXIT NODE # True at 38.18  
604#                          lw $t0, ($sp) # Assign at 38.16			
608#                          lw $t1, 12($sp) # Assign at 38.16 	 
612#                          beq $t1, $zero, nullPtrException # Assign at 38.16  	
616#                          lw $t2, 4($sp) # Assign at 38.16 	
620#                          lw $t3, -4($t1) # Assign at 38.16	
624#                          bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 38.16 	
625##...sltu $at,$t2,$t3
629##...beq $at,$zero,$+3408
632#                          sll $t2, $t2, 2 # Assign at 38.16 	
636#                          addu $t2, $t2, $t1 # Assign at 38.16	
640#                          sw $t0, ($t2) # Assign at 38.16		 
644#                          addu $sp, $sp, 16 # Assign at 38.16 	 
                          # EXIT NODE # Assign at 38.16	 	
                        # EXIT NODE # Block at 37.39	 	
                        # ENTER NODE # Assign at 37.30	
                          # ENTER NODE # Plus at 37.34	  
                            # ENTER NODE # IdentifierExp at 37.32   
648#                            lw $t0, 0($sp) # IdentifierExp at 37.32  
652#                            subu $sp, $sp, 8 # IdentifierExp at 37.32 
656#                            sw $s5, 4($sp) # IdentifierExp at 37.32 
660#                            sw $t0, ($sp) # IdentifierExp at 37.32 	 
                            # EXIT NODE # IdentifierExp at 37.32	 
                            # ENTER NODE # IdentifierExp at 37.36   
664#                            lw $t0, 16($sp) # IdentifierExp at 37.36  
668#                            subu $sp, $sp, 8 # IdentifierExp at 37.36		
672#                            sw $s5, 4($sp) # IdentifierExp at 37.36	  
676#                            sw $t0, ($sp) # IdentifierExp at 37.36		 
                            # EXIT NODE # IdentifierExp at 37.36 		
680#                          lw $t0, ($sp) # Plus at 37.34	  
684#                          lw $t1, 8($sp) # Plus at 37.34	  
688#                          addu $t0, $t0, $t1 # Plus at 37.34	 	
692#                          addu $sp, $sp, 8 # Plus at 37.34 	
696#                          sw $t0, ($sp) # Plus at 37.34			
                          # EXIT NODE # Plus at 37.34   
700#                        lw $t0, ($sp) # Assign at 37.30		
704#                        sw $t0, 8($sp) # Assign at 37.30 	
708#                        addu $sp, $sp, 8 # Assign at 37.30  
                        # EXIT NODE # Assign at 37.30			
                      # EXIT NODE # Block at 37.3	  
712:                    while_enter_71: # While at 37.3		 
                      # ENTER NODE # LessThan at 37.23	  
                        # ENTER NODE # IdentifierExp at 37.21 
712#                        lw $t0, 0($sp) # IdentifierExp at 37.21  
716#                        subu $sp, $sp, 8 # IdentifierExp at 37.21	 	
720#                        sw $s5, 4($sp) # IdentifierExp at 37.21	 	
724#                        sw $t0, ($sp) # IdentifierExp at 37.21	  
                        # EXIT NODE # IdentifierExp at 37.21			
                        # ENTER NODE # IdentifierExp at 37.25			
728#                        lw $t0, 28($sp) # IdentifierExp at 37.25			
732#                        subu $sp, $sp, 8 # IdentifierExp at 37.25 	 
736#                        sw $s5, 4($sp) # IdentifierExp at 37.25	  
740#                        sw $t0, ($sp) # IdentifierExp at 37.25   
                        # EXIT NODE # IdentifierExp at 37.25 	 
744#                      lw $t0, ($sp) # LessThan at 37.23	
748#                      lw $t1, 8($sp) # LessThan at 37.23   
752#                      slt $t0, $t1, $t0 # LessThan at 37.23		 
756#                      addu $sp, $sp, 12 # LessThan at 37.23		
760#                      sw $t0, ($sp) # LessThan at 37.23 
                      # EXIT NODE # LessThan at 37.23	
764#                    lw $t0, ($sp) # While at 37.3 	
768#                    addu $sp, $sp, 4 # While at 37.3	
772#                    bne $t0, $zero, while_top_71 # While at 37.3 	 
776:                    while_exit_71: # While at 37.3	 
                    # EXIT NODE # While at 37.3 
776#                  addu $sp, 8 # Block at 37.3	 	
                  # EXIT NODE # Block at 37.3			
                # EXIT NODE # Block at 36.21  	
780#              j if_done_75 # If at 36.6	 	
784:              if_else_75: # If at 36.6	  
                # ENTER NODE # Block at 41.2 		
                # EXIT NODE # Block at 41.2	 	
784:              if_done_75: # If at 36.6	 
              # EXIT NODE # If at 36.6 	 
            # EXIT NODE # Block at 35.31		 
            # ENTER NODE # Assign at 35.26	 
              # ENTER NODE # Plus at 35.27 	 
                # ENTER NODE # IdentifierExp at 35.26	
784#                lw $t0, 0($sp) # IdentifierExp at 35.26 	
788#                subu $sp, $sp, 8 # IdentifierExp at 35.26  	
792#                sw $s5, 4($sp) # IdentifierExp at 35.26	 	
796#                sw $t0, ($sp) # IdentifierExp at 35.26		
                # EXIT NODE # IdentifierExp at 35.26	
                # ENTER NODE # IntegerLiteral at 35.27	
800#                subu $sp, $sp, 8 # IntegerLiteral at 35.27 	 
804#                sw $s5, 4($sp) # IntegerLiteral at 35.27 	
808#                li $t0, 1 # IntegerLiteral at 35.27 	
812#                sw $t0, ($sp) # IntegerLiteral at 35.27   
                # EXIT NODE # IntegerLiteral at 35.27  
816#              lw $t0, ($sp) # Plus at 35.27			
820#              lw $t1, 8($sp) # Plus at 35.27 
824#              addu $t0, $t0, $t1 # Plus at 35.27	 
828#              addu $sp, $sp, 8 # Plus at 35.27	  
832#              sw $t0, ($sp) # Plus at 35.27	 	
              # EXIT NODE # Plus at 35.27 	
836#            lw $t0, ($sp) # Assign at 35.26 		
840#            sw $t0, 8($sp) # Assign at 35.26  	
844#            addu $sp, $sp, 8 # Assign at 35.26  	
            # EXIT NODE # Assign at 35.26 		
          # EXIT NODE # Block at 35.2	  
848:        while_enter_78: # While at 35.2   
          # ENTER NODE # Not at 35.20	 	
            # ENTER NODE # GreaterThan at 35.20 	
              # ENTER NODE # IdentifierExp at 35.18	 	
848#              lw $t0, 0($sp) # IdentifierExp at 35.18	 	
852#              subu $sp, $sp, 8 # IdentifierExp at 35.18	  
856#              sw $s5, 4($sp) # IdentifierExp at 35.18	 	
860#              sw $t0, ($sp) # IdentifierExp at 35.18 
              # EXIT NODE # IdentifierExp at 35.18	 	
              # ENTER NODE # IdentifierExp at 35.23   
864#              lw $t0, 20($sp) # IdentifierExp at 35.23 		
868#              subu $sp, $sp, 8 # IdentifierExp at 35.23 	 
872#              sw $s5, 4($sp) # IdentifierExp at 35.23 	 
876#              sw $t0, ($sp) # IdentifierExp at 35.23	
              # EXIT NODE # IdentifierExp at 35.23 
880#            lw $t0, ($sp) # GreaterThan at 35.20	
884#            lw $t1, 8($sp) # GreaterThan at 35.20	 	
888#            sgt $t0, $t1, $t0 # GreaterThan at 35.20	  
892#            addu $sp, $sp, 12 # GreaterThan at 35.20 	
896#            sw $t0, ($sp) # GreaterThan at 35.20  
            # EXIT NODE # GreaterThan at 35.20 	
900#          lw $t0, ($sp) # Not at 35.20	
904#          xor $t0, $t0, 1 # Not at 35.20	  
908#          sw $t0, ($sp) # Not at 35.20	 	
          # EXIT NODE # Not at 35.20 
912#        lw $t0, ($sp) # While at 35.2	
916#        addu $sp, $sp, 4 # While at 35.2	 	
920#        bne $t0, $zero, while_top_78 # While at 35.2   
924:        while_exit_78: # While at 35.2 
        # EXIT NODE # While at 35.2 	
924#      addu $sp, 8 # Block at 35.2	 	
      # EXIT NODE # Block at 35.2			
      # ENTER NODE # ExpStatement at 48.2   
        # ENTER NODE # Call at 48.2 	 
          # ENTER NODE # This at 48.2 
928#          subu $sp, $sp, 4 # This at 48.2	  
932#          sw $s2, ($sp) # This at 48.2 	 
          # EXIT NODE # This at 48.2	 
          # ENTER NODE # StringLiteral at 48.11		
936#          subu $sp, $sp, 4 # StringLiteral at 48.11		 
940#          la $t0, strLit_80 # StringLiteral at 48.11  	
944#          sw $t0, ($sp) # StringLiteral at 48.11	  
          # EXIT NODE # StringLiteral at 48.11  	
948#        lw $t0, 4($sp) # Call at 48.2 		
952#        beq $t0, $zero, nullPtrException # Call at 48.2 	
956#        lw $t0, -12($t0) # Call at 48.2  
960#        lw $t0, 16($t0) # Call at 48.2 		
964#        jalr $t0 # Call at 48.2		 
        # EXIT NODE # Call at 48.2	  
      # EXIT NODE # ExpStatement at 48.2	 
      # ENTER NODE # ExpStatement at 49.2 	 
        # ENTER NODE # Call at 49.2 		
          # ENTER NODE # This at 49.2 	
968#          subu $sp, $sp, 4 # This at 49.2	 	
972#          sw $s2, ($sp) # This at 49.2	  
          # EXIT NODE # This at 49.2   
          # ENTER NODE # IdentifierExp at 49.11	 
976#          lw $t0, 8($sp) # IdentifierExp at 49.11	
980#          subu $sp, $sp, 8 # IdentifierExp at 49.11  
984#          sw $s5, 4($sp) # IdentifierExp at 49.11 
988#          sw $t0, ($sp) # IdentifierExp at 49.11		 
          # EXIT NODE # IdentifierExp at 49.11	 	
992#        lw $t0, 8($sp) # Call at 49.2	 
996#        beq $t0, $zero, nullPtrException # Call at 49.2 
1000#        lw $t0, -12($t0) # Call at 49.2 	 
1004#        lw $t0, 24($t0) # Call at 49.2  	
1008#        jalr $t0 # Call at 49.2	
        # EXIT NODE # Call at 49.2	
      # EXIT NODE # ExpStatement at 49.2		 
      # ENTER NODE # ExpStatement at 50.2 	
        # ENTER NODE # Call at 50.2  
          # ENTER NODE # This at 50.2	 	
1012#          subu $sp, $sp, 4 # This at 50.2	 
1016#          sw $s2, ($sp) # This at 50.2	  
          # EXIT NODE # This at 50.2		 
          # ENTER NODE # StringLiteral at 50.11			
1020#          subu $sp, $sp, 4 # StringLiteral at 50.11	 
1024#          la $t0, strLit_88 # StringLiteral at 50.11	
1028#          sw $t0, ($sp) # StringLiteral at 50.11	 	
          # EXIT NODE # StringLiteral at 50.11  	
1032#        lw $t0, 4($sp) # Call at 50.2			
1036#        beq $t0, $zero, nullPtrException # Call at 50.2	  
1040#        lw $t0, -12($t0) # Call at 50.2 
1044#        lw $t0, 16($t0) # Call at 50.2			
1048#        jalr $t0 # Call at 50.2   
        # EXIT NODE # Call at 50.2	 	
      # EXIT NODE # ExpStatement at 50.2   
      # ENTER NODE # LocalVarDecl at 53.6 	
        # ENTER NODE # IntegerLiteral at 53.23	 	
1052#        subu $sp, $sp, 8 # IntegerLiteral at 53.23	  
1056#        sw $s5, 4($sp) # IntegerLiteral at 53.23	  
1060#        li $t0, 0 # IntegerLiteral at 53.23	 	
1064#        sw $t0, ($sp) # IntegerLiteral at 53.23	
        # EXIT NODE # IntegerLiteral at 53.23	 
      # EXIT NODE # LocalVarDecl at 53.6   
      # ENTER NODE # Block at 54.2  	
        # ENTER NODE # LocalVarDecl at 54.11  	
          # ENTER NODE # IntegerLiteral at 54.15	 
1068#          subu $sp, $sp, 8 # IntegerLiteral at 54.15  
1072#          sw $s5, 4($sp) # IntegerLiteral at 54.15	
1076#          li $t0, 2 # IntegerLiteral at 54.15			
1080#          sw $t0, ($sp) # IntegerLiteral at 54.15	 
          # EXIT NODE # IntegerLiteral at 54.15   
        # EXIT NODE # LocalVarDecl at 54.11  
        # ENTER NODE # While at 54.2 	 
1084#        j while_enter_142 # While at 54.2	 	
1088:        while_top_142: # While at 54.2  
          # ENTER NODE # Block at 54.2 
            # ENTER NODE # Block at 54.30 
              # ENTER NODE # If at 55.6	  
                # ENTER NODE # Not at 55.10	  
                  # ENTER NODE # ArrayLookup at 55.16	  
                    # ENTER NODE # IdentifierExp at 55.11  	
1088#                    lw $t0, 16($sp) # IdentifierExp at 55.11   
1092#                    subu $sp, $sp, 4 # IdentifierExp at 55.11		
1096#                    sw $t0, ($sp) # IdentifierExp at 55.11		 
                    # EXIT NODE # IdentifierExp at 55.11			
                    # ENTER NODE # IdentifierExp at 55.17   
1100#                    lw $t0, 4($sp) # IdentifierExp at 55.17   
1104#                    subu $sp, $sp, 8 # IdentifierExp at 55.17 		
1108#                    sw $s5, 4($sp) # IdentifierExp at 55.17 
1112#                    sw $t0, ($sp) # IdentifierExp at 55.17 
                    # EXIT NODE # IdentifierExp at 55.17			
1116#                  lw $t0, 8($sp) # ArrayLookup at 55.16   
1120#                  beq $t0, $zero, nullPtrException # ArrayLookup at 55.16	
1124#                  lw $t1, -4($t0) # ArrayLookup at 55.16 	 
1128#                  lw $t2, ($sp) # ArrayLookup at 55.16	
1132#                  bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 55.16 
1133##...sltu $at,$t2,$t1
1137##...beq $at,$zero,$+2900
1140#                  sll $t2, $t2, 2 # ArrayLookup at 55.16	
1144#                  addu $t2, $t2, $t0 # ArrayLookup at 55.16			
1148#                  lw $t0, ($t2) # ArrayLookup at 55.16	  
1152#                  sw $t0, 8($sp) # ArrayLookup at 55.16   
1156#                  addu $sp, $sp, 8 # ArrayLookup at 55.16		
                  # EXIT NODE # ArrayLookup at 55.16 
1160#                lw $t0, ($sp) # Not at 55.10	 
1164#                xor $t0, $t0, 1 # Not at 55.10		
1168#                sw $t0, ($sp) # Not at 55.10  
                # EXIT NODE # Not at 55.10 		
1172#              lw $t0, ($sp) # If at 55.6 
1176#              addu $sp, $sp, 4 # If at 55.6  
1180#              beq $t0, $zero, if_else_139 # If at 55.6 
                # ENTER NODE # Block at 55.21 	 
                  # ENTER NODE # ExpStatement at 57.3	 
                    # ENTER NODE # Call at 57.3  
                      # ENTER NODE # This at 57.3 		
1184#                      subu $sp, $sp, 4 # This at 57.3	
1188#                      sw $s2, ($sp) # This at 57.3	 
                      # EXIT NODE # This at 57.3 
                      # ENTER NODE # IdentifierExp at 57.12		 
1192#                      lw $t0, 4($sp) # IdentifierExp at 57.12  	
1196#                      subu $sp, $sp, 8 # IdentifierExp at 57.12 	 
1200#                      sw $s5, 4($sp) # IdentifierExp at 57.12   
1204#                      sw $t0, ($sp) # IdentifierExp at 57.12   
                      # EXIT NODE # IdentifierExp at 57.12		 
1208#                    lw $t0, 8($sp) # Call at 57.3 		
1212#                    beq $t0, $zero, nullPtrException # Call at 57.3  
1216#                    lw $t0, -12($t0) # Call at 57.3		 
1220#                    lw $t0, 24($t0) # Call at 57.3			
1224#                    jalr $t0 # Call at 57.3			
                    # EXIT NODE # Call at 57.3		 
                  # EXIT NODE # ExpStatement at 57.3		
                  # ENTER NODE # Assign at 58.3	
                    # ENTER NODE # Plus at 58.17	
                      # ENTER NODE # IdentifierExp at 58.3 
1228#                      lw $t0, 8($sp) # IdentifierExp at 58.3 		
1232#                      subu $sp, $sp, 8 # IdentifierExp at 58.3 	 
1236#                      sw $s5, 4($sp) # IdentifierExp at 58.3  
1240#                      sw $t0, ($sp) # IdentifierExp at 58.3	 	
                      # EXIT NODE # IdentifierExp at 58.3  
                      # ENTER NODE # IntegerLiteral at 58.17  
1244#                      subu $sp, $sp, 8 # IntegerLiteral at 58.17 
1248#                      sw $s5, 4($sp) # IntegerLiteral at 58.17	 
1252#                      li $t0, 1 # IntegerLiteral at 58.17		
1256#                      sw $t0, ($sp) # IntegerLiteral at 58.17   
                      # EXIT NODE # IntegerLiteral at 58.17 	 
1260#                    lw $t0, ($sp) # Plus at 58.17		 
1264#                    lw $t1, 8($sp) # Plus at 58.17			
1268#                    addu $t0, $t0, $t1 # Plus at 58.17	  
1272#                    addu $sp, $sp, 8 # Plus at 58.17	  
1276#                    sw $t0, ($sp) # Plus at 58.17	 	
                    # EXIT NODE # Plus at 58.17 	
1280#                  lw $t0, ($sp) # Assign at 58.3		
1284#                  sw $t0, 16($sp) # Assign at 58.3  	
1288#                  addu $sp, $sp, 8 # Assign at 58.3  	
                  # EXIT NODE # Assign at 58.3		 
                  # ENTER NODE # If at 59.3		
                    # ENTER NODE # Not at 59.22		 
                      # ENTER NODE # LessThan at 59.22			
                        # ENTER NODE # IdentifierExp at 59.7			
1292#                        lw $t0, 8($sp) # IdentifierExp at 59.7	  
1296#                        subu $sp, $sp, 8 # IdentifierExp at 59.7 
1300#                        sw $s5, 4($sp) # IdentifierExp at 59.7	 
1304#                        sw $t0, ($sp) # IdentifierExp at 59.7  	
                        # EXIT NODE # IdentifierExp at 59.7		 
                        # ENTER NODE # IntegerLiteral at 59.25 		
1308#                        subu $sp, $sp, 8 # IntegerLiteral at 59.25 
1312#                        sw $s5, 4($sp) # IntegerLiteral at 59.25 	
1316#                        li $t0, 20 # IntegerLiteral at 59.25  
1320#                        sw $t0, ($sp) # IntegerLiteral at 59.25	 
                        # EXIT NODE # IntegerLiteral at 59.25			
1324#                      lw $t0, ($sp) # LessThan at 59.22	
1328#                      lw $t1, 8($sp) # LessThan at 59.22	 	
1332#                      slt $t0, $t1, $t0 # LessThan at 59.22 
1336#                      addu $sp, $sp, 12 # LessThan at 59.22 	
1340#                      sw $t0, ($sp) # LessThan at 59.22		
                      # EXIT NODE # LessThan at 59.22 
1344#                    lw $t0, ($sp) # Not at 59.22	
1348#                    xor $t0, $t0, 1 # Not at 59.22	  
1352#                    sw $t0, ($sp) # Not at 59.22			
                    # EXIT NODE # Not at 59.22 		
1356#                  lw $t0, ($sp) # If at 59.3	 
1360#                  addu $sp, $sp, 4 # If at 59.3   
1364#                  beq $t0, $zero, if_else_136 # If at 59.3		 
                    # ENTER NODE # Block at 59.29			
                      # ENTER NODE # ExpStatement at 61.7 	
                        # ENTER NODE # Call at 61.7	 
                          # ENTER NODE # This at 61.7	 
1368#                          subu $sp, $sp, 4 # This at 61.7	
1372#                          sw $s2, ($sp) # This at 61.7		 
                          # EXIT NODE # This at 61.7 		
                          # ENTER NODE # StringLiteral at 61.16  	
1376#                          subu $sp, $sp, 4 # StringLiteral at 61.16 	
1380#                          la $t0, strLit_123 # StringLiteral at 61.16  	
1384#                          sw $t0, ($sp) # StringLiteral at 61.16 		
                          # EXIT NODE # StringLiteral at 61.16	 
1388#                        lw $t0, 4($sp) # Call at 61.7	 	
1392#                        beq $t0, $zero, nullPtrException # Call at 61.7 	 
1396#                        lw $t0, -12($t0) # Call at 61.7			
1400#                        lw $t0, 16($t0) # Call at 61.7  
1404#                        jalr $t0 # Call at 61.7		 
                        # EXIT NODE # Call at 61.7 		
                      # EXIT NODE # ExpStatement at 61.7		
                      # ENTER NODE # Assign at 62.22	 
                        # ENTER NODE # IntegerLiteral at 62.24 
1408#                        subu $sp, $sp, 8 # IntegerLiteral at 62.24  	
1412#                        sw $s5, 4($sp) # IntegerLiteral at 62.24			
1416#                        li $t0, 0 # IntegerLiteral at 62.24	  
1420#                        sw $t0, ($sp) # IntegerLiteral at 62.24			
                        # EXIT NODE # IntegerLiteral at 62.24   
1424#                      lw $t0, ($sp) # Assign at 62.22 	 
1428#                      sw $t0, 16($sp) # Assign at 62.22	 
1432#                      addu $sp, $sp, 8 # Assign at 62.22	  
                      # EXIT NODE # Assign at 62.22		 
                    # EXIT NODE # Block at 59.29		
1436#                  j if_done_136 # If at 59.3 	 
1440:                  if_else_136: # If at 59.3		 
                    # ENTER NODE # Block at 64.8   
                      # ENTER NODE # ExpStatement at 66.7	 	
                        # ENTER NODE # Call at 66.7 	 
                          # ENTER NODE # This at 66.7  	
1440#                          subu $sp, $sp, 4 # This at 66.7   
1444#                          sw $s2, ($sp) # This at 66.7	  
                          # EXIT NODE # This at 66.7	 
                          # ENTER NODE # StringLiteral at 66.16	 	
1448#                          subu $sp, $sp, 4 # StringLiteral at 66.16			
1452#                          la $t0, strLit_131 # StringLiteral at 66.16			
1456#                          sw $t0, ($sp) # StringLiteral at 66.16  	
                          # EXIT NODE # StringLiteral at 66.16 		
1460#                        lw $t0, 4($sp) # Call at 66.7  	
1464#                        beq $t0, $zero, nullPtrException # Call at 66.7 		
1468#                        lw $t0, -12($t0) # Call at 66.7	
1472#                        lw $t0, 16($t0) # Call at 66.7	 
1476#                        jalr $t0 # Call at 66.7 
                        # EXIT NODE # Call at 66.7			
                      # EXIT NODE # ExpStatement at 66.7 		
                    # EXIT NODE # Block at 64.8	  
1480:                  if_done_136: # If at 59.3		 
                  # EXIT NODE # If at 59.3	
                # EXIT NODE # Block at 55.21		 
1480#              j if_done_139 # If at 55.6			
1484:              if_else_139: # If at 55.6  	
                # ENTER NODE # Block at 69.2	
                # EXIT NODE # Block at 69.2	  
1484:              if_done_139: # If at 55.6   
              # EXIT NODE # If at 55.6 		
            # EXIT NODE # Block at 54.30	
            # ENTER NODE # Assign at 54.25	  
              # ENTER NODE # Plus at 54.26  	
                # ENTER NODE # IdentifierExp at 54.25   
1484#                lw $t0, 0($sp) # IdentifierExp at 54.25			
1488#                subu $sp, $sp, 8 # IdentifierExp at 54.25 	
1492#                sw $s5, 4($sp) # IdentifierExp at 54.25 	
1496#                sw $t0, ($sp) # IdentifierExp at 54.25	 
                # EXIT NODE # IdentifierExp at 54.25 	 
                # ENTER NODE # IntegerLiteral at 54.26 		
1500#                subu $sp, $sp, 8 # IntegerLiteral at 54.26  
1504#                sw $s5, 4($sp) # IntegerLiteral at 54.26	
1508#                li $t0, 1 # IntegerLiteral at 54.26 		
1512#                sw $t0, ($sp) # IntegerLiteral at 54.26	 	
                # EXIT NODE # IntegerLiteral at 54.26  	
1516#              lw $t0, ($sp) # Plus at 54.26 		
1520#              lw $t1, 8($sp) # Plus at 54.26	 	
1524#              addu $t0, $t0, $t1 # Plus at 54.26  
1528#              addu $sp, $sp, 8 # Plus at 54.26 	 
1532#              sw $t0, ($sp) # Plus at 54.26   
              # EXIT NODE # Plus at 54.26 
1536#            lw $t0, ($sp) # Assign at 54.25	 
1540#            sw $t0, 8($sp) # Assign at 54.25	 	
1544#            addu $sp, $sp, 8 # Assign at 54.25	 
            # EXIT NODE # Assign at 54.25 
          # EXIT NODE # Block at 54.2		 
1548:        while_enter_142: # While at 54.2	  
          # ENTER NODE # LessThan at 54.20 
            # ENTER NODE # IdentifierExp at 54.18   
1548#            lw $t0, 0($sp) # IdentifierExp at 54.18	 	
1552#            subu $sp, $sp, 8 # IdentifierExp at 54.18		
1556#            sw $s5, 4($sp) # IdentifierExp at 54.18	 
1560#            sw $t0, ($sp) # IdentifierExp at 54.18 
            # EXIT NODE # IdentifierExp at 54.18 
            # ENTER NODE # IdentifierExp at 54.22 
1564#            lw $t0, 28($sp) # IdentifierExp at 54.22	  
1568#            subu $sp, $sp, 8 # IdentifierExp at 54.22			
1572#            sw $s5, 4($sp) # IdentifierExp at 54.22 	
1576#            sw $t0, ($sp) # IdentifierExp at 54.22 	 
            # EXIT NODE # IdentifierExp at 54.22 
1580#          lw $t0, ($sp) # LessThan at 54.20	
1584#          lw $t1, 8($sp) # LessThan at 54.20			
1588#          slt $t0, $t1, $t0 # LessThan at 54.20	
1592#          addu $sp, $sp, 12 # LessThan at 54.20	
1596#          sw $t0, ($sp) # LessThan at 54.20   
          # EXIT NODE # LessThan at 54.20		 
1600#        lw $t0, ($sp) # While at 54.2 	 
1604#        addu $sp, $sp, 4 # While at 54.2		
1608#        bne $t0, $zero, while_top_142 # While at 54.2			
1612:        while_exit_142: # While at 54.2  	
        # EXIT NODE # While at 54.2 	
1612#      addu $sp, 8 # Block at 54.2 	 
      # EXIT NODE # Block at 54.2			
      # ENTER NODE # ExpStatement at 72.2	  
        # ENTER NODE # Call at 72.2		 
          # ENTER NODE # This at 72.2 
1616#          subu $sp, $sp, 4 # This at 72.2		 
1620#          sw $s2, ($sp) # This at 72.2	 	
          # EXIT NODE # This at 72.2	 
          # ENTER NODE # StringLiteral at 72.11  
1624#          subu $sp, $sp, 4 # StringLiteral at 72.11			
1628#          la $t0, strLit_144 # StringLiteral at 72.11 	
1632#          sw $t0, ($sp) # StringLiteral at 72.11  
          # EXIT NODE # StringLiteral at 72.11		
1636#        lw $t0, 4($sp) # Call at 72.2  	
1640#        beq $t0, $zero, nullPtrException # Call at 72.2	
1644#        lw $t0, -12($t0) # Call at 72.2 	 
1648#        lw $t0, 16($t0) # Call at 72.2		 
1652#        jalr $t0 # Call at 72.2		 
        # EXIT NODE # Call at 72.2  	
      # EXIT NODE # ExpStatement at 72.2  	
1656#    lw $ra, 32($sp) # MethodDeclVoid at 15.17			
1660#    lw $s2, 28($sp) # MethodDeclVoid at 15.17  
1664#    addu $sp, $sp, 40 # MethodDeclVoid at 15.17	  
1668#    jr $ra # MethodDeclVoid at 15.17		
    # EXIT NODE # MethodDeclVoid at 15.17	  
  # EXIT NODE # Program at 5.1 
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1672:readLine:
	
1672#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1676#	sw $ra, 4($sp) # save $ra
1680#	move $t1,$sp # save "original" sp

1684:  doRead:

	# read the character
1684#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1688#	subu $t2,$v0,13
1692#	bne $t2,$zero,notReturnRL
1696#	jal readLogicalChar
1700#	subu $t2,$v0,10 # check for newline
1704#	beq $t2,$zero,foundNewLine
1708#	sw $v0,lastCharRead # push back character into queue
1712#	j foundNewLine # go process the line

1716:  notReturnRL:

	# at this point, $v0 has our character

1716#	subu $t0,$v0,10
1720#	beq $t0,$zero,foundNewLine
1724#	blt $v0,$zero,foundEof
1725##...slt $at,$v0,$zero
1729##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1732#	subu $sp,$sp,4
1736#	sw $v0,($sp)

	# loop back up to get next character
1740#	j doRead

1744:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1744#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1748#	sw $zero,8($sp) # return-value: null
1752#	j rlReturn # return

1756:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1756#	subu $t0,$t1,$sp # number of chars we read (times 4)
1760#	srl $s6,$t0,2 # number of words on stack with chars
1764#	subu $sp,$sp,4 # push char-count ...
1768#	sw $s6,($sp) # ... onto stack
1772#	addu $t2,$t0,5 # GC tag, incl. for count-word
1776#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1780#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1784#	srl $s6,$s6,2 # data words in object
1788#	move $s7,$zero # # object words in object
1792#	jal newObject # allocate space
	
	# store header words
1796#	la $t0,CLASS_String
1800#	sw $t0,-12($s7) # store class tag (String) into object
1804#	lw $t2,4($sp) # char-count
1808#	sll $t1,$t2,2 # 4 times number of chars
1812#	subu $t2,$zero,$t2 # negative of char-count
1816#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1820#	lw $t0,-8($s7) # data words in object
1824#	sll $t0,$t0,2 # data bytes in object
1828#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1832#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1836#	addu $sp,$sp,8 # pop redundant object-pointer and count
1840#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1844#	beq $sp,$t1,doneCharCopy
1848:  charCopyLoop:
1848#	lw $t2,($sp)
1852#	sb $t2,-9($t0)
1856#	addu $sp,$sp,4
1860#	subu $t0,$t0,1
1864#	bne $sp,$t1,charCopyLoop
1868:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1868#	sw $s7,8($sp)
	
1872:  rlReturn:
	# restore return address and return
1872#	lw $ra,4($sp) # restore return address, ...
1876#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1880#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1884:readInt:

	# save $ra by pushing onto stack
1884#	subu $sp,$sp,4
1888#	sw $ra,($sp)

1892:  riSkipWhiteLoop:
	# read a character
1892#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1896#	subu $t0,$v0,32
1900#	bgt $t0,$zero,nonWhite
1901##...slt $at,$zero,$t0
1905##...bne $at,$zero,$+44
1908#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1912#	subu $t0,$v0,10
1916#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1920#	subu $t0,$v0,9
1924#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1928#	subu $t0,$v0,13
1932#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1936#	subu $t0,$v0,12
1940#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1944#	j badIntegerFormat # illegal integer char: abort program

1948:  nonWhite:
1948#	subu $t0,$v0,'-'
1952#	li $t4,1 # final multiplier
1956#	bne $t0,$zero,helpReadInt # go read
1960#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1964#	jal readLogicalChar

1968:  helpReadInt:
1968#	li $t2,10
1972#	subu $t1,$v0,'0' # convert digit to 0-9 value
1976#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1977##...sltu $at,$t1,$t2
1981##...beq $at,$zero,$+2080
1984#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1988:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1988#	jal readLogicalChar # read next character
1992#	subu $t1,$v0,'0' # convert digit to 0-9 value
1996#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1997##...sltu $at,$t1,$t2
2001##...beq $at,$zero,$+20

2004#	mul $t3,$t3,$t2 # multiply old value by 10
2005##...mult $t3,$t2
2009##...mflo $t3
2012#	addu $t3,$t3,$t1 # add in value of new digit
2016#	j digitLoop

2020:  doneDigitLoop:

	# "push back" unused character into queue
2020#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
2024#	lw $ra,($sp)
2028#	mult $t3,$t4 # multiply to account for poss. minus sign
2032#	mflo $t3
2036#	sw $t3,($sp) # result
2040#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
2044#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
2048:readChar:

	# save $ra by pushing onto stack
2048#	subu $sp,$sp,4
2052#	sw $ra,($sp)

  	# read the character
2056#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
2060#	lw $ra,($sp)
2064#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2068#	sw $v0,($sp)

	# return
2072#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
2076:printStr:
	# check for null, printing "(null)", if so
2076#	lw $t0,($sp)
2080#	bne $t0,$zero,psNotNull

	# print "(null)"
2084#	la $a0,nullStr
2088#	li $v0,4
2092#	syscall
2096#	j donePrintStr
	
2100:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2100#	subu $t0,$t0,8
2104#	lw $t1,($t0) # word just beyond end of string
2108#	sll $t1,$t1,2
2112#	subu $t1,$t0,$t1 # first word in string
2116#	lw $t0,4($t0) # negative of string-length
2120#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
2124#	beq $t0,$t1,donePrintStr
2128:  psLoop:
2128#	lb $a0,($t1) # next byte
2132#	li $v0,11 # code for printing char
2136#        syscall # print the char
2140#	addu $t1,$t1,1 # go to next char
2144#	blt $t1,$t0,psLoop
2145##...slt $at,$t1,$t0
2149##...bne $at,$zero,$-20

2152:  donePrintStr:
	# pop stack and return
2152#	addu $sp,$sp,8
2156#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
2160:printInt:
	# pop value off stack, along with 'this'
2160#	lw $a0,($sp)
2164#	addu $sp,$sp,12

	# print it
2168#	li $v0,1 # code for print-int
2172#	syscall

	# return
2176#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
2180:printBool:
	# pop value off stack, along with 'this'
2180#	lw $t0,($sp)
2184#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
2188#	la $a0,falseString
2192#	beq $t0,$zero,skipPB
2196#	la $a0,trueString
2200:  skipPB:
2200#	li $v0,4 # code for print-string
2204#	syscall

	# return
2208#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
2212:substring:

	# save $ra by pushing onto stack
2212#	subu $sp,$sp,4
2216#	sw $ra,($sp)

	# get string value off stack, test for null
2220#	lw $t0,20($sp)
2224#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
2228#	lw $t0,-4($t0) # negative of string length
2232#	subu $t0,$zero,$t0 # string length
2236#	lw $t1,4($sp) # k
2240#	lw $t2,12($sp) # n
2244#	bgt $zero,$t2,strIndexOutOfBounds
2245##...slt $at,$t2,$zero
2249##...bne $at,$zero,$+1780
2252#	bgt $t2,$t1,strIndexOutOfBounds
2253##...slt $at,$t1,$t2
2257##...bne $at,$zero,$+1772
2260#	bgt $t1,$t0,strIndexOutOfBounds
2261##...slt $at,$t0,$t1
2265##...bne $at,$zero,$+1764

	# allocate memory
2268#	subu $s6,$t1,$t2 # # chars in target-string
2272#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2276#	srl $s6,$s6,2 # convert bytes-count to word-count
2280#	move $s7,$zero # (no object-bytes in string)
2284#	jal newObject

	# store "String" tag in object-type field
2288#	la $t0,CLASS_String
2292#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
2296#	lw $t1,8($sp) # k
2300#	lw $t2,16($sp) # n
2304#	subu $t0,$t2,$t1 # value to store
2308#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
2312#	lw $t3,24($sp) # source string pointer
2316#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2320#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2324#	lw $t4,-8($t3) # # data words in source string
2328#	sll $t4,$t4,2 # # data bytes in source string
2332#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2336#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2340#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2344#	lw $t2,-8($s7) # # data words in target string
2348#	sll $t2,$t2,2 # # data bytes in target string
2352#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2356:  subCopyLoopzz:
2356#	lb $t4,-8($t3)
2360#	sb $t4,-8($t2)
2364#	addu $t2,$t2,1
2368#	addu $t3,$t3,1
2372#	blt $t3,$t1,subCopyLoopzz
2373##...slt $at,$t3,$t1
2377##...bne $at,$zero,$-20
	
2380:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2380#	lw $ra,4($sp) # restore $ra
2384#	addu $sp,$sp,24 # pop stack
	
	# return
2388#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2392:length:

	# get string pointer
2392#	lw $t0,($sp)
	
	# grow stack
2396#	subu $sp,$sp,4

	# store GC tag
2400#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2404#	lw $t0,-4($t0) # -length
2408#	subu $t0,$zero,$t0
2412#	sw $t0,($sp) #store length

	# return
2416#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2420:concat:
 	# save $ra by pushing onto stack
2420#	subu $sp,$sp,4
2424#	sw $ra($sp)

	# get string pointers and check parameter for null
2428#	lw $t0,4($sp)
2432#	beq $t0,$zero,nullPtrException
2436#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2440#	lw $t0,-4($t0) # negative size of second object
2444#	lw $t1,-4($t1) # negative size of first object
2448#	addu $s6,$t0,$t1 # sum of negative sizes
2452#	sra $s6,$s6,2 # negative word-size of char part
2456#	subu $s6,$zero,$s6 # word size of char part
2460#	addu $s6,$s6,1 # data word size, including v-table word
2464#	move $s7,$zero
2468#	jal newObject

	# store "String" tag in object-type field
2472#	la $t0,CLASS_String
2476#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2480#	lw $ra,4($sp) # return address
2484#	lw $t0,8($sp) # second object
2488#	lw $t1,12($sp) # first object
2492#	addu $sp,$sp,12 # pop
2496#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2500#	lw $t2,-4($t0) # negative length of second object
2504#	lw $t3,-4($t1) # negative length of first object
2508#	addu $t4,$t2,$t3 # sum of negative lengths
2512#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2516#	lw $t4,-8($t1) # # data words in first string
2520#	sll $t4,$t4,2 # # data bytes in first string
2524#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2528#	lw $t4,-8($s7) # # data words in new string
2532#	sll $t4,$t4,2 # # data bytes in new string
2536#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2540#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2544#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2548:  concatLoop1zz:
2548#	lb $t4,-8($t1)
2552#	sb $t4,-8($s7)
2556#	addu $s7,$s7,1
2560#	addu $t1,$t1,1
2564#	blt $t1,$t3,concatLoop1zz
2565##...slt $at,$t1,$t3
2569##...bne $at,$zero,$-20
2572:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2572#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2576#	lw $t4,-8($t0) # # data words in second string
2580#	sll $t4,$t4,2 # # data bytes in second string
2584#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2588#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2592:  concatLoop2zz:
2592#	lb $t4,-8($t1)
2596#	sb $t4,-8($s7)
2600#	addu $s7,$s7,1
2604#	addu $t1,$t1,1
2608#	blt $t1,$t3,concatLoop2zz
2609##...slt $at,$t1,$t3
2613##...bne $at,$zero,$-20
2616:  doneConcatLoop2zz:
 
2616:  concatRtnzz:
	# return
2616#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2620:charAt:
	# get string
2620#	lw $t0,8($sp)

	# check that index is in bounds
2624#	lw $t1,-4($t0) # negative of # data words in string
2628#	subu $t3,$zero,$t1 # # chars in string
2632#	lw $t2,($sp) # index
2636#	bgeu $t2,$t3,strIndexOutOfBounds
2637##...sltu $at,$t2,$t3
2641##...beq $at,$zero,$+1388

	# access element
2644#	lw $t1,-8($t0) # # data words in object
2648#	sll $t1,$t1,2 # - byte-offset from end of chars
2652#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2656#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2660#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2664#	addu $sp,$sp,4
2668#	sw $t0,($sp)
2672#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2676#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2680:intToString:

	# save return address on stack; allocate space for dummy GC tag
2680#	subu $sp,$sp,8
2684#	sw $ra,4($sp)

	# save current sp
2688#	move $t0,$sp

	# move constant 10 into $t3
2692#	li $t3,10

	# get argument, negate if negative
2696#	lw $t1,8($sp)
2700#	bge $t1,$zero,itsNonNegLoop
2701##...slt $at,$t1,$zero
2705##...beq $at,$zero,$+8
2708#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2712:  itsNonNegLoop:
2712#	divu $t1,$t3
2716#	mflo $t1 # quotient
2720#	mfhi $t4 # remainder
2724#	addu $t4,$t4,'0' # turn remainder into digit
2728#	subu $sp,$sp,4
2732#	sw $t4,($sp) # push digit onto stack
2736#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2740#	lw $t4,8($t0)
2744#	bge $t4,$zero,itsSkipNeg
2745##...slt $at,$t4,$zero
2749##...beq $at,$zero,$+16
2752#	li $t4,'-'
2756#	subu $sp,$sp,4
2760#	sw $t4,($sp)
2764:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2764#	subu $s6,$t0,$sp
2768#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2772#	sw $t3,($t0)
2776#	srl $s6,$s6,2
2780#	subu $sp,$sp,4
2784#	sw $s6,($sp)
	
	# allocate memory
2788#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2792#	srl $s6,$s6,2
2796#	move $s7,$zero # no "object" words in object
2800#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2804#	lw $t0,4($sp)
2808#	addu $sp,$sp,8

	# store "String" tag into class field
2812#	subu $s7,$s7,8 # address of header-1 word
2816#	la $t1,CLASS_String
2820#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2824#	subu $t0,$zero,$t0
2828#	sw $t0,4($s7)

2832#	lw $t1,($s7) # number of data words in string
2836#	sll $t1,$t1,2 # number data bytes in string
2840#	subu $t1,$s7,$t1 # first location to store chars in string
2844#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2848:  itsLoop:
2848#	lw $t2,($sp)
2852#	addu $sp,$sp,4
2856#	sb $t2,($t1)
2860#	addu $t1,$t1,1
2864#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2868#	lw $ra,4($sp)
2872#	addu $sp,$sp,16
2876#	addu $t0,$t0,15
2880#	and $t0,$t0,0xfffffffc
2881##...lui $at,65535
2885##...ori $at,$at,0xfffc
2889##...and $t0,$t0,$at
2892#	sw $t0,($sp)
2896#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2900:intToChar:
	# save return address
2900#	subu $sp,$sp,4
2904#	sw $ra,($sp)

	# allocate object
2908#	li $s6,2
2912#	move $s7,$zero
2916#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2920#	lw $ra,4($sp)
2924#	lw $t1,8($sp)
2928#	addu $sp,$sp,16

	# store "String" tag into class field
2932#	la $t0,CLASS_String
2936#	sw $t0,-12($s7)

	# store data in string
2940#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2944#	li $t0,-1
2948#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2952#	sw $s7,($sp)

	# return
2956#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2960:compareTo:
	# get string pointers and check parameter for null
2960#	lw $t0,($sp) # second string
2964#	beq $t0,$zero,nullPtrException
2968#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2972#	lw $t2,-4($t0) # negative length of second string
2976#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2980#	slt $t4,$t3,$t2
2984#	slt $t5,$t2,$t3
2988#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2992#	lw $t2,-8($t0) # # data words in second string
2996#	lw $t3,-8($t1) # # data words in first string
3000#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3004#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3008#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
3012#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
3016#	beq $zero,$t5,skipStrCmpLenzz
3020#	move $t2,$t3
3024:  skipStrCmpLenzz:
3024#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
3028:  cmpLoopzz:
3028#	lw $t3,-8($t1) # word from str2
3032#	lw $t4,-8($t0) # word from str1
3036#	bne $t3,$t4,cmpNotEqualzz
3040#	addu $t1,$t1,4
3044#	addu $t0,$t0,4
3048#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
3052#	j cmpHitLimitzz

3056:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
3056#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3060#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
3064#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
3068:  cmpHitLimitzz:
3068#	sw $t5,($sp) # store value
3072#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
3076#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3080:readLogicalChar:

	# check if we already have a character
3080#	lw $v0,lastCharRead
3084#	li $t0,-2
3088#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
3092#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3096#	jr $ra # return
	
3100:  doReadCh:
	# we need to actually read a character: read and return
3100#	li $v0,12 # use system call to read a character
3104#	syscall
3108#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3112:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
3112#	blt $s7,$zero arraySizeOutOfBounds
3113##...slt $at,$s7,$zero
3117##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
3120#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

3124:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
3124#	move $t3,$s6
3128#	bge $t3,$zero,newSkip
3129##...slt $at,$t3,$zero
3133##...beq $at,$zero,$+8
3136#	move $t3,$zero

3140:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
3140#	addu $t0,$t3,$s7
3144#	sll $t0,$t0,2
3148#	addu $t0,$t0,8 # amount of memory needed
3152#	addu $t1,$t0,$s3
3156#	bgtu $t1,$s4,doGC
3157##...sltu $at,$s4,$t1
3161##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
3164#	move $t2,$s3
3168:  zeroObjLoop:
3168#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

3172#	addu $s3,4
3176#	bltu $s3,$t1,zeroObjLoop
3177##...sltu $at,$s3,$t1
3181##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
3184#	sll $t0,$s7,2    # number of post-header bytes
3188#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
3192#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
3196#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
3200#	move $s7,$t0
3204#	subu $sp,$sp,4
3208#	sw $t0,($sp)

3212#	jr $ra
	
3216:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
3216#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
3220#	subu $sp,$sp,4
3224#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
3228#	lw $t0,cur_seg
3232#	move $t7,$s4
3236#	la $t6,seg1_start
3237##...lui $t6,16
3241##...addiu $t6,$t6,4632
3244#	la $s3,seg0_start
3248#	la $s4,seg0_end
3249##...lui $s4,16
3253##...addiu $s4,$s4,4632
3256#	sw $zero,cur_seg
3260#	bne $t0,$zero,skipGc1
3264#	la $t6,seg0_start
3268#	la $s3,seg1_start
3269##...lui $s3,16
3273##...addiu $s3,$s3,4632
3276#	la $s4,seg1_end
3277##...lui $s4,32
3281##...addiu $s4,$s4,4632
3284#	sw $s5,cur_seg
3288:  skipGc1:
3288#	li $t5,-2
3292#	lw $t0,stack_bottom
3296#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

3300:  gcStackCopyLoop:
3300#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
3304#	sll $t2,$t1,31 # zero iff low bit was zero
3308#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
3312#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
3316#	bleu $t1,$t6,gcTestIterDone1
3317##...sltu $at,$t6,$t1
3321##...beq $at,$zero,$+148
3324#	bgtu $t1,$t7,gcTestIterDone1
3325##...sltu $at,$t7,$t1
3329##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3332#	lw $t2,-8($t1) # possible forwarding tag
3336#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3340#	lw $t2,-4($t1) # forwarding pointer: object's new address
3344#	sw $t2,4($t0) # update stack value
3348#	j gcTestIterDone1 # do next iteration

3352:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3352#	bge $t2,$zero,gcSkip2
3353##...slt $at,$t2,$zero
3357##...beq $at,$zero,$+8
3360#	move $t2,$zero # set to zero if -1 (number of data words)

3364:  gcSkip2:
3364#	sll $t2,$t2,2
3368#	addu $t2,$t2,8
3372#	subu $t4,$t1,$t2 # address of first word of source
3376#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3380#	bge $t3,$zero,gcH2Neg1
3381##...slt $at,$t3,$zero
3385##...beq $at,$zero,$+8
3388#	move $t3,$zero
3392:  gcH2Neg1:
3392#	sll $t3,$t3,2
3396#	addu $t3,$t3,$t1 # address one word past last word of source

3400#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3404#	lw $s0,($t4)
3408#	lw $s1,-8($t1)
3412#	sw $s1,($t4)
3416#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3420:  gCinnerCopy1:
3420#	lw $s0,($t4)
3424#	sw $s0,($s3)
3428#	addu $t4,$t4,4
3432#	addu $s3,$s3,4
3436#	bltu $t4,$t3,gCinnerCopy1
3437##...sltu $at,$t4,$t3
3441##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3444#	sw $t5,-8($t1) # -2 in first header-slot
3448#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3452#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3456#	j gcTestIterDone1

3460:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3460#	subu $t0,$t0,$t1
3464#	subu $t0,$t0,3

3468:  gcTestIterDone1:
3468#	bgeu $t0,$sp,gcStackCopyLoop
3469##...sltu $at,$t0,$sp
3473##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3476#	lw $t1,cur_seg
3480#	la $t0,seg0_start
3484#	beq $t1,$zero,gcSkip4
3488#	la $t0,seg1_start
3489##...lui $t0,16
3493##...addiu $t0,$t0,4632

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3496:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3496#	bgeu $t0,$s3,gcFinishUp
3497##...sltu $at,$t0,$s3
3501##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3504:  gcHeapCopyLoop:
	# check if we have a data array
3504#	lw $t1,($t0) # first header word for current object
3508#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3509##...slt $at,$t1,$zero
3513##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3516#	lw $t1,4($t0) # data words
3520#	addu $t1,$t1,2 # add in # header words
3524#	sll $t1,$t1,2 # convert to byte-count
3528#	addu $t0,$t0,$t1 # skip over object
3532#	j gcTestIterDone2 # go do next object, if any

3536:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3536#	sll $t2,$t1,2 # # data bytes
3540#	addu $t2,$t2,8 # to skip header word
3544#	addu $t2,$t0,$t2 # pointer to new object
3548#	lw $t3,-8($t2) # word to swap
3552#	sw $t1,-8($t2) # store header word
3556#	sw $t3,($t0) # restore first word of object

3560#	lw $t3,-4($t2) # # object words (negative treated as zero)
3564#	bge $t3,$zero,gcH2Neg2
3565##...slt $at,$t3,$zero
3569##...beq $at,$zero,$+8
3572#	move $t3,$zero
3576:  gcH2Neg2:
3576#	sll $t3,$t3,2 # # object bytes
3580#	move $t0,$t2 # address of first pointer in object
3584#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3588#	beq $t0,$s1,gcTestIterDone2
	
3592:  gcNextPointerInObject:
	# get pointer from object
3592#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3596#	bleu $t1,$t6,gcGoNextPointerSlot
3597##...sltu $at,$t6,$t1
3601##...beq $at,$zero,$+136
3604#	bgtu $t1,$t7,gcGoNextPointerSlot
3605##...sltu $at,$t7,$t1
3609##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3612#	lw $t8,-8($t1) # possible forwarding tag
3616#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3620#	lw $t8,-4($t1) # forwarding pointer: object's new address
3624#	sw $t8,($t0) # update pointer in object
3628#	j gcGoNextPointerSlot # do next iteration

3632:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3632#	bge $t8,$zero,gcSkip5
3633##...slt $at,$t8,$zero
3637##...beq $at,$zero,$+8
3640#	move $t8,$zero # set to zero if -1

3644:  gcSkip5:
3644#	sll $t8,$t8,2
3648#	addu $t8,$t8,8
3652#	subu $t4,$t1,$t8 # address of first word of source
3656#	lw $t3,-4($t1)
3660#	bge $t3,$zero,gcNoNeg
3661##...slt $at,$t3,$zero
3665##...beq $at,$zero,$+8
3668#	move $t3,$zero
3672:  gcNoNeg:
3672#	sll $t3,$t3,2
3676#	addu $t3,$t3,$t1 # address one word past last word of source

3680#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3684#	lw $s0,($t4)
3688#	lw $t9,-8($t1)
3692#	sw $t9,($t4)
3696#	sw $s0,-8($t1)

	# copy all source bytes to the target
3700:  gCinnerCopy2:
3700#	lw $s0,($t4)
3704#	sw $s0,($s3)
3708#	addu $t4,$t4,4
3712#	addu $s3,$s3,4
3716#	bltu $t4,$t3,gCinnerCopy2
3717##...sltu $at,$t4,$t3
3721##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3724#	sw $t5,-8($t1) # -2 in first header-slot
3728#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3732#	sw $t8,($t0)

3736:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3736#	addu $t0,$t0,4
3740#	bltu $t0,$s1,gcNextPointerInObject
3741##...sltu $at,$t0,$s1
3745##...bne $at,$zero,$-152

3748:  gcTestIterDone2:
3748#	bltu $t0,$s3,gcHeapCopyLoop
3749##...sltu $at,$t0,$s3
3753##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3756:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3756#	lw $s2,($sp)
3760#	addu $sp,$sp,4

	# mark us as having already GC'd
3764#	move $t5,$s5

	# go try and allocate again
3768#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3772:vm_init:

	# mark bottom of stack
3772#	sw $sp,stack_bottom
3776#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3780#	move $s2,$zero
3784#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3788#	li $s5,5
3792#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3796#	la $s3,seg0_start
3800#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3804#	la $s4,seg0_end
3805##...lui $s4,16
3809##...addiu $s4,$s4,4632
3812#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3816#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3820:divide:
	# get parameters; abort if divisor zero
3820#	lw $t0,($sp)
3824#	lw $t1,8($sp)
3828#	beq $t0,$zero,divByZeroError
	
	# perform division
3832#	div $t1,$t0
3836#	mflo $t0

	# store result, adjust stack and return
3840#	addu $sp,$sp,8 # adjust stack
3844#	sw $t0,($sp) # store result
3848#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3852:remainder:
	# get parameters; abort if divisor zero
3852#	lw $t0,($sp)
3856#	lw $t1,8($sp)
3860#	beq $t0,$zero,divByZeroError
	
	# perform division
3864#	div $t1,$t0
3868#	mfhi $t0

	# store result, adjust stack and return
3872#	addu $sp,$sp,8 # adjust stack
3876#	sw $t0,($sp) # store result
3880#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3884:checkCast:
	# get object, allow immediately if null
3884#	lw $t2,($sp)
3888#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3892#	lw $t3,-8($t2) # <= 0 if array
3896#	lw $t2,-12($t2) # vtable address (unless array)
3900#	bgt $t3,$zero,skipArrayCast
3901##...slt $at,$zero,$t3
3905##...bne $at,$zero,$+8
3908#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3912:  skipArrayCast:
3912#	bge $t2,$t1,castException
3913##...slt $at,$t2,$t1
3917##...beq $at,$zero,$+152
3920#	blt $t2,$t0,castException
3921##...slt $at,$t2,$t0
3925##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3928:  checkCastReturn:	
3928#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3932:instanceOf:
	# get object, go return false if null
3932#	lw $t2,($sp)
3936#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3940#	lw $t3,-8($t2) # <= 0 if array
3944#	lw $t2,-12($t2) # vtable address (unless array)
3948#	bgt $t3,$zero,skipArrayInstanceOf
3949##...slt $at,$zero,$t3
3953##...bne $at,$zero,$+8
3956#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3960:  skipArrayInstanceOf:
3960#	sge $t0,$t2,$t0
3961##...slt $t0,$t2,$t0
3965##...xori $t0,$t0,0x1
3968#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3972#	and $t2,$t0,$t1
3976:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3976#	sw $t2,($sp)
3980#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3984:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3984#	li $v0,4 # syscall-code for print-string
3988#	syscall
3992:exit:
	# print termination message
3992#	li $v0,4
3996#	la $a0,exitString
4000#	syscall

	# terminate execution
4004#	li $v0,10 #syscall-code for "exit"
4008#	syscall

4012:outOfHeapMemory:
4012#	la $a0,heapMemoryMsg
4016#	j exitError
4020:divByZeroError:
4020#	la $a0,divByZeroMsg
4024#	j exitError
4028:strIndexOutOfBounds:
4028#	la $a0,strIndexOutOfBoundsMsg
4032#	j exitError
4036:arrayIndexOutOfBounds:
4036#	la $a0,arrayIndexOutOfBoundsMsg
4040#	j exitError
4044:arraySizeOutOfBounds:
4044#	la $a0,arraySizeOutOfBoundsMsg
4048#	j exitError
4052:nullPtrException:
4052#	la $a0,nullPtrExceptionMsg
4056#	j exitError
4060:badIntegerFormat:
4060#	la $a0,badIntegerFormatMsg
4064#	j exitError
4068:castException:
4068#	la $a0,castExceptionMsg
4072#	j exitError

############## data section ################
	.data
	.align 2

4324:cur_seg:
	.word 0

4328:lastCharRead:
	.word -2 # -2 => no buffered character

4332:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4359:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4382:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4417:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4451:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4484:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4515:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4563:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4584:gcMsg: 
      .asciiz "\nGC!\n"

4590:nullStr:
	.asciiz "null"
4595:trueString:
	.asciiz "true"
4600:falseString:
	.asciiz "false"
4606:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4628:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4632:seg0_start:
	.space 0x100000
1053208:seg0_end:
1053208:seg1_start:
	.space 0x100000
2101784:seg1_end:



