.data # Program at 5.1		 
3132:CLASS_Object: # ClassDecl at 0.0 
.word 0 # ClassDecl at 0.0 	 
3136:CLASS_Lib: # ClassDecl at 0.0  	
.word CLASS_Object # ClassDecl at 0.0	  
.word readLine # ClassDecl at 0.0 	 
.word readInt # ClassDecl at 0.0  	
.word readChar # ClassDecl at 0.0	 	
.word printStr # ClassDecl at 0.0		 
.word printBool # ClassDecl at 0.0 		
.word printInt # ClassDecl at 0.0	  
.word intToString # ClassDecl at 0.0	 	
.word intToChar # ClassDecl at 0.0		
3172:CLASS_END_Lib: # ClassDecl at 0.0 		
3172:CLASS_String: # ClassDecl at 0.0  	
.word CLASS_Object # ClassDecl at 0.0   
.word concat # ClassDecl at 0.0   
.word substring # ClassDecl at 0.0	  
.word length # ClassDecl at 0.0	 	
.word charAt # ClassDecl at 0.0  	
.word compareTo # ClassDecl at 0.0 	
.word readLine # ClassDecl at 0.0	  
.word readInt # ClassDecl at 0.0	 
.word readChar # ClassDecl at 0.0 	 
.word printStr # ClassDecl at 0.0		 
.word printBool # ClassDecl at 0.0 	 
.word printInt # ClassDecl at 0.0			
.word intToString # ClassDecl at 0.0   
.word intToChar # ClassDecl at 0.0	  
3228:CLASS_END_String: # ClassDecl at 0.0 	 
3228:CLASS_RunMain: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0	  
.word concat # ClassDecl at 0.0 	
.word substring # ClassDecl at 0.0   
.word length # ClassDecl at 0.0		 
.word charAt # ClassDecl at 0.0			
.word compareTo # ClassDecl at 0.0 
.word readLine # ClassDecl at 0.0 	 
.word readInt # ClassDecl at 0.0		
.word readChar # ClassDecl at 0.0		
.word printStr # ClassDecl at 0.0		
.word printBool # ClassDecl at 0.0   
.word printInt # ClassDecl at 0.0		 
.word intToString # ClassDecl at 0.0		
.word intToChar # ClassDecl at 0.0	 	
3284:CLASS_END_RunMain: # ClassDecl at 0.0 	 
3284:CLASS_Main: # ClassDecl at 5.7		 
.word CLASS_Object # ClassDecl at 5.7	  
.word fcn_32_main # ClassDecl at 5.7 
.word fcn_59_fib # ClassDecl at 5.7	  
.word concat # ClassDecl at 5.7  
.word substring # ClassDecl at 5.7   
.word length # ClassDecl at 5.7  	
.word charAt # ClassDecl at 5.7			
.word compareTo # ClassDecl at 5.7		
.word readLine # ClassDecl at 5.7 
.word readInt # ClassDecl at 5.7	 
.word readChar # ClassDecl at 5.7		
.word printStr # ClassDecl at 5.7   
.word printBool # ClassDecl at 5.7  	
.word printInt # ClassDecl at 5.7		
.word intToString # ClassDecl at 5.7	  
.word intToChar # ClassDecl at 5.7 	 
3348:CLASS_END_Main: # ClassDecl at 5.7   
3348:CLASS_END_Object: # ClassDecl at 0.0 		
 .data # Program at 5.1			
  .byte 84 # StringLiteral at 20.15   
  .byte 104 # StringLiteral at 20.15	
  .byte 101 # StringLiteral at 20.15   
  .byte 32 # StringLiteral at 20.15 	
  .byte 102 # StringLiteral at 20.15			
  .byte 105 # StringLiteral at 20.15 
  .byte 98 # StringLiteral at 20.15 	
  .byte 111 # StringLiteral at 20.15		 
  .byte 110 # StringLiteral at 20.15  	
  .byte 97 # StringLiteral at 20.15		
  .byte 99 # StringLiteral at 20.15 	
  .byte 99 # StringLiteral at 20.15 		
  .byte 105 # StringLiteral at 20.15 	 
  .byte 32 # StringLiteral at 20.15		 
  .byte 110 # StringLiteral at 20.15	 
  .byte 117 # StringLiteral at 20.15 	
  .byte 109 # StringLiteral at 20.15		 
  .byte 98 # StringLiteral at 20.15	
  .byte 101 # StringLiteral at 20.15 
  .byte 114 # StringLiteral at 20.15  
  .byte 32 # StringLiteral at 20.15   
  .byte 111 # StringLiteral at 20.15		 
  .byte 102 # StringLiteral at 20.15  
  .byte 32 # StringLiteral at 20.15 	 
  .word CLASS_String # StringLiteral at 20.15 	 
  .word 7 # StringLiteral at 20.15	 
  .word -24 # StringLiteral at 20.15	 
3384:strLit_13: # StringLiteral at 20.15	
  .byte 32 # StringLiteral at 22.15  
  .byte 105 # StringLiteral at 22.15  
  .byte 115 # StringLiteral at 22.15	 
  .byte 32 # StringLiteral at 22.15 
  .word CLASS_String # StringLiteral at 22.15 		
  .word 2 # StringLiteral at 22.15	 
  .word -4 # StringLiteral at 22.15   
3400:strLit_21: # StringLiteral at 22.15 		
  .byte 46 # StringLiteral at 24.15		
  .byte 10 # StringLiteral at 24.15			
  .byte 0 # StringLiteral at 24.15 
  .byte 0 # StringLiteral at 24.15 	 
  .word CLASS_String # StringLiteral at 24.15  
  .word 2 # StringLiteral at 24.15	 
  .word -2 # StringLiteral at 24.15 
3416:strLit_29: # StringLiteral at 24.15  
.text # Program at 5.1   
.global main # Program at 5.1			
0:main: # Program at 5.1   
0#jal vm_init # Program at 5.1 	
4#li $s6, 1 # NewObject at 0.0 	 
8#li $s7, 0 # NewObject at 0.0		 
12#jal newObject # NewObject at 0.0		
16#la $t0, CLASS_Main # NewObject at 0.0			
20#sw $t0, -12($s7) # NewObject at 0.0  	
24#lw $t0, 0($sp) # Call at 0.0	 
28#beq $t0, $zero, nullPtrException # Call at 0.0		
32#lw $t0, -12($t0) # Call at 0.0 
36#lw $t0, 4($t0) # Call at 0.0  
40#jalr $t0 # Call at 0.0		 
44#li $v0, 10 # Program at 5.1	 
48#syscall # Program at 5.1	 	
.globl fcn_32_main # MethodDeclVoid at 8.17 		
52:fcn_32_main: # MethodDeclVoid at 8.17 	
52#subu $sp, $sp, 8 # MethodDeclVoid at 8.17	 	
56#sw $ra, 4($sp) # MethodDeclVoid at 8.17 		
60#sw $s2, ($sp) # MethodDeclVoid at 8.17	 
64#lw $s2, 8($sp) # MethodDeclVoid at 8.17   
68#li $s6, 1 # NewObject at 11.12 		
72#li $s7, 0 # NewObject at 11.12 		
76#jal newObject # NewObject at 11.12		
80#la $t0, CLASS_Lib # NewObject at 11.12  
84#sw $t0, -12($s7) # NewObject at 11.12 	
88#subu $sp, $sp, 8 # IntegerLiteral at 14.12	 	
92#sw $s5, 4($sp) # IntegerLiteral at 14.12 		
96#li $t0, 14 # IntegerLiteral at 14.12  
100#sw $t0, ($sp) # IntegerLiteral at 14.12	 
104#subu $sp, $sp, 4 # This at 17.15 
108#sw $s2, ($sp) # This at 17.15	
112#lw $t0, 4($sp) # IdentifierExp at 17.19		
116#subu $sp, $sp, 8 # IdentifierExp at 17.19   
120#sw $s5, 4($sp) # IdentifierExp at 17.19		 
124#sw $t0, ($sp) # IdentifierExp at 17.19 
128#lw $t0, 8($sp) # Call at 17.15		 
132#beq $t0, $zero, nullPtrException # Call at 17.15			
136#lw $t0, -12($t0) # Call at 17.15			
140#lw $t0, 8($t0) # Call at 17.15			
144#jalr $t0 # Call at 17.15	 
148#lw $t0, 16($sp) # IdentifierExp at 20.2 		
152#subu $sp, $sp, 4 # IdentifierExp at 20.2	 
156#sw $t0, ($sp) # IdentifierExp at 20.2 	 
160#subu $sp, $sp, 4 # StringLiteral at 20.15	
164#la $t0, strLit_13 # StringLiteral at 20.15		
168#sw $t0, ($sp) # StringLiteral at 20.15	 	
172#lw $t0, 4($sp) # Call at 20.6 		
176#beq $t0, $zero, nullPtrException # Call at 20.6	  
180#lw $t0, -12($t0) # Call at 20.6	 	
184#lw $t0, 16($t0) # Call at 20.6  
188#jalr $t0 # Call at 20.6			
192#lw $t0, 16($sp) # IdentifierExp at 21.2		 
196#subu $sp, $sp, 4 # IdentifierExp at 21.2   
200#sw $t0, ($sp) # IdentifierExp at 21.2 
204#lw $t0, 12($sp) # IdentifierExp at 21.15		
208#subu $sp, $sp, 8 # IdentifierExp at 21.15			
212#sw $s5, 4($sp) # IdentifierExp at 21.15	  
216#sw $t0, ($sp) # IdentifierExp at 21.15   
220#lw $t0, 8($sp) # Call at 21.6	  
224#beq $t0, $zero, nullPtrException # Call at 21.6 	 
228#lw $t0, -12($t0) # Call at 21.6	 
232#lw $t0, 24($t0) # Call at 21.6	
236#jalr $t0 # Call at 21.6			
240#lw $t0, 16($sp) # IdentifierExp at 22.2   
244#subu $sp, $sp, 4 # IdentifierExp at 22.2	
248#sw $t0, ($sp) # IdentifierExp at 22.2			
252#subu $sp, $sp, 4 # StringLiteral at 22.15 
256#la $t0, strLit_21 # StringLiteral at 22.15	 	
260#sw $t0, ($sp) # StringLiteral at 22.15   
264#lw $t0, 4($sp) # Call at 22.6	 	
268#beq $t0, $zero, nullPtrException # Call at 22.6 	 
272#lw $t0, -12($t0) # Call at 22.6		 
276#lw $t0, 16($t0) # Call at 22.6 	
280#jalr $t0 # Call at 22.6	
284#lw $t0, 16($sp) # IdentifierExp at 23.2 	 
288#subu $sp, $sp, 4 # IdentifierExp at 23.2		
292#sw $t0, ($sp) # IdentifierExp at 23.2 
296#lw $t0, 4($sp) # IdentifierExp at 23.15 	 
300#subu $sp, $sp, 8 # IdentifierExp at 23.15 	 
304#sw $s5, 4($sp) # IdentifierExp at 23.15  	
308#sw $t0, ($sp) # IdentifierExp at 23.15		
312#lw $t0, 8($sp) # Call at 23.6		 
316#beq $t0, $zero, nullPtrException # Call at 23.6	
320#lw $t0, -12($t0) # Call at 23.6  	
324#lw $t0, 24($t0) # Call at 23.6  
328#jalr $t0 # Call at 23.6   
332#lw $t0, 16($sp) # IdentifierExp at 24.2 
336#subu $sp, $sp, 4 # IdentifierExp at 24.2 		
340#sw $t0, ($sp) # IdentifierExp at 24.2			
344#subu $sp, $sp, 4 # StringLiteral at 24.15 	 
348#la $t0, strLit_29 # StringLiteral at 24.15  	
352#sw $t0, ($sp) # StringLiteral at 24.15	
356#lw $t0, 4($sp) # Call at 24.6		
360#beq $t0, $zero, nullPtrException # Call at 24.6 		
364#lw $t0, -12($t0) # Call at 24.6  
368#lw $t0, 16($t0) # Call at 24.6	  
372#jalr $t0 # Call at 24.6  
376#lw $ra, 24($sp) # MethodDeclVoid at 8.17  	
380#lw $s2, 8($sp) # MethodDeclVoid at 8.17 	
384#addu $sp, $sp, 32 # MethodDeclVoid at 8.17	
388#jr $ra # MethodDeclVoid at 8.17	
.globl fcn_59_fib # MethodDeclNonVoid at 29.16 		
392:fcn_59_fib: # MethodDeclNonVoid at 29.16  
392#subu $sp, $sp, 8 # MethodDeclNonVoid at 29.16	 
396#sw $ra, 4($sp) # MethodDeclNonVoid at 29.16		 
400#sw $s2, ($sp) # MethodDeclNonVoid at 29.16 	 
404#lw $s2, 16($sp) # MethodDeclNonVoid at 29.16 
408#lw $t0, 8($sp) # IdentifierExp at 31.15	 	
412#subu $sp, $sp, 8 # IdentifierExp at 31.15 	
416#sw $s5, 4($sp) # IdentifierExp at 31.15	 
420#sw $t0, ($sp) # IdentifierExp at 31.15 
424#lw $t0, 16($sp) # IdentifierExp at 32.6 
428#subu $sp, $sp, 8 # IdentifierExp at 32.6	 	
432#sw $s5, 4($sp) # IdentifierExp at 32.6 
436#sw $t0, ($sp) # IdentifierExp at 32.6		 
440#subu $sp, $sp, 8 # IntegerLiteral at 32.10	
444#sw $s5, 4($sp) # IntegerLiteral at 32.10	
448#li $t0, 1 # IntegerLiteral at 32.10 	 
452#sw $t0, ($sp) # IntegerLiteral at 32.10	 
456#lw $t0, ($sp) # GreaterThan at 32.8	 
460#lw $t1, 8($sp) # GreaterThan at 32.8   
464#sgt $t0, $t1, $t0 # GreaterThan at 32.8 	
468#addu $sp, $sp, 12 # GreaterThan at 32.8		 
472#sw $t0, ($sp) # GreaterThan at 32.8	 	
476#lw $t0, ($sp) # If at 32.2 		
480#addu $sp, $sp, 4 # If at 32.2		
484#beq $t0, $zero, if_else_57 # If at 32.2		
488#subu $sp, $sp, 4 # This at 34.15 
492#sw $s2, ($sp) # This at 34.15	 	
496#lw $t0, 20($sp) # IdentifierExp at 34.19		 
500#subu $sp, $sp, 8 # IdentifierExp at 34.19  	
504#sw $s5, 4($sp) # IdentifierExp at 34.19	
508#sw $t0, ($sp) # IdentifierExp at 34.19			
512#subu $sp, $sp, 8 # IntegerLiteral at 34.21	  
516#sw $s5, 4($sp) # IntegerLiteral at 34.21 
520#li $t0, 1 # IntegerLiteral at 34.21 	 
524#sw $t0, ($sp) # IntegerLiteral at 34.21	
528#lw $t0, ($sp) # Minus at 34.20	 
532#lw $t1, 8($sp) # Minus at 34.20		 
536#subu $t0, $t1, $t0 # Minus at 34.20 	
540#addu $sp, $sp, 8 # Minus at 34.20			
544#sw $t0, ($sp) # Minus at 34.20  
548#lw $t0, 8($sp) # Call at 34.15	
552#beq $t0, $zero, nullPtrException # Call at 34.15 
556#lw $t0, -12($t0) # Call at 34.15	 	
560#lw $t0, 8($t0) # Call at 34.15		 
564#jalr $t0 # Call at 34.15 
568#subu $sp, $sp, 4 # This at 34.26   
572#sw $s2, ($sp) # This at 34.26 
576#lw $t0, 28($sp) # IdentifierExp at 34.30		 
580#subu $sp, $sp, 8 # IdentifierExp at 34.30		 
584#sw $s5, 4($sp) # IdentifierExp at 34.30 	
588#sw $t0, ($sp) # IdentifierExp at 34.30  
592#subu $sp, $sp, 8 # IntegerLiteral at 34.32	  
596#sw $s5, 4($sp) # IntegerLiteral at 34.32 
600#li $t0, 2 # IntegerLiteral at 34.32 	
604#sw $t0, ($sp) # IntegerLiteral at 34.32	  
608#lw $t0, ($sp) # Minus at 34.31	
612#lw $t1, 8($sp) # Minus at 34.31	 	
616#subu $t0, $t1, $t0 # Minus at 34.31 
620#addu $sp, $sp, 8 # Minus at 34.31   
624#sw $t0, ($sp) # Minus at 34.31	  
628#lw $t0, 8($sp) # Call at 34.26 		
632#beq $t0, $zero, nullPtrException # Call at 34.26	 
636#lw $t0, -12($t0) # Call at 34.26	 	
640#lw $t0, 8($t0) # Call at 34.26 
644#jalr $t0 # Call at 34.26			
648#lw $t0, ($sp) # Plus at 34.24 	 
652#lw $t1, 8($sp) # Plus at 34.24		 
656#addu $t0, $t0, $t1 # Plus at 34.24 
660#addu $sp, $sp, 8 # Plus at 34.24 	 
664#sw $t0, ($sp) # Plus at 34.24	  
668#lw $t0, ($sp) # Assign at 34.13	
672#sw $t0, 8($sp) # Assign at 34.13		
676#addu $sp, $sp, 8 # Assign at 34.13   
680#j if_done_57 # If at 32.2			
684:if_else_57: # If at 32.2	  
684:if_done_57: # If at 32.2 		
684#lw $t0, 0($sp) # IdentifierExp at 36.9 	
688#subu $sp, $sp, 8 # IdentifierExp at 36.9 	 
692#sw $s5, 4($sp) # IdentifierExp at 36.9  
696#sw $t0, ($sp) # IdentifierExp at 36.9 		
700#lw $ra, 20($sp) # MethodDeclNonVoid at 29.16 	 
704#lw $s2, 16($sp) # MethodDeclNonVoid at 29.16	
708#lw $t0, ($sp) # MethodDeclNonVoid at 29.16	
712#sw $t0, 28($sp) # MethodDeclNonVoid at 29.16   
716#sw $s5, 32($sp) # MethodDeclNonVoid at 29.16 	 
720#addu $sp, $sp, 28 # MethodDeclNonVoid at 29.16  
724#jr $ra # MethodDeclNonVoid at 29.16			
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
728:readLine:
	
728#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
732#	sw $ra, 4($sp) # save $ra
736#	move $t1,$sp # save "original" sp

740:  doRead:

	# read the character
740#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
744#	subu $t2,$v0,13
748#	bne $t2,$zero,notReturnRL
752#	jal readLogicalChar
756#	subu $t2,$v0,10 # check for newline
760#	beq $t2,$zero,foundNewLine
764#	sw $v0,lastCharRead # push back character into queue
768#	j foundNewLine # go process the line

772:  notReturnRL:

	# at this point, $v0 has our character

772#	subu $t0,$v0,10
776#	beq $t0,$zero,foundNewLine
780#	blt $v0,$zero,foundEof
781##...slt $at,$v0,$zero
785##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
788#	subu $sp,$sp,4
792#	sw $v0,($sp)

	# loop back up to get next character
796#	j doRead

800:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
800#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
804#	sw $zero,8($sp) # return-value: null
808#	j rlReturn # return

812:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
812#	subu $t0,$t1,$sp # number of chars we read (times 4)
816#	srl $s6,$t0,2 # number of words on stack with chars
820#	subu $sp,$sp,4 # push char-count ...
824#	sw $s6,($sp) # ... onto stack
828#	addu $t2,$t0,5 # GC tag, incl. for count-word
832#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
836#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
840#	srl $s6,$s6,2 # data words in object
844#	move $s7,$zero # # object words in object
848#	jal newObject # allocate space
	
	# store header words
852#	la $t0,CLASS_String
856#	sw $t0,-12($s7) # store class tag (String) into object
860#	lw $t2,4($sp) # char-count
864#	sll $t1,$t2,2 # 4 times number of chars
868#	subu $t2,$zero,$t2 # negative of char-count
872#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
876#	lw $t0,-8($s7) # data words in object
880#	sll $t0,$t0,2 # data bytes in object
884#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
888#	subu $t0,$t0,$t2 # place to store last character (plus 9)
892#	addu $sp,$sp,8 # pop redundant object-pointer and count
896#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

900#	beq $sp,$t1,doneCharCopy
904:  charCopyLoop:
904#	lw $t2,($sp)
908#	sb $t2,-9($t0)
912#	addu $sp,$sp,4
916#	subu $t0,$t0,1
920#	bne $sp,$t1,charCopyLoop
924:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
924#	sw $s7,8($sp)
	
928:  rlReturn:
	# restore return address and return
928#	lw $ra,4($sp) # restore return address, ...
932#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
936#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
940:readInt:

	# save $ra by pushing onto stack
940#	subu $sp,$sp,4
944#	sw $ra,($sp)

948:  riSkipWhiteLoop:
	# read a character
948#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
952#	subu $t0,$v0,32
956#	bgt $t0,$zero,nonWhite
957##...slt $at,$zero,$t0
961##...bne $at,$zero,$+44
964#	beq $t0,$zero,riSkipWhiteLoop # start over if space
968#	subu $t0,$v0,10
972#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
976#	subu $t0,$v0,9
980#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
984#	subu $t0,$v0,13
988#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
992#	subu $t0,$v0,12
996#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1000#	j badIntegerFormat # illegal integer char: abort program

1004:  nonWhite:
1004#	subu $t0,$v0,'-'
1008#	li $t4,1 # final multiplier
1012#	bne $t0,$zero,helpReadInt # go read
1016#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1020#	jal readLogicalChar

1024:  helpReadInt:
1024#	li $t2,10
1028#	subu $t1,$v0,'0' # convert digit to 0-9 value
1032#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1033##...sltu $at,$t1,$t2
1037##...beq $at,$zero,$+2080
1040#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1044:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1044#	jal readLogicalChar # read next character
1048#	subu $t1,$v0,'0' # convert digit to 0-9 value
1052#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1053##...sltu $at,$t1,$t2
1057##...beq $at,$zero,$+20

1060#	mul $t3,$t3,$t2 # multiply old value by 10
1061##...mult $t3,$t2
1065##...mflo $t3
1068#	addu $t3,$t3,$t1 # add in value of new digit
1072#	j digitLoop

1076:  doneDigitLoop:

	# "push back" unused character into queue
1076#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1080#	lw $ra,($sp)
1084#	mult $t3,$t4 # multiply to account for poss. minus sign
1088#	mflo $t3
1092#	sw $t3,($sp) # result
1096#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1100#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1104:readChar:

	# save $ra by pushing onto stack
1104#	subu $sp,$sp,4
1108#	sw $ra,($sp)

  	# read the character
1112#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1116#	lw $ra,($sp)
1120#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1124#	sw $v0,($sp)

	# return
1128#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1132:printStr:
	# check for null, printing "(null)", if so
1132#	lw $t0,($sp)
1136#	bne $t0,$zero,psNotNull

	# print "(null)"
1140#	la $a0,nullStr
1144#	li $v0,4
1148#	syscall
1152#	j donePrintStr
	
1156:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1156#	subu $t0,$t0,8
1160#	lw $t1,($t0) # word just beyond end of string
1164#	sll $t1,$t1,2
1168#	subu $t1,$t0,$t1 # first word in string
1172#	lw $t0,4($t0) # negative of string-length
1176#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1180#	beq $t0,$t1,donePrintStr
1184:  psLoop:
1184#	lb $a0,($t1) # next byte
1188#	li $v0,11 # code for printing char
1192#        syscall # print the char
1196#	addu $t1,$t1,1 # go to next char
1200#	blt $t1,$t0,psLoop
1201##...slt $at,$t1,$t0
1205##...bne $at,$zero,$-20

1208:  donePrintStr:
	# pop stack and return
1208#	addu $sp,$sp,8
1212#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1216:printInt:
	# pop value off stack, along with 'this'
1216#	lw $a0,($sp)
1220#	addu $sp,$sp,12

	# print it
1224#	li $v0,1 # code for print-int
1228#	syscall

	# return
1232#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1236:printBool:
	# pop value off stack, along with 'this'
1236#	lw $t0,($sp)
1240#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1244#	la $a0,falseString
1248#	beq $t0,$zero,skipPB
1252#	la $a0,trueString
1256:  skipPB:
1256#	li $v0,4 # code for print-string
1260#	syscall

	# return
1264#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1268:substring:

	# save $ra by pushing onto stack
1268#	subu $sp,$sp,4
1272#	sw $ra,($sp)

	# get string value off stack, test for null
1276#	lw $t0,20($sp)
1280#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1284#	lw $t0,-4($t0) # negative of string length
1288#	subu $t0,$zero,$t0 # string length
1292#	lw $t1,4($sp) # k
1296#	lw $t2,12($sp) # n
1300#	bgt $zero,$t2,strIndexOutOfBounds
1301##...slt $at,$t2,$zero
1305##...bne $at,$zero,$+1780
1308#	bgt $t2,$t1,strIndexOutOfBounds
1309##...slt $at,$t1,$t2
1313##...bne $at,$zero,$+1772
1316#	bgt $t1,$t0,strIndexOutOfBounds
1317##...slt $at,$t0,$t1
1321##...bne $at,$zero,$+1764

	# allocate memory
1324#	subu $s6,$t1,$t2 # # chars in target-string
1328#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1332#	srl $s6,$s6,2 # convert bytes-count to word-count
1336#	move $s7,$zero # (no object-bytes in string)
1340#	jal newObject

	# store "String" tag in object-type field
1344#	la $t0,CLASS_String
1348#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1352#	lw $t1,8($sp) # k
1356#	lw $t2,16($sp) # n
1360#	subu $t0,$t2,$t1 # value to store
1364#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1368#	lw $t3,24($sp) # source string pointer
1372#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
1376#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
1380#	lw $t4,-8($t3) # # data words in source string
1384#	sll $t4,$t4,2 # # data bytes in source string
1388#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1392#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1396#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1400#	lw $t2,-8($s7) # # data words in target string
1404#	sll $t2,$t2,2 # # data bytes in target string
1408#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
1412:  subCopyLoopzz:
1412#	lb $t4,-8($t3)
1416#	sb $t4,-8($t2)
1420#	addu $t2,$t2,1
1424#	addu $t3,$t3,1
1428#	blt $t3,$t1,subCopyLoopzz
1429##...slt $at,$t3,$t1
1433##...bne $at,$zero,$-20
	
1436:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1436#	lw $ra,4($sp) # restore $ra
1440#	addu $sp,$sp,24 # pop stack
	
	# return
1444#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1448:length:

	# get string pointer
1448#	lw $t0,($sp)
	
	# grow stack
1452#	subu $sp,$sp,4

	# store GC tag
1456#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1460#	lw $t0,-4($t0) # -length
1464#	subu $t0,$zero,$t0
1468#	sw $t0,($sp) #store length

	# return
1472#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
1476:concat:
 	# save $ra by pushing onto stack
1476#	subu $sp,$sp,4
1480#	sw $ra($sp)

	# get string pointers and check parameter for null
1484#	lw $t0,4($sp)
1488#	beq $t0,$zero,nullPtrException
1492#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
1496#	lw $t0,-4($t0) # negative size of second object
1500#	lw $t1,-4($t1) # negative size of first object
1504#	addu $s6,$t0,$t1 # sum of negative sizes
1508#	sra $s6,$s6,2 # negative word-size of char part
1512#	subu $s6,$zero,$s6 # word size of char part
1516#	addu $s6,$s6,1 # data word size, including v-table word
1520#	move $s7,$zero
1524#	jal newObject

	# store "String" tag in object-type field
1528#	la $t0,CLASS_String
1532#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
1536#	lw $ra,4($sp) # return address
1540#	lw $t0,8($sp) # second object
1544#	lw $t1,12($sp) # first object
1548#	addu $sp,$sp,12 # pop
1552#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
1556#	lw $t2,-4($t0) # negative length of second object
1560#	lw $t3,-4($t1) # negative length of first object
1564#	addu $t4,$t2,$t3 # sum of negative lengths
1568#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
1572#	lw $t4,-8($t1) # # data words in first string
1576#	sll $t4,$t4,2 # # data bytes in first string
1580#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1584#	lw $t4,-8($s7) # # data words in new string
1588#	sll $t4,$t4,2 # # data bytes in new string
1592#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1596#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1600#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
1604:  concatLoop1zz:
1604#	lb $t4,-8($t1)
1608#	sb $t4,-8($s7)
1612#	addu $s7,$s7,1
1616#	addu $t1,$t1,1
1620#	blt $t1,$t3,concatLoop1zz
1621##...slt $at,$t1,$t3
1625##...bne $at,$zero,$-20
1628:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1628#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
1632#	lw $t4,-8($t0) # # data words in second string
1636#	sll $t4,$t4,2 # # data bytes in second string
1640#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1644#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
1648:  concatLoop2zz:
1648#	lb $t4,-8($t1)
1652#	sb $t4,-8($s7)
1656#	addu $s7,$s7,1
1660#	addu $t1,$t1,1
1664#	blt $t1,$t3,concatLoop2zz
1665##...slt $at,$t1,$t3
1669##...bne $at,$zero,$-20
1672:  doneConcatLoop2zz:
 
1672:  concatRtnzz:
	# return
1672#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
1676:charAt:
	# get string
1676#	lw $t0,8($sp)

	# check that index is in bounds
1680#	lw $t1,-4($t0) # negative of # data words in string
1684#	subu $t3,$zero,$t1 # # chars in string
1688#	lw $t2,($sp) # index
1692#	bgeu $t2,$t3,strIndexOutOfBounds
1693##...sltu $at,$t2,$t3
1697##...beq $at,$zero,$+1388

	# access element
1700#	lw $t1,-8($t0) # # data words in object
1704#	sll $t1,$t1,2 # - byte-offset from end of chars
1708#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
1712#	addu $t0,$t0,$t1 # - address of our char, offset by 8
1716#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
1720#	addu $sp,$sp,4
1724#	sw $t0,($sp)
1728#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
1732#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
1736:intToString:

	# save return address on stack; allocate space for dummy GC tag
1736#	subu $sp,$sp,8
1740#	sw $ra,4($sp)

	# save current sp
1744#	move $t0,$sp

	# move constant 10 into $t3
1748#	li $t3,10

	# get argument, negate if negative
1752#	lw $t1,8($sp)
1756#	bge $t1,$zero,itsNonNegLoop
1757##...slt $at,$t1,$zero
1761##...beq $at,$zero,$+8
1764#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
1768:  itsNonNegLoop:
1768#	divu $t1,$t3
1772#	mflo $t1 # quotient
1776#	mfhi $t4 # remainder
1780#	addu $t4,$t4,'0' # turn remainder into digit
1784#	subu $sp,$sp,4
1788#	sw $t4,($sp) # push digit onto stack
1792#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
1796#	lw $t4,8($t0)
1800#	bge $t4,$zero,itsSkipNeg
1801##...slt $at,$t4,$zero
1805##...beq $at,$zero,$+16
1808#	li $t4,'-'
1812#	subu $sp,$sp,4
1816#	sw $t4,($sp)
1820:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
1820#	subu $s6,$t0,$sp
1824#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
1828#	sw $t3,($t0)
1832#	srl $s6,$s6,2
1836#	subu $sp,$sp,4
1840#	sw $s6,($sp)
	
	# allocate memory
1844#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
1848#	srl $s6,$s6,2
1852#	move $s7,$zero # no "object" words in object
1856#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
1860#	lw $t0,4($sp)
1864#	addu $sp,$sp,8

	# store "String" tag into class field
1868#	subu $s7,$s7,8 # address of header-1 word
1872#	la $t1,CLASS_String
1876#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
1880#	subu $t0,$zero,$t0
1884#	sw $t0,4($s7)

1888#	lw $t1,($s7) # number of data words in string
1892#	sll $t1,$t1,2 # number data bytes in string
1896#	subu $t1,$s7,$t1 # first location to store chars in string
1900#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
1904:  itsLoop:
1904#	lw $t2,($sp)
1908#	addu $sp,$sp,4
1912#	sb $t2,($t1)
1916#	addu $t1,$t1,1
1920#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
1924#	lw $ra,4($sp)
1928#	addu $sp,$sp,16
1932#	addu $t0,$t0,15
1936#	and $t0,$t0,0xfffffffc
1937##...lui $at,65535
1941##...ori $at,$at,0xfffc
1945##...and $t0,$t0,$at
1948#	sw $t0,($sp)
1952#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
1956:intToChar:
	# save return address
1956#	subu $sp,$sp,4
1960#	sw $ra,($sp)

	# allocate object
1964#	li $s6,2
1968#	move $s7,$zero
1972#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
1976#	lw $ra,4($sp)
1980#	lw $t1,8($sp)
1984#	addu $sp,$sp,16

	# store "String" tag into class field
1988#	la $t0,CLASS_String
1992#	sw $t0,-12($s7)

	# store data in string
1996#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2000#	li $t0,-1
2004#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2008#	sw $s7,($sp)

	# return
2012#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2016:compareTo:
	# get string pointers and check parameter for null
2016#	lw $t0,($sp) # second string
2020#	beq $t0,$zero,nullPtrException
2024#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2028#	lw $t2,-4($t0) # negative length of second string
2032#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2036#	slt $t4,$t3,$t2
2040#	slt $t5,$t2,$t3
2044#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2048#	lw $t2,-8($t0) # # data words in second string
2052#	lw $t3,-8($t1) # # data words in first string
2056#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2060#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2064#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2068#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2072#	beq $zero,$t5,skipStrCmpLenzz
2076#	move $t2,$t3
2080:  skipStrCmpLenzz:
2080#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2084:  cmpLoopzz:
2084#	lw $t3,-8($t1) # word from str2
2088#	lw $t4,-8($t0) # word from str1
2092#	bne $t3,$t4,cmpNotEqualzz
2096#	addu $t1,$t1,4
2100#	addu $t0,$t0,4
2104#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2108#	j cmpHitLimitzz

2112:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2112#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2116#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2120#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2124:  cmpHitLimitzz:
2124#	sw $t5,($sp) # store value
2128#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2132#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2136:readLogicalChar:

	# check if we already have a character
2136#	lw $v0,lastCharRead
2140#	li $t0,-2
2144#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2148#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2152#	jr $ra # return
	
2156:  doReadCh:
	# we need to actually read a character: read and return
2156#	li $v0,12 # use system call to read a character
2160#	syscall
2164#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2168:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2168#	blt $s7,$zero arraySizeOutOfBounds
2169##...slt $at,$s7,$zero
2173##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2176#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2180:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2180#	move $t3,$s6
2184#	bge $t3,$zero,newSkip
2185##...slt $at,$t3,$zero
2189##...beq $at,$zero,$+8
2192#	move $t3,$zero

2196:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2196#	addu $t0,$t3,$s7
2200#	sll $t0,$t0,2
2204#	addu $t0,$t0,8 # amount of memory needed
2208#	addu $t1,$t0,$s3
2212#	bgtu $t1,$s4,doGC
2213##...sltu $at,$s4,$t1
2217##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2220#	move $t2,$s3
2224:  zeroObjLoop:
2224#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2228#	addu $s3,4
2232#	bltu $s3,$t1,zeroObjLoop
2233##...sltu $at,$s3,$t1
2237##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2240#	sll $t0,$s7,2    # number of post-header bytes
2244#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2248#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2252#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2256#	move $s7,$t0
2260#	subu $sp,$sp,4
2264#	sw $t0,($sp)

2268#	jr $ra
	
2272:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2272#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2276#	subu $sp,$sp,4
2280#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2284#	lw $t0,cur_seg
2288#	move $t7,$s4
2292#	la $t6,seg1_start
2293##...lui $t6,16
2297##...addiu $t6,$t6,3724
2300#	la $s3,seg0_start
2304#	la $s4,seg0_end
2305##...lui $s4,16
2309##...addiu $s4,$s4,3724
2312#	sw $zero,cur_seg
2316#	bne $t0,$zero,skipGc1
2320#	la $t6,seg0_start
2324#	la $s3,seg1_start
2325##...lui $s3,16
2329##...addiu $s3,$s3,3724
2332#	la $s4,seg1_end
2333##...lui $s4,32
2337##...addiu $s4,$s4,3724
2340#	sw $s5,cur_seg
2344:  skipGc1:
2344#	li $t5,-2
2348#	lw $t0,stack_bottom
2352#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2356:  gcStackCopyLoop:
2356#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2360#	sll $t2,$t1,31 # zero iff low bit was zero
2364#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2368#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2372#	bleu $t1,$t6,gcTestIterDone1
2373##...sltu $at,$t6,$t1
2377##...beq $at,$zero,$+148
2380#	bgtu $t1,$t7,gcTestIterDone1
2381##...sltu $at,$t7,$t1
2385##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2388#	lw $t2,-8($t1) # possible forwarding tag
2392#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
2396#	lw $t2,-4($t1) # forwarding pointer: object's new address
2400#	sw $t2,4($t0) # update stack value
2404#	j gcTestIterDone1 # do next iteration

2408:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
2408#	bge $t2,$zero,gcSkip2
2409##...slt $at,$t2,$zero
2413##...beq $at,$zero,$+8
2416#	move $t2,$zero # set to zero if -1 (number of data words)

2420:  gcSkip2:
2420#	sll $t2,$t2,2
2424#	addu $t2,$t2,8
2428#	subu $t4,$t1,$t2 # address of first word of source
2432#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2436#	bge $t3,$zero,gcH2Neg1
2437##...slt $at,$t3,$zero
2441##...beq $at,$zero,$+8
2444#	move $t3,$zero
2448:  gcH2Neg1:
2448#	sll $t3,$t3,2
2452#	addu $t3,$t3,$t1 # address one word past last word of source

2456#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2460#	lw $s0,($t4)
2464#	lw $s1,-8($t1)
2468#	sw $s1,($t4)
2472#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
2476:  gCinnerCopy1:
2476#	lw $s0,($t4)
2480#	sw $s0,($s3)
2484#	addu $t4,$t4,4
2488#	addu $s3,$s3,4
2492#	bltu $t4,$t3,gCinnerCopy1
2493##...sltu $at,$t4,$t3
2497##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2500#	sw $t5,-8($t1) # -2 in first header-slot
2504#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
2508#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
2512#	j gcTestIterDone1

2516:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
2516#	subu $t0,$t0,$t1
2520#	subu $t0,$t0,3

2524:  gcTestIterDone1:
2524#	bgeu $t0,$sp,gcStackCopyLoop
2525##...sltu $at,$t0,$sp
2529##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
2532#	lw $t1,cur_seg
2536#	la $t0,seg0_start
2540#	beq $t1,$zero,gcSkip4
2544#	la $t0,seg1_start
2545##...lui $t0,16
2549##...addiu $t0,$t0,3724

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

2552:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
2552#	bgeu $t0,$s3,gcFinishUp
2553##...sltu $at,$t0,$s3
2557##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

2560:  gcHeapCopyLoop:
	# check if we have a data array
2560#	lw $t1,($t0) # first header word for current object
2564#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
2565##...slt $at,$t1,$zero
2569##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
2572#	lw $t1,4($t0) # data words
2576#	addu $t1,$t1,2 # add in # header words
2580#	sll $t1,$t1,2 # convert to byte-count
2584#	addu $t0,$t0,$t1 # skip over object
2588#	j gcTestIterDone2 # go do next object, if any

2592:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
2592#	sll $t2,$t1,2 # # data bytes
2596#	addu $t2,$t2,8 # to skip header word
2600#	addu $t2,$t0,$t2 # pointer to new object
2604#	lw $t3,-8($t2) # word to swap
2608#	sw $t1,-8($t2) # store header word
2612#	sw $t3,($t0) # restore first word of object

2616#	lw $t3,-4($t2) # # object words (negative treated as zero)
2620#	bge $t3,$zero,gcH2Neg2
2621##...slt $at,$t3,$zero
2625##...beq $at,$zero,$+8
2628#	move $t3,$zero
2632:  gcH2Neg2:
2632#	sll $t3,$t3,2 # # object bytes
2636#	move $t0,$t2 # address of first pointer in object
2640#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
2644#	beq $t0,$s1,gcTestIterDone2
	
2648:  gcNextPointerInObject:
	# get pointer from object
2648#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
2652#	bleu $t1,$t6,gcGoNextPointerSlot
2653##...sltu $at,$t6,$t1
2657##...beq $at,$zero,$+136
2660#	bgtu $t1,$t7,gcGoNextPointerSlot
2661##...sltu $at,$t7,$t1
2665##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2668#	lw $t8,-8($t1) # possible forwarding tag
2672#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
2676#	lw $t8,-4($t1) # forwarding pointer: object's new address
2680#	sw $t8,($t0) # update pointer in object
2684#	j gcGoNextPointerSlot # do next iteration

2688:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
2688#	bge $t8,$zero,gcSkip5
2689##...slt $at,$t8,$zero
2693##...beq $at,$zero,$+8
2696#	move $t8,$zero # set to zero if -1

2700:  gcSkip5:
2700#	sll $t8,$t8,2
2704#	addu $t8,$t8,8
2708#	subu $t4,$t1,$t8 # address of first word of source
2712#	lw $t3,-4($t1)
2716#	bge $t3,$zero,gcNoNeg
2717##...slt $at,$t3,$zero
2721##...beq $at,$zero,$+8
2724#	move $t3,$zero
2728:  gcNoNeg:
2728#	sll $t3,$t3,2
2732#	addu $t3,$t3,$t1 # address one word past last word of source

2736#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
2740#	lw $s0,($t4)
2744#	lw $t9,-8($t1)
2748#	sw $t9,($t4)
2752#	sw $s0,-8($t1)

	# copy all source bytes to the target
2756:  gCinnerCopy2:
2756#	lw $s0,($t4)
2760#	sw $s0,($s3)
2764#	addu $t4,$t4,4
2768#	addu $s3,$s3,4
2772#	bltu $t4,$t3,gCinnerCopy2
2773##...sltu $at,$t4,$t3
2777##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2780#	sw $t5,-8($t1) # -2 in first header-slot
2784#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
2788#	sw $t8,($t0)

2792:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
2792#	addu $t0,$t0,4
2796#	bltu $t0,$s1,gcNextPointerInObject
2797##...sltu $at,$t0,$s1
2801##...bne $at,$zero,$-152

2804:  gcTestIterDone2:
2804#	bltu $t0,$s3,gcHeapCopyLoop
2805##...sltu $at,$t0,$s3
2809##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

2812:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
2812#	lw $s2,($sp)
2816#	addu $sp,$sp,4

	# mark us as having already GC'd
2820#	move $t5,$s5

	# go try and allocate again
2824#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
2828:vm_init:

	# mark bottom of stack
2828#	sw $sp,stack_bottom
2832#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
2836#	move $s2,$zero
2840#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
2844#	li $s5,5
2848#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

2852#	la $s3,seg0_start
2856#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
2860#	la $s4,seg0_end
2861##...lui $s4,16
2865##...addiu $s4,$s4,3724
2868#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
2872#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2876:divide:
	# get parameters; abort if divisor zero
2876#	lw $t0,($sp)
2880#	lw $t1,8($sp)
2884#	beq $t0,$zero,divByZeroError
	
	# perform division
2888#	div $t1,$t0
2892#	mflo $t0

	# store result, adjust stack and return
2896#	addu $sp,$sp,8 # adjust stack
2900#	sw $t0,($sp) # store result
2904#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2908:remainder:
	# get parameters; abort if divisor zero
2908#	lw $t0,($sp)
2912#	lw $t1,8($sp)
2916#	beq $t0,$zero,divByZeroError
	
	# perform division
2920#	div $t1,$t0
2924#	mfhi $t0

	# store result, adjust stack and return
2928#	addu $sp,$sp,8 # adjust stack
2932#	sw $t0,($sp) # store result
2936#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
2940:checkCast:
	# get object, allow immediately if null
2940#	lw $t2,($sp)
2944#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
2948#	lw $t3,-8($t2) # <= 0 if array
2952#	lw $t2,-12($t2) # vtable address (unless array)
2956#	bgt $t3,$zero,skipArrayCast
2957##...slt $at,$zero,$t3
2961##...bne $at,$zero,$+8
2964#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
2968:  skipArrayCast:
2968#	bge $t2,$t1,castException
2969##...slt $at,$t2,$t1
2973##...beq $at,$zero,$+152
2976#	blt $t2,$t0,castException
2977##...slt $at,$t2,$t0
2981##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
2984:  checkCastReturn:	
2984#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
2988:instanceOf:
	# get object, go return false if null
2988#	lw $t2,($sp)
2992#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
2996#	lw $t3,-8($t2) # <= 0 if array
3000#	lw $t2,-12($t2) # vtable address (unless array)
3004#	bgt $t3,$zero,skipArrayInstanceOf
3005##...slt $at,$zero,$t3
3009##...bne $at,$zero,$+8
3012#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3016:  skipArrayInstanceOf:
3016#	sge $t0,$t2,$t0
3017##...slt $t0,$t2,$t0
3021##...xori $t0,$t0,0x1
3024#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3028#	and $t2,$t0,$t1
3032:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3032#	sw $t2,($sp)
3036#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3040:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3040#	li $v0,4 # syscall-code for print-string
3044#	syscall
3048:exit:
	# print termination message
3048#	li $v0,4
3052#	la $a0,exitString
3056#	syscall

	# terminate execution
3060#	li $v0,10 #syscall-code for "exit"
3064#	syscall

3068:outOfHeapMemory:
3068#	la $a0,heapMemoryMsg
3072#	j exitError
3076:divByZeroError:
3076#	la $a0,divByZeroMsg
3080#	j exitError
3084:strIndexOutOfBounds:
3084#	la $a0,strIndexOutOfBoundsMsg
3088#	j exitError
3092:arrayIndexOutOfBounds:
3092#	la $a0,arrayIndexOutOfBoundsMsg
3096#	j exitError
3100:arraySizeOutOfBounds:
3100#	la $a0,arraySizeOutOfBoundsMsg
3104#	j exitError
3108:nullPtrException:
3108#	la $a0,nullPtrExceptionMsg
3112#	j exitError
3116:badIntegerFormat:
3116#	la $a0,badIntegerFormatMsg
3120#	j exitError
3124:castException:
3124#	la $a0,castExceptionMsg
3128#	j exitError

############## data section ################
	.data
	.align 2

3416:cur_seg:
	.word 0

3420:lastCharRead:
	.word -2 # -2 => no buffered character

3424:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3451:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3474:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3509:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3543:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
3576:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
3607:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
3655:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
3676:gcMsg: 
      .asciiz "\nGC!\n"

3682:nullStr:
	.asciiz "null"
3687:trueString:
	.asciiz "true"
3692:falseString:
	.asciiz "false"
3698:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
3720:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

3724:seg0_start:
	.space 0x100000
1052300:seg0_end:
1052300:seg1_start:
	.space 0x100000
2100876:seg1_end:



