.data # Program at 4.1	
3152:CLASS_Object: # ClassDecl at 0.0 		
.word 0 # ClassDecl at 0.0		
3156:CLASS_Lib: # ClassDecl at 0.0		
.word CLASS_Object # ClassDecl at 0.0	 	
.word readLine # ClassDecl at 0.0		
.word readInt # ClassDecl at 0.0 
.word readChar # ClassDecl at 0.0		 
.word printStr # ClassDecl at 0.0   
.word printBool # ClassDecl at 0.0	 
.word printInt # ClassDecl at 0.0		
.word intToString # ClassDecl at 0.0	 	
.word intToChar # ClassDecl at 0.0	  
3192:CLASS_END_Lib: # ClassDecl at 0.0		 
3192:CLASS_String: # ClassDecl at 0.0  
.word CLASS_Object # ClassDecl at 0.0	 
.word concat # ClassDecl at 0.0	 
.word substring # ClassDecl at 0.0	
.word length # ClassDecl at 0.0  	
.word charAt # ClassDecl at 0.0	 
.word compareTo # ClassDecl at 0.0 	 
3216:CLASS_END_String: # ClassDecl at 0.0 	
3216:CLASS_RunMain: # ClassDecl at 0.0	 
.word CLASS_Object # ClassDecl at 0.0		 
3220:CLASS_END_RunMain: # ClassDecl at 0.0 	 
3220:CLASS_Main: # ClassDecl at 4.7			
.word CLASS_Object # ClassDecl at 4.7 
.word fcn_32_main # ClassDecl at 4.7		 
.word fcn_69_fib # ClassDecl at 4.7 	 
3232:CLASS_END_Main: # ClassDecl at 4.7			
3232:CLASS_END_Object: # ClassDecl at 0.0  	
 .data # Program at 4.1   
  .byte 84 # StringLiteral at 19.15 		
  .byte 104 # StringLiteral at 19.15			
  .byte 101 # StringLiteral at 19.15	 	
  .byte 32 # StringLiteral at 19.15	 	
  .byte 102 # StringLiteral at 19.15		 
  .byte 105 # StringLiteral at 19.15	 
  .byte 98 # StringLiteral at 19.15 		
  .byte 111 # StringLiteral at 19.15   
  .byte 110 # StringLiteral at 19.15	
  .byte 97 # StringLiteral at 19.15 		
  .byte 99 # StringLiteral at 19.15	 
  .byte 99 # StringLiteral at 19.15 
  .byte 105 # StringLiteral at 19.15	  
  .byte 32 # StringLiteral at 19.15	  
  .byte 110 # StringLiteral at 19.15  	
  .byte 117 # StringLiteral at 19.15	 	
  .byte 109 # StringLiteral at 19.15	 	
  .byte 98 # StringLiteral at 19.15 		
  .byte 101 # StringLiteral at 19.15 
  .byte 114 # StringLiteral at 19.15  	
  .byte 32 # StringLiteral at 19.15	  
  .byte 111 # StringLiteral at 19.15   
  .byte 102 # StringLiteral at 19.15  
  .byte 32 # StringLiteral at 19.15 	 
  .word CLASS_String # StringLiteral at 19.15			
  .word 7 # StringLiteral at 19.15  	
  .word -24 # StringLiteral at 19.15 
3268:strLit_13: # StringLiteral at 19.15		 
  .byte 32 # StringLiteral at 21.15	
  .byte 105 # StringLiteral at 21.15 	 
  .byte 115 # StringLiteral at 21.15 		
  .byte 32 # StringLiteral at 21.15		
  .word CLASS_String # StringLiteral at 21.15  
  .word 2 # StringLiteral at 21.15 	 
  .word -4 # StringLiteral at 21.15		
3284:strLit_21: # StringLiteral at 21.15  
  .byte 46 # StringLiteral at 23.15	 
  .byte 10 # StringLiteral at 23.15		 
  .byte 0 # StringLiteral at 23.15	 
  .byte 0 # StringLiteral at 23.15   
  .word CLASS_String # StringLiteral at 23.15 		
  .word 2 # StringLiteral at 23.15	 
  .word -2 # StringLiteral at 23.15   
3300:strLit_29: # StringLiteral at 23.15 		
  # ENTER NODE # Program at 4.1	 	
  .text # Program at 4.1 		
  .globl main # Program at 4.1  
0:  main: # Program at 4.1 	
0#  jal vm_init # Program at 4.1 
    # ENTER NODE # ExpStatement at 0.0   
      # ENTER NODE # Call at 0.0			
        # ENTER NODE # NewObject at 0.0		
4#        li $s6, 1 # NewObject at 0.0			
8#        li $s7, 0 # NewObject at 0.0		 
12#        jal newObject # NewObject at 0.0 		
16#        la $t0, CLASS_Main # NewObject at 0.0  	
20#        sw $t0, -12($s7) # NewObject at 0.0 		
        # EXIT NODE # NewObject at 0.0  	
24#      lw $t0, 0($sp) # Call at 0.0		
28#      beq $t0, $zero, nullPtrException # Call at 0.0	 
32#      lw $t0, -12($t0) # Call at 0.0	
36#      lw $t0, 4($t0) # Call at 0.0 	
40#      jalr $t0 # Call at 0.0			
      # EXIT NODE # Call at 0.0 	 
    # EXIT NODE # ExpStatement at 0.0	 	
44#  li $v0, 10 # Program at 4.1 
48#  syscall # Program at 4.1 	
    # ENTER NODE # MethodDeclVoid at 7.17 	 
    .globl fcn_32_main # MethodDeclVoid at 7.17			
52:    fcn_32_main: # MethodDeclVoid at 7.17  
52#    subu $sp, $sp, 8 # MethodDeclVoid at 7.17	 	
56#    sw $ra, 4($sp) # MethodDeclVoid at 7.17 
60#    sw $s2, ($sp) # MethodDeclVoid at 7.17	 	
64#    lw $s2, 8($sp) # MethodDeclVoid at 7.17			
      # ENTER NODE # LocalVarDecl at 10.6 	
        # ENTER NODE # NewObject at 10.12 	
68#        li $s6, 1 # NewObject at 10.12			
72#        li $s7, 0 # NewObject at 10.12 
76#        jal newObject # NewObject at 10.12 	 
80#        la $t0, CLASS_Lib # NewObject at 10.12  
84#        sw $t0, -12($s7) # NewObject at 10.12 	
        # EXIT NODE # NewObject at 10.12	 	
      # EXIT NODE # LocalVarDecl at 10.6   
      # ENTER NODE # LocalVarDecl at 13.6		
        # ENTER NODE # IntegerLiteral at 13.12  
88#        subu $sp, $sp, 8 # IntegerLiteral at 13.12 	
92#        sw $s5, 4($sp) # IntegerLiteral at 13.12	
96#        li $t0, 14 # IntegerLiteral at 13.12	  
100#        sw $t0, ($sp) # IntegerLiteral at 13.12 
        # EXIT NODE # IntegerLiteral at 13.12		 
      # EXIT NODE # LocalVarDecl at 13.6  
      # ENTER NODE # LocalVarDecl at 16.6		
        # ENTER NODE # Call at 16.15	 	
          # ENTER NODE # This at 16.15	  
104#          subu $sp, $sp, 4 # This at 16.15	 
108#          sw $s2, ($sp) # This at 16.15 		
          # EXIT NODE # This at 16.15		
          # ENTER NODE # IdentifierExp at 16.19	 
112#          lw $t0, 4($sp) # IdentifierExp at 16.19   
116#          subu $sp, $sp, 8 # IdentifierExp at 16.19  	
120#          sw $s5, 4($sp) # IdentifierExp at 16.19 
124#          sw $t0, ($sp) # IdentifierExp at 16.19  	
          # EXIT NODE # IdentifierExp at 16.19	  
128#        lw $t0, 8($sp) # Call at 16.15	 	
132#        beq $t0, $zero, nullPtrException # Call at 16.15 		
136#        lw $t0, -12($t0) # Call at 16.15	 
140#        lw $t0, 8($t0) # Call at 16.15	
144#        jalr $t0 # Call at 16.15  	
        # EXIT NODE # Call at 16.15 	
      # EXIT NODE # LocalVarDecl at 16.6		 
      # ENTER NODE # ExpStatement at 19.6		
        # ENTER NODE # Call at 19.6   
          # ENTER NODE # IdentifierExp at 19.2	 	
148#          lw $t0, 16($sp) # IdentifierExp at 19.2	 
152#          subu $sp, $sp, 4 # IdentifierExp at 19.2	 	
156#          sw $t0, ($sp) # IdentifierExp at 19.2		 
          # EXIT NODE # IdentifierExp at 19.2	 	
          # ENTER NODE # StringLiteral at 19.15   
160#          subu $sp, $sp, 4 # StringLiteral at 19.15		
164#          la $t0, strLit_13 # StringLiteral at 19.15 	
168#          sw $t0, ($sp) # StringLiteral at 19.15		 
          # EXIT NODE # StringLiteral at 19.15   
172#        lw $t0, 4($sp) # Call at 19.6  	
176#        beq $t0, $zero, nullPtrException # Call at 19.6		
180#        lw $t0, -12($t0) # Call at 19.6 		
184#        lw $t0, 16($t0) # Call at 19.6 	 
188#        jalr $t0 # Call at 19.6	  
        # EXIT NODE # Call at 19.6  	
      # EXIT NODE # ExpStatement at 19.6	
      # ENTER NODE # ExpStatement at 20.6 	 
        # ENTER NODE # Call at 20.6  	
          # ENTER NODE # IdentifierExp at 20.2	 
192#          lw $t0, 16($sp) # IdentifierExp at 20.2	
196#          subu $sp, $sp, 4 # IdentifierExp at 20.2 	 
200#          sw $t0, ($sp) # IdentifierExp at 20.2 		
          # EXIT NODE # IdentifierExp at 20.2  
          # ENTER NODE # IdentifierExp at 20.15	  
204#          lw $t0, 12($sp) # IdentifierExp at 20.15 		
208#          subu $sp, $sp, 8 # IdentifierExp at 20.15  	
212#          sw $s5, 4($sp) # IdentifierExp at 20.15 	 
216#          sw $t0, ($sp) # IdentifierExp at 20.15 	 
          # EXIT NODE # IdentifierExp at 20.15 	 
220#        lw $t0, 8($sp) # Call at 20.6		 
224#        beq $t0, $zero, nullPtrException # Call at 20.6  	
228#        lw $t0, -12($t0) # Call at 20.6	 
232#        lw $t0, 24($t0) # Call at 20.6	  
236#        jalr $t0 # Call at 20.6		
        # EXIT NODE # Call at 20.6	 
      # EXIT NODE # ExpStatement at 20.6	 
      # ENTER NODE # ExpStatement at 21.6  
        # ENTER NODE # Call at 21.6	 
          # ENTER NODE # IdentifierExp at 21.2 
240#          lw $t0, 16($sp) # IdentifierExp at 21.2	
244#          subu $sp, $sp, 4 # IdentifierExp at 21.2   
248#          sw $t0, ($sp) # IdentifierExp at 21.2  
          # EXIT NODE # IdentifierExp at 21.2		
          # ENTER NODE # StringLiteral at 21.15	  
252#          subu $sp, $sp, 4 # StringLiteral at 21.15  
256#          la $t0, strLit_21 # StringLiteral at 21.15	 
260#          sw $t0, ($sp) # StringLiteral at 21.15	 	
          # EXIT NODE # StringLiteral at 21.15 	
264#        lw $t0, 4($sp) # Call at 21.6  
268#        beq $t0, $zero, nullPtrException # Call at 21.6	 	
272#        lw $t0, -12($t0) # Call at 21.6	
276#        lw $t0, 16($t0) # Call at 21.6 		
280#        jalr $t0 # Call at 21.6			
        # EXIT NODE # Call at 21.6		
      # EXIT NODE # ExpStatement at 21.6 
      # ENTER NODE # ExpStatement at 22.6 	 
        # ENTER NODE # Call at 22.6 
          # ENTER NODE # IdentifierExp at 22.2 	
284#          lw $t0, 16($sp) # IdentifierExp at 22.2 
288#          subu $sp, $sp, 4 # IdentifierExp at 22.2	
292#          sw $t0, ($sp) # IdentifierExp at 22.2		
          # EXIT NODE # IdentifierExp at 22.2 	
          # ENTER NODE # IdentifierExp at 22.15 	
296#          lw $t0, 4($sp) # IdentifierExp at 22.15   
300#          subu $sp, $sp, 8 # IdentifierExp at 22.15			
304#          sw $s5, 4($sp) # IdentifierExp at 22.15 	 
308#          sw $t0, ($sp) # IdentifierExp at 22.15	 
          # EXIT NODE # IdentifierExp at 22.15 	
312#        lw $t0, 8($sp) # Call at 22.6		 
316#        beq $t0, $zero, nullPtrException # Call at 22.6		 
320#        lw $t0, -12($t0) # Call at 22.6  	
324#        lw $t0, 24($t0) # Call at 22.6	
328#        jalr $t0 # Call at 22.6  
        # EXIT NODE # Call at 22.6			
      # EXIT NODE # ExpStatement at 22.6 	 
      # ENTER NODE # ExpStatement at 23.6			
        # ENTER NODE # Call at 23.6 	 
          # ENTER NODE # IdentifierExp at 23.2	  
332#          lw $t0, 16($sp) # IdentifierExp at 23.2 	 
336#          subu $sp, $sp, 4 # IdentifierExp at 23.2			
340#          sw $t0, ($sp) # IdentifierExp at 23.2	 	
          # EXIT NODE # IdentifierExp at 23.2 	
          # ENTER NODE # StringLiteral at 23.15	  
344#          subu $sp, $sp, 4 # StringLiteral at 23.15 	
348#          la $t0, strLit_29 # StringLiteral at 23.15 	 
352#          sw $t0, ($sp) # StringLiteral at 23.15		
          # EXIT NODE # StringLiteral at 23.15		
356#        lw $t0, 4($sp) # Call at 23.6 	 
360#        beq $t0, $zero, nullPtrException # Call at 23.6 	
364#        lw $t0, -12($t0) # Call at 23.6  
368#        lw $t0, 16($t0) # Call at 23.6		
372#        jalr $t0 # Call at 23.6	  
        # EXIT NODE # Call at 23.6	 	
      # EXIT NODE # ExpStatement at 23.6  
376#    lw $ra, 24($sp) # MethodDeclVoid at 7.17 		
380#    lw $s2, 20($sp) # MethodDeclVoid at 7.17		
384#    addu $sp, $sp, 32 # MethodDeclVoid at 7.17 	 
388#    jr $ra # MethodDeclVoid at 7.17	  
    # EXIT NODE # MethodDeclVoid at 7.17 
    # ENTER NODE # MethodDeclNonVoid at 28.16	  
    .globl fcn_69_fib # MethodDeclNonVoid at 28.16 	 
392:    fcn_69_fib: # MethodDeclNonVoid at 28.16 		
392#    subu $sp, $sp, 8 # MethodDeclNonVoid at 28.16		 
396#    sw $ra, 4($sp) # MethodDeclNonVoid at 28.16 
400#    sw $s2, ($sp) # MethodDeclNonVoid at 28.16		 
404#    lw $s2, 16($sp) # MethodDeclNonVoid at 28.16		 
      # ENTER NODE # LocalVarDecl at 29.6		 
        # ENTER NODE # IntegerLiteral at 29.13  
408#        subu $sp, $sp, 8 # IntegerLiteral at 29.13	 
412#        sw $s5, 4($sp) # IntegerLiteral at 29.13	
416#        li $t0, 1 # IntegerLiteral at 29.13	  
420#        sw $t0, ($sp) # IntegerLiteral at 29.13	
        # EXIT NODE # IntegerLiteral at 29.13 
      # EXIT NODE # LocalVarDecl at 29.6		
      # ENTER NODE # LocalVarDecl at 30.6		 
        # ENTER NODE # IntegerLiteral at 30.16 	
424#        subu $sp, $sp, 8 # IntegerLiteral at 30.16   
428#        sw $s5, 4($sp) # IntegerLiteral at 30.16 		
432#        li $t0, 0 # IntegerLiteral at 30.16	  
436#        sw $t0, ($sp) # IntegerLiteral at 30.16 
        # EXIT NODE # IntegerLiteral at 30.16		 
      # EXIT NODE # LocalVarDecl at 30.6	 
      # ENTER NODE # Block at 31.2 	 
        # ENTER NODE # LocalVarDecl at 31.11	
          # ENTER NODE # IntegerLiteral at 31.15	 
440#          subu $sp, $sp, 8 # IntegerLiteral at 31.15		
444#          sw $s5, 4($sp) # IntegerLiteral at 31.15   
448#          li $t0, 0 # IntegerLiteral at 31.15		
452#          sw $t0, ($sp) # IntegerLiteral at 31.15	 
          # EXIT NODE # IntegerLiteral at 31.15		 
        # EXIT NODE # LocalVarDecl at 31.11	
        # ENTER NODE # While at 31.2		 
456#        j while_enter_66 # While at 31.2	
460:        while_top_66: # While at 31.2		
          # ENTER NODE # Block at 31.2 
            # ENTER NODE # Block at 31.30 	 
              # ENTER NODE # LocalVarDecl at 32.10	 	
                # ENTER NODE # IdentifierExp at 32.17		
460#                lw $t0, 8($sp) # IdentifierExp at 32.17 		
464#                subu $sp, $sp, 8 # IdentifierExp at 32.17 	 
468#                sw $s5, 4($sp) # IdentifierExp at 32.17			
472#                sw $t0, ($sp) # IdentifierExp at 32.17		 
                # EXIT NODE # IdentifierExp at 32.17			
              # EXIT NODE # LocalVarDecl at 32.10 	 
              # ENTER NODE # Assign at 33.14	 	
                # ENTER NODE # Plus at 33.24 	 
                  # ENTER NODE # IdentifierExp at 33.16			
476#                  lw $t0, 16($sp) # IdentifierExp at 33.16	 
480#                  subu $sp, $sp, 8 # IdentifierExp at 33.16		 
484#                  sw $s5, 4($sp) # IdentifierExp at 33.16	 	
488#                  sw $t0, ($sp) # IdentifierExp at 33.16		
                  # EXIT NODE # IdentifierExp at 33.16	 
                  # ENTER NODE # IdentifierExp at 33.26  	
492#                  lw $t0, 32($sp) # IdentifierExp at 33.26   
496#                  subu $sp, $sp, 8 # IdentifierExp at 33.26  
500#                  sw $s5, 4($sp) # IdentifierExp at 33.26   
504#                  sw $t0, ($sp) # IdentifierExp at 33.26	
                  # EXIT NODE # IdentifierExp at 33.26   
508#                lw $t0, ($sp) # Plus at 33.24  
512#                lw $t1, 8($sp) # Plus at 33.24	 	
516#                addu $t0, $t0, $t1 # Plus at 33.24	 	
520#                addu $sp, $sp, 8 # Plus at 33.24 		
524#                sw $t0, ($sp) # Plus at 33.24  	
                # EXIT NODE # Plus at 33.24   
528#              lw $t0, ($sp) # Assign at 33.14 
532#              sw $t0, 24($sp) # Assign at 33.14		
536#              addu $sp, $sp, 8 # Assign at 33.14  
              # EXIT NODE # Assign at 33.14		 
              # ENTER NODE # Assign at 34.11 
                # ENTER NODE # IdentifierExp at 34.13  	
540#                lw $t0, 0($sp) # IdentifierExp at 34.13	 	
544#                subu $sp, $sp, 8 # IdentifierExp at 34.13  	
548#                sw $s5, 4($sp) # IdentifierExp at 34.13	 	
552#                sw $t0, ($sp) # IdentifierExp at 34.13			
                # EXIT NODE # IdentifierExp at 34.13	 
556#              lw $t0, ($sp) # Assign at 34.11			
560#              sw $t0, 32($sp) # Assign at 34.11	 	
564#              addu $sp, $sp, 8 # Assign at 34.11	  
              # EXIT NODE # Assign at 34.11  	
568#            addu $sp, 8 # Block at 31.30  
            # EXIT NODE # Block at 31.30		 
            # ENTER NODE # Assign at 31.25  
              # ENTER NODE # Plus at 31.26  
                # ENTER NODE # IdentifierExp at 31.25 		
572#                lw $t0, 0($sp) # IdentifierExp at 31.25  
576#                subu $sp, $sp, 8 # IdentifierExp at 31.25	
580#                sw $s5, 4($sp) # IdentifierExp at 31.25 	
584#                sw $t0, ($sp) # IdentifierExp at 31.25	 
                # EXIT NODE # IdentifierExp at 31.25 
                # ENTER NODE # IntegerLiteral at 31.26	 
588#                subu $sp, $sp, 8 # IntegerLiteral at 31.26	
592#                sw $s5, 4($sp) # IntegerLiteral at 31.26		 
596#                li $t0, 1 # IntegerLiteral at 31.26		 
600#                sw $t0, ($sp) # IntegerLiteral at 31.26  	
                # EXIT NODE # IntegerLiteral at 31.26	  
604#              lw $t0, ($sp) # Plus at 31.26 		
608#              lw $t1, 8($sp) # Plus at 31.26 
612#              addu $t0, $t0, $t1 # Plus at 31.26	 
616#              addu $sp, $sp, 8 # Plus at 31.26 		
620#              sw $t0, ($sp) # Plus at 31.26 	 
              # EXIT NODE # Plus at 31.26  
624#            lw $t0, ($sp) # Assign at 31.25			
628#            sw $t0, 8($sp) # Assign at 31.25 
632#            addu $sp, $sp, 8 # Assign at 31.25   
            # EXIT NODE # Assign at 31.25  	
          # EXIT NODE # Block at 31.2  	
636:        while_enter_66: # While at 31.2  	
          # ENTER NODE # LessThan at 31.20 		
            # ENTER NODE # IdentifierExp at 31.18	 
636#            lw $t0, 0($sp) # IdentifierExp at 31.18 	 
640#            subu $sp, $sp, 8 # IdentifierExp at 31.18 	
644#            sw $s5, 4($sp) # IdentifierExp at 31.18	 
648#            sw $t0, ($sp) # IdentifierExp at 31.18	 
            # EXIT NODE # IdentifierExp at 31.18 	 
            # ENTER NODE # IdentifierExp at 31.22	
652#            lw $t0, 40($sp) # IdentifierExp at 31.22		 
656#            subu $sp, $sp, 8 # IdentifierExp at 31.22   
660#            sw $s5, 4($sp) # IdentifierExp at 31.22 
664#            sw $t0, ($sp) # IdentifierExp at 31.22			
            # EXIT NODE # IdentifierExp at 31.22		
668#          lw $t0, ($sp) # LessThan at 31.20 
672#          lw $t1, 8($sp) # LessThan at 31.20 	 
676#          slt $t0, $t1, $t0 # LessThan at 31.20		 
680#          addu $sp, $sp, 12 # LessThan at 31.20 	 
684#          sw $t0, ($sp) # LessThan at 31.20 		
          # EXIT NODE # LessThan at 31.20 		
688#        lw $t0, ($sp) # While at 31.2   
692#        addu $sp, $sp, 4 # While at 31.2	 
696#        bne $t0, $zero, while_top_66 # While at 31.2	 	
700:        while_exit_66: # While at 31.2	
        # EXIT NODE # While at 31.2 
700#      addu $sp, 8 # Block at 31.2   
      # EXIT NODE # Block at 31.2  	
      # ENTER NODE # IdentifierExp at 36.9 		
704#      lw $t0, 0($sp) # IdentifierExp at 36.9	 
708#      subu $sp, $sp, 8 # IdentifierExp at 36.9 
712#      sw $s5, 4($sp) # IdentifierExp at 36.9 
716#      sw $t0, ($sp) # IdentifierExp at 36.9 
      # EXIT NODE # IdentifierExp at 36.9   
720#    lw $ra, 28($sp) # MethodDeclNonVoid at 28.16	 	
724#    lw $s2, 24($sp) # MethodDeclNonVoid at 28.16	 	
728#    lw $t0, ($sp) # MethodDeclNonVoid at 28.16	 
732#    sw $t0, 36($sp) # MethodDeclNonVoid at 28.16		 
736#    sw $s5, 40($sp) # MethodDeclNonVoid at 28.16		 
740#    addu $sp, $sp, 36 # MethodDeclNonVoid at 28.16	 
744#    jr $ra # MethodDeclNonVoid at 28.16		 
      # ENTER NODE # MethodDeclNonVoid at 28.16	  
      # EXIT NODE # Program at 4.1	
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
748:readLine:
	
748#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
752#	sw $ra, 4($sp) # save $ra
756#	move $t1,$sp # save "original" sp

760:  doRead:

	# read the character
760#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
764#	subu $t2,$v0,13
768#	bne $t2,$zero,notReturnRL
772#	jal readLogicalChar
776#	subu $t2,$v0,10 # check for newline
780#	beq $t2,$zero,foundNewLine
784#	sw $v0,lastCharRead # push back character into queue
788#	j foundNewLine # go process the line

792:  notReturnRL:

	# at this point, $v0 has our character

792#	subu $t0,$v0,10
796#	beq $t0,$zero,foundNewLine
800#	blt $v0,$zero,foundEof
801##...slt $at,$v0,$zero
805##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
808#	subu $sp,$sp,4
812#	sw $v0,($sp)

	# loop back up to get next character
816#	j doRead

820:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
820#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
824#	sw $zero,8($sp) # return-value: null
828#	j rlReturn # return

832:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
832#	subu $t0,$t1,$sp # number of chars we read (times 4)
836#	srl $s6,$t0,2 # number of words on stack with chars
840#	subu $sp,$sp,4 # push char-count ...
844#	sw $s6,($sp) # ... onto stack
848#	addu $t2,$t0,5 # GC tag, incl. for count-word
852#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
856#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
860#	srl $s6,$s6,2 # data words in object
864#	move $s7,$zero # # object words in object
868#	jal newObject # allocate space
	
	# store header words
872#	la $t0,CLASS_String
876#	sw $t0,-12($s7) # store class tag (String) into object
880#	lw $t2,4($sp) # char-count
884#	sll $t1,$t2,2 # 4 times number of chars
888#	subu $t2,$zero,$t2 # negative of char-count
892#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
896#	lw $t0,-8($s7) # data words in object
900#	sll $t0,$t0,2 # data bytes in object
904#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
908#	subu $t0,$t0,$t2 # place to store last character (plus 9)
912#	addu $sp,$sp,8 # pop redundant object-pointer and count
916#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

920#	beq $sp,$t1,doneCharCopy
924:  charCopyLoop:
924#	lw $t2,($sp)
928#	sb $t2,-9($t0)
932#	addu $sp,$sp,4
936#	subu $t0,$t0,1
940#	bne $sp,$t1,charCopyLoop
944:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
944#	sw $s7,8($sp)
	
948:  rlReturn:
	# restore return address and return
948#	lw $ra,4($sp) # restore return address, ...
952#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
956#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
960:readInt:

	# save $ra by pushing onto stack
960#	subu $sp,$sp,4
964#	sw $ra,($sp)

968:  riSkipWhiteLoop:
	# read a character
968#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
972#	subu $t0,$v0,32
976#	bgt $t0,$zero,nonWhite
977##...slt $at,$zero,$t0
981##...bne $at,$zero,$+44
984#	beq $t0,$zero,riSkipWhiteLoop # start over if space
988#	subu $t0,$v0,10
992#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
996#	subu $t0,$v0,9
1000#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1004#	subu $t0,$v0,13
1008#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1012#	subu $t0,$v0,12
1016#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1020#	j badIntegerFormat # illegal integer char: abort program

1024:  nonWhite:
1024#	subu $t0,$v0,'-'
1028#	li $t4,1 # final multiplier
1032#	bne $t0,$zero,helpReadInt # go read
1036#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1040#	jal readLogicalChar

1044:  helpReadInt:
1044#	li $t2,10
1048#	subu $t1,$v0,'0' # convert digit to 0-9 value
1052#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1053##...sltu $at,$t1,$t2
1057##...beq $at,$zero,$+2080
1060#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1064:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1064#	jal readLogicalChar # read next character
1068#	subu $t1,$v0,'0' # convert digit to 0-9 value
1072#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1073##...sltu $at,$t1,$t2
1077##...beq $at,$zero,$+20

1080#	mul $t3,$t3,$t2 # multiply old value by 10
1081##...mult $t3,$t2
1085##...mflo $t3
1088#	addu $t3,$t3,$t1 # add in value of new digit
1092#	j digitLoop

1096:  doneDigitLoop:

	# "push back" unused character into queue
1096#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1100#	lw $ra,($sp)
1104#	mult $t3,$t4 # multiply to account for poss. minus sign
1108#	mflo $t3
1112#	sw $t3,($sp) # result
1116#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1120#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1124:readChar:

	# save $ra by pushing onto stack
1124#	subu $sp,$sp,4
1128#	sw $ra,($sp)

  	# read the character
1132#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1136#	lw $ra,($sp)
1140#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1144#	sw $v0,($sp)

	# return
1148#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1152:printStr:
	# check for null, printing "(null)", if so
1152#	lw $t0,($sp)
1156#	bne $t0,$zero,psNotNull

	# print "(null)"
1160#	la $a0,nullStr
1164#	li $v0,4
1168#	syscall
1172#	j donePrintStr
	
1176:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1176#	subu $t0,$t0,8
1180#	lw $t1,($t0) # word just beyond end of string
1184#	sll $t1,$t1,2
1188#	subu $t1,$t0,$t1 # first word in string
1192#	lw $t0,4($t0) # negative of string-length
1196#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1200#	beq $t0,$t1,donePrintStr
1204:  psLoop:
1204#	lb $a0,($t1) # next byte
1208#	li $v0,11 # code for printing char
1212#        syscall # print the char
1216#	addu $t1,$t1,1 # go to next char
1220#	blt $t1,$t0,psLoop
1221##...slt $at,$t1,$t0
1225##...bne $at,$zero,$-20

1228:  donePrintStr:
	# pop stack and return
1228#	addu $sp,$sp,8
1232#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1236:printInt:
	# pop value off stack, along with 'this'
1236#	lw $a0,($sp)
1240#	addu $sp,$sp,12

	# print it
1244#	li $v0,1 # code for print-int
1248#	syscall

	# return
1252#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1256:printBool:
	# pop value off stack, along with 'this'
1256#	lw $t0,($sp)
1260#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1264#	la $a0,falseString
1268#	beq $t0,$zero,skipPB
1272#	la $a0,trueString
1276:  skipPB:
1276#	li $v0,4 # code for print-string
1280#	syscall

	# return
1284#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1288:substring:

	# save $ra by pushing onto stack
1288#	subu $sp,$sp,4
1292#	sw $ra,($sp)

	# get string value off stack, test for null
1296#	lw $t0,20($sp)
1300#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1304#	lw $t0,-4($t0) # negative of string length
1308#	subu $t0,$zero,$t0 # string length
1312#	lw $t1,4($sp) # k
1316#	lw $t2,12($sp) # n
1320#	bgt $zero,$t2,strIndexOutOfBounds
1321##...slt $at,$t2,$zero
1325##...bne $at,$zero,$+1780
1328#	bgt $t2,$t1,strIndexOutOfBounds
1329##...slt $at,$t1,$t2
1333##...bne $at,$zero,$+1772
1336#	bgt $t1,$t0,strIndexOutOfBounds
1337##...slt $at,$t0,$t1
1341##...bne $at,$zero,$+1764

	# allocate memory
1344#	subu $s6,$t1,$t2 # # chars in target-string
1348#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1352#	srl $s6,$s6,2 # convert bytes-count to word-count
1356#	move $s7,$zero # (no object-bytes in string)
1360#	jal newObject

	# store "String" tag in object-type field
1364#	la $t0,CLASS_String
1368#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1372#	lw $t1,8($sp) # k
1376#	lw $t2,16($sp) # n
1380#	subu $t0,$t2,$t1 # value to store
1384#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1388#	lw $t3,24($sp) # source string pointer
1392#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
1396#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
1400#	lw $t4,-8($t3) # # data words in source string
1404#	sll $t4,$t4,2 # # data bytes in source string
1408#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1412#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1416#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1420#	lw $t2,-8($s7) # # data words in target string
1424#	sll $t2,$t2,2 # # data bytes in target string
1428#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
1432:  subCopyLoopzz:
1432#	lb $t4,-8($t3)
1436#	sb $t4,-8($t2)
1440#	addu $t2,$t2,1
1444#	addu $t3,$t3,1
1448#	blt $t3,$t1,subCopyLoopzz
1449##...slt $at,$t3,$t1
1453##...bne $at,$zero,$-20
	
1456:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1456#	lw $ra,4($sp) # restore $ra
1460#	addu $sp,$sp,24 # pop stack
	
	# return
1464#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1468:length:

	# get string pointer
1468#	lw $t0,($sp)
	
	# grow stack
1472#	subu $sp,$sp,4

	# store GC tag
1476#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1480#	lw $t0,-4($t0) # -length
1484#	subu $t0,$zero,$t0
1488#	sw $t0,($sp) #store length

	# return
1492#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
1496:concat:
 	# save $ra by pushing onto stack
1496#	subu $sp,$sp,4
1500#	sw $ra($sp)

	# get string pointers and check parameter for null
1504#	lw $t0,4($sp)
1508#	beq $t0,$zero,nullPtrException
1512#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
1516#	lw $t0,-4($t0) # negative size of second object
1520#	lw $t1,-4($t1) # negative size of first object
1524#	addu $s6,$t0,$t1 # sum of negative sizes
1528#	sra $s6,$s6,2 # negative word-size of char part
1532#	subu $s6,$zero,$s6 # word size of char part
1536#	addu $s6,$s6,1 # data word size, including v-table word
1540#	move $s7,$zero
1544#	jal newObject

	# store "String" tag in object-type field
1548#	la $t0,CLASS_String
1552#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
1556#	lw $ra,4($sp) # return address
1560#	lw $t0,8($sp) # second object
1564#	lw $t1,12($sp) # first object
1568#	addu $sp,$sp,12 # pop
1572#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
1576#	lw $t2,-4($t0) # negative length of second object
1580#	lw $t3,-4($t1) # negative length of first object
1584#	addu $t4,$t2,$t3 # sum of negative lengths
1588#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
1592#	lw $t4,-8($t1) # # data words in first string
1596#	sll $t4,$t4,2 # # data bytes in first string
1600#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1604#	lw $t4,-8($s7) # # data words in new string
1608#	sll $t4,$t4,2 # # data bytes in new string
1612#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1616#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1620#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
1624:  concatLoop1zz:
1624#	lb $t4,-8($t1)
1628#	sb $t4,-8($s7)
1632#	addu $s7,$s7,1
1636#	addu $t1,$t1,1
1640#	blt $t1,$t3,concatLoop1zz
1641##...slt $at,$t1,$t3
1645##...bne $at,$zero,$-20
1648:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1648#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
1652#	lw $t4,-8($t0) # # data words in second string
1656#	sll $t4,$t4,2 # # data bytes in second string
1660#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1664#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
1668:  concatLoop2zz:
1668#	lb $t4,-8($t1)
1672#	sb $t4,-8($s7)
1676#	addu $s7,$s7,1
1680#	addu $t1,$t1,1
1684#	blt $t1,$t3,concatLoop2zz
1685##...slt $at,$t1,$t3
1689##...bne $at,$zero,$-20
1692:  doneConcatLoop2zz:
 
1692:  concatRtnzz:
	# return
1692#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
1696:charAt:
	# get string
1696#	lw $t0,8($sp)

	# check that index is in bounds
1700#	lw $t1,-4($t0) # negative of # data words in string
1704#	subu $t3,$zero,$t1 # # chars in string
1708#	lw $t2,($sp) # index
1712#	bgeu $t2,$t3,strIndexOutOfBounds
1713##...sltu $at,$t2,$t3
1717##...beq $at,$zero,$+1388

	# access element
1720#	lw $t1,-8($t0) # # data words in object
1724#	sll $t1,$t1,2 # - byte-offset from end of chars
1728#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
1732#	addu $t0,$t0,$t1 # - address of our char, offset by 8
1736#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
1740#	addu $sp,$sp,4
1744#	sw $t0,($sp)
1748#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
1752#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
1756:intToString:

	# save return address on stack; allocate space for dummy GC tag
1756#	subu $sp,$sp,8
1760#	sw $ra,4($sp)

	# save current sp
1764#	move $t0,$sp

	# move constant 10 into $t3
1768#	li $t3,10

	# get argument, negate if negative
1772#	lw $t1,8($sp)
1776#	bge $t1,$zero,itsNonNegLoop
1777##...slt $at,$t1,$zero
1781##...beq $at,$zero,$+8
1784#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
1788:  itsNonNegLoop:
1788#	divu $t1,$t3
1792#	mflo $t1 # quotient
1796#	mfhi $t4 # remainder
1800#	addu $t4,$t4,'0' # turn remainder into digit
1804#	subu $sp,$sp,4
1808#	sw $t4,($sp) # push digit onto stack
1812#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
1816#	lw $t4,8($t0)
1820#	bge $t4,$zero,itsSkipNeg
1821##...slt $at,$t4,$zero
1825##...beq $at,$zero,$+16
1828#	li $t4,'-'
1832#	subu $sp,$sp,4
1836#	sw $t4,($sp)
1840:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
1840#	subu $s6,$t0,$sp
1844#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
1848#	sw $t3,($t0)
1852#	srl $s6,$s6,2
1856#	subu $sp,$sp,4
1860#	sw $s6,($sp)
	
	# allocate memory
1864#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
1868#	srl $s6,$s6,2
1872#	move $s7,$zero # no "object" words in object
1876#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
1880#	lw $t0,4($sp)
1884#	addu $sp,$sp,8

	# store "String" tag into class field
1888#	subu $s7,$s7,8 # address of header-1 word
1892#	la $t1,CLASS_String
1896#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
1900#	subu $t0,$zero,$t0
1904#	sw $t0,4($s7)

1908#	lw $t1,($s7) # number of data words in string
1912#	sll $t1,$t1,2 # number data bytes in string
1916#	subu $t1,$s7,$t1 # first location to store chars in string
1920#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
1924:  itsLoop:
1924#	lw $t2,($sp)
1928#	addu $sp,$sp,4
1932#	sb $t2,($t1)
1936#	addu $t1,$t1,1
1940#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
1944#	lw $ra,4($sp)
1948#	addu $sp,$sp,16
1952#	addu $t0,$t0,15
1956#	and $t0,$t0,0xfffffffc
1957##...lui $at,65535
1961##...ori $at,$at,0xfffc
1965##...and $t0,$t0,$at
1968#	sw $t0,($sp)
1972#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
1976:intToChar:
	# save return address
1976#	subu $sp,$sp,4
1980#	sw $ra,($sp)

	# allocate object
1984#	li $s6,2
1988#	move $s7,$zero
1992#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
1996#	lw $ra,4($sp)
2000#	lw $t1,8($sp)
2004#	addu $sp,$sp,16

	# store "String" tag into class field
2008#	la $t0,CLASS_String
2012#	sw $t0,-12($s7)

	# store data in string
2016#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2020#	li $t0,-1
2024#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2028#	sw $s7,($sp)

	# return
2032#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2036:compareTo:
	# get string pointers and check parameter for null
2036#	lw $t0,($sp) # second string
2040#	beq $t0,$zero,nullPtrException
2044#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2048#	lw $t2,-4($t0) # negative length of second string
2052#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2056#	slt $t4,$t3,$t2
2060#	slt $t5,$t2,$t3
2064#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2068#	lw $t2,-8($t0) # # data words in second string
2072#	lw $t3,-8($t1) # # data words in first string
2076#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2080#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2084#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2088#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2092#	beq $zero,$t5,skipStrCmpLenzz
2096#	move $t2,$t3
2100:  skipStrCmpLenzz:
2100#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2104:  cmpLoopzz:
2104#	lw $t3,-8($t1) # word from str2
2108#	lw $t4,-8($t0) # word from str1
2112#	bne $t3,$t4,cmpNotEqualzz
2116#	addu $t1,$t1,4
2120#	addu $t0,$t0,4
2124#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2128#	j cmpHitLimitzz

2132:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2132#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2136#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2140#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2144:  cmpHitLimitzz:
2144#	sw $t5,($sp) # store value
2148#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2152#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2156:readLogicalChar:

	# check if we already have a character
2156#	lw $v0,lastCharRead
2160#	li $t0,-2
2164#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2168#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2172#	jr $ra # return
	
2176:  doReadCh:
	# we need to actually read a character: read and return
2176#	li $v0,12 # use system call to read a character
2180#	syscall
2184#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2188:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2188#	blt $s7,$zero arraySizeOutOfBounds
2189##...slt $at,$s7,$zero
2193##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2196#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2200:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2200#	move $t3,$s6
2204#	bge $t3,$zero,newSkip
2205##...slt $at,$t3,$zero
2209##...beq $at,$zero,$+8
2212#	move $t3,$zero

2216:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2216#	addu $t0,$t3,$s7
2220#	sll $t0,$t0,2
2224#	addu $t0,$t0,8 # amount of memory needed
2228#	addu $t1,$t0,$s3
2232#	bgtu $t1,$s4,doGC
2233##...sltu $at,$s4,$t1
2237##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2240#	move $t2,$s3
2244:  zeroObjLoop:
2244#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2248#	addu $s3,4
2252#	bltu $s3,$t1,zeroObjLoop
2253##...sltu $at,$s3,$t1
2257##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2260#	sll $t0,$s7,2    # number of post-header bytes
2264#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2268#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2272#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2276#	move $s7,$t0
2280#	subu $sp,$sp,4
2284#	sw $t0,($sp)

2288#	jr $ra
	
2292:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2292#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2296#	subu $sp,$sp,4
2300#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2304#	lw $t0,cur_seg
2308#	move $t7,$s4
2312#	la $t6,seg1_start
2313##...lui $t6,16
2317##...addiu $t6,$t6,3608
2320#	la $s3,seg0_start
2324#	la $s4,seg0_end
2325##...lui $s4,16
2329##...addiu $s4,$s4,3608
2332#	sw $zero,cur_seg
2336#	bne $t0,$zero,skipGc1
2340#	la $t6,seg0_start
2344#	la $s3,seg1_start
2345##...lui $s3,16
2349##...addiu $s3,$s3,3608
2352#	la $s4,seg1_end
2353##...lui $s4,32
2357##...addiu $s4,$s4,3608
2360#	sw $s5,cur_seg
2364:  skipGc1:
2364#	li $t5,-2
2368#	lw $t0,stack_bottom
2372#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2376:  gcStackCopyLoop:
2376#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2380#	sll $t2,$t1,31 # zero iff low bit was zero
2384#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2388#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2392#	bleu $t1,$t6,gcTestIterDone1
2393##...sltu $at,$t6,$t1
2397##...beq $at,$zero,$+148
2400#	bgtu $t1,$t7,gcTestIterDone1
2401##...sltu $at,$t7,$t1
2405##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2408#	lw $t2,-8($t1) # possible forwarding tag
2412#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
2416#	lw $t2,-4($t1) # forwarding pointer: object's new address
2420#	sw $t2,4($t0) # update stack value
2424#	j gcTestIterDone1 # do next iteration

2428:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
2428#	bge $t2,$zero,gcSkip2
2429##...slt $at,$t2,$zero
2433##...beq $at,$zero,$+8
2436#	move $t2,$zero # set to zero if -1 (number of data words)

2440:  gcSkip2:
2440#	sll $t2,$t2,2
2444#	addu $t2,$t2,8
2448#	subu $t4,$t1,$t2 # address of first word of source
2452#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2456#	bge $t3,$zero,gcH2Neg1
2457##...slt $at,$t3,$zero
2461##...beq $at,$zero,$+8
2464#	move $t3,$zero
2468:  gcH2Neg1:
2468#	sll $t3,$t3,2
2472#	addu $t3,$t3,$t1 # address one word past last word of source

2476#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2480#	lw $s0,($t4)
2484#	lw $s1,-8($t1)
2488#	sw $s1,($t4)
2492#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
2496:  gCinnerCopy1:
2496#	lw $s0,($t4)
2500#	sw $s0,($s3)
2504#	addu $t4,$t4,4
2508#	addu $s3,$s3,4
2512#	bltu $t4,$t3,gCinnerCopy1
2513##...sltu $at,$t4,$t3
2517##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2520#	sw $t5,-8($t1) # -2 in first header-slot
2524#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
2528#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
2532#	j gcTestIterDone1

2536:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
2536#	subu $t0,$t0,$t1
2540#	subu $t0,$t0,3

2544:  gcTestIterDone1:
2544#	bgeu $t0,$sp,gcStackCopyLoop
2545##...sltu $at,$t0,$sp
2549##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
2552#	lw $t1,cur_seg
2556#	la $t0,seg0_start
2560#	beq $t1,$zero,gcSkip4
2564#	la $t0,seg1_start
2565##...lui $t0,16
2569##...addiu $t0,$t0,3608

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

2572:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
2572#	bgeu $t0,$s3,gcFinishUp
2573##...sltu $at,$t0,$s3
2577##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

2580:  gcHeapCopyLoop:
	# check if we have a data array
2580#	lw $t1,($t0) # first header word for current object
2584#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
2585##...slt $at,$t1,$zero
2589##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
2592#	lw $t1,4($t0) # data words
2596#	addu $t1,$t1,2 # add in # header words
2600#	sll $t1,$t1,2 # convert to byte-count
2604#	addu $t0,$t0,$t1 # skip over object
2608#	j gcTestIterDone2 # go do next object, if any

2612:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
2612#	sll $t2,$t1,2 # # data bytes
2616#	addu $t2,$t2,8 # to skip header word
2620#	addu $t2,$t0,$t2 # pointer to new object
2624#	lw $t3,-8($t2) # word to swap
2628#	sw $t1,-8($t2) # store header word
2632#	sw $t3,($t0) # restore first word of object

2636#	lw $t3,-4($t2) # # object words (negative treated as zero)
2640#	bge $t3,$zero,gcH2Neg2
2641##...slt $at,$t3,$zero
2645##...beq $at,$zero,$+8
2648#	move $t3,$zero
2652:  gcH2Neg2:
2652#	sll $t3,$t3,2 # # object bytes
2656#	move $t0,$t2 # address of first pointer in object
2660#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
2664#	beq $t0,$s1,gcTestIterDone2
	
2668:  gcNextPointerInObject:
	# get pointer from object
2668#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
2672#	bleu $t1,$t6,gcGoNextPointerSlot
2673##...sltu $at,$t6,$t1
2677##...beq $at,$zero,$+136
2680#	bgtu $t1,$t7,gcGoNextPointerSlot
2681##...sltu $at,$t7,$t1
2685##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2688#	lw $t8,-8($t1) # possible forwarding tag
2692#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
2696#	lw $t8,-4($t1) # forwarding pointer: object's new address
2700#	sw $t8,($t0) # update pointer in object
2704#	j gcGoNextPointerSlot # do next iteration

2708:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
2708#	bge $t8,$zero,gcSkip5
2709##...slt $at,$t8,$zero
2713##...beq $at,$zero,$+8
2716#	move $t8,$zero # set to zero if -1

2720:  gcSkip5:
2720#	sll $t8,$t8,2
2724#	addu $t8,$t8,8
2728#	subu $t4,$t1,$t8 # address of first word of source
2732#	lw $t3,-4($t1)
2736#	bge $t3,$zero,gcNoNeg
2737##...slt $at,$t3,$zero
2741##...beq $at,$zero,$+8
2744#	move $t3,$zero
2748:  gcNoNeg:
2748#	sll $t3,$t3,2
2752#	addu $t3,$t3,$t1 # address one word past last word of source

2756#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
2760#	lw $s0,($t4)
2764#	lw $t9,-8($t1)
2768#	sw $t9,($t4)
2772#	sw $s0,-8($t1)

	# copy all source bytes to the target
2776:  gCinnerCopy2:
2776#	lw $s0,($t4)
2780#	sw $s0,($s3)
2784#	addu $t4,$t4,4
2788#	addu $s3,$s3,4
2792#	bltu $t4,$t3,gCinnerCopy2
2793##...sltu $at,$t4,$t3
2797##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2800#	sw $t5,-8($t1) # -2 in first header-slot
2804#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
2808#	sw $t8,($t0)

2812:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
2812#	addu $t0,$t0,4
2816#	bltu $t0,$s1,gcNextPointerInObject
2817##...sltu $at,$t0,$s1
2821##...bne $at,$zero,$-152

2824:  gcTestIterDone2:
2824#	bltu $t0,$s3,gcHeapCopyLoop
2825##...sltu $at,$t0,$s3
2829##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

2832:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
2832#	lw $s2,($sp)
2836#	addu $sp,$sp,4

	# mark us as having already GC'd
2840#	move $t5,$s5

	# go try and allocate again
2844#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
2848:vm_init:

	# mark bottom of stack
2848#	sw $sp,stack_bottom
2852#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
2856#	move $s2,$zero
2860#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
2864#	li $s5,5
2868#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

2872#	la $s3,seg0_start
2876#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
2880#	la $s4,seg0_end
2881##...lui $s4,16
2885##...addiu $s4,$s4,3608
2888#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
2892#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2896:divide:
	# get parameters; abort if divisor zero
2896#	lw $t0,($sp)
2900#	lw $t1,8($sp)
2904#	beq $t0,$zero,divByZeroError
	
	# perform division
2908#	div $t1,$t0
2912#	mflo $t0

	# store result, adjust stack and return
2916#	addu $sp,$sp,8 # adjust stack
2920#	sw $t0,($sp) # store result
2924#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2928:remainder:
	# get parameters; abort if divisor zero
2928#	lw $t0,($sp)
2932#	lw $t1,8($sp)
2936#	beq $t0,$zero,divByZeroError
	
	# perform division
2940#	div $t1,$t0
2944#	mfhi $t0

	# store result, adjust stack and return
2948#	addu $sp,$sp,8 # adjust stack
2952#	sw $t0,($sp) # store result
2956#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
2960:checkCast:
	# get object, allow immediately if null
2960#	lw $t2,($sp)
2964#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
2968#	lw $t3,-8($t2) # <= 0 if array
2972#	lw $t2,-12($t2) # vtable address (unless array)
2976#	bgt $t3,$zero,skipArrayCast
2977##...slt $at,$zero,$t3
2981##...bne $at,$zero,$+8
2984#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
2988:  skipArrayCast:
2988#	bge $t2,$t1,castException
2989##...slt $at,$t2,$t1
2993##...beq $at,$zero,$+152
2996#	blt $t2,$t0,castException
2997##...slt $at,$t2,$t0
3001##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3004:  checkCastReturn:	
3004#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3008:instanceOf:
	# get object, go return false if null
3008#	lw $t2,($sp)
3012#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3016#	lw $t3,-8($t2) # <= 0 if array
3020#	lw $t2,-12($t2) # vtable address (unless array)
3024#	bgt $t3,$zero,skipArrayInstanceOf
3025##...slt $at,$zero,$t3
3029##...bne $at,$zero,$+8
3032#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3036:  skipArrayInstanceOf:
3036#	sge $t0,$t2,$t0
3037##...slt $t0,$t2,$t0
3041##...xori $t0,$t0,0x1
3044#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3048#	and $t2,$t0,$t1
3052:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3052#	sw $t2,($sp)
3056#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3060:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3060#	li $v0,4 # syscall-code for print-string
3064#	syscall
3068:exit:
	# print termination message
3068#	li $v0,4
3072#	la $a0,exitString
3076#	syscall

	# terminate execution
3080#	li $v0,10 #syscall-code for "exit"
3084#	syscall

3088:outOfHeapMemory:
3088#	la $a0,heapMemoryMsg
3092#	j exitError
3096:divByZeroError:
3096#	la $a0,divByZeroMsg
3100#	j exitError
3104:strIndexOutOfBounds:
3104#	la $a0,strIndexOutOfBoundsMsg
3108#	j exitError
3112:arrayIndexOutOfBounds:
3112#	la $a0,arrayIndexOutOfBoundsMsg
3116#	j exitError
3120:arraySizeOutOfBounds:
3120#	la $a0,arraySizeOutOfBoundsMsg
3124#	j exitError
3128:nullPtrException:
3128#	la $a0,nullPtrExceptionMsg
3132#	j exitError
3136:badIntegerFormat:
3136#	la $a0,badIntegerFormatMsg
3140#	j exitError
3144:castException:
3144#	la $a0,castExceptionMsg
3148#	j exitError

############## data section ################
	.data
	.align 2

3300:cur_seg:
	.word 0

3304:lastCharRead:
	.word -2 # -2 => no buffered character

3308:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3335:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3358:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3393:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3427:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
3460:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
3491:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
3539:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
3560:gcMsg: 
      .asciiz "\nGC!\n"

3566:nullStr:
	.asciiz "null"
3571:trueString:
	.asciiz "true"
3576:falseString:
	.asciiz "false"
3582:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
3604:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

3608:seg0_start:
	.space 0x100000
1052184:seg0_end:
1052184:seg1_start:
	.space 0x100000
2100760:seg1_end:



