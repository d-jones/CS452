 .data # Program at 1.1 		
  .byte 105 # StringLiteral at 4.18   
  .byte 32 # StringLiteral at 4.18 	 
  .byte 61 # StringLiteral at 4.18		
  .byte 32 # StringLiteral at 4.18 	 
  .word CLASS_String # StringLiteral at 4.18			
  .word 2 # StringLiteral at 4.18	
  .word -4 # StringLiteral at 4.18			
2708:strLit_3: # StringLiteral at 4.18 	 
  .byte 10 # StringLiteral at 6.18 
  .byte 0 # StringLiteral at 6.18	  
  .byte 0 # StringLiteral at 6.18 		
  .byte 0 # StringLiteral at 6.18	 	
  .word CLASS_String # StringLiteral at 6.18  	
  .word 2 # StringLiteral at 6.18		
  .word -1 # StringLiteral at 6.18		
2724:strLit_11: # StringLiteral at 6.18 	 
  .byte 105 # StringLiteral at 8.18			
  .byte 32 # StringLiteral at 8.18		 
  .byte 61 # StringLiteral at 8.18	 
  .byte 32 # StringLiteral at 8.18	 	
  .word CLASS_String # StringLiteral at 8.18		 
  .word 2 # StringLiteral at 8.18  
  .word -4 # StringLiteral at 8.18	 	
2740:strLit_20: # StringLiteral at 8.18 
  .byte 10 # StringLiteral at 10.18	 
  .byte 0 # StringLiteral at 10.18			
  .byte 0 # StringLiteral at 10.18 		
  .byte 0 # StringLiteral at 10.18 	
  .word CLASS_String # StringLiteral at 10.18			
  .word 2 # StringLiteral at 10.18 	 
  .word -1 # StringLiteral at 10.18 	
2756:strLit_28: # StringLiteral at 10.18 	
2756:CLASS_Object: # Program at 1.1			
2756:CLASS_String: # Program at 1.1  	
.text # Program at 1.1		
.global main # Program at 1.1	 
0:main: # Program at 1.1 
0#jal vm_init # Program at 1.1 
4#subu $sp, $sp, 4 # NewObject at 0.0		
8#sw $zero, ($sp) # NewObject at 0.0	
12#jal fcn_32_main # Call at 0.0			
16#li $v0, 10 # Program at 1.1			
20#syscall # Program at 1.1 	
.globl fcn_32_main # MethodDeclVoid at 2.14	 
24:fcn_32_main: # MethodDeclVoid at 2.14 	 
24#subu $sp, $sp, 8 # MethodDeclVoid at 2.14  
28#sw $ra, 4($sp) # MethodDeclVoid at 2.14			
32#sw $s2, ($sp) # MethodDeclVoid at 2.14   
36#lw $s2, 4($sp) # MethodDeclVoid at 2.14 
40#subu $sp, $sp, 8 # IntegerLiteral at 3.11	 	
44#sw $s5, 4($sp) # IntegerLiteral at 3.11		
48#li $t0, 0 # IntegerLiteral at 3.11 	 
52#sw $t0, ($sp) # IntegerLiteral at 3.11   
56#subu $sp, $sp, 4 # Super at 4.9		 
60#sw $s2, ($sp) # Super at 4.9  
64#subu $sp, $sp, 4 # StringLiteral at 4.18 	
68#la $t0, strLit_3 # StringLiteral at 4.18		 
72#sw $t0, ($sp) # StringLiteral at 4.18	  
76#jal printStr # Call at 4.9  
80#subu $sp, $sp, 4 # Super at 5.9  
84#sw $s2, ($sp) # Super at 5.9  
88#lw $t0, 4($sp) # IdentifierExp at 5.18		
92#subu $sp, $sp, 8 # IdentifierExp at 5.18	
96#sw $s5, 4($sp) # IdentifierExp at 5.18   
100#sw $t0, ($sp) # IdentifierExp at 5.18 	 
104#jal printInt # Call at 5.9		
108#subu $sp, $sp, 4 # Super at 6.9   
112#sw $s2, ($sp) # Super at 6.9			
116#subu $sp, $sp, 4 # StringLiteral at 6.18 
120#la $t0, strLit_11 # StringLiteral at 6.18			
124#sw $t0, ($sp) # StringLiteral at 6.18  
128#jal printStr # Call at 6.9  	
132#lw $t0, 0($sp) # IdentifierExp at 7.7   
136#subu $sp, $sp, 8 # IdentifierExp at 7.7 
140#sw $s5, 4($sp) # IdentifierExp at 7.7  
144#sw $t0, ($sp) # IdentifierExp at 7.7 		
148#subu $sp, $sp, 8 # IntegerLiteral at 7.11 	
152#sw $s5, 4($sp) # IntegerLiteral at 7.11		
156#li $t0, 1 # IntegerLiteral at 7.11	 	
160#sw $t0, ($sp) # IntegerLiteral at 7.11   
164#lw $t0, ($sp) # Plus at 7.9 	 
168#lw $t1, 8($sp) # Plus at 7.9  
172#addu $t0, $t0, $t1 # Plus at 7.9		 
176#addu $sp, $sp, 8 # Plus at 7.9		 
180#sw $t0, ($sp) # Plus at 7.9	
184#lw $t0, ($sp) # Assign at 7.5 		
188#sw $t0, 8($sp) # Assign at 7.5	  
192#addu $sp, $sp, 8 # Assign at 7.5 		
196#subu $sp, $sp, 4 # Super at 8.9	 
200#sw $s2, ($sp) # Super at 8.9	 
204#subu $sp, $sp, 4 # StringLiteral at 8.18 
208#la $t0, strLit_20 # StringLiteral at 8.18 		
212#sw $t0, ($sp) # StringLiteral at 8.18	 
216#jal printStr # Call at 8.9	  
220#subu $sp, $sp, 4 # Super at 9.9	 	
224#sw $s2, ($sp) # Super at 9.9  
228#lw $t0, 4($sp) # IdentifierExp at 9.18	  
232#subu $sp, $sp, 8 # IdentifierExp at 9.18	 
236#sw $s5, 4($sp) # IdentifierExp at 9.18			
240#sw $t0, ($sp) # IdentifierExp at 9.18			
244#jal printInt # Call at 9.9	  
248#subu $sp, $sp, 4 # Super at 10.9	 	
252#sw $s2, ($sp) # Super at 10.9		
256#subu $sp, $sp, 4 # StringLiteral at 10.18	 	
260#la $t0, strLit_28 # StringLiteral at 10.18	 
264#sw $t0, ($sp) # StringLiteral at 10.18	  
268#jal printStr # Call at 10.9	 	
272#lw $ra, 12($sp) # MethodDeclVoid at 2.14			
276#lw $s2, 4($sp) # MethodDeclVoid at 2.14		 
280#addu $sp, $sp, 20 # MethodDeclVoid at 2.14 	
284#jr $ra # MethodDeclVoid at 2.14	
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
288:readLine:
	
288#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
292#	sw $ra, 4($sp) # save $ra
296#	move $t1,$sp # save "original" sp

300:  doRead:

	# read the character
300#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
304#	subu $t2,$v0,13
308#	bne $t2,$zero,notReturnRL
312#	jal readLogicalChar
316#	subu $t2,$v0,10 # check for newline
320#	beq $t2,$zero,foundNewLine
324#	sw $v0,lastCharRead # push back character into queue
328#	j foundNewLine # go process the line

332:  notReturnRL:

	# at this point, $v0 has our character

332#	subu $t0,$v0,10
336#	beq $t0,$zero,foundNewLine
340#	blt $v0,$zero,foundEof
341##...slt $at,$v0,$zero
345##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
348#	subu $sp,$sp,4
352#	sw $v0,($sp)

	# loop back up to get next character
356#	j doRead

360:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
360#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
364#	sw $zero,8($sp) # return-value: null
368#	j rlReturn # return

372:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
372#	subu $t0,$t1,$sp # number of chars we read (times 4)
376#	srl $s6,$t0,2 # number of words on stack with chars
380#	subu $sp,$sp,4 # push char-count ...
384#	sw $s6,($sp) # ... onto stack
388#	addu $t2,$t0,5 # GC tag, incl. for count-word
392#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
396#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
400#	srl $s6,$s6,2 # data words in object
404#	move $s7,$zero # # object words in object
408#	jal newObject # allocate space
	
	# store header words
412#	la $t0,CLASS_String
416#	sw $t0,-12($s7) # store class tag (String) into object
420#	lw $t2,4($sp) # char-count
424#	sll $t1,$t2,2 # 4 times number of chars
428#	subu $t2,$zero,$t2 # negative of char-count
432#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
436#	lw $t0,-8($s7) # data words in object
440#	sll $t0,$t0,2 # data bytes in object
444#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
448#	subu $t0,$t0,$t2 # place to store last character (plus 9)
452#	addu $sp,$sp,8 # pop redundant object-pointer and count
456#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

460#	beq $sp,$t1,doneCharCopy
464:  charCopyLoop:
464#	lw $t2,($sp)
468#	sb $t2,-9($t0)
472#	addu $sp,$sp,4
476#	subu $t0,$t0,1
480#	bne $sp,$t1,charCopyLoop
484:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
484#	sw $s7,8($sp)
	
488:  rlReturn:
	# restore return address and return
488#	lw $ra,4($sp) # restore return address, ...
492#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
496#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
500:readInt:

	# save $ra by pushing onto stack
500#	subu $sp,$sp,4
504#	sw $ra,($sp)

508:  riSkipWhiteLoop:
	# read a character
508#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
512#	subu $t0,$v0,32
516#	bgt $t0,$zero,nonWhite
517##...slt $at,$zero,$t0
521##...bne $at,$zero,$+44
524#	beq $t0,$zero,riSkipWhiteLoop # start over if space
528#	subu $t0,$v0,10
532#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
536#	subu $t0,$v0,9
540#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
544#	subu $t0,$v0,13
548#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
552#	subu $t0,$v0,12
556#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
560#	j badIntegerFormat # illegal integer char: abort program

564:  nonWhite:
564#	subu $t0,$v0,'-'
568#	li $t4,1 # final multiplier
572#	bne $t0,$zero,helpReadInt # go read
576#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
580#	jal readLogicalChar

584:  helpReadInt:
584#	li $t2,10
588#	subu $t1,$v0,'0' # convert digit to 0-9 value
592#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
593##...sltu $at,$t1,$t2
597##...beq $at,$zero,$+2080
600#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

604:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

604#	jal readLogicalChar # read next character
608#	subu $t1,$v0,'0' # convert digit to 0-9 value
612#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
613##...sltu $at,$t1,$t2
617##...beq $at,$zero,$+20

620#	mul $t3,$t3,$t2 # multiply old value by 10
621##...mult $t3,$t2
625##...mflo $t3
628#	addu $t3,$t3,$t1 # add in value of new digit
632#	j digitLoop

636:  doneDigitLoop:

	# "push back" unused character into queue
636#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
640#	lw $ra,($sp)
644#	mult $t3,$t4 # multiply to account for poss. minus sign
648#	mflo $t3
652#	sw $t3,($sp) # result
656#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
660#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
664:readChar:

	# save $ra by pushing onto stack
664#	subu $sp,$sp,4
668#	sw $ra,($sp)

  	# read the character
672#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
676#	lw $ra,($sp)
680#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
684#	sw $v0,($sp)

	# return
688#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
692:printStr:
	# check for null, printing "(null)", if so
692#	lw $t0,($sp)
696#	bne $t0,$zero,psNotNull

	# print "(null)"
700#	la $a0,nullStr
704#	li $v0,4
708#	syscall
712#	j donePrintStr
	
716:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
716#	subu $t0,$t0,8
720#	lw $t1,($t0) # word just beyond end of string
724#	sll $t1,$t1,2
728#	subu $t1,$t0,$t1 # first word in string
732#	lw $t0,4($t0) # negative of string-length
736#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
740#	beq $t0,$t1,donePrintStr
744:  psLoop:
744#	lb $a0,($t1) # next byte
748#	li $v0,11 # code for printing char
752#        syscall # print the char
756#	addu $t1,$t1,1 # go to next char
760#	blt $t1,$t0,psLoop
761##...slt $at,$t1,$t0
765##...bne $at,$zero,$-20

768:  donePrintStr:
	# pop stack and return
768#	addu $sp,$sp,8
772#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
776:printInt:
	# pop value off stack, along with 'this'
776#	lw $a0,($sp)
780#	addu $sp,$sp,12

	# print it
784#	li $v0,1 # code for print-int
788#	syscall

	# return
792#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
796:printBool:
	# pop value off stack, along with 'this'
796#	lw $t0,($sp)
800#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
804#	la $a0,falseString
808#	beq $t0,$zero,skipPB
812#	la $a0,trueString
816:  skipPB:
816#	li $v0,4 # code for print-string
820#	syscall

	# return
824#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
828:substring:

	# save $ra by pushing onto stack
828#	subu $sp,$sp,4
832#	sw $ra,($sp)

	# get string value off stack, test for null
836#	lw $t0,20($sp)
840#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
844#	lw $t0,-4($t0) # negative of string length
848#	subu $t0,$zero,$t0 # string length
852#	lw $t1,4($sp) # k
856#	lw $t2,12($sp) # n
860#	bgt $zero,$t2,strIndexOutOfBounds
861##...slt $at,$t2,$zero
865##...bne $at,$zero,$+1780
868#	bgt $t2,$t1,strIndexOutOfBounds
869##...slt $at,$t1,$t2
873##...bne $at,$zero,$+1772
876#	bgt $t1,$t0,strIndexOutOfBounds
877##...slt $at,$t0,$t1
881##...bne $at,$zero,$+1764

	# allocate memory
884#	subu $s6,$t1,$t2 # # chars in target-string
888#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
892#	srl $s6,$s6,2 # convert bytes-count to word-count
896#	move $s7,$zero # (no object-bytes in string)
900#	jal newObject

	# store "String" tag in object-type field
904#	la $t0,CLASS_String
908#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
912#	lw $t1,8($sp) # k
916#	lw $t2,16($sp) # n
920#	subu $t0,$t2,$t1 # value to store
924#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
928#	lw $t3,24($sp) # source string pointer
932#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
936#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
940#	lw $t4,-8($t3) # # data words in source string
944#	sll $t4,$t4,2 # # data bytes in source string
948#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
952#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
956#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
960#	lw $t2,-8($s7) # # data words in target string
964#	sll $t2,$t2,2 # # data bytes in target string
968#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
972:  subCopyLoopzz:
972#	lb $t4,-8($t3)
976#	sb $t4,-8($t2)
980#	addu $t2,$t2,1
984#	addu $t3,$t3,1
988#	blt $t3,$t1,subCopyLoopzz
989##...slt $at,$t3,$t1
993##...bne $at,$zero,$-20
	
996:  doneSubCopyzz:
	# restore return address, store return value, pop stack
996#	lw $ra,4($sp) # restore $ra
1000#	addu $sp,$sp,24 # pop stack
	
	# return
1004#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1008:length:

	# get string pointer
1008#	lw $t0,($sp)
	
	# grow stack
1012#	subu $sp,$sp,4

	# store GC tag
1016#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1020#	lw $t0,-4($t0) # -length
1024#	subu $t0,$zero,$t0
1028#	sw $t0,($sp) #store length

	# return
1032#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
1036:concat:
 	# save $ra by pushing onto stack
1036#	subu $sp,$sp,4
1040#	sw $ra($sp)

	# get string pointers and check parameter for null
1044#	lw $t0,4($sp)
1048#	beq $t0,$zero,nullPtrException
1052#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
1056#	lw $t0,-4($t0) # negative size of second object
1060#	lw $t1,-4($t1) # negative size of first object
1064#	addu $s6,$t0,$t1 # sum of negative sizes
1068#	sra $s6,$s6,2 # negative word-size of char part
1072#	subu $s6,$zero,$s6 # word size of char part
1076#	addu $s6,$s6,1 # data word size, including v-table word
1080#	move $s7,$zero
1084#	jal newObject

	# store "String" tag in object-type field
1088#	la $t0,CLASS_String
1092#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
1096#	lw $ra,4($sp) # return address
1100#	lw $t0,8($sp) # second object
1104#	lw $t1,12($sp) # first object
1108#	addu $sp,$sp,12 # pop
1112#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
1116#	lw $t2,-4($t0) # negative length of second object
1120#	lw $t3,-4($t1) # negative length of first object
1124#	addu $t4,$t2,$t3 # sum of negative lengths
1128#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
1132#	lw $t4,-8($t1) # # data words in first string
1136#	sll $t4,$t4,2 # # data bytes in first string
1140#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1144#	lw $t4,-8($s7) # # data words in new string
1148#	sll $t4,$t4,2 # # data bytes in new string
1152#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1156#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1160#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
1164:  concatLoop1zz:
1164#	lb $t4,-8($t1)
1168#	sb $t4,-8($s7)
1172#	addu $s7,$s7,1
1176#	addu $t1,$t1,1
1180#	blt $t1,$t3,concatLoop1zz
1181##...slt $at,$t1,$t3
1185##...bne $at,$zero,$-20
1188:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1188#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
1192#	lw $t4,-8($t0) # # data words in second string
1196#	sll $t4,$t4,2 # # data bytes in second string
1200#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1204#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
1208:  concatLoop2zz:
1208#	lb $t4,-8($t1)
1212#	sb $t4,-8($s7)
1216#	addu $s7,$s7,1
1220#	addu $t1,$t1,1
1224#	blt $t1,$t3,concatLoop2zz
1225##...slt $at,$t1,$t3
1229##...bne $at,$zero,$-20
1232:  doneConcatLoop2zz:
 
1232:  concatRtnzz:
	# return
1232#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
1236:charAt:
	# get string
1236#	lw $t0,8($sp)

	# check that index is in bounds
1240#	lw $t1,-4($t0) # negative of # data words in string
1244#	subu $t3,$zero,$t1 # # chars in string
1248#	lw $t2,($sp) # index
1252#	bgeu $t2,$t3,strIndexOutOfBounds
1253##...sltu $at,$t2,$t3
1257##...beq $at,$zero,$+1388

	# access element
1260#	lw $t1,-8($t0) # # data words in object
1264#	sll $t1,$t1,2 # - byte-offset from end of chars
1268#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
1272#	addu $t0,$t0,$t1 # - address of our char, offset by 8
1276#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
1280#	addu $sp,$sp,4
1284#	sw $t0,($sp)
1288#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
1292#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
1296:intToString:

	# save return address on stack; allocate space for dummy GC tag
1296#	subu $sp,$sp,8
1300#	sw $ra,4($sp)

	# save current sp
1304#	move $t0,$sp

	# move constant 10 into $t3
1308#	li $t3,10

	# get argument, negate if negative
1312#	lw $t1,8($sp)
1316#	bge $t1,$zero,itsNonNegLoop
1317##...slt $at,$t1,$zero
1321##...beq $at,$zero,$+8
1324#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
1328:  itsNonNegLoop:
1328#	divu $t1,$t3
1332#	mflo $t1 # quotient
1336#	mfhi $t4 # remainder
1340#	addu $t4,$t4,'0' # turn remainder into digit
1344#	subu $sp,$sp,4
1348#	sw $t4,($sp) # push digit onto stack
1352#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
1356#	lw $t4,8($t0)
1360#	bge $t4,$zero,itsSkipNeg
1361##...slt $at,$t4,$zero
1365##...beq $at,$zero,$+16
1368#	li $t4,'-'
1372#	subu $sp,$sp,4
1376#	sw $t4,($sp)
1380:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
1380#	subu $s6,$t0,$sp
1384#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
1388#	sw $t3,($t0)
1392#	srl $s6,$s6,2
1396#	subu $sp,$sp,4
1400#	sw $s6,($sp)
	
	# allocate memory
1404#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
1408#	srl $s6,$s6,2
1412#	move $s7,$zero # no "object" words in object
1416#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
1420#	lw $t0,4($sp)
1424#	addu $sp,$sp,8

	# store "String" tag into class field
1428#	subu $s7,$s7,8 # address of header-1 word
1432#	la $t1,CLASS_String
1436#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
1440#	subu $t0,$zero,$t0
1444#	sw $t0,4($s7)

1448#	lw $t1,($s7) # number of data words in string
1452#	sll $t1,$t1,2 # number data bytes in string
1456#	subu $t1,$s7,$t1 # first location to store chars in string
1460#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
1464:  itsLoop:
1464#	lw $t2,($sp)
1468#	addu $sp,$sp,4
1472#	sb $t2,($t1)
1476#	addu $t1,$t1,1
1480#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
1484#	lw $ra,4($sp)
1488#	addu $sp,$sp,16
1492#	addu $t0,$t0,15
1496#	and $t0,$t0,0xfffffffc
1497##...lui $at,65535
1501##...ori $at,$at,0xfffc
1505##...and $t0,$t0,$at
1508#	sw $t0,($sp)
1512#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
1516:intToChar:
	# save return address
1516#	subu $sp,$sp,4
1520#	sw $ra,($sp)

	# allocate object
1524#	li $s6,2
1528#	move $s7,$zero
1532#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
1536#	lw $ra,4($sp)
1540#	lw $t1,8($sp)
1544#	addu $sp,$sp,16

	# store "String" tag into class field
1548#	la $t0,CLASS_String
1552#	sw $t0,-12($s7)

	# store data in string
1556#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
1560#	li $t0,-1
1564#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
1568#	sw $s7,($sp)

	# return
1572#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
1576:compareTo:
	# get string pointers and check parameter for null
1576#	lw $t0,($sp) # second string
1580#	beq $t0,$zero,nullPtrException
1584#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
1588#	lw $t2,-4($t0) # negative length of second string
1592#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
1596#	slt $t4,$t3,$t2
1600#	slt $t5,$t2,$t3
1604#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
1608#	lw $t2,-8($t0) # # data words in second string
1612#	lw $t3,-8($t1) # # data words in first string
1616#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
1620#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
1624#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
1628#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
1632#	beq $zero,$t5,skipStrCmpLenzz
1636#	move $t2,$t3
1640:  skipStrCmpLenzz:
1640#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
1644:  cmpLoopzz:
1644#	lw $t3,-8($t1) # word from str2
1648#	lw $t4,-8($t0) # word from str1
1652#	bne $t3,$t4,cmpNotEqualzz
1656#	addu $t1,$t1,4
1660#	addu $t0,$t0,4
1664#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
1668#	j cmpHitLimitzz

1672:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
1672#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
1676#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
1680#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
1684:  cmpHitLimitzz:
1684#	sw $t5,($sp) # store value
1688#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1692#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
1696:readLogicalChar:

	# check if we already have a character
1696#	lw $v0,lastCharRead
1700#	li $t0,-2
1704#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
1708#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
1712#	jr $ra # return
	
1716:  doReadCh:
	# we need to actually read a character: read and return
1716#	li $v0,12 # use system call to read a character
1720#	syscall
1724#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
1728:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
1728#	blt $s7,$zero arraySizeOutOfBounds
1729##...slt $at,$s7,$zero
1733##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
1736#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

1740:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
1740#	move $t3,$s6
1744#	bge $t3,$zero,newSkip
1745##...slt $at,$t3,$zero
1749##...beq $at,$zero,$+8
1752#	move $t3,$zero

1756:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
1756#	addu $t0,$t3,$s7
1760#	sll $t0,$t0,2
1764#	addu $t0,$t0,8 # amount of memory needed
1768#	addu $t1,$t0,$s3
1772#	bgtu $t1,$s4,doGC
1773##...sltu $at,$s4,$t1
1777##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
1780#	move $t2,$s3
1784:  zeroObjLoop:
1784#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

1788#	addu $s3,4
1792#	bltu $s3,$t1,zeroObjLoop
1793##...sltu $at,$s3,$t1
1797##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
1800#	sll $t0,$s7,2    # number of post-header bytes
1804#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
1808#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
1812#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
1816#	move $s7,$t0
1820#	subu $sp,$sp,4
1824#	sw $t0,($sp)

1828#	jr $ra
	
1832:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
1832#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
1836#	subu $sp,$sp,4
1840#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
1844#	lw $t0,cur_seg
1848#	move $t7,$s4
1852#	la $t6,seg1_start
1853##...lui $t6,16
1857##...addiu $t6,$t6,3064
1860#	la $s3,seg0_start
1864#	la $s4,seg0_end
1865##...lui $s4,16
1869##...addiu $s4,$s4,3064
1872#	sw $zero,cur_seg
1876#	bne $t0,$zero,skipGc1
1880#	la $t6,seg0_start
1884#	la $s3,seg1_start
1885##...lui $s3,16
1889##...addiu $s3,$s3,3064
1892#	la $s4,seg1_end
1893##...lui $s4,32
1897##...addiu $s4,$s4,3064
1900#	sw $s5,cur_seg
1904:  skipGc1:
1904#	li $t5,-2
1908#	lw $t0,stack_bottom
1912#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

1916:  gcStackCopyLoop:
1916#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
1920#	sll $t2,$t1,31 # zero iff low bit was zero
1924#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
1928#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
1932#	bleu $t1,$t6,gcTestIterDone1
1933##...sltu $at,$t6,$t1
1937##...beq $at,$zero,$+148
1940#	bgtu $t1,$t7,gcTestIterDone1
1941##...sltu $at,$t7,$t1
1945##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
1948#	lw $t2,-8($t1) # possible forwarding tag
1952#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
1956#	lw $t2,-4($t1) # forwarding pointer: object's new address
1960#	sw $t2,4($t0) # update stack value
1964#	j gcTestIterDone1 # do next iteration

1968:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
1968#	bge $t2,$zero,gcSkip2
1969##...slt $at,$t2,$zero
1973##...beq $at,$zero,$+8
1976#	move $t2,$zero # set to zero if -1 (number of data words)

1980:  gcSkip2:
1980#	sll $t2,$t2,2
1984#	addu $t2,$t2,8
1988#	subu $t4,$t1,$t2 # address of first word of source
1992#	lw $t3,-4($t1) # number of object words (negative treated as zero)
1996#	bge $t3,$zero,gcH2Neg1
1997##...slt $at,$t3,$zero
2001##...beq $at,$zero,$+8
2004#	move $t3,$zero
2008:  gcH2Neg1:
2008#	sll $t3,$t3,2
2012#	addu $t3,$t3,$t1 # address one word past last word of source

2016#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2020#	lw $s0,($t4)
2024#	lw $s1,-8($t1)
2028#	sw $s1,($t4)
2032#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
2036:  gCinnerCopy1:
2036#	lw $s0,($t4)
2040#	sw $s0,($s3)
2044#	addu $t4,$t4,4
2048#	addu $s3,$s3,4
2052#	bltu $t4,$t3,gCinnerCopy1
2053##...sltu $at,$t4,$t3
2057##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2060#	sw $t5,-8($t1) # -2 in first header-slot
2064#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
2068#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
2072#	j gcTestIterDone1

2076:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
2076#	subu $t0,$t0,$t1
2080#	subu $t0,$t0,3

2084:  gcTestIterDone1:
2084#	bgeu $t0,$sp,gcStackCopyLoop
2085##...sltu $at,$t0,$sp
2089##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
2092#	lw $t1,cur_seg
2096#	la $t0,seg0_start
2100#	beq $t1,$zero,gcSkip4
2104#	la $t0,seg1_start
2105##...lui $t0,16
2109##...addiu $t0,$t0,3064

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

2112:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
2112#	bgeu $t0,$s3,gcFinishUp
2113##...sltu $at,$t0,$s3
2117##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

2120:  gcHeapCopyLoop:
	# check if we have a data array
2120#	lw $t1,($t0) # first header word for current object
2124#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
2125##...slt $at,$t1,$zero
2129##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
2132#	lw $t1,4($t0) # data words
2136#	addu $t1,$t1,2 # add in # header words
2140#	sll $t1,$t1,2 # convert to byte-count
2144#	addu $t0,$t0,$t1 # skip over object
2148#	j gcTestIterDone2 # go do next object, if any

2152:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
2152#	sll $t2,$t1,2 # # data bytes
2156#	addu $t2,$t2,8 # to skip header word
2160#	addu $t2,$t0,$t2 # pointer to new object
2164#	lw $t3,-8($t2) # word to swap
2168#	sw $t1,-8($t2) # store header word
2172#	sw $t3,($t0) # restore first word of object

2176#	lw $t3,-4($t2) # # object words (negative treated as zero)
2180#	bge $t3,$zero,gcH2Neg2
2181##...slt $at,$t3,$zero
2185##...beq $at,$zero,$+8
2188#	move $t3,$zero
2192:  gcH2Neg2:
2192#	sll $t3,$t3,2 # # object bytes
2196#	move $t0,$t2 # address of first pointer in object
2200#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
2204#	beq $t0,$s1,gcTestIterDone2
	
2208:  gcNextPointerInObject:
	# get pointer from object
2208#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
2212#	bleu $t1,$t6,gcGoNextPointerSlot
2213##...sltu $at,$t6,$t1
2217##...beq $at,$zero,$+136
2220#	bgtu $t1,$t7,gcGoNextPointerSlot
2221##...sltu $at,$t7,$t1
2225##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2228#	lw $t8,-8($t1) # possible forwarding tag
2232#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
2236#	lw $t8,-4($t1) # forwarding pointer: object's new address
2240#	sw $t8,($t0) # update pointer in object
2244#	j gcGoNextPointerSlot # do next iteration

2248:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
2248#	bge $t8,$zero,gcSkip5
2249##...slt $at,$t8,$zero
2253##...beq $at,$zero,$+8
2256#	move $t8,$zero # set to zero if -1

2260:  gcSkip5:
2260#	sll $t8,$t8,2
2264#	addu $t8,$t8,8
2268#	subu $t4,$t1,$t8 # address of first word of source
2272#	lw $t3,-4($t1)
2276#	bge $t3,$zero,gcNoNeg
2277##...slt $at,$t3,$zero
2281##...beq $at,$zero,$+8
2284#	move $t3,$zero
2288:  gcNoNeg:
2288#	sll $t3,$t3,2
2292#	addu $t3,$t3,$t1 # address one word past last word of source

2296#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
2300#	lw $s0,($t4)
2304#	lw $t9,-8($t1)
2308#	sw $t9,($t4)
2312#	sw $s0,-8($t1)

	# copy all source bytes to the target
2316:  gCinnerCopy2:
2316#	lw $s0,($t4)
2320#	sw $s0,($s3)
2324#	addu $t4,$t4,4
2328#	addu $s3,$s3,4
2332#	bltu $t4,$t3,gCinnerCopy2
2333##...sltu $at,$t4,$t3
2337##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2340#	sw $t5,-8($t1) # -2 in first header-slot
2344#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
2348#	sw $t8,($t0)

2352:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
2352#	addu $t0,$t0,4
2356#	bltu $t0,$s1,gcNextPointerInObject
2357##...sltu $at,$t0,$s1
2361##...bne $at,$zero,$-152

2364:  gcTestIterDone2:
2364#	bltu $t0,$s3,gcHeapCopyLoop
2365##...sltu $at,$t0,$s3
2369##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

2372:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
2372#	lw $s2,($sp)
2376#	addu $sp,$sp,4

	# mark us as having already GC'd
2380#	move $t5,$s5

	# go try and allocate again
2384#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
2388:vm_init:

	# mark bottom of stack
2388#	sw $sp,stack_bottom
2392#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
2396#	move $s2,$zero
2400#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
2404#	li $s5,5
2408#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

2412#	la $s3,seg0_start
2416#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
2420#	la $s4,seg0_end
2421##...lui $s4,16
2425##...addiu $s4,$s4,3064
2428#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
2432#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2436:divide:
	# get parameters; abort if divisor zero
2436#	lw $t0,($sp)
2440#	lw $t1,8($sp)
2444#	beq $t0,$zero,divByZeroError
	
	# perform division
2448#	div $t1,$t0
2452#	mflo $t0

	# store result, adjust stack and return
2456#	addu $sp,$sp,8 # adjust stack
2460#	sw $t0,($sp) # store result
2464#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
2468:remainder:
	# get parameters; abort if divisor zero
2468#	lw $t0,($sp)
2472#	lw $t1,8($sp)
2476#	beq $t0,$zero,divByZeroError
	
	# perform division
2480#	div $t1,$t0
2484#	mfhi $t0

	# store result, adjust stack and return
2488#	addu $sp,$sp,8 # adjust stack
2492#	sw $t0,($sp) # store result
2496#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
2500:checkCast:
	# get object, allow immediately if null
2500#	lw $t2,($sp)
2504#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
2508#	lw $t3,-8($t2) # <= 0 if array
2512#	lw $t2,-12($t2) # vtable address (unless array)
2516#	bgt $t3,$zero,skipArrayCast
2517##...slt $at,$zero,$t3
2521##...bne $at,$zero,$+8
2524#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
2528:  skipArrayCast:
2528#	bge $t2,$t1,castException
2529##...slt $at,$t2,$t1
2533##...beq $at,$zero,$+152
2536#	blt $t2,$t0,castException
2537##...slt $at,$t2,$t0
2541##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
2544:  checkCastReturn:	
2544#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
2548:instanceOf:
	# get object, go return false if null
2548#	lw $t2,($sp)
2552#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
2556#	lw $t3,-8($t2) # <= 0 if array
2560#	lw $t2,-12($t2) # vtable address (unless array)
2564#	bgt $t3,$zero,skipArrayInstanceOf
2565##...slt $at,$zero,$t3
2569##...bne $at,$zero,$+8
2572#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
2576:  skipArrayInstanceOf:
2576#	sge $t0,$t2,$t0
2577##...slt $t0,$t2,$t0
2581##...xori $t0,$t0,0x1
2584#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
2588#	and $t2,$t0,$t1
2592:  doneInstanceOf: # if we reach here via branch, we know $t2=0
2592#	sw $t2,($sp)
2596#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

2600:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
2600#	li $v0,4 # syscall-code for print-string
2604#	syscall
2608:exit:
	# print termination message
2608#	li $v0,4
2612#	la $a0,exitString
2616#	syscall

	# terminate execution
2620#	li $v0,10 #syscall-code for "exit"
2624#	syscall

2628:outOfHeapMemory:
2628#	la $a0,heapMemoryMsg
2632#	j exitError
2636:divByZeroError:
2636#	la $a0,divByZeroMsg
2640#	j exitError
2644:strIndexOutOfBounds:
2644#	la $a0,strIndexOutOfBoundsMsg
2648#	j exitError
2652:arrayIndexOutOfBounds:
2652#	la $a0,arrayIndexOutOfBoundsMsg
2656#	j exitError
2660:arraySizeOutOfBounds:
2660#	la $a0,arraySizeOutOfBoundsMsg
2664#	j exitError
2668:nullPtrException:
2668#	la $a0,nullPtrExceptionMsg
2672#	j exitError
2676:badIntegerFormat:
2676#	la $a0,badIntegerFormatMsg
2680#	j exitError
2684:castException:
2684#	la $a0,castExceptionMsg
2688#	j exitError

############## data section ################
	.data
	.align 2

2756:cur_seg:
	.word 0

2760:lastCharRead:
	.word -2 # -2 => no buffered character

2764:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
2791:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
2814:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
2849:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
2883:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
2916:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
2947:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
2995:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
3016:gcMsg: 
      .asciiz "\nGC!\n"

3022:nullStr:
	.asciiz "null"
3027:trueString:
	.asciiz "true"
3032:falseString:
	.asciiz "false"
3038:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
3060:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

3064:seg0_start:
	.space 0x100000
1051640:seg0_end:
1051640:seg1_start:
	.space 0x100000
2100216:seg1_end:



