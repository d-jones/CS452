 .data # Program at 1.1	 	
  .byte 119 # StringLiteral at 9.19	
  .byte 104 # StringLiteral at 9.19		
  .byte 105 # StringLiteral at 9.19			
  .byte 108 # StringLiteral at 9.19 	 
  .byte 101 # StringLiteral at 9.19		
  .byte 40 # StringLiteral at 9.19 	
  .byte 105 # StringLiteral at 9.19		
  .byte 32 # StringLiteral at 9.19			
  .byte 60 # StringLiteral at 9.19   
  .byte 32 # StringLiteral at 9.19			
  .byte 51 # StringLiteral at 9.19	  
  .byte 41 # StringLiteral at 9.19 	 
  .byte 58 # StringLiteral at 9.19  
  .byte 32 # StringLiteral at 9.19			
  .byte 0 # StringLiteral at 9.19	
  .byte 0 # StringLiteral at 9.19 	 
  .word CLASS_String # StringLiteral at 9.19  
  .word 5 # StringLiteral at 9.19	
  .word -14 # StringLiteral at 9.19 	
3492:strLit_12: # StringLiteral at 9.19	 
  .byte 10 # StringLiteral at 11.19   
  .byte 0 # StringLiteral at 11.19  	
  .byte 0 # StringLiteral at 11.19	  
  .byte 0 # StringLiteral at 11.19 	
  .word CLASS_String # StringLiteral at 11.19  
  .word 2 # StringLiteral at 11.19 
  .word -1 # StringLiteral at 11.19	
3508:strLit_20: # StringLiteral at 11.19	  
  .byte 119 # StringLiteral at 19.19	 
  .byte 104 # StringLiteral at 19.19	  
  .byte 105 # StringLiteral at 19.19	 
  .byte 108 # StringLiteral at 19.19 	 
  .byte 101 # StringLiteral at 19.19  	
  .byte 40 # StringLiteral at 19.19		 
  .byte 98 # StringLiteral at 19.19 
  .byte 49 # StringLiteral at 19.19	 
  .byte 41 # StringLiteral at 19.19		
  .byte 58 # StringLiteral at 19.19	 	
  .byte 32 # StringLiteral at 19.19  	
  .byte 10 # StringLiteral at 19.19   
  .word CLASS_String # StringLiteral at 19.19	  
  .word 4 # StringLiteral at 19.19	  
  .word -12 # StringLiteral at 19.19 	 
3532:strLit_46: # StringLiteral at 19.19	 
  .byte 119 # StringLiteral at 25.19 	
  .byte 104 # StringLiteral at 25.19	 
  .byte 105 # StringLiteral at 25.19   
  .byte 108 # StringLiteral at 25.19   
  .byte 101 # StringLiteral at 25.19		
  .byte 40 # StringLiteral at 25.19		
  .byte 98 # StringLiteral at 25.19  
  .byte 49 # StringLiteral at 25.19  
  .byte 32 # StringLiteral at 25.19   
  .byte 33 # StringLiteral at 25.19	 	
  .byte 61 # StringLiteral at 25.19 	 
  .byte 32 # StringLiteral at 25.19 
  .byte 102 # StringLiteral at 25.19			
  .byte 97 # StringLiteral at 25.19  
  .byte 108 # StringLiteral at 25.19	
  .byte 115 # StringLiteral at 25.19  
  .byte 101 # StringLiteral at 25.19  	
  .byte 41 # StringLiteral at 25.19 
  .byte 58 # StringLiteral at 25.19		
  .byte 32 # StringLiteral at 25.19		 
  .byte 10 # StringLiteral at 25.19 	 
  .byte 0 # StringLiteral at 25.19	 
  .byte 0 # StringLiteral at 25.19		
  .byte 0 # StringLiteral at 25.19	
  .word CLASS_String # StringLiteral at 25.19   
  .word 7 # StringLiteral at 25.19			
  .word -21 # StringLiteral at 25.19	
3568:strLit_64: # StringLiteral at 25.19 	
  .byte 119 # StringLiteral at 31.19			
  .byte 104 # StringLiteral at 31.19  
  .byte 105 # StringLiteral at 31.19	
  .byte 108 # StringLiteral at 31.19	 	
  .byte 101 # StringLiteral at 31.19	
  .byte 40 # StringLiteral at 31.19	 	
  .byte 33 # StringLiteral at 31.19	 
  .byte 98 # StringLiteral at 31.19	
  .byte 50 # StringLiteral at 31.19	 
  .byte 41 # StringLiteral at 31.19	  
  .byte 58 # StringLiteral at 31.19	 
  .byte 32 # StringLiteral at 31.19		
  .byte 10 # StringLiteral at 31.19 		
  .byte 0 # StringLiteral at 31.19  	
  .byte 0 # StringLiteral at 31.19		
  .byte 0 # StringLiteral at 31.19	
  .word CLASS_String # StringLiteral at 31.19	
  .word 5 # StringLiteral at 31.19			
  .word -13 # StringLiteral at 31.19		 
3596:strLit_80: # StringLiteral at 31.19 	
  .byte 119 # StringLiteral at 37.19		
  .byte 104 # StringLiteral at 37.19   
  .byte 105 # StringLiteral at 37.19 		
  .byte 108 # StringLiteral at 37.19 	 
  .byte 101 # StringLiteral at 37.19	  
  .byte 40 # StringLiteral at 37.19 
  .byte 98 # StringLiteral at 37.19 	
  .byte 50 # StringLiteral at 37.19		 
  .byte 32 # StringLiteral at 37.19   
  .byte 61 # StringLiteral at 37.19 	
  .byte 61 # StringLiteral at 37.19 	 
  .byte 32 # StringLiteral at 37.19	 	
  .byte 102 # StringLiteral at 37.19   
  .byte 97 # StringLiteral at 37.19   
  .byte 108 # StringLiteral at 37.19  	
  .byte 115 # StringLiteral at 37.19   
  .byte 101 # StringLiteral at 37.19	
  .byte 41 # StringLiteral at 37.19	  
  .byte 58 # StringLiteral at 37.19	  
  .byte 32 # StringLiteral at 37.19	  
  .byte 10 # StringLiteral at 37.19			
  .byte 0 # StringLiteral at 37.19 	
  .byte 0 # StringLiteral at 37.19		 
  .byte 0 # StringLiteral at 37.19 
  .word CLASS_String # StringLiteral at 37.19 	 
  .word 7 # StringLiteral at 37.19  
  .word -21 # StringLiteral at 37.19	 	
3632:strLit_97: # StringLiteral at 37.19 		
3632:CLASS_Object: # Program at 1.1 	
3632:CLASS_String: # Program at 1.1   
.text # Program at 1.1 	 
.global main # Program at 1.1 
0:main: # Program at 1.1			
0#jal vm_init # Program at 1.1 		
4#subu $sp, $sp, 4 # NewObject at 0.0  	
8#sw $zero, ($sp) # NewObject at 0.0  
12#jal fcn_111_main # Call at 0.0 
16#li $v0, 10 # Program at 1.1   
20#syscall # Program at 1.1	  
.globl fcn_111_main # MethodDeclVoid at 2.14	 	
24:fcn_111_main: # MethodDeclVoid at 2.14	  
24#subu $sp, $sp, 8 # MethodDeclVoid at 2.14 
28#sw $ra, 4($sp) # MethodDeclVoid at 2.14 	
32#sw $s2, ($sp) # MethodDeclVoid at 2.14		 
36#lw $s2, 4($sp) # MethodDeclVoid at 2.14			
40#subu $sp, $sp, 8 # IntegerLiteral at 3.11		 
44#sw $s5, 4($sp) # IntegerLiteral at 3.11  	
48#li $t0, 0 # IntegerLiteral at 3.11  	
52#sw $t0, ($sp) # IntegerLiteral at 3.11 	
56#subu $sp, $sp, 4 # True at 4.16   
60#li $t0, 1 # True at 4.16	
64#sw $t0, ($sp) # True at 4.16	
68#subu $sp, $sp, 4 # False at 5.16 		
72#sw $zero, ($sp) # False at 5.16		
76#j while_enter_44 # While at 8.3 	 
80:while_top_44: # While at 8.3	 
80#subu $sp, $sp, 4 # Super at 9.10 	 
84#sw $s2, ($sp) # Super at 9.10	
88#subu $sp, $sp, 4 # StringLiteral at 9.19  
92#la $t0, strLit_12 # StringLiteral at 9.19 	
96#sw $t0, ($sp) # StringLiteral at 9.19		
100#jal printStr # Call at 9.10		
104#subu $sp, $sp, 4 # Super at 10.10	 
108#sw $s2, ($sp) # Super at 10.10			
112#lw $t0, 12($sp) # IdentifierExp at 10.19 
116#subu $sp, $sp, 8 # IdentifierExp at 10.19		
120#sw $s5, 4($sp) # IdentifierExp at 10.19 
124#sw $t0, ($sp) # IdentifierExp at 10.19	
128#jal printInt # Call at 10.10  	
132#subu $sp, $sp, 4 # Super at 11.10		
136#sw $s2, ($sp) # Super at 11.10 		
140#subu $sp, $sp, 4 # StringLiteral at 11.19 		
144#la $t0, strLit_20 # StringLiteral at 11.19  	
148#sw $t0, ($sp) # StringLiteral at 11.19			
152#jal printStr # Call at 11.10			
156#lw $t0, 8($sp) # IdentifierExp at 12.7	 	
160#subu $sp, $sp, 8 # IdentifierExp at 12.7	 
164#sw $s5, 4($sp) # IdentifierExp at 12.7			
168#sw $t0, ($sp) # IdentifierExp at 12.7	 	
172#subu $sp, $sp, 8 # IntegerLiteral at 12.12 	 
176#sw $s5, 4($sp) # IntegerLiteral at 12.12 	 
180#li $t0, 0 # IntegerLiteral at 12.12 
184#sw $t0, ($sp) # IntegerLiteral at 12.12 		
188#lw $t0, ($sp) # Equals at 12.9 		
192#lw $t1, 8($sp) # Equals at 12.9	
196#seq $t0, $t0, $t1 # Equals at 12.9  	
197##...subu $at,$t0,$t1
201##...sltiu $t0,$at,1
204#addu $sp, $sp, 12 # Equals at 12.9	  
208#sw $t0, ($sp) # Equals at 12.9 	 
212#lw $t0, ($sp) # Not at 12.9	 	
216#xor $t0, $t0, 1 # Not at 12.9		 
220#sw $t0, ($sp) # Not at 12.9			
224#lw $t0, ($sp) # And at 12.14 
228#beq $t0, $zero, skip_33 # And at 12.14			
232#addu $sp, $sp, 4 # And at 12.14		 
236#lw $t0, 8($sp) # IdentifierExp at 12.17   
240#subu $sp, $sp, 8 # IdentifierExp at 12.17 	 
244#sw $s5, 4($sp) # IdentifierExp at 12.17			
248#sw $t0, ($sp) # IdentifierExp at 12.17 
252#subu $sp, $sp, 8 # IntegerLiteral at 12.21  	
256#sw $s5, 4($sp) # IntegerLiteral at 12.21  
260#li $t0, 5 # IntegerLiteral at 12.21	  
264#sw $t0, ($sp) # IntegerLiteral at 12.21  
268#jal remainder # Remainder at 12.19	  
272#subu $sp, $sp, 8 # IntegerLiteral at 12.26 		
276#sw $s5, 4($sp) # IntegerLiteral at 12.26			
280#li $t0, 0 # IntegerLiteral at 12.26  
284#sw $t0, ($sp) # IntegerLiteral at 12.26	 	
288#lw $t0, ($sp) # Equals at 12.23 
292#lw $t1, 8($sp) # Equals at 12.23	 
296#seq $t0, $t0, $t1 # Equals at 12.23  	
297##...subu $at,$t0,$t1
301##...sltiu $t0,$at,1
304#addu $sp, $sp, 12 # Equals at 12.23			
308#sw $t0, ($sp) # Equals at 12.23		
312:skip_33: # And at 12.14	 	
312#lw $t0, ($sp) # If at 12.4	 	
316#addu $sp, $sp, 4 # If at 12.4			
320#beq $t0, $zero, if_else_37 # If at 12.4	
324#j while_exit_44 # Break at 13.5		 
328#j if_done_37 # If at 12.4	
332:if_else_37: # If at 12.4   
332:if_done_37: # If at 12.4		 
332#lw $t0, 8($sp) # IdentifierExp at 15.4  
336#subu $sp, $sp, 8 # IdentifierExp at 15.4   
340#sw $s5, 4($sp) # IdentifierExp at 15.4	 	
344#sw $t0, ($sp) # IdentifierExp at 15.4		 
348#subu $sp, $sp, 8 # IntegerLiteral at 15.5 		
352#sw $s5, 4($sp) # IntegerLiteral at 15.5	 	
356#li $t0, 1 # IntegerLiteral at 15.5		
360#sw $t0, ($sp) # IntegerLiteral at 15.5	
364#lw $t0, ($sp) # Plus at 15.5		
368#lw $t1, 8($sp) # Plus at 15.5 	 
372#addu $t0, $t0, $t1 # Plus at 15.5	 	
376#addu $sp, $sp, 8 # Plus at 15.5	
380#sw $t0, ($sp) # Plus at 15.5  
384#lw $t0, ($sp) # Assign at 15.4 
388#sw $t0, 16($sp) # Assign at 15.4	 	
392#addu $sp, $sp, 8 # Assign at 15.4	 	
396:while_enter_44: # While at 8.3	 	
396#lw $t0, 8($sp) # IdentifierExp at 8.9		 
400#subu $sp, $sp, 8 # IdentifierExp at 8.9   
404#sw $s5, 4($sp) # IdentifierExp at 8.9		
408#sw $t0, ($sp) # IdentifierExp at 8.9		 
412#subu $sp, $sp, 8 # IntegerLiteral at 8.13		 
416#sw $s5, 4($sp) # IntegerLiteral at 8.13 		
420#li $t0, 10 # IntegerLiteral at 8.13	 
424#sw $t0, ($sp) # IntegerLiteral at 8.13 	
428#lw $t0, ($sp) # LessThan at 8.11	 
432#lw $t1, 8($sp) # LessThan at 8.11 		
436#slt $t0, $t1, $t0 # LessThan at 8.11 
440#addu $sp, $sp, 12 # LessThan at 8.11  	
444#sw $t0, ($sp) # LessThan at 8.11 	
448#lw $t0, ($sp) # While at 8.3   
452#addu $sp, $sp, 4 # While at 8.3   
456#bne $t0, $zero, while_top_44 # While at 8.3		
460:while_exit_44: # While at 8.3   
460#j while_enter_55 # While at 18.3			
464:while_top_55: # While at 18.3   
464#subu $sp, $sp, 4 # Super at 19.10		
468#sw $s2, ($sp) # Super at 19.10	 
472#subu $sp, $sp, 4 # StringLiteral at 19.19 
476#la $t0, strLit_46 # StringLiteral at 19.19  	
480#sw $t0, ($sp) # StringLiteral at 19.19  
484#jal printStr # Call at 19.10  	
488#lw $t0, 4($sp) # IdentifierExp at 20.10			
492#subu $sp, $sp, 4 # IdentifierExp at 20.10  	
496#sw $t0, ($sp) # IdentifierExp at 20.10 	 
500#lw $t0, ($sp) # Not at 20.9	
504#xor $t0, $t0, 1 # Not at 20.9 	 
508#sw $t0, ($sp) # Not at 20.9	 	
512#lw $t0, ($sp) # Assign at 20.7		
516#sw $t0, 8($sp) # Assign at 20.7	 	
520#addu $sp, $sp, 4 # Assign at 20.7			
524:while_enter_55: # While at 18.3 	
524#lw $t0, 4($sp) # IdentifierExp at 18.9		 
528#subu $sp, $sp, 4 # IdentifierExp at 18.9 	
532#sw $t0, ($sp) # IdentifierExp at 18.9  
536#lw $t0, ($sp) # While at 18.3 
540#addu $sp, $sp, 4 # While at 18.3		 
544#bne $t0, $zero, while_top_55 # While at 18.3 
548:while_exit_55: # While at 18.3 		
548#lw $t0, 4($sp) # IdentifierExp at 22.9 	
552#subu $sp, $sp, 4 # IdentifierExp at 22.9			
556#sw $t0, ($sp) # IdentifierExp at 22.9  	
560#lw $t0, ($sp) # Not at 22.8	 
564#xor $t0, $t0, 1 # Not at 22.8  
568#sw $t0, ($sp) # Not at 22.8		
572#lw $t0, ($sp) # Assign at 22.6	 
576#sw $t0, 8($sp) # Assign at 22.6 
580#addu $sp, $sp, 4 # Assign at 22.6		
584#j while_enter_73 # While at 24.3 	
588:while_top_73: # While at 24.3 
588#subu $sp, $sp, 4 # Super at 25.10	
592#sw $s2, ($sp) # Super at 25.10			
596#subu $sp, $sp, 4 # StringLiteral at 25.19   
600#la $t0, strLit_64 # StringLiteral at 25.19	  
604#sw $t0, ($sp) # StringLiteral at 25.19	  
608#jal printStr # Call at 25.10	
612#lw $t0, 4($sp) # IdentifierExp at 26.10	 
616#subu $sp, $sp, 4 # IdentifierExp at 26.10 
620#sw $t0, ($sp) # IdentifierExp at 26.10  	
624#lw $t0, ($sp) # Not at 26.9 
628#xor $t0, $t0, 1 # Not at 26.9		
632#sw $t0, ($sp) # Not at 26.9 	
636#lw $t0, ($sp) # Assign at 26.7	 	
640#sw $t0, 8($sp) # Assign at 26.7		 
644#addu $sp, $sp, 4 # Assign at 26.7  	
648:while_enter_73: # While at 24.3	  
648#lw $t0, 4($sp) # IdentifierExp at 24.9			
652#subu $sp, $sp, 4 # IdentifierExp at 24.9	 
656#sw $t0, ($sp) # IdentifierExp at 24.9			
660#subu $sp, $sp, 4 # False at 24.15 	 
664#sw $zero, ($sp) # False at 24.15 	 
668#lw $t0, ($sp) # Equals at 24.12 		
672#lw $t1, 4($sp) # Equals at 24.12	 	
676#seq $t0, $t0, $t1 # Equals at 24.12  	
677##...subu $at,$t0,$t1
681##...sltiu $t0,$at,1
684#addu $sp, $sp, 4 # Equals at 24.12			
688#sw $t0, ($sp) # Equals at 24.12			
692#lw $t0, ($sp) # Not at 24.12		
696#xor $t0, $t0, 1 # Not at 24.12			
700#sw $t0, ($sp) # Not at 24.12 	
704#lw $t0, ($sp) # While at 24.3		 
708#addu $sp, $sp, 4 # While at 24.3  	
712#bne $t0, $zero, while_top_73 # While at 24.3	  
716:while_exit_73: # While at 24.3   
716#lw $t0, 4($sp) # IdentifierExp at 28.9 
720#subu $sp, $sp, 4 # IdentifierExp at 28.9	 	
724#sw $t0, ($sp) # IdentifierExp at 28.9	 	
728#lw $t0, ($sp) # Not at 28.8 		
732#xor $t0, $t0, 1 # Not at 28.8			
736#sw $t0, ($sp) # Not at 28.8 
740#lw $t0, ($sp) # Assign at 28.6	  
744#sw $t0, 8($sp) # Assign at 28.6	 	
748#addu $sp, $sp, 4 # Assign at 28.6	
752#j while_enter_89 # While at 30.3   
756:while_top_89: # While at 30.3 
756#subu $sp, $sp, 4 # Super at 31.10	
760#sw $s2, ($sp) # Super at 31.10 	
764#subu $sp, $sp, 4 # StringLiteral at 31.19   
768#la $t0, strLit_80 # StringLiteral at 31.19 		
772#sw $t0, ($sp) # StringLiteral at 31.19		 
776#jal printStr # Call at 31.10 
780#lw $t0, 0($sp) # IdentifierExp at 32.10 	
784#subu $sp, $sp, 4 # IdentifierExp at 32.10 	 
788#sw $t0, ($sp) # IdentifierExp at 32.10	 
792#lw $t0, ($sp) # Not at 32.9		
796#xor $t0, $t0, 1 # Not at 32.9   
800#sw $t0, ($sp) # Not at 32.9 	 
804#lw $t0, ($sp) # Assign at 32.7  	
808#sw $t0, 4($sp) # Assign at 32.7 
812#addu $sp, $sp, 4 # Assign at 32.7 	
816:while_enter_89: # While at 30.3   
816#lw $t0, 0($sp) # IdentifierExp at 30.10 
820#subu $sp, $sp, 4 # IdentifierExp at 30.10 
824#sw $t0, ($sp) # IdentifierExp at 30.10	
828#lw $t0, ($sp) # Not at 30.9 		
832#xor $t0, $t0, 1 # Not at 30.9   
836#sw $t0, ($sp) # Not at 30.9 	 
840#lw $t0, ($sp) # While at 30.3 	
844#addu $sp, $sp, 4 # While at 30.3		 
848#bne $t0, $zero, while_top_89 # While at 30.3  
852:while_exit_89: # While at 30.3 	
852#lw $t0, 0($sp) # IdentifierExp at 34.9	  
856#subu $sp, $sp, 4 # IdentifierExp at 34.9	 
860#sw $t0, ($sp) # IdentifierExp at 34.9			
864#lw $t0, ($sp) # Not at 34.8		 
868#xor $t0, $t0, 1 # Not at 34.8  	
872#sw $t0, ($sp) # Not at 34.8 
876#lw $t0, ($sp) # Assign at 34.6	
880#sw $t0, 4($sp) # Assign at 34.6			
884#addu $sp, $sp, 4 # Assign at 34.6		 
888#j while_enter_106 # While at 36.3  
892:while_top_106: # While at 36.3		 
892#subu $sp, $sp, 4 # Super at 37.10 
896#sw $s2, ($sp) # Super at 37.10 	
900#subu $sp, $sp, 4 # StringLiteral at 37.19 	 
904#la $t0, strLit_97 # StringLiteral at 37.19		
908#sw $t0, ($sp) # StringLiteral at 37.19 
912#jal printStr # Call at 37.10		 
916#lw $t0, 0($sp) # IdentifierExp at 38.10			
920#subu $sp, $sp, 4 # IdentifierExp at 38.10			
924#sw $t0, ($sp) # IdentifierExp at 38.10			
928#lw $t0, ($sp) # Not at 38.9 	
932#xor $t0, $t0, 1 # Not at 38.9  
936#sw $t0, ($sp) # Not at 38.9		
940#lw $t0, ($sp) # Assign at 38.7	
944#sw $t0, 4($sp) # Assign at 38.7 	 
948#addu $sp, $sp, 4 # Assign at 38.7	 	
952:while_enter_106: # While at 36.3			
952#lw $t0, 0($sp) # IdentifierExp at 36.9		 
956#subu $sp, $sp, 4 # IdentifierExp at 36.9	  
960#sw $t0, ($sp) # IdentifierExp at 36.9	
964#subu $sp, $sp, 4 # False at 36.15 	
968#sw $zero, ($sp) # False at 36.15	 
972#lw $t0, ($sp) # Equals at 36.12		 
976#lw $t1, 4($sp) # Equals at 36.12  
980#seq $t0, $t0, $t1 # Equals at 36.12 	
981##...subu $at,$t0,$t1
985##...sltiu $t0,$at,1
988#addu $sp, $sp, 4 # Equals at 36.12 
992#sw $t0, ($sp) # Equals at 36.12		 
996#lw $t0, ($sp) # While at 36.3		 
1000#addu $sp, $sp, 4 # While at 36.3  
1004#bne $t0, $zero, while_top_106 # While at 36.3  	
1008:while_exit_106: # While at 36.3   
1008#lw $t0, 0($sp) # IdentifierExp at 40.9		
1012#subu $sp, $sp, 4 # IdentifierExp at 40.9			
1016#sw $t0, ($sp) # IdentifierExp at 40.9	
1020#lw $t0, ($sp) # Not at 40.8	 
1024#xor $t0, $t0, 1 # Not at 40.8	 	
1028#sw $t0, ($sp) # Not at 40.8 
1032#lw $t0, ($sp) # Assign at 40.6	 	
1036#sw $t0, 4($sp) # Assign at 40.6	
1040#addu $sp, $sp, 4 # Assign at 40.6  
1044#lw $ra, 20($sp) # MethodDeclVoid at 2.14		 
1048#lw $s2, 4($sp) # MethodDeclVoid at 2.14	
1052#addu $sp, $sp, 28 # MethodDeclVoid at 2.14  
1056#jr $ra # MethodDeclVoid at 2.14 		
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1060:readLine:
	
1060#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1064#	sw $ra, 4($sp) # save $ra
1068#	move $t1,$sp # save "original" sp

1072:  doRead:

	# read the character
1072#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1076#	subu $t2,$v0,13
1080#	bne $t2,$zero,notReturnRL
1084#	jal readLogicalChar
1088#	subu $t2,$v0,10 # check for newline
1092#	beq $t2,$zero,foundNewLine
1096#	sw $v0,lastCharRead # push back character into queue
1100#	j foundNewLine # go process the line

1104:  notReturnRL:

	# at this point, $v0 has our character

1104#	subu $t0,$v0,10
1108#	beq $t0,$zero,foundNewLine
1112#	blt $v0,$zero,foundEof
1113##...slt $at,$v0,$zero
1117##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1120#	subu $sp,$sp,4
1124#	sw $v0,($sp)

	# loop back up to get next character
1128#	j doRead

1132:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1132#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1136#	sw $zero,8($sp) # return-value: null
1140#	j rlReturn # return

1144:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1144#	subu $t0,$t1,$sp # number of chars we read (times 4)
1148#	srl $s6,$t0,2 # number of words on stack with chars
1152#	subu $sp,$sp,4 # push char-count ...
1156#	sw $s6,($sp) # ... onto stack
1160#	addu $t2,$t0,5 # GC tag, incl. for count-word
1164#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1168#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1172#	srl $s6,$s6,2 # data words in object
1176#	move $s7,$zero # # object words in object
1180#	jal newObject # allocate space
	
	# store header words
1184#	la $t0,CLASS_String
1188#	sw $t0,-12($s7) # store class tag (String) into object
1192#	lw $t2,4($sp) # char-count
1196#	sll $t1,$t2,2 # 4 times number of chars
1200#	subu $t2,$zero,$t2 # negative of char-count
1204#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1208#	lw $t0,-8($s7) # data words in object
1212#	sll $t0,$t0,2 # data bytes in object
1216#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1220#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1224#	addu $sp,$sp,8 # pop redundant object-pointer and count
1228#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1232#	beq $sp,$t1,doneCharCopy
1236:  charCopyLoop:
1236#	lw $t2,($sp)
1240#	sb $t2,-9($t0)
1244#	addu $sp,$sp,4
1248#	subu $t0,$t0,1
1252#	bne $sp,$t1,charCopyLoop
1256:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1256#	sw $s7,8($sp)
	
1260:  rlReturn:
	# restore return address and return
1260#	lw $ra,4($sp) # restore return address, ...
1264#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1268#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1272:readInt:

	# save $ra by pushing onto stack
1272#	subu $sp,$sp,4
1276#	sw $ra,($sp)

1280:  riSkipWhiteLoop:
	# read a character
1280#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1284#	subu $t0,$v0,32
1288#	bgt $t0,$zero,nonWhite
1289##...slt $at,$zero,$t0
1293##...bne $at,$zero,$+44
1296#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1300#	subu $t0,$v0,10
1304#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1308#	subu $t0,$v0,9
1312#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1316#	subu $t0,$v0,13
1320#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1324#	subu $t0,$v0,12
1328#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1332#	j badIntegerFormat # illegal integer char: abort program

1336:  nonWhite:
1336#	subu $t0,$v0,'-'
1340#	li $t4,1 # final multiplier
1344#	bne $t0,$zero,helpReadInt # go read
1348#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1352#	jal readLogicalChar

1356:  helpReadInt:
1356#	li $t2,10
1360#	subu $t1,$v0,'0' # convert digit to 0-9 value
1364#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1365##...sltu $at,$t1,$t2
1369##...beq $at,$zero,$+2080
1372#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1376:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1376#	jal readLogicalChar # read next character
1380#	subu $t1,$v0,'0' # convert digit to 0-9 value
1384#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1385##...sltu $at,$t1,$t2
1389##...beq $at,$zero,$+20

1392#	mul $t3,$t3,$t2 # multiply old value by 10
1393##...mult $t3,$t2
1397##...mflo $t3
1400#	addu $t3,$t3,$t1 # add in value of new digit
1404#	j digitLoop

1408:  doneDigitLoop:

	# "push back" unused character into queue
1408#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1412#	lw $ra,($sp)
1416#	mult $t3,$t4 # multiply to account for poss. minus sign
1420#	mflo $t3
1424#	sw $t3,($sp) # result
1428#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1432#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1436:readChar:

	# save $ra by pushing onto stack
1436#	subu $sp,$sp,4
1440#	sw $ra,($sp)

  	# read the character
1444#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1448#	lw $ra,($sp)
1452#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1456#	sw $v0,($sp)

	# return
1460#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1464:printStr:
	# check for null, printing "(null)", if so
1464#	lw $t0,($sp)
1468#	bne $t0,$zero,psNotNull

	# print "(null)"
1472#	la $a0,nullStr
1476#	li $v0,4
1480#	syscall
1484#	j donePrintStr
	
1488:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1488#	subu $t0,$t0,8
1492#	lw $t1,($t0) # word just beyond end of string
1496#	sll $t1,$t1,2
1500#	subu $t1,$t0,$t1 # first word in string
1504#	lw $t0,4($t0) # negative of string-length
1508#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1512#	beq $t0,$t1,donePrintStr
1516:  psLoop:
1516#	lb $a0,($t1) # next byte
1520#	li $v0,11 # code for printing char
1524#        syscall # print the char
1528#	addu $t1,$t1,1 # go to next char
1532#	blt $t1,$t0,psLoop
1533##...slt $at,$t1,$t0
1537##...bne $at,$zero,$-20

1540:  donePrintStr:
	# pop stack and return
1540#	addu $sp,$sp,8
1544#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1548:printInt:
	# pop value off stack, along with 'this'
1548#	lw $a0,($sp)
1552#	addu $sp,$sp,12

	# print it
1556#	li $v0,1 # code for print-int
1560#	syscall

	# return
1564#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1568:printBool:
	# pop value off stack, along with 'this'
1568#	lw $t0,($sp)
1572#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1576#	la $a0,falseString
1580#	beq $t0,$zero,skipPB
1584#	la $a0,trueString
1588:  skipPB:
1588#	li $v0,4 # code for print-string
1592#	syscall

	# return
1596#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1600:substring:

	# save $ra by pushing onto stack
1600#	subu $sp,$sp,4
1604#	sw $ra,($sp)

	# get string value off stack, test for null
1608#	lw $t0,20($sp)
1612#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1616#	lw $t0,-4($t0) # negative of string length
1620#	subu $t0,$zero,$t0 # string length
1624#	lw $t1,4($sp) # k
1628#	lw $t2,12($sp) # n
1632#	bgt $zero,$t2,strIndexOutOfBounds
1633##...slt $at,$t2,$zero
1637##...bne $at,$zero,$+1780
1640#	bgt $t2,$t1,strIndexOutOfBounds
1641##...slt $at,$t1,$t2
1645##...bne $at,$zero,$+1772
1648#	bgt $t1,$t0,strIndexOutOfBounds
1649##...slt $at,$t0,$t1
1653##...bne $at,$zero,$+1764

	# allocate memory
1656#	subu $s6,$t1,$t2 # # chars in target-string
1660#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1664#	srl $s6,$s6,2 # convert bytes-count to word-count
1668#	move $s7,$zero # (no object-bytes in string)
1672#	jal newObject

	# store "String" tag in object-type field
1676#	la $t0,CLASS_String
1680#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1684#	lw $t1,8($sp) # k
1688#	lw $t2,16($sp) # n
1692#	subu $t0,$t2,$t1 # value to store
1696#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1700#	lw $t3,24($sp) # source string pointer
1704#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
1708#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
1712#	lw $t4,-8($t3) # # data words in source string
1716#	sll $t4,$t4,2 # # data bytes in source string
1720#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1724#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1728#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1732#	lw $t2,-8($s7) # # data words in target string
1736#	sll $t2,$t2,2 # # data bytes in target string
1740#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
1744:  subCopyLoopzz:
1744#	lb $t4,-8($t3)
1748#	sb $t4,-8($t2)
1752#	addu $t2,$t2,1
1756#	addu $t3,$t3,1
1760#	blt $t3,$t1,subCopyLoopzz
1761##...slt $at,$t3,$t1
1765##...bne $at,$zero,$-20
	
1768:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1768#	lw $ra,4($sp) # restore $ra
1772#	addu $sp,$sp,24 # pop stack
	
	# return
1776#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1780:length:

	# get string pointer
1780#	lw $t0,($sp)
	
	# grow stack
1784#	subu $sp,$sp,4

	# store GC tag
1788#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
1792#	lw $t0,-4($t0) # -length
1796#	subu $t0,$zero,$t0
1800#	sw $t0,($sp) #store length

	# return
1804#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
1808:concat:
 	# save $ra by pushing onto stack
1808#	subu $sp,$sp,4
1812#	sw $ra($sp)

	# get string pointers and check parameter for null
1816#	lw $t0,4($sp)
1820#	beq $t0,$zero,nullPtrException
1824#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
1828#	lw $t0,-4($t0) # negative size of second object
1832#	lw $t1,-4($t1) # negative size of first object
1836#	addu $s6,$t0,$t1 # sum of negative sizes
1840#	sra $s6,$s6,2 # negative word-size of char part
1844#	subu $s6,$zero,$s6 # word size of char part
1848#	addu $s6,$s6,1 # data word size, including v-table word
1852#	move $s7,$zero
1856#	jal newObject

	# store "String" tag in object-type field
1860#	la $t0,CLASS_String
1864#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
1868#	lw $ra,4($sp) # return address
1872#	lw $t0,8($sp) # second object
1876#	lw $t1,12($sp) # first object
1880#	addu $sp,$sp,12 # pop
1884#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
1888#	lw $t2,-4($t0) # negative length of second object
1892#	lw $t3,-4($t1) # negative length of first object
1896#	addu $t4,$t2,$t3 # sum of negative lengths
1900#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
1904#	lw $t4,-8($t1) # # data words in first string
1908#	sll $t4,$t4,2 # # data bytes in first string
1912#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
1916#	lw $t4,-8($s7) # # data words in new string
1920#	sll $t4,$t4,2 # # data bytes in new string
1924#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
1928#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
1932#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
1936:  concatLoop1zz:
1936#	lb $t4,-8($t1)
1940#	sb $t4,-8($s7)
1944#	addu $s7,$s7,1
1948#	addu $t1,$t1,1
1952#	blt $t1,$t3,concatLoop1zz
1953##...slt $at,$t1,$t3
1957##...bne $at,$zero,$-20
1960:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
1960#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
1964#	lw $t4,-8($t0) # # data words in second string
1968#	sll $t4,$t4,2 # # data bytes in second string
1972#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
1976#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
1980:  concatLoop2zz:
1980#	lb $t4,-8($t1)
1984#	sb $t4,-8($s7)
1988#	addu $s7,$s7,1
1992#	addu $t1,$t1,1
1996#	blt $t1,$t3,concatLoop2zz
1997##...slt $at,$t1,$t3
2001##...bne $at,$zero,$-20
2004:  doneConcatLoop2zz:
 
2004:  concatRtnzz:
	# return
2004#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2008:charAt:
	# get string
2008#	lw $t0,8($sp)

	# check that index is in bounds
2012#	lw $t1,-4($t0) # negative of # data words in string
2016#	subu $t3,$zero,$t1 # # chars in string
2020#	lw $t2,($sp) # index
2024#	bgeu $t2,$t3,strIndexOutOfBounds
2025##...sltu $at,$t2,$t3
2029##...beq $at,$zero,$+1388

	# access element
2032#	lw $t1,-8($t0) # # data words in object
2036#	sll $t1,$t1,2 # - byte-offset from end of chars
2040#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2044#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2048#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2052#	addu $sp,$sp,4
2056#	sw $t0,($sp)
2060#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2064#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2068:intToString:

	# save return address on stack; allocate space for dummy GC tag
2068#	subu $sp,$sp,8
2072#	sw $ra,4($sp)

	# save current sp
2076#	move $t0,$sp

	# move constant 10 into $t3
2080#	li $t3,10

	# get argument, negate if negative
2084#	lw $t1,8($sp)
2088#	bge $t1,$zero,itsNonNegLoop
2089##...slt $at,$t1,$zero
2093##...beq $at,$zero,$+8
2096#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2100:  itsNonNegLoop:
2100#	divu $t1,$t3
2104#	mflo $t1 # quotient
2108#	mfhi $t4 # remainder
2112#	addu $t4,$t4,'0' # turn remainder into digit
2116#	subu $sp,$sp,4
2120#	sw $t4,($sp) # push digit onto stack
2124#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2128#	lw $t4,8($t0)
2132#	bge $t4,$zero,itsSkipNeg
2133##...slt $at,$t4,$zero
2137##...beq $at,$zero,$+16
2140#	li $t4,'-'
2144#	subu $sp,$sp,4
2148#	sw $t4,($sp)
2152:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2152#	subu $s6,$t0,$sp
2156#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2160#	sw $t3,($t0)
2164#	srl $s6,$s6,2
2168#	subu $sp,$sp,4
2172#	sw $s6,($sp)
	
	# allocate memory
2176#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2180#	srl $s6,$s6,2
2184#	move $s7,$zero # no "object" words in object
2188#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2192#	lw $t0,4($sp)
2196#	addu $sp,$sp,8

	# store "String" tag into class field
2200#	subu $s7,$s7,8 # address of header-1 word
2204#	la $t1,CLASS_String
2208#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2212#	subu $t0,$zero,$t0
2216#	sw $t0,4($s7)

2220#	lw $t1,($s7) # number of data words in string
2224#	sll $t1,$t1,2 # number data bytes in string
2228#	subu $t1,$s7,$t1 # first location to store chars in string
2232#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2236:  itsLoop:
2236#	lw $t2,($sp)
2240#	addu $sp,$sp,4
2244#	sb $t2,($t1)
2248#	addu $t1,$t1,1
2252#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2256#	lw $ra,4($sp)
2260#	addu $sp,$sp,16
2264#	addu $t0,$t0,15
2268#	and $t0,$t0,0xfffffffc
2269##...lui $at,65535
2273##...ori $at,$at,0xfffc
2277##...and $t0,$t0,$at
2280#	sw $t0,($sp)
2284#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2288:intToChar:
	# save return address
2288#	subu $sp,$sp,4
2292#	sw $ra,($sp)

	# allocate object
2296#	li $s6,2
2300#	move $s7,$zero
2304#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2308#	lw $ra,4($sp)
2312#	lw $t1,8($sp)
2316#	addu $sp,$sp,16

	# store "String" tag into class field
2320#	la $t0,CLASS_String
2324#	sw $t0,-12($s7)

	# store data in string
2328#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2332#	li $t0,-1
2336#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2340#	sw $s7,($sp)

	# return
2344#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2348:compareTo:
	# get string pointers and check parameter for null
2348#	lw $t0,($sp) # second string
2352#	beq $t0,$zero,nullPtrException
2356#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2360#	lw $t2,-4($t0) # negative length of second string
2364#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2368#	slt $t4,$t3,$t2
2372#	slt $t5,$t2,$t3
2376#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2380#	lw $t2,-8($t0) # # data words in second string
2384#	lw $t3,-8($t1) # # data words in first string
2388#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2392#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2396#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2400#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2404#	beq $zero,$t5,skipStrCmpLenzz
2408#	move $t2,$t3
2412:  skipStrCmpLenzz:
2412#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2416:  cmpLoopzz:
2416#	lw $t3,-8($t1) # word from str2
2420#	lw $t4,-8($t0) # word from str1
2424#	bne $t3,$t4,cmpNotEqualzz
2428#	addu $t1,$t1,4
2432#	addu $t0,$t0,4
2436#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2440#	j cmpHitLimitzz

2444:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2444#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2448#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2452#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2456:  cmpHitLimitzz:
2456#	sw $t5,($sp) # store value
2460#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2464#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2468:readLogicalChar:

	# check if we already have a character
2468#	lw $v0,lastCharRead
2472#	li $t0,-2
2476#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2480#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2484#	jr $ra # return
	
2488:  doReadCh:
	# we need to actually read a character: read and return
2488#	li $v0,12 # use system call to read a character
2492#	syscall
2496#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2500:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2500#	blt $s7,$zero arraySizeOutOfBounds
2501##...slt $at,$s7,$zero
2505##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2508#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2512:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2512#	move $t3,$s6
2516#	bge $t3,$zero,newSkip
2517##...slt $at,$t3,$zero
2521##...beq $at,$zero,$+8
2524#	move $t3,$zero

2528:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2528#	addu $t0,$t3,$s7
2532#	sll $t0,$t0,2
2536#	addu $t0,$t0,8 # amount of memory needed
2540#	addu $t1,$t0,$s3
2544#	bgtu $t1,$s4,doGC
2545##...sltu $at,$s4,$t1
2549##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2552#	move $t2,$s3
2556:  zeroObjLoop:
2556#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2560#	addu $s3,4
2564#	bltu $s3,$t1,zeroObjLoop
2565##...sltu $at,$s3,$t1
2569##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2572#	sll $t0,$s7,2    # number of post-header bytes
2576#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2580#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2584#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2588#	move $s7,$t0
2592#	subu $sp,$sp,4
2596#	sw $t0,($sp)

2600#	jr $ra
	
2604:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2604#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2608#	subu $sp,$sp,4
2612#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2616#	lw $t0,cur_seg
2620#	move $t7,$s4
2624#	la $t6,seg1_start
2625##...lui $t6,16
2629##...addiu $t6,$t6,3940
2632#	la $s3,seg0_start
2636#	la $s4,seg0_end
2637##...lui $s4,16
2641##...addiu $s4,$s4,3940
2644#	sw $zero,cur_seg
2648#	bne $t0,$zero,skipGc1
2652#	la $t6,seg0_start
2656#	la $s3,seg1_start
2657##...lui $s3,16
2661##...addiu $s3,$s3,3940
2664#	la $s4,seg1_end
2665##...lui $s4,32
2669##...addiu $s4,$s4,3940
2672#	sw $s5,cur_seg
2676:  skipGc1:
2676#	li $t5,-2
2680#	lw $t0,stack_bottom
2684#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2688:  gcStackCopyLoop:
2688#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2692#	sll $t2,$t1,31 # zero iff low bit was zero
2696#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2700#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2704#	bleu $t1,$t6,gcTestIterDone1
2705##...sltu $at,$t6,$t1
2709##...beq $at,$zero,$+148
2712#	bgtu $t1,$t7,gcTestIterDone1
2713##...sltu $at,$t7,$t1
2717##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2720#	lw $t2,-8($t1) # possible forwarding tag
2724#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
2728#	lw $t2,-4($t1) # forwarding pointer: object's new address
2732#	sw $t2,4($t0) # update stack value
2736#	j gcTestIterDone1 # do next iteration

2740:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
2740#	bge $t2,$zero,gcSkip2
2741##...slt $at,$t2,$zero
2745##...beq $at,$zero,$+8
2748#	move $t2,$zero # set to zero if -1 (number of data words)

2752:  gcSkip2:
2752#	sll $t2,$t2,2
2756#	addu $t2,$t2,8
2760#	subu $t4,$t1,$t2 # address of first word of source
2764#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2768#	bge $t3,$zero,gcH2Neg1
2769##...slt $at,$t3,$zero
2773##...beq $at,$zero,$+8
2776#	move $t3,$zero
2780:  gcH2Neg1:
2780#	sll $t3,$t3,2
2784#	addu $t3,$t3,$t1 # address one word past last word of source

2788#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
2792#	lw $s0,($t4)
2796#	lw $s1,-8($t1)
2800#	sw $s1,($t4)
2804#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
2808:  gCinnerCopy1:
2808#	lw $s0,($t4)
2812#	sw $s0,($s3)
2816#	addu $t4,$t4,4
2820#	addu $s3,$s3,4
2824#	bltu $t4,$t3,gCinnerCopy1
2825##...sltu $at,$t4,$t3
2829##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
2832#	sw $t5,-8($t1) # -2 in first header-slot
2836#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
2840#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
2844#	j gcTestIterDone1

2848:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
2848#	subu $t0,$t0,$t1
2852#	subu $t0,$t0,3

2856:  gcTestIterDone1:
2856#	bgeu $t0,$sp,gcStackCopyLoop
2857##...sltu $at,$t0,$sp
2861##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
2864#	lw $t1,cur_seg
2868#	la $t0,seg0_start
2872#	beq $t1,$zero,gcSkip4
2876#	la $t0,seg1_start
2877##...lui $t0,16
2881##...addiu $t0,$t0,3940

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

2884:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
2884#	bgeu $t0,$s3,gcFinishUp
2885##...sltu $at,$t0,$s3
2889##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

2892:  gcHeapCopyLoop:
	# check if we have a data array
2892#	lw $t1,($t0) # first header word for current object
2896#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
2897##...slt $at,$t1,$zero
2901##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
2904#	lw $t1,4($t0) # data words
2908#	addu $t1,$t1,2 # add in # header words
2912#	sll $t1,$t1,2 # convert to byte-count
2916#	addu $t0,$t0,$t1 # skip over object
2920#	j gcTestIterDone2 # go do next object, if any

2924:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
2924#	sll $t2,$t1,2 # # data bytes
2928#	addu $t2,$t2,8 # to skip header word
2932#	addu $t2,$t0,$t2 # pointer to new object
2936#	lw $t3,-8($t2) # word to swap
2940#	sw $t1,-8($t2) # store header word
2944#	sw $t3,($t0) # restore first word of object

2948#	lw $t3,-4($t2) # # object words (negative treated as zero)
2952#	bge $t3,$zero,gcH2Neg2
2953##...slt $at,$t3,$zero
2957##...beq $at,$zero,$+8
2960#	move $t3,$zero
2964:  gcH2Neg2:
2964#	sll $t3,$t3,2 # # object bytes
2968#	move $t0,$t2 # address of first pointer in object
2972#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
2976#	beq $t0,$s1,gcTestIterDone2
	
2980:  gcNextPointerInObject:
	# get pointer from object
2980#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
2984#	bleu $t1,$t6,gcGoNextPointerSlot
2985##...sltu $at,$t6,$t1
2989##...beq $at,$zero,$+136
2992#	bgtu $t1,$t7,gcGoNextPointerSlot
2993##...sltu $at,$t7,$t1
2997##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3000#	lw $t8,-8($t1) # possible forwarding tag
3004#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3008#	lw $t8,-4($t1) # forwarding pointer: object's new address
3012#	sw $t8,($t0) # update pointer in object
3016#	j gcGoNextPointerSlot # do next iteration

3020:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3020#	bge $t8,$zero,gcSkip5
3021##...slt $at,$t8,$zero
3025##...beq $at,$zero,$+8
3028#	move $t8,$zero # set to zero if -1

3032:  gcSkip5:
3032#	sll $t8,$t8,2
3036#	addu $t8,$t8,8
3040#	subu $t4,$t1,$t8 # address of first word of source
3044#	lw $t3,-4($t1)
3048#	bge $t3,$zero,gcNoNeg
3049##...slt $at,$t3,$zero
3053##...beq $at,$zero,$+8
3056#	move $t3,$zero
3060:  gcNoNeg:
3060#	sll $t3,$t3,2
3064#	addu $t3,$t3,$t1 # address one word past last word of source

3068#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3072#	lw $s0,($t4)
3076#	lw $t9,-8($t1)
3080#	sw $t9,($t4)
3084#	sw $s0,-8($t1)

	# copy all source bytes to the target
3088:  gCinnerCopy2:
3088#	lw $s0,($t4)
3092#	sw $s0,($s3)
3096#	addu $t4,$t4,4
3100#	addu $s3,$s3,4
3104#	bltu $t4,$t3,gCinnerCopy2
3105##...sltu $at,$t4,$t3
3109##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3112#	sw $t5,-8($t1) # -2 in first header-slot
3116#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3120#	sw $t8,($t0)

3124:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3124#	addu $t0,$t0,4
3128#	bltu $t0,$s1,gcNextPointerInObject
3129##...sltu $at,$t0,$s1
3133##...bne $at,$zero,$-152

3136:  gcTestIterDone2:
3136#	bltu $t0,$s3,gcHeapCopyLoop
3137##...sltu $at,$t0,$s3
3141##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3144:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3144#	lw $s2,($sp)
3148#	addu $sp,$sp,4

	# mark us as having already GC'd
3152#	move $t5,$s5

	# go try and allocate again
3156#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3160:vm_init:

	# mark bottom of stack
3160#	sw $sp,stack_bottom
3164#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3168#	move $s2,$zero
3172#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3176#	li $s5,5
3180#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3184#	la $s3,seg0_start
3188#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3192#	la $s4,seg0_end
3193##...lui $s4,16
3197##...addiu $s4,$s4,3940
3200#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3204#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3208:divide:
	# get parameters; abort if divisor zero
3208#	lw $t0,($sp)
3212#	lw $t1,8($sp)
3216#	beq $t0,$zero,divByZeroError
	
	# perform division
3220#	div $t1,$t0
3224#	mflo $t0

	# store result, adjust stack and return
3228#	addu $sp,$sp,8 # adjust stack
3232#	sw $t0,($sp) # store result
3236#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3240:remainder:
	# get parameters; abort if divisor zero
3240#	lw $t0,($sp)
3244#	lw $t1,8($sp)
3248#	beq $t0,$zero,divByZeroError
	
	# perform division
3252#	div $t1,$t0
3256#	mfhi $t0

	# store result, adjust stack and return
3260#	addu $sp,$sp,8 # adjust stack
3264#	sw $t0,($sp) # store result
3268#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3272:checkCast:
	# get object, allow immediately if null
3272#	lw $t2,($sp)
3276#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3280#	lw $t3,-8($t2) # <= 0 if array
3284#	lw $t2,-12($t2) # vtable address (unless array)
3288#	bgt $t3,$zero,skipArrayCast
3289##...slt $at,$zero,$t3
3293##...bne $at,$zero,$+8
3296#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3300:  skipArrayCast:
3300#	bge $t2,$t1,castException
3301##...slt $at,$t2,$t1
3305##...beq $at,$zero,$+152
3308#	blt $t2,$t0,castException
3309##...slt $at,$t2,$t0
3313##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3316:  checkCastReturn:	
3316#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3320:instanceOf:
	# get object, go return false if null
3320#	lw $t2,($sp)
3324#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3328#	lw $t3,-8($t2) # <= 0 if array
3332#	lw $t2,-12($t2) # vtable address (unless array)
3336#	bgt $t3,$zero,skipArrayInstanceOf
3337##...slt $at,$zero,$t3
3341##...bne $at,$zero,$+8
3344#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3348:  skipArrayInstanceOf:
3348#	sge $t0,$t2,$t0
3349##...slt $t0,$t2,$t0
3353##...xori $t0,$t0,0x1
3356#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3360#	and $t2,$t0,$t1
3364:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3364#	sw $t2,($sp)
3368#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3372:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3372#	li $v0,4 # syscall-code for print-string
3376#	syscall
3380:exit:
	# print termination message
3380#	li $v0,4
3384#	la $a0,exitString
3388#	syscall

	# terminate execution
3392#	li $v0,10 #syscall-code for "exit"
3396#	syscall

3400:outOfHeapMemory:
3400#	la $a0,heapMemoryMsg
3404#	j exitError
3408:divByZeroError:
3408#	la $a0,divByZeroMsg
3412#	j exitError
3416:strIndexOutOfBounds:
3416#	la $a0,strIndexOutOfBoundsMsg
3420#	j exitError
3424:arrayIndexOutOfBounds:
3424#	la $a0,arrayIndexOutOfBoundsMsg
3428#	j exitError
3432:arraySizeOutOfBounds:
3432#	la $a0,arraySizeOutOfBoundsMsg
3436#	j exitError
3440:nullPtrException:
3440#	la $a0,nullPtrExceptionMsg
3444#	j exitError
3448:badIntegerFormat:
3448#	la $a0,badIntegerFormatMsg
3452#	j exitError
3456:castException:
3456#	la $a0,castExceptionMsg
3460#	j exitError

############## data section ################
	.data
	.align 2

3632:cur_seg:
	.word 0

3636:lastCharRead:
	.word -2 # -2 => no buffered character

3640:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3667:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3690:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3725:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3759:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
3792:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
3823:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
3871:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
3892:gcMsg: 
      .asciiz "\nGC!\n"

3898:nullStr:
	.asciiz "null"
3903:trueString:
	.asciiz "true"
3908:falseString:
	.asciiz "false"
3914:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
3936:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

3940:seg0_start:
	.space 0x100000
1052516:seg0_end:
1052516:seg1_start:
	.space 0x100000
2101092:seg1_end:



