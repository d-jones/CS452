 .data # Program at 1.1 
  .byte 65 # StringLiteral at 8.18			
  .byte 114 # StringLiteral at 8.18 	 
  .byte 114 # StringLiteral at 8.18 	 
  .byte 97 # StringLiteral at 8.18	 	
  .byte 121 # StringLiteral at 8.18 		
  .byte 32 # StringLiteral at 8.18	  
  .byte 108 # StringLiteral at 8.18	
  .byte 101 # StringLiteral at 8.18  	
  .byte 110 # StringLiteral at 8.18 	 
  .byte 103 # StringLiteral at 8.18	  
  .byte 116 # StringLiteral at 8.18  
  .byte 104 # StringLiteral at 8.18		
  .byte 58 # StringLiteral at 8.18  
  .byte 32 # StringLiteral at 8.18			
  .byte 0 # StringLiteral at 8.18		 
  .byte 0 # StringLiteral at 8.18	
  .word CLASS_String # StringLiteral at 8.18  	
  .word 5 # StringLiteral at 8.18			
  .word -14 # StringLiteral at 8.18  
3704:strLit_27: # StringLiteral at 8.18  
  .byte 10 # StringLiteral at 10.18	 	
  .byte 0 # StringLiteral at 10.18 		
  .byte 0 # StringLiteral at 10.18 	
  .byte 0 # StringLiteral at 10.18	  
  .word CLASS_String # StringLiteral at 10.18 	 
  .word 2 # StringLiteral at 10.18 
  .word -1 # StringLiteral at 10.18 
3720:strLit_36: # StringLiteral at 10.18		
  .byte 97 # StringLiteral at 14.18  	
  .byte 114 # StringLiteral at 14.18		
  .byte 114 # StringLiteral at 14.18	  
  .byte 97 # StringLiteral at 14.18  	
  .byte 121 # StringLiteral at 14.18  	
  .byte 91 # StringLiteral at 14.18		
  .byte 50 # StringLiteral at 14.18	
  .byte 93 # StringLiteral at 14.18	
  .byte 58 # StringLiteral at 14.18  
  .byte 32 # StringLiteral at 14.18	  
  .byte 0 # StringLiteral at 14.18	 
  .byte 0 # StringLiteral at 14.18  
  .word CLASS_String # StringLiteral at 14.18	
  .word 4 # StringLiteral at 14.18	  
  .word -10 # StringLiteral at 14.18		 
3744:strLit_48: # StringLiteral at 14.18	
  .byte 10 # StringLiteral at 16.18			
  .byte 0 # StringLiteral at 16.18  
  .byte 0 # StringLiteral at 16.18	 	
  .byte 0 # StringLiteral at 16.18	 	
  .word CLASS_String # StringLiteral at 16.18	
  .word 2 # StringLiteral at 16.18	  
  .word -1 # StringLiteral at 16.18 	 
3760:strLit_56: # StringLiteral at 16.18 
  .byte 116 # StringLiteral at 19.13  	
  .byte 101 # StringLiteral at 19.13 	
  .byte 115 # StringLiteral at 19.13		 
  .byte 116 # StringLiteral at 19.13	
  .word CLASS_String # StringLiteral at 19.13  
  .word 2 # StringLiteral at 19.13	 	
  .word -4 # StringLiteral at 19.13 	 
3776:strLit_70: # StringLiteral at 19.13	  
  .byte 10 # StringLiteral at 21.18	
  .byte 10 # StringLiteral at 21.18 		
  .byte 10 # StringLiteral at 21.18 		
  .byte 0 # StringLiteral at 21.18	  
  .word CLASS_String # StringLiteral at 21.18   
  .word 2 # StringLiteral at 21.18		
  .word -3 # StringLiteral at 21.18 		
3792:strLit_78: # StringLiteral at 21.18		
  .byte 97 # StringLiteral at 26.19	  
  .byte 114 # StringLiteral at 26.19   
  .byte 114 # StringLiteral at 26.19   
  .byte 97 # StringLiteral at 26.19			
  .byte 121 # StringLiteral at 26.19   
  .byte 91 # StringLiteral at 26.19	  
  .byte 105 # StringLiteral at 26.19			
  .byte 93 # StringLiteral at 26.19	 
  .byte 32 # StringLiteral at 26.19	 
  .byte 61 # StringLiteral at 26.19	
  .byte 32 # StringLiteral at 26.19	 	
  .byte 0 # StringLiteral at 26.19	 
  .word CLASS_String # StringLiteral at 26.19	 	
  .word 4 # StringLiteral at 26.19 		
  .word -11 # StringLiteral at 26.19	
3816:strLit_94: # StringLiteral at 26.19		
  .byte 10 # StringLiteral at 28.19			
  .byte 0 # StringLiteral at 28.19			
  .byte 0 # StringLiteral at 28.19 
  .byte 0 # StringLiteral at 28.19 	 
  .word CLASS_String # StringLiteral at 28.19  	
  .word 2 # StringLiteral at 28.19	 	
  .word -1 # StringLiteral at 28.19 	
3832:strLit_102: # StringLiteral at 28.19		
3832:CLASS_Object: # Program at 1.1  	
3832:CLASS_String: # Program at 1.1			
.text # Program at 1.1 
.global main # Program at 1.1	  
0:main: # Program at 1.1		
0#jal vm_init # Program at 1.1 		
4#subu $sp, $sp, 4 # NewObject at 0.0 
8#sw $zero, ($sp) # NewObject at 0.0		
12#jal fcn_113_main # Call at 0.0		 
16#li $v0, 10 # Program at 1.1			
20#syscall # Program at 1.1	  
.globl fcn_113_main # MethodDeclVoid at 2.14 	
24:fcn_113_main: # MethodDeclVoid at 2.14  	
24#subu $sp, $sp, 8 # MethodDeclVoid at 2.14			
28#sw $ra, 4($sp) # MethodDeclVoid at 2.14		 
32#sw $s2, ($sp) # MethodDeclVoid at 2.14 		
36#lw $s2, 4($sp) # MethodDeclVoid at 2.14		
40#subu $sp, $sp, 8 # IntegerLiteral at 3.25  	
44#sw $s5, 4($sp) # IntegerLiteral at 3.25   
48#li $t0, 4 # IntegerLiteral at 3.25	 	
52#sw $t0, ($sp) # IntegerLiteral at 3.25  
56#lw $s7, ($sp) # NewArray at 3.17  	
60#addu $sp, $sp, 8 # NewArray at 3.17	  
64#li $s6, 0 # NewArray at 3.17	  
68#jal newObject # NewArray at 3.17  	
72#lw $t0, 0($sp) # IdentifierExp at 4.3  	
76#subu $sp, $sp, 4 # IdentifierExp at 4.3			
80#sw $t0, ($sp) # IdentifierExp at 4.3			
84#subu $sp, $sp, 8 # IntegerLiteral at 4.9 		
88#sw $s5, 4($sp) # IntegerLiteral at 4.9  	
92#li $t0, 0 # IntegerLiteral at 4.9   
96#sw $t0, ($sp) # IntegerLiteral at 4.9	  
100#subu $sp, $sp, 8 # IntegerLiteral at 4.14			
104#sw $s5, 4($sp) # IntegerLiteral at 4.14		
108#li $t0, 1 # IntegerLiteral at 4.14  
112#sw $t0, ($sp) # IntegerLiteral at 4.14	
116#lw $t0, ($sp) # Assign at 4.12		
120#lw $t1, 16($sp) # Assign at 4.12			
124#beq $t1, $zero, nullPtrException # Assign at 4.12	 	
128#lw $t2, 8($sp) # Assign at 4.12		 
132#lw $t3, -4($t1) # Assign at 4.12   
136#bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 4.12  
137##...sltu $at,$t2,$t3
141##...beq $at,$zero,$+3496
144#sll $t2, $t2, 2 # Assign at 4.12   
148#addu $t2, $t2, $t1 # Assign at 4.12		
152#sw $t0, ($t2) # Assign at 4.12		
156#addu $sp, $sp, 20 # Assign at 4.12 		
160#lw $t0, 0($sp) # IdentifierExp at 5.3 	
164#subu $sp, $sp, 4 # IdentifierExp at 5.3  
168#sw $t0, ($sp) # IdentifierExp at 5.3	 
172#subu $sp, $sp, 8 # IntegerLiteral at 5.9  
176#sw $s5, 4($sp) # IntegerLiteral at 5.9  
180#li $t0, 1 # IntegerLiteral at 5.9	 	
184#sw $t0, ($sp) # IntegerLiteral at 5.9	 	
188#subu $sp, $sp, 8 # IntegerLiteral at 5.14   
192#sw $s5, 4($sp) # IntegerLiteral at 5.14			
196#li $t0, 2 # IntegerLiteral at 5.14  	
200#sw $t0, ($sp) # IntegerLiteral at 5.14  	
204#lw $t0, ($sp) # Assign at 5.12	 	
208#lw $t1, 16($sp) # Assign at 5.12 	 
212#beq $t1, $zero, nullPtrException # Assign at 5.12 
216#lw $t2, 8($sp) # Assign at 5.12	 	
220#lw $t3, -4($t1) # Assign at 5.12 
224#bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 5.12	 
225##...sltu $at,$t2,$t3
229##...beq $at,$zero,$+3408
232#sll $t2, $t2, 2 # Assign at 5.12		 
236#addu $t2, $t2, $t1 # Assign at 5.12	  
240#sw $t0, ($t2) # Assign at 5.12	
244#addu $sp, $sp, 20 # Assign at 5.12 	 
248#lw $t0, 0($sp) # IdentifierExp at 6.3	 
252#subu $sp, $sp, 4 # IdentifierExp at 6.3		 
256#sw $t0, ($sp) # IdentifierExp at 6.3  	
260#subu $sp, $sp, 8 # IntegerLiteral at 6.9	 	
264#sw $s5, 4($sp) # IntegerLiteral at 6.9 	 
268#li $t0, 2 # IntegerLiteral at 6.9	
272#sw $t0, ($sp) # IntegerLiteral at 6.9 		
276#subu $sp, $sp, 8 # IntegerLiteral at 6.14	  
280#sw $s5, 4($sp) # IntegerLiteral at 6.14		 
284#li $t0, 7 # IntegerLiteral at 6.14	 	
288#sw $t0, ($sp) # IntegerLiteral at 6.14		
292#lw $t0, ($sp) # Assign at 6.12 
296#lw $t1, 16($sp) # Assign at 6.12		
300#beq $t1, $zero, nullPtrException # Assign at 6.12	  
304#lw $t2, 8($sp) # Assign at 6.12	
308#lw $t3, -4($t1) # Assign at 6.12	 	
312#bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 6.12 
313##...sltu $at,$t2,$t3
317##...beq $at,$zero,$+3320
320#sll $t2, $t2, 2 # Assign at 6.12			
324#addu $t2, $t2, $t1 # Assign at 6.12 	
328#sw $t0, ($t2) # Assign at 6.12   
332#addu $sp, $sp, 20 # Assign at 6.12			
336#lw $t0, 0($sp) # IdentifierExp at 7.3   
340#subu $sp, $sp, 4 # IdentifierExp at 7.3	 
344#sw $t0, ($sp) # IdentifierExp at 7.3		
348#subu $sp, $sp, 8 # IntegerLiteral at 7.9		
352#sw $s5, 4($sp) # IntegerLiteral at 7.9		 
356#li $t0, 3 # IntegerLiteral at 7.9	 
360#sw $t0, ($sp) # IntegerLiteral at 7.9 
364#subu $sp, $sp, 8 # IntegerLiteral at 7.14   
368#sw $s5, 4($sp) # IntegerLiteral at 7.14 	 
372#li $t0, 9 # IntegerLiteral at 7.14	 	
376#sw $t0, ($sp) # IntegerLiteral at 7.14	 
380#lw $t0, ($sp) # Assign at 7.12   
384#lw $t1, 16($sp) # Assign at 7.12	 	
388#beq $t1, $zero, nullPtrException # Assign at 7.12 
392#lw $t2, 8($sp) # Assign at 7.12			
396#lw $t3, -4($t1) # Assign at 7.12 		
400#bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 7.12			
401##...sltu $at,$t2,$t3
405##...beq $at,$zero,$+3232
408#sll $t2, $t2, 2 # Assign at 7.12	
412#addu $t2, $t2, $t1 # Assign at 7.12  
416#sw $t0, ($t2) # Assign at 7.12	  
420#addu $sp, $sp, 20 # Assign at 7.12 	
424#subu $sp, $sp, 4 # Super at 8.9  
428#sw $s2, ($sp) # Super at 8.9	 
432#subu $sp, $sp, 4 # StringLiteral at 8.18 	
436#la $t0, strLit_27 # StringLiteral at 8.18  	
440#sw $t0, ($sp) # StringLiteral at 8.18   
444#jal printStr # Call at 8.9 	 
448#subu $sp, $sp, 4 # Super at 9.9 		
452#sw $s2, ($sp) # Super at 9.9   
456#lw $t0, 4($sp) # IdentifierExp at 9.18 		
460#subu $sp, $sp, 4 # IdentifierExp at 9.18 		
464#sw $t0, ($sp) # IdentifierExp at 9.18 		
468#lw $t0, ($sp) # ArrayLength at 9.23   
472#beq $t0, $zero, nullPtrException # ArrayLength at 9.23 		
476#lw $t0, -4($t0) # ArrayLength at 9.23   
480#sw $s5, ($sp) # ArrayLength at 9.23 
484#subu $sp, $sp, 4 # ArrayLength at 9.23		 
488#sw $t0, ($sp) # ArrayLength at 9.23	
492#jal printInt # Call at 9.9			
496#subu $sp, $sp, 4 # Super at 10.9 
500#sw $s2, ($sp) # Super at 10.9 
504#subu $sp, $sp, 4 # StringLiteral at 10.18			
508#la $t0, strLit_36 # StringLiteral at 10.18	 	
512#sw $t0, ($sp) # StringLiteral at 10.18	
516#jal printStr # Call at 10.9 	
520#subu $sp, $sp, 8 # IntegerLiteral at 12.11		
524#sw $s5, 4($sp) # IntegerLiteral at 12.11 		
528#li $t0, 0 # IntegerLiteral at 12.11	 
532#sw $t0, ($sp) # IntegerLiteral at 12.11	
536#lw $t0, 8($sp) # IdentifierExp at 13.7  	
540#subu $sp, $sp, 4 # IdentifierExp at 13.7   
544#sw $t0, ($sp) # IdentifierExp at 13.7		
548#subu $sp, $sp, 8 # IntegerLiteral at 13.13 	 
552#sw $s5, 4($sp) # IntegerLiteral at 13.13  	
556#li $t0, 2 # IntegerLiteral at 13.13	 
560#sw $t0, ($sp) # IntegerLiteral at 13.13	 
564#lw $t0, 8($sp) # ArrayLookup at 13.12	
568#beq $t0, $zero, nullPtrException # ArrayLookup at 13.12  	
572#lw $t1, -4($t0) # ArrayLookup at 13.12		 
576#lw $t2, ($sp) # ArrayLookup at 13.12	 	
580#bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 13.12 		
581##...sltu $at,$t2,$t1
585##...beq $at,$zero,$+3052
588#sll $t2, $t2, 2 # ArrayLookup at 13.12  	
592#addu $t2, $t2, $t0 # ArrayLookup at 13.12	  
596#lw $t0, ($t2) # ArrayLookup at 13.12	  
600#sw $t0, 4($sp) # ArrayLookup at 13.12	 	
604#sw $s5, 8($sp) # ArrayLookup at 13.12  
608#addu $sp, $sp, 4 # ArrayLookup at 13.12		
612#lw $t0, ($sp) # Assign at 13.5  	
616#sw $t0, 8($sp) # Assign at 13.5		
620#addu $sp, $sp, 8 # Assign at 13.5 
624#subu $sp, $sp, 4 # Super at 14.9 	 
628#sw $s2, ($sp) # Super at 14.9 
632#subu $sp, $sp, 4 # StringLiteral at 14.18	
636#la $t0, strLit_48 # StringLiteral at 14.18 	 
640#sw $t0, ($sp) # StringLiteral at 14.18	  
644#jal printStr # Call at 14.9	 
648#subu $sp, $sp, 4 # Super at 15.9			
652#sw $s2, ($sp) # Super at 15.9	  
656#lw $t0, 4($sp) # IdentifierExp at 15.18  	
660#subu $sp, $sp, 8 # IdentifierExp at 15.18	 	
664#sw $s5, 4($sp) # IdentifierExp at 15.18			
668#sw $t0, ($sp) # IdentifierExp at 15.18	 	
672#jal printInt # Call at 15.9	  
676#subu $sp, $sp, 4 # Super at 16.9 
680#sw $s2, ($sp) # Super at 16.9	  
684#subu $sp, $sp, 4 # StringLiteral at 16.18 	
688#la $t0, strLit_56 # StringLiteral at 16.18  
692#sw $t0, ($sp) # StringLiteral at 16.18  
696#jal printStr # Call at 16.9	 
700#subu $sp, $sp, 8 # IntegerLiteral at 18.30	  
704#sw $s5, 4($sp) # IntegerLiteral at 18.30  
708#li $t0, 1 # IntegerLiteral at 18.30		
712#sw $t0, ($sp) # IntegerLiteral at 18.30 
716#lw $s7, ($sp) # NewArray at 18.19   
720#addu $sp, $sp, 8 # NewArray at 18.19	
724#li $s6, 0 # NewArray at 18.19		
728#jal newObject # NewArray at 18.19	 	
732#lw $t0, 0($sp) # IdentifierExp at 19.3	 	
736#subu $sp, $sp, 4 # IdentifierExp at 19.3 		
740#sw $t0, ($sp) # IdentifierExp at 19.3 	 
744#subu $sp, $sp, 8 # IntegerLiteral at 19.8 		
748#sw $s5, 4($sp) # IntegerLiteral at 19.8		
752#li $t0, 0 # IntegerLiteral at 19.8	 	
756#sw $t0, ($sp) # IntegerLiteral at 19.8  	
760#subu $sp, $sp, 4 # StringLiteral at 19.13	 
764#la $t0, strLit_70 # StringLiteral at 19.13 		
768#sw $t0, ($sp) # StringLiteral at 19.13	
772#lw $t0, ($sp) # Assign at 19.11	
776#lw $t1, 12($sp) # Assign at 19.11   
780#beq $t1, $zero, nullPtrException # Assign at 19.11		
784#lw $t2, 4($sp) # Assign at 19.11	
788#lw $t3, -4($t1) # Assign at 19.11  	
792#bgeu $t2, $t3, arrayIndexOutOfBounds # Assign at 19.11	 	
793##...sltu $at,$t2,$t3
797##...beq $at,$zero,$+2840
800#sll $t2, $t2, 2 # Assign at 19.11  
804#addu $t2, $t2, $t1 # Assign at 19.11  
808#sw $t0, ($t2) # Assign at 19.11	
812#addu $sp, $sp, 16 # Assign at 19.11	  
816#subu $sp, $sp, 4 # Super at 20.9	 	
820#sw $s2, ($sp) # Super at 20.9			
824#lw $t0, 4($sp) # IdentifierExp at 20.18  
828#subu $sp, $sp, 4 # IdentifierExp at 20.18 		
832#sw $t0, ($sp) # IdentifierExp at 20.18 	 
836#subu $sp, $sp, 8 # IntegerLiteral at 20.23  
840#sw $s5, 4($sp) # IntegerLiteral at 20.23		 
844#li $t0, 0 # IntegerLiteral at 20.23 	 
848#sw $t0, ($sp) # IntegerLiteral at 20.23	 
852#lw $t0, 8($sp) # ArrayLookup at 20.22		
856#beq $t0, $zero, nullPtrException # ArrayLookup at 20.22   
860#lw $t1, -4($t0) # ArrayLookup at 20.22	
864#lw $t2, ($sp) # ArrayLookup at 20.22	  
868#bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 20.22  
869##...sltu $at,$t2,$t1
873##...beq $at,$zero,$+2764
876#sll $t2, $t2, 2 # ArrayLookup at 20.22			
880#addu $t2, $t2, $t0 # ArrayLookup at 20.22	 	
884#lw $t0, ($t2) # ArrayLookup at 20.22	
888#sw $t0, 8($sp) # ArrayLookup at 20.22  
892#addu $sp, $sp, 8 # ArrayLookup at 20.22 	
896#jal printStr # Call at 20.9	 	
900#subu $sp, $sp, 4 # Super at 21.9  
904#sw $s2, ($sp) # Super at 21.9	 	
908#subu $sp, $sp, 4 # StringLiteral at 21.18	
912#la $t0, strLit_78 # StringLiteral at 21.18 	
916#sw $t0, ($sp) # StringLiteral at 21.18	 
920#jal printStr # Call at 21.9  
924#subu $sp, $sp, 8 # IntegerLiteral at 23.11	 
928#sw $s5, 4($sp) # IntegerLiteral at 23.11 		
932#li $t0, 0 # IntegerLiteral at 23.11 	 
936#sw $t0, ($sp) # IntegerLiteral at 23.11	
940#j while_enter_112 # While at 24.3 		
944:while_top_112: # While at 24.3 	
944#lw $t0, 20($sp) # IdentifierExp at 25.8	 
948#subu $sp, $sp, 4 # IdentifierExp at 25.8			
952#sw $t0, ($sp) # IdentifierExp at 25.8  	
956#lw $t0, 4($sp) # IdentifierExp at 25.14		
960#subu $sp, $sp, 8 # IdentifierExp at 25.14		 
964#sw $s5, 4($sp) # IdentifierExp at 25.14		 
968#sw $t0, ($sp) # IdentifierExp at 25.14 
972#lw $t0, 8($sp) # ArrayLookup at 25.13 		
976#beq $t0, $zero, nullPtrException # ArrayLookup at 25.13	  
980#lw $t1, -4($t0) # ArrayLookup at 25.13	 	
984#lw $t2, ($sp) # ArrayLookup at 25.13	 	
988#bgeu $t2, $t1, arrayIndexOutOfBounds # ArrayLookup at 25.13	 	
989##...sltu $at,$t2,$t1
993##...beq $at,$zero,$+2644
996#sll $t2, $t2, 2 # ArrayLookup at 25.13		
1000#addu $t2, $t2, $t0 # ArrayLookup at 25.13			
1004#lw $t0, ($t2) # ArrayLookup at 25.13 
1008#sw $t0, 4($sp) # ArrayLookup at 25.13			
1012#sw $s5, 8($sp) # ArrayLookup at 25.13  	
1016#addu $sp, $sp, 4 # ArrayLookup at 25.13		
1020#lw $t0, ($sp) # Assign at 25.6	 
1024#sw $t0, 20($sp) # Assign at 25.6			
1028#addu $sp, $sp, 8 # Assign at 25.6			
1032#subu $sp, $sp, 4 # Super at 26.10		
1036#sw $s2, ($sp) # Super at 26.10	 
1040#subu $sp, $sp, 4 # StringLiteral at 26.19		
1044#la $t0, strLit_94 # StringLiteral at 26.19		 
1048#sw $t0, ($sp) # StringLiteral at 26.19			
1052#jal printStr # Call at 26.10		
1056#subu $sp, $sp, 4 # Super at 27.10			
1060#sw $s2, ($sp) # Super at 27.10		 
1064#lw $t0, 16($sp) # IdentifierExp at 27.19  	
1068#subu $sp, $sp, 8 # IdentifierExp at 27.19	  
1072#sw $s5, 4($sp) # IdentifierExp at 27.19 		
1076#sw $t0, ($sp) # IdentifierExp at 27.19 
1080#jal printInt # Call at 27.10 		
1084#subu $sp, $sp, 4 # Super at 28.10 	
1088#sw $s2, ($sp) # Super at 28.10  
1092#subu $sp, $sp, 4 # StringLiteral at 28.19 	
1096#la $t0, strLit_102 # StringLiteral at 28.19		 
1100#sw $t0, ($sp) # StringLiteral at 28.19	  
1104#jal printStr # Call at 28.10	 
1108#lw $t0, 0($sp) # IdentifierExp at 29.4 	 
1112#subu $sp, $sp, 8 # IdentifierExp at 29.4 		
1116#sw $s5, 4($sp) # IdentifierExp at 29.4	 
1120#sw $t0, ($sp) # IdentifierExp at 29.4 	
1124#subu $sp, $sp, 8 # IntegerLiteral at 29.5	
1128#sw $s5, 4($sp) # IntegerLiteral at 29.5			
1132#li $t0, 1 # IntegerLiteral at 29.5  
1136#sw $t0, ($sp) # IntegerLiteral at 29.5 	
1140#lw $t0, ($sp) # Plus at 29.5			
1144#lw $t1, 8($sp) # Plus at 29.5	  
1148#addu $t0, $t0, $t1 # Plus at 29.5		 
1152#addu $sp, $sp, 8 # Plus at 29.5	  
1156#sw $t0, ($sp) # Plus at 29.5  
1160#lw $t0, ($sp) # Assign at 29.4		
1164#sw $t0, 8($sp) # Assign at 29.4	 
1168#addu $sp, $sp, 8 # Assign at 29.4 
1172:while_enter_112: # While at 24.3   
1172#lw $t0, 0($sp) # IdentifierExp at 24.9 	 
1176#subu $sp, $sp, 8 # IdentifierExp at 24.9			
1180#sw $s5, 4($sp) # IdentifierExp at 24.9 	
1184#sw $t0, ($sp) # IdentifierExp at 24.9 
1188#lw $t0, 28($sp) # IdentifierExp at 24.13	  
1192#subu $sp, $sp, 4 # IdentifierExp at 24.13 
1196#sw $t0, ($sp) # IdentifierExp at 24.13  	
1200#lw $t0, ($sp) # ArrayLength at 24.18   
1204#beq $t0, $zero, nullPtrException # ArrayLength at 24.18	
1208#lw $t0, -4($t0) # ArrayLength at 24.18			
1212#sw $s5, ($sp) # ArrayLength at 24.18			
1216#subu $sp, $sp, 4 # ArrayLength at 24.18 	 
1220#sw $t0, ($sp) # ArrayLength at 24.18		
1224#lw $t0, ($sp) # LessThan at 24.11		
1228#lw $t1, 8($sp) # LessThan at 24.11		
1232#slt $t0, $t1, $t0 # LessThan at 24.11  	
1236#addu $sp, $sp, 12 # LessThan at 24.11		 
1240#sw $t0, ($sp) # LessThan at 24.11	  
1244#lw $t0, ($sp) # While at 24.3 
1248#addu $sp, $sp, 4 # While at 24.3	 	
1252#bne $t0, $zero, while_top_112 # While at 24.3 
1256:while_exit_112: # While at 24.3	  
1256#lw $ra, 28($sp) # MethodDeclVoid at 2.14   
1260#lw $s2, 4($sp) # MethodDeclVoid at 2.14	
1264#addu $sp, $sp, 36 # MethodDeclVoid at 2.14 		
1268#jr $ra # MethodDeclVoid at 2.14	  
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1272:readLine:
	
1272#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1276#	sw $ra, 4($sp) # save $ra
1280#	move $t1,$sp # save "original" sp

1284:  doRead:

	# read the character
1284#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1288#	subu $t2,$v0,13
1292#	bne $t2,$zero,notReturnRL
1296#	jal readLogicalChar
1300#	subu $t2,$v0,10 # check for newline
1304#	beq $t2,$zero,foundNewLine
1308#	sw $v0,lastCharRead # push back character into queue
1312#	j foundNewLine # go process the line

1316:  notReturnRL:

	# at this point, $v0 has our character

1316#	subu $t0,$v0,10
1320#	beq $t0,$zero,foundNewLine
1324#	blt $v0,$zero,foundEof
1325##...slt $at,$v0,$zero
1329##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1332#	subu $sp,$sp,4
1336#	sw $v0,($sp)

	# loop back up to get next character
1340#	j doRead

1344:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1344#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1348#	sw $zero,8($sp) # return-value: null
1352#	j rlReturn # return

1356:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1356#	subu $t0,$t1,$sp # number of chars we read (times 4)
1360#	srl $s6,$t0,2 # number of words on stack with chars
1364#	subu $sp,$sp,4 # push char-count ...
1368#	sw $s6,($sp) # ... onto stack
1372#	addu $t2,$t0,5 # GC tag, incl. for count-word
1376#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1380#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1384#	srl $s6,$s6,2 # data words in object
1388#	move $s7,$zero # # object words in object
1392#	jal newObject # allocate space
	
	# store header words
1396#	la $t0,CLASS_String
1400#	sw $t0,-12($s7) # store class tag (String) into object
1404#	lw $t2,4($sp) # char-count
1408#	sll $t1,$t2,2 # 4 times number of chars
1412#	subu $t2,$zero,$t2 # negative of char-count
1416#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1420#	lw $t0,-8($s7) # data words in object
1424#	sll $t0,$t0,2 # data bytes in object
1428#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1432#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1436#	addu $sp,$sp,8 # pop redundant object-pointer and count
1440#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1444#	beq $sp,$t1,doneCharCopy
1448:  charCopyLoop:
1448#	lw $t2,($sp)
1452#	sb $t2,-9($t0)
1456#	addu $sp,$sp,4
1460#	subu $t0,$t0,1
1464#	bne $sp,$t1,charCopyLoop
1468:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1468#	sw $s7,8($sp)
	
1472:  rlReturn:
	# restore return address and return
1472#	lw $ra,4($sp) # restore return address, ...
1476#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1480#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1484:readInt:

	# save $ra by pushing onto stack
1484#	subu $sp,$sp,4
1488#	sw $ra,($sp)

1492:  riSkipWhiteLoop:
	# read a character
1492#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1496#	subu $t0,$v0,32
1500#	bgt $t0,$zero,nonWhite
1501##...slt $at,$zero,$t0
1505##...bne $at,$zero,$+44
1508#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1512#	subu $t0,$v0,10
1516#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1520#	subu $t0,$v0,9
1524#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1528#	subu $t0,$v0,13
1532#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1536#	subu $t0,$v0,12
1540#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1544#	j badIntegerFormat # illegal integer char: abort program

1548:  nonWhite:
1548#	subu $t0,$v0,'-'
1552#	li $t4,1 # final multiplier
1556#	bne $t0,$zero,helpReadInt # go read
1560#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1564#	jal readLogicalChar

1568:  helpReadInt:
1568#	li $t2,10
1572#	subu $t1,$v0,'0' # convert digit to 0-9 value
1576#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1577##...sltu $at,$t1,$t2
1581##...beq $at,$zero,$+2080
1584#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1588:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1588#	jal readLogicalChar # read next character
1592#	subu $t1,$v0,'0' # convert digit to 0-9 value
1596#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1597##...sltu $at,$t1,$t2
1601##...beq $at,$zero,$+20

1604#	mul $t3,$t3,$t2 # multiply old value by 10
1605##...mult $t3,$t2
1609##...mflo $t3
1612#	addu $t3,$t3,$t1 # add in value of new digit
1616#	j digitLoop

1620:  doneDigitLoop:

	# "push back" unused character into queue
1620#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1624#	lw $ra,($sp)
1628#	mult $t3,$t4 # multiply to account for poss. minus sign
1632#	mflo $t3
1636#	sw $t3,($sp) # result
1640#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1644#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1648:readChar:

	# save $ra by pushing onto stack
1648#	subu $sp,$sp,4
1652#	sw $ra,($sp)

  	# read the character
1656#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1660#	lw $ra,($sp)
1664#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1668#	sw $v0,($sp)

	# return
1672#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1676:printStr:
	# check for null, printing "(null)", if so
1676#	lw $t0,($sp)
1680#	bne $t0,$zero,psNotNull

	# print "(null)"
1684#	la $a0,nullStr
1688#	li $v0,4
1692#	syscall
1696#	j donePrintStr
	
1700:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1700#	subu $t0,$t0,8
1704#	lw $t1,($t0) # word just beyond end of string
1708#	sll $t1,$t1,2
1712#	subu $t1,$t0,$t1 # first word in string
1716#	lw $t0,4($t0) # negative of string-length
1720#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1724#	beq $t0,$t1,donePrintStr
1728:  psLoop:
1728#	lb $a0,($t1) # next byte
1732#	li $v0,11 # code for printing char
1736#        syscall # print the char
1740#	addu $t1,$t1,1 # go to next char
1744#	blt $t1,$t0,psLoop
1745##...slt $at,$t1,$t0
1749##...bne $at,$zero,$-20

1752:  donePrintStr:
	# pop stack and return
1752#	addu $sp,$sp,8
1756#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1760:printInt:
	# pop value off stack, along with 'this'
1760#	lw $a0,($sp)
1764#	addu $sp,$sp,12

	# print it
1768#	li $v0,1 # code for print-int
1772#	syscall

	# return
1776#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1780:printBool:
	# pop value off stack, along with 'this'
1780#	lw $t0,($sp)
1784#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1788#	la $a0,falseString
1792#	beq $t0,$zero,skipPB
1796#	la $a0,trueString
1800:  skipPB:
1800#	li $v0,4 # code for print-string
1804#	syscall

	# return
1808#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1812:substring:

	# save $ra by pushing onto stack
1812#	subu $sp,$sp,4
1816#	sw $ra,($sp)

	# get string value off stack, test for null
1820#	lw $t0,20($sp)
1824#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1828#	lw $t0,-4($t0) # negative of string length
1832#	subu $t0,$zero,$t0 # string length
1836#	lw $t1,4($sp) # k
1840#	lw $t2,12($sp) # n
1844#	bgt $zero,$t2,strIndexOutOfBounds
1845##...slt $at,$t2,$zero
1849##...bne $at,$zero,$+1780
1852#	bgt $t2,$t1,strIndexOutOfBounds
1853##...slt $at,$t1,$t2
1857##...bne $at,$zero,$+1772
1860#	bgt $t1,$t0,strIndexOutOfBounds
1861##...slt $at,$t0,$t1
1865##...bne $at,$zero,$+1764

	# allocate memory
1868#	subu $s6,$t1,$t2 # # chars in target-string
1872#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1876#	srl $s6,$s6,2 # convert bytes-count to word-count
1880#	move $s7,$zero # (no object-bytes in string)
1884#	jal newObject

	# store "String" tag in object-type field
1888#	la $t0,CLASS_String
1892#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1896#	lw $t1,8($sp) # k
1900#	lw $t2,16($sp) # n
1904#	subu $t0,$t2,$t1 # value to store
1908#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1912#	lw $t3,24($sp) # source string pointer
1916#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
1920#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
1924#	lw $t4,-8($t3) # # data words in source string
1928#	sll $t4,$t4,2 # # data bytes in source string
1932#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1936#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1940#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1944#	lw $t2,-8($s7) # # data words in target string
1948#	sll $t2,$t2,2 # # data bytes in target string
1952#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
1956:  subCopyLoopzz:
1956#	lb $t4,-8($t3)
1960#	sb $t4,-8($t2)
1964#	addu $t2,$t2,1
1968#	addu $t3,$t3,1
1972#	blt $t3,$t1,subCopyLoopzz
1973##...slt $at,$t3,$t1
1977##...bne $at,$zero,$-20
	
1980:  doneSubCopyzz:
	# restore return address, store return value, pop stack
1980#	lw $ra,4($sp) # restore $ra
1984#	addu $sp,$sp,24 # pop stack
	
	# return
1988#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
1992:length:

	# get string pointer
1992#	lw $t0,($sp)
	
	# grow stack
1996#	subu $sp,$sp,4

	# store GC tag
2000#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2004#	lw $t0,-4($t0) # -length
2008#	subu $t0,$zero,$t0
2012#	sw $t0,($sp) #store length

	# return
2016#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2020:concat:
 	# save $ra by pushing onto stack
2020#	subu $sp,$sp,4
2024#	sw $ra($sp)

	# get string pointers and check parameter for null
2028#	lw $t0,4($sp)
2032#	beq $t0,$zero,nullPtrException
2036#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2040#	lw $t0,-4($t0) # negative size of second object
2044#	lw $t1,-4($t1) # negative size of first object
2048#	addu $s6,$t0,$t1 # sum of negative sizes
2052#	sra $s6,$s6,2 # negative word-size of char part
2056#	subu $s6,$zero,$s6 # word size of char part
2060#	addu $s6,$s6,1 # data word size, including v-table word
2064#	move $s7,$zero
2068#	jal newObject

	# store "String" tag in object-type field
2072#	la $t0,CLASS_String
2076#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2080#	lw $ra,4($sp) # return address
2084#	lw $t0,8($sp) # second object
2088#	lw $t1,12($sp) # first object
2092#	addu $sp,$sp,12 # pop
2096#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2100#	lw $t2,-4($t0) # negative length of second object
2104#	lw $t3,-4($t1) # negative length of first object
2108#	addu $t4,$t2,$t3 # sum of negative lengths
2112#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2116#	lw $t4,-8($t1) # # data words in first string
2120#	sll $t4,$t4,2 # # data bytes in first string
2124#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2128#	lw $t4,-8($s7) # # data words in new string
2132#	sll $t4,$t4,2 # # data bytes in new string
2136#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2140#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2144#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2148:  concatLoop1zz:
2148#	lb $t4,-8($t1)
2152#	sb $t4,-8($s7)
2156#	addu $s7,$s7,1
2160#	addu $t1,$t1,1
2164#	blt $t1,$t3,concatLoop1zz
2165##...slt $at,$t1,$t3
2169##...bne $at,$zero,$-20
2172:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2172#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2176#	lw $t4,-8($t0) # # data words in second string
2180#	sll $t4,$t4,2 # # data bytes in second string
2184#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2188#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2192:  concatLoop2zz:
2192#	lb $t4,-8($t1)
2196#	sb $t4,-8($s7)
2200#	addu $s7,$s7,1
2204#	addu $t1,$t1,1
2208#	blt $t1,$t3,concatLoop2zz
2209##...slt $at,$t1,$t3
2213##...bne $at,$zero,$-20
2216:  doneConcatLoop2zz:
 
2216:  concatRtnzz:
	# return
2216#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2220:charAt:
	# get string
2220#	lw $t0,8($sp)

	# check that index is in bounds
2224#	lw $t1,-4($t0) # negative of # data words in string
2228#	subu $t3,$zero,$t1 # # chars in string
2232#	lw $t2,($sp) # index
2236#	bgeu $t2,$t3,strIndexOutOfBounds
2237##...sltu $at,$t2,$t3
2241##...beq $at,$zero,$+1388

	# access element
2244#	lw $t1,-8($t0) # # data words in object
2248#	sll $t1,$t1,2 # - byte-offset from end of chars
2252#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2256#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2260#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2264#	addu $sp,$sp,4
2268#	sw $t0,($sp)
2272#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2276#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2280:intToString:

	# save return address on stack; allocate space for dummy GC tag
2280#	subu $sp,$sp,8
2284#	sw $ra,4($sp)

	# save current sp
2288#	move $t0,$sp

	# move constant 10 into $t3
2292#	li $t3,10

	# get argument, negate if negative
2296#	lw $t1,8($sp)
2300#	bge $t1,$zero,itsNonNegLoop
2301##...slt $at,$t1,$zero
2305##...beq $at,$zero,$+8
2308#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2312:  itsNonNegLoop:
2312#	divu $t1,$t3
2316#	mflo $t1 # quotient
2320#	mfhi $t4 # remainder
2324#	addu $t4,$t4,'0' # turn remainder into digit
2328#	subu $sp,$sp,4
2332#	sw $t4,($sp) # push digit onto stack
2336#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2340#	lw $t4,8($t0)
2344#	bge $t4,$zero,itsSkipNeg
2345##...slt $at,$t4,$zero
2349##...beq $at,$zero,$+16
2352#	li $t4,'-'
2356#	subu $sp,$sp,4
2360#	sw $t4,($sp)
2364:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2364#	subu $s6,$t0,$sp
2368#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2372#	sw $t3,($t0)
2376#	srl $s6,$s6,2
2380#	subu $sp,$sp,4
2384#	sw $s6,($sp)
	
	# allocate memory
2388#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2392#	srl $s6,$s6,2
2396#	move $s7,$zero # no "object" words in object
2400#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2404#	lw $t0,4($sp)
2408#	addu $sp,$sp,8

	# store "String" tag into class field
2412#	subu $s7,$s7,8 # address of header-1 word
2416#	la $t1,CLASS_String
2420#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2424#	subu $t0,$zero,$t0
2428#	sw $t0,4($s7)

2432#	lw $t1,($s7) # number of data words in string
2436#	sll $t1,$t1,2 # number data bytes in string
2440#	subu $t1,$s7,$t1 # first location to store chars in string
2444#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2448:  itsLoop:
2448#	lw $t2,($sp)
2452#	addu $sp,$sp,4
2456#	sb $t2,($t1)
2460#	addu $t1,$t1,1
2464#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2468#	lw $ra,4($sp)
2472#	addu $sp,$sp,16
2476#	addu $t0,$t0,15
2480#	and $t0,$t0,0xfffffffc
2481##...lui $at,65535
2485##...ori $at,$at,0xfffc
2489##...and $t0,$t0,$at
2492#	sw $t0,($sp)
2496#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2500:intToChar:
	# save return address
2500#	subu $sp,$sp,4
2504#	sw $ra,($sp)

	# allocate object
2508#	li $s6,2
2512#	move $s7,$zero
2516#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2520#	lw $ra,4($sp)
2524#	lw $t1,8($sp)
2528#	addu $sp,$sp,16

	# store "String" tag into class field
2532#	la $t0,CLASS_String
2536#	sw $t0,-12($s7)

	# store data in string
2540#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2544#	li $t0,-1
2548#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2552#	sw $s7,($sp)

	# return
2556#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2560:compareTo:
	# get string pointers and check parameter for null
2560#	lw $t0,($sp) # second string
2564#	beq $t0,$zero,nullPtrException
2568#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2572#	lw $t2,-4($t0) # negative length of second string
2576#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2580#	slt $t4,$t3,$t2
2584#	slt $t5,$t2,$t3
2588#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2592#	lw $t2,-8($t0) # # data words in second string
2596#	lw $t3,-8($t1) # # data words in first string
2600#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2604#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2608#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2612#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2616#	beq $zero,$t5,skipStrCmpLenzz
2620#	move $t2,$t3
2624:  skipStrCmpLenzz:
2624#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2628:  cmpLoopzz:
2628#	lw $t3,-8($t1) # word from str2
2632#	lw $t4,-8($t0) # word from str1
2636#	bne $t3,$t4,cmpNotEqualzz
2640#	addu $t1,$t1,4
2644#	addu $t0,$t0,4
2648#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2652#	j cmpHitLimitzz

2656:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2656#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2660#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2664#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2668:  cmpHitLimitzz:
2668#	sw $t5,($sp) # store value
2672#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2676#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2680:readLogicalChar:

	# check if we already have a character
2680#	lw $v0,lastCharRead
2684#	li $t0,-2
2688#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2692#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2696#	jr $ra # return
	
2700:  doReadCh:
	# we need to actually read a character: read and return
2700#	li $v0,12 # use system call to read a character
2704#	syscall
2708#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2712:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2712#	blt $s7,$zero arraySizeOutOfBounds
2713##...slt $at,$s7,$zero
2717##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2720#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2724:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2724#	move $t3,$s6
2728#	bge $t3,$zero,newSkip
2729##...slt $at,$t3,$zero
2733##...beq $at,$zero,$+8
2736#	move $t3,$zero

2740:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2740#	addu $t0,$t3,$s7
2744#	sll $t0,$t0,2
2748#	addu $t0,$t0,8 # amount of memory needed
2752#	addu $t1,$t0,$s3
2756#	bgtu $t1,$s4,doGC
2757##...sltu $at,$s4,$t1
2761##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2764#	move $t2,$s3
2768:  zeroObjLoop:
2768#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2772#	addu $s3,4
2776#	bltu $s3,$t1,zeroObjLoop
2777##...sltu $at,$s3,$t1
2781##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2784#	sll $t0,$s7,2    # number of post-header bytes
2788#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2792#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2796#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2800#	move $s7,$t0
2804#	subu $sp,$sp,4
2808#	sw $t0,($sp)

2812#	jr $ra
	
2816:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2816#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2820#	subu $sp,$sp,4
2824#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2828#	lw $t0,cur_seg
2832#	move $t7,$s4
2836#	la $t6,seg1_start
2837##...lui $t6,16
2841##...addiu $t6,$t6,4140
2844#	la $s3,seg0_start
2848#	la $s4,seg0_end
2849##...lui $s4,16
2853##...addiu $s4,$s4,4140
2856#	sw $zero,cur_seg
2860#	bne $t0,$zero,skipGc1
2864#	la $t6,seg0_start
2868#	la $s3,seg1_start
2869##...lui $s3,16
2873##...addiu $s3,$s3,4140
2876#	la $s4,seg1_end
2877##...lui $s4,32
2881##...addiu $s4,$s4,4140
2884#	sw $s5,cur_seg
2888:  skipGc1:
2888#	li $t5,-2
2892#	lw $t0,stack_bottom
2896#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2900:  gcStackCopyLoop:
2900#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2904#	sll $t2,$t1,31 # zero iff low bit was zero
2908#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2912#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2916#	bleu $t1,$t6,gcTestIterDone1
2917##...sltu $at,$t6,$t1
2921##...beq $at,$zero,$+148
2924#	bgtu $t1,$t7,gcTestIterDone1
2925##...sltu $at,$t7,$t1
2929##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
2932#	lw $t2,-8($t1) # possible forwarding tag
2936#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
2940#	lw $t2,-4($t1) # forwarding pointer: object's new address
2944#	sw $t2,4($t0) # update stack value
2948#	j gcTestIterDone1 # do next iteration

2952:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
2952#	bge $t2,$zero,gcSkip2
2953##...slt $at,$t2,$zero
2957##...beq $at,$zero,$+8
2960#	move $t2,$zero # set to zero if -1 (number of data words)

2964:  gcSkip2:
2964#	sll $t2,$t2,2
2968#	addu $t2,$t2,8
2972#	subu $t4,$t1,$t2 # address of first word of source
2976#	lw $t3,-4($t1) # number of object words (negative treated as zero)
2980#	bge $t3,$zero,gcH2Neg1
2981##...slt $at,$t3,$zero
2985##...beq $at,$zero,$+8
2988#	move $t3,$zero
2992:  gcH2Neg1:
2992#	sll $t3,$t3,2
2996#	addu $t3,$t3,$t1 # address one word past last word of source

3000#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3004#	lw $s0,($t4)
3008#	lw $s1,-8($t1)
3012#	sw $s1,($t4)
3016#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3020:  gCinnerCopy1:
3020#	lw $s0,($t4)
3024#	sw $s0,($s3)
3028#	addu $t4,$t4,4
3032#	addu $s3,$s3,4
3036#	bltu $t4,$t3,gCinnerCopy1
3037##...sltu $at,$t4,$t3
3041##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3044#	sw $t5,-8($t1) # -2 in first header-slot
3048#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3052#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3056#	j gcTestIterDone1

3060:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3060#	subu $t0,$t0,$t1
3064#	subu $t0,$t0,3

3068:  gcTestIterDone1:
3068#	bgeu $t0,$sp,gcStackCopyLoop
3069##...sltu $at,$t0,$sp
3073##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3076#	lw $t1,cur_seg
3080#	la $t0,seg0_start
3084#	beq $t1,$zero,gcSkip4
3088#	la $t0,seg1_start
3089##...lui $t0,16
3093##...addiu $t0,$t0,4140

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3096:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3096#	bgeu $t0,$s3,gcFinishUp
3097##...sltu $at,$t0,$s3
3101##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3104:  gcHeapCopyLoop:
	# check if we have a data array
3104#	lw $t1,($t0) # first header word for current object
3108#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3109##...slt $at,$t1,$zero
3113##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3116#	lw $t1,4($t0) # data words
3120#	addu $t1,$t1,2 # add in # header words
3124#	sll $t1,$t1,2 # convert to byte-count
3128#	addu $t0,$t0,$t1 # skip over object
3132#	j gcTestIterDone2 # go do next object, if any

3136:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3136#	sll $t2,$t1,2 # # data bytes
3140#	addu $t2,$t2,8 # to skip header word
3144#	addu $t2,$t0,$t2 # pointer to new object
3148#	lw $t3,-8($t2) # word to swap
3152#	sw $t1,-8($t2) # store header word
3156#	sw $t3,($t0) # restore first word of object

3160#	lw $t3,-4($t2) # # object words (negative treated as zero)
3164#	bge $t3,$zero,gcH2Neg2
3165##...slt $at,$t3,$zero
3169##...beq $at,$zero,$+8
3172#	move $t3,$zero
3176:  gcH2Neg2:
3176#	sll $t3,$t3,2 # # object bytes
3180#	move $t0,$t2 # address of first pointer in object
3184#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3188#	beq $t0,$s1,gcTestIterDone2
	
3192:  gcNextPointerInObject:
	# get pointer from object
3192#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3196#	bleu $t1,$t6,gcGoNextPointerSlot
3197##...sltu $at,$t6,$t1
3201##...beq $at,$zero,$+136
3204#	bgtu $t1,$t7,gcGoNextPointerSlot
3205##...sltu $at,$t7,$t1
3209##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3212#	lw $t8,-8($t1) # possible forwarding tag
3216#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3220#	lw $t8,-4($t1) # forwarding pointer: object's new address
3224#	sw $t8,($t0) # update pointer in object
3228#	j gcGoNextPointerSlot # do next iteration

3232:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3232#	bge $t8,$zero,gcSkip5
3233##...slt $at,$t8,$zero
3237##...beq $at,$zero,$+8
3240#	move $t8,$zero # set to zero if -1

3244:  gcSkip5:
3244#	sll $t8,$t8,2
3248#	addu $t8,$t8,8
3252#	subu $t4,$t1,$t8 # address of first word of source
3256#	lw $t3,-4($t1)
3260#	bge $t3,$zero,gcNoNeg
3261##...slt $at,$t3,$zero
3265##...beq $at,$zero,$+8
3268#	move $t3,$zero
3272:  gcNoNeg:
3272#	sll $t3,$t3,2
3276#	addu $t3,$t3,$t1 # address one word past last word of source

3280#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3284#	lw $s0,($t4)
3288#	lw $t9,-8($t1)
3292#	sw $t9,($t4)
3296#	sw $s0,-8($t1)

	# copy all source bytes to the target
3300:  gCinnerCopy2:
3300#	lw $s0,($t4)
3304#	sw $s0,($s3)
3308#	addu $t4,$t4,4
3312#	addu $s3,$s3,4
3316#	bltu $t4,$t3,gCinnerCopy2
3317##...sltu $at,$t4,$t3
3321##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3324#	sw $t5,-8($t1) # -2 in first header-slot
3328#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3332#	sw $t8,($t0)

3336:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3336#	addu $t0,$t0,4
3340#	bltu $t0,$s1,gcNextPointerInObject
3341##...sltu $at,$t0,$s1
3345##...bne $at,$zero,$-152

3348:  gcTestIterDone2:
3348#	bltu $t0,$s3,gcHeapCopyLoop
3349##...sltu $at,$t0,$s3
3353##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3356:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3356#	lw $s2,($sp)
3360#	addu $sp,$sp,4

	# mark us as having already GC'd
3364#	move $t5,$s5

	# go try and allocate again
3368#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3372:vm_init:

	# mark bottom of stack
3372#	sw $sp,stack_bottom
3376#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3380#	move $s2,$zero
3384#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3388#	li $s5,5
3392#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3396#	la $s3,seg0_start
3400#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3404#	la $s4,seg0_end
3405##...lui $s4,16
3409##...addiu $s4,$s4,4140
3412#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3416#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3420:divide:
	# get parameters; abort if divisor zero
3420#	lw $t0,($sp)
3424#	lw $t1,8($sp)
3428#	beq $t0,$zero,divByZeroError
	
	# perform division
3432#	div $t1,$t0
3436#	mflo $t0

	# store result, adjust stack and return
3440#	addu $sp,$sp,8 # adjust stack
3444#	sw $t0,($sp) # store result
3448#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3452:remainder:
	# get parameters; abort if divisor zero
3452#	lw $t0,($sp)
3456#	lw $t1,8($sp)
3460#	beq $t0,$zero,divByZeroError
	
	# perform division
3464#	div $t1,$t0
3468#	mfhi $t0

	# store result, adjust stack and return
3472#	addu $sp,$sp,8 # adjust stack
3476#	sw $t0,($sp) # store result
3480#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3484:checkCast:
	# get object, allow immediately if null
3484#	lw $t2,($sp)
3488#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3492#	lw $t3,-8($t2) # <= 0 if array
3496#	lw $t2,-12($t2) # vtable address (unless array)
3500#	bgt $t3,$zero,skipArrayCast
3501##...slt $at,$zero,$t3
3505##...bne $at,$zero,$+8
3508#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3512:  skipArrayCast:
3512#	bge $t2,$t1,castException
3513##...slt $at,$t2,$t1
3517##...beq $at,$zero,$+152
3520#	blt $t2,$t0,castException
3521##...slt $at,$t2,$t0
3525##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3528:  checkCastReturn:	
3528#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3532:instanceOf:
	# get object, go return false if null
3532#	lw $t2,($sp)
3536#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3540#	lw $t3,-8($t2) # <= 0 if array
3544#	lw $t2,-12($t2) # vtable address (unless array)
3548#	bgt $t3,$zero,skipArrayInstanceOf
3549##...slt $at,$zero,$t3
3553##...bne $at,$zero,$+8
3556#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3560:  skipArrayInstanceOf:
3560#	sge $t0,$t2,$t0
3561##...slt $t0,$t2,$t0
3565##...xori $t0,$t0,0x1
3568#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3572#	and $t2,$t0,$t1
3576:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3576#	sw $t2,($sp)
3580#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3584:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3584#	li $v0,4 # syscall-code for print-string
3588#	syscall
3592:exit:
	# print termination message
3592#	li $v0,4
3596#	la $a0,exitString
3600#	syscall

	# terminate execution
3604#	li $v0,10 #syscall-code for "exit"
3608#	syscall

3612:outOfHeapMemory:
3612#	la $a0,heapMemoryMsg
3616#	j exitError
3620:divByZeroError:
3620#	la $a0,divByZeroMsg
3624#	j exitError
3628:strIndexOutOfBounds:
3628#	la $a0,strIndexOutOfBoundsMsg
3632#	j exitError
3636:arrayIndexOutOfBounds:
3636#	la $a0,arrayIndexOutOfBoundsMsg
3640#	j exitError
3644:arraySizeOutOfBounds:
3644#	la $a0,arraySizeOutOfBoundsMsg
3648#	j exitError
3652:nullPtrException:
3652#	la $a0,nullPtrExceptionMsg
3656#	j exitError
3660:badIntegerFormat:
3660#	la $a0,badIntegerFormatMsg
3664#	j exitError
3668:castException:
3668#	la $a0,castExceptionMsg
3672#	j exitError

############## data section ################
	.data
	.align 2

3832:cur_seg:
	.word 0

3836:lastCharRead:
	.word -2 # -2 => no buffered character

3840:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
3867:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
3890:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
3925:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
3959:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
3992:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4023:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4071:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4092:gcMsg: 
      .asciiz "\nGC!\n"

4098:nullStr:
	.asciiz "null"
4103:trueString:
	.asciiz "true"
4108:falseString:
	.asciiz "false"
4114:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4136:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4140:seg0_start:
	.space 0x100000
1052716:seg0_end:
1052716:seg1_start:
	.space 0x100000
2101292:seg1_end:



