 .data # Program at 1.1		
  .byte 116 # StringLiteral at 8.15  	
  .byte 101 # StringLiteral at 8.15 		
  .byte 115 # StringLiteral at 8.15 		
  .byte 116 # StringLiteral at 8.15		
  .byte 32 # StringLiteral at 8.15 	 
  .byte 115 # StringLiteral at 8.15		 
  .byte 116 # StringLiteral at 8.15 	 
  .byte 114 # StringLiteral at 8.15	  
  .byte 105 # StringLiteral at 8.15 	 
  .byte 110 # StringLiteral at 8.15	 	
  .byte 103 # StringLiteral at 8.15			
  .byte 0 # StringLiteral at 8.15	  
  .word CLASS_String # StringLiteral at 8.15			
  .word 4 # StringLiteral at 8.15  
  .word -11 # StringLiteral at 8.15 	
3780:strLit_14: # StringLiteral at 8.15	 
  .byte 10 # StringLiteral at 11.18 		
  .byte 0 # StringLiteral at 11.18	 	
  .byte 0 # StringLiteral at 11.18 	
  .byte 0 # StringLiteral at 11.18	 
  .word CLASS_String # StringLiteral at 11.18 
  .word 2 # StringLiteral at 11.18	 
  .word -1 # StringLiteral at 11.18  	
3796:strLit_20: # StringLiteral at 11.18	
  .byte 10 # StringLiteral at 13.18	 
  .byte 0 # StringLiteral at 13.18 	 
  .byte 0 # StringLiteral at 13.18			
  .byte 0 # StringLiteral at 13.18 
  .word CLASS_String # StringLiteral at 13.18	  
  .word 2 # StringLiteral at 13.18 	 
  .word -1 # StringLiteral at 13.18 	
3812:strLit_28: # StringLiteral at 13.18   
  .byte 10 # StringLiteral at 15.18	 
  .byte 0 # StringLiteral at 15.18	 
  .byte 0 # StringLiteral at 15.18   
  .byte 0 # StringLiteral at 15.18	
  .word CLASS_String # StringLiteral at 15.18  	
  .word 2 # StringLiteral at 15.18			
  .word -1 # StringLiteral at 15.18  
3828:strLit_36: # StringLiteral at 15.18	 
  .byte 10 # StringLiteral at 17.18	 	
  .byte 0 # StringLiteral at 17.18  
  .byte 0 # StringLiteral at 17.18   
  .byte 0 # StringLiteral at 17.18  	
  .word CLASS_String # StringLiteral at 17.18 		
  .word 2 # StringLiteral at 17.18 	 
  .word -1 # StringLiteral at 17.18		 
3844:strLit_44: # StringLiteral at 17.18  	
  .byte 10 # StringLiteral at 19.18  
  .byte 0 # StringLiteral at 19.18	 
  .byte 0 # StringLiteral at 19.18 	 
  .byte 0 # StringLiteral at 19.18	 
  .word CLASS_String # StringLiteral at 19.18 
  .word 2 # StringLiteral at 19.18	  
  .word -1 # StringLiteral at 19.18	  
3860:strLit_52: # StringLiteral at 19.18	  
  .byte 10 # StringLiteral at 21.18		 
  .byte 0 # StringLiteral at 21.18 	
  .byte 0 # StringLiteral at 21.18 		
  .byte 0 # StringLiteral at 21.18		 
  .word CLASS_String # StringLiteral at 21.18	 	
  .word 2 # StringLiteral at 21.18 	
  .word -1 # StringLiteral at 21.18 	
3876:strLit_60: # StringLiteral at 21.18 		
  .byte 10 # StringLiteral at 23.18	 	
  .byte 0 # StringLiteral at 23.18	  
  .byte 0 # StringLiteral at 23.18   
  .byte 0 # StringLiteral at 23.18  
  .word CLASS_String # StringLiteral at 23.18	 	
  .word 2 # StringLiteral at 23.18 		
  .word -1 # StringLiteral at 23.18	 	
3892:strLit_68: # StringLiteral at 23.18		
  .byte 10 # StringLiteral at 25.18 		
  .byte 0 # StringLiteral at 25.18		
  .byte 0 # StringLiteral at 25.18	  
  .byte 0 # StringLiteral at 25.18 
  .word CLASS_String # StringLiteral at 25.18		
  .word 2 # StringLiteral at 25.18 	
  .word -1 # StringLiteral at 25.18		 
3908:strLit_76: # StringLiteral at 25.18		
  .byte 10 # StringLiteral at 27.18		
  .byte 0 # StringLiteral at 27.18	 
  .byte 0 # StringLiteral at 27.18 	 
  .byte 0 # StringLiteral at 27.18	 	
  .word CLASS_String # StringLiteral at 27.18	
  .word 2 # StringLiteral at 27.18		 
  .word -1 # StringLiteral at 27.18	 
3924:strLit_84: # StringLiteral at 27.18   
  .byte 10 # StringLiteral at 29.18   
  .byte 0 # StringLiteral at 29.18  	
  .byte 0 # StringLiteral at 29.18 	 
  .byte 0 # StringLiteral at 29.18			
  .word CLASS_String # StringLiteral at 29.18   
  .word 2 # StringLiteral at 29.18			
  .word -1 # StringLiteral at 29.18	 
3940:strLit_94: # StringLiteral at 29.18 	 
  .byte 10 # StringLiteral at 31.18 
  .byte 0 # StringLiteral at 31.18  	
  .byte 0 # StringLiteral at 31.18 	 
  .byte 0 # StringLiteral at 31.18  	
  .word CLASS_String # StringLiteral at 31.18		 
  .word 2 # StringLiteral at 31.18	 
  .word -1 # StringLiteral at 31.18		 
3956:strLit_104: # StringLiteral at 31.18 	 
  .byte 10 # StringLiteral at 33.18 	
  .byte 0 # StringLiteral at 33.18  	
  .byte 0 # StringLiteral at 33.18   
  .byte 0 # StringLiteral at 33.18 		
  .word CLASS_String # StringLiteral at 33.18  	
  .word 2 # StringLiteral at 33.18	 
  .word -1 # StringLiteral at 33.18 	
3972:strLit_114: # StringLiteral at 33.18	 
  .byte 10 # StringLiteral at 35.18  	
  .byte 0 # StringLiteral at 35.18	 	
  .byte 0 # StringLiteral at 35.18 		
  .byte 0 # StringLiteral at 35.18 		
  .word CLASS_String # StringLiteral at 35.18  	
  .word 2 # StringLiteral at 35.18  
  .word -1 # StringLiteral at 35.18   
3988:strLit_124: # StringLiteral at 35.18 	 
  .byte 10 # StringLiteral at 37.18	
  .byte 0 # StringLiteral at 37.18  	
  .byte 0 # StringLiteral at 37.18	 	
  .byte 0 # StringLiteral at 37.18 		
  .word CLASS_String # StringLiteral at 37.18	
  .word 2 # StringLiteral at 37.18		 
  .word -1 # StringLiteral at 37.18 	
4004:strLit_136: # StringLiteral at 37.18	 	
  .byte 10 # StringLiteral at 39.18	 
  .byte 0 # StringLiteral at 39.18  
  .byte 0 # StringLiteral at 39.18 	 
  .byte 0 # StringLiteral at 39.18		 
  .word CLASS_String # StringLiteral at 39.18		
  .word 2 # StringLiteral at 39.18  	
  .word -1 # StringLiteral at 39.18 	
4020:strLit_148: # StringLiteral at 39.18 	 
  .byte 10 # StringLiteral at 42.18		 
  .byte 0 # StringLiteral at 42.18		
  .byte 0 # StringLiteral at 42.18			
  .byte 0 # StringLiteral at 42.18	  
  .word CLASS_String # StringLiteral at 42.18 	 
  .word 2 # StringLiteral at 42.18   
  .word -1 # StringLiteral at 42.18		
4036:strLit_156: # StringLiteral at 42.18 
  .byte 73 # StringLiteral at 43.18	  
  .byte 32 # StringLiteral at 43.18	  
  .byte 84 # StringLiteral at 43.18	 
  .byte 72 # StringLiteral at 43.18  
  .byte 73 # StringLiteral at 43.18	 	
  .byte 78 # StringLiteral at 43.18	 
  .byte 75 # StringLiteral at 43.18	
  .byte 32 # StringLiteral at 43.18	  
  .byte 84 # StringLiteral at 43.18 	
  .byte 72 # StringLiteral at 43.18		 
  .byte 73 # StringLiteral at 43.18		 
  .byte 83 # StringLiteral at 43.18	  
  .byte 32 # StringLiteral at 43.18  	
  .byte 73 # StringLiteral at 43.18 	
  .byte 83 # StringLiteral at 43.18	 	
  .byte 32 # StringLiteral at 43.18 
  .byte 87 # StringLiteral at 43.18 	
  .byte 79 # StringLiteral at 43.18	  
  .byte 82 # StringLiteral at 43.18		
  .byte 75 # StringLiteral at 43.18	 
  .byte 73 # StringLiteral at 43.18	 
  .byte 78 # StringLiteral at 43.18	
  .byte 71 # StringLiteral at 43.18 
  .byte 33 # StringLiteral at 43.18 
  .byte 33 # StringLiteral at 43.18	
  .byte 33 # StringLiteral at 43.18	 
  .byte 0 # StringLiteral at 43.18   
  .byte 0 # StringLiteral at 43.18   
  .word CLASS_String # StringLiteral at 43.18 		
  .word 8 # StringLiteral at 43.18	
  .word -26 # StringLiteral at 43.18 	
4076:strLit_160: # StringLiteral at 43.18		 
  .byte 10 # StringLiteral at 44.18 		
  .byte 0 # StringLiteral at 44.18  	
  .byte 0 # StringLiteral at 44.18		
  .byte 0 # StringLiteral at 44.18 	
  .word CLASS_String # StringLiteral at 44.18	
  .word 2 # StringLiteral at 44.18	 	
  .word -1 # StringLiteral at 44.18			
4092:strLit_164: # StringLiteral at 44.18  	
4092:CLASS_Object: # Program at 1.1	 
4092:CLASS_String: # Program at 1.1 	
.text # Program at 1.1 
.global main # Program at 1.1 
0:main: # Program at 1.1	 
0#jal vm_init # Program at 1.1	 
4#subu $sp, $sp, 4 # NewObject at 0.0	 
8#sw $zero, ($sp) # NewObject at 0.0		
12#jal fcn_168_main # Call at 0.0		
16#li $v0, 10 # Program at 1.1		 
20#syscall # Program at 1.1 
.globl fcn_168_main # MethodDeclVoid at 3.14	  
24:fcn_168_main: # MethodDeclVoid at 3.14 		
24#subu $sp, $sp, 8 # MethodDeclVoid at 3.14		
28#sw $ra, 4($sp) # MethodDeclVoid at 3.14  
32#sw $s2, ($sp) # MethodDeclVoid at 3.14	 
36#lw $s2, 4($sp) # MethodDeclVoid at 3.14		 
40#subu $sp, $sp, 8 # IntegerLiteral at 4.11 	
44#sw $s5, 4($sp) # IntegerLiteral at 4.11  
48#li $t0, 9 # IntegerLiteral at 4.11	
52#sw $t0, ($sp) # IntegerLiteral at 4.11	
56#lw $t0, 0($sp) # IdentifierExp at 5.11  
60#subu $sp, $sp, 8 # IdentifierExp at 5.11 
64#sw $s5, 4($sp) # IdentifierExp at 5.11			
68#sw $t0, ($sp) # IdentifierExp at 5.11 
72#subu $sp, $sp, 8 # IntegerLiteral at 5.15  
76#sw $s5, 4($sp) # IntegerLiteral at 5.15		
80#li $t0, 2 # IntegerLiteral at 5.15 		
84#sw $t0, ($sp) # IntegerLiteral at 5.15			
88#lw $t0, ($sp) # Plus at 5.13 		
92#lw $t1, 8($sp) # Plus at 5.13 		
96#addu $t0, $t0, $t1 # Plus at 5.13  	
100#addu $sp, $sp, 8 # Plus at 5.13   
104#sw $t0, ($sp) # Plus at 5.13 	 
108#lw $t0, 0($sp) # IdentifierExp at 6.11 		
112#subu $sp, $sp, 8 # IdentifierExp at 6.11 		
116#sw $s5, 4($sp) # IdentifierExp at 6.11 		
120#sw $t0, ($sp) # IdentifierExp at 6.11 
124#subu $sp, $sp, 8 # IntegerLiteral at 6.15  	
128#sw $s5, 4($sp) # IntegerLiteral at 6.15			
132#li $t0, 2 # IntegerLiteral at 6.15	
136#sw $t0, ($sp) # IntegerLiteral at 6.15	 	
140#lw $t0, ($sp) # Minus at 6.13		
144#lw $t1, 8($sp) # Minus at 6.13			
148#subu $t0, $t1, $t0 # Minus at 6.13	 
152#addu $sp, $sp, 8 # Minus at 6.13  
156#sw $t0, ($sp) # Minus at 6.13	 
160#subu $sp, $sp, 4 # StringLiteral at 8.15 	 
164#la $t0, strLit_14 # StringLiteral at 8.15  	
168#sw $t0, ($sp) # StringLiteral at 8.15  	
172#subu $sp, $sp, 4 # Super at 10.9			
176#sw $s2, ($sp) # Super at 10.9		
180#lw $t0, 24($sp) # IdentifierExp at 10.18 	
184#subu $sp, $sp, 8 # IdentifierExp at 10.18 
188#sw $s5, 4($sp) # IdentifierExp at 10.18	 	
192#sw $t0, ($sp) # IdentifierExp at 10.18 
196#jal printInt # Call at 10.9  	
200#subu $sp, $sp, 4 # Super at 11.9 	
204#sw $s2, ($sp) # Super at 11.9  
208#subu $sp, $sp, 4 # StringLiteral at 11.18   
212#la $t0, strLit_20 # StringLiteral at 11.18	 
216#sw $t0, ($sp) # StringLiteral at 11.18 	 
220#jal printStr # Call at 11.9 	 
224#subu $sp, $sp, 4 # Super at 12.9	  
228#sw $s2, ($sp) # Super at 12.9		
232#lw $t0, 24($sp) # IdentifierExp at 12.18	 
236#subu $sp, $sp, 8 # IdentifierExp at 12.18  	
240#sw $s5, 4($sp) # IdentifierExp at 12.18	
244#sw $t0, ($sp) # IdentifierExp at 12.18		
248#jal printInt # Call at 12.9			
252#subu $sp, $sp, 4 # Super at 13.9	  
256#sw $s2, ($sp) # Super at 13.9	  
260#subu $sp, $sp, 4 # StringLiteral at 13.18		 
264#la $t0, strLit_28 # StringLiteral at 13.18  	
268#sw $t0, ($sp) # StringLiteral at 13.18		
272#jal printStr # Call at 13.9 	 
276#subu $sp, $sp, 4 # Super at 14.9 
280#sw $s2, ($sp) # Super at 14.9		 
284#lw $t0, 24($sp) # IdentifierExp at 14.18   
288#subu $sp, $sp, 8 # IdentifierExp at 14.18   
292#sw $s5, 4($sp) # IdentifierExp at 14.18 
296#sw $t0, ($sp) # IdentifierExp at 14.18		
300#jal printInt # Call at 14.9			
304#subu $sp, $sp, 4 # Super at 15.9  
308#sw $s2, ($sp) # Super at 15.9	  
312#subu $sp, $sp, 4 # StringLiteral at 15.18 		
316#la $t0, strLit_36 # StringLiteral at 15.18	
320#sw $t0, ($sp) # StringLiteral at 15.18   
324#jal printStr # Call at 15.9  
328#subu $sp, $sp, 4 # Super at 16.9 		
332#sw $s2, ($sp) # Super at 16.9  	
336#lw $t0, 16($sp) # IdentifierExp at 16.18 	 
340#subu $sp, $sp, 8 # IdentifierExp at 16.18 	 
344#sw $s5, 4($sp) # IdentifierExp at 16.18 		
348#sw $t0, ($sp) # IdentifierExp at 16.18	 	
352#jal printInt # Call at 16.9	 	
356#subu $sp, $sp, 4 # Super at 17.9			
360#sw $s2, ($sp) # Super at 17.9	 	
364#subu $sp, $sp, 4 # StringLiteral at 17.18 	
368#la $t0, strLit_44 # StringLiteral at 17.18		
372#sw $t0, ($sp) # StringLiteral at 17.18		
376#jal printStr # Call at 17.9	 	
380#subu $sp, $sp, 4 # Super at 18.9		
384#sw $s2, ($sp) # Super at 18.9 		
388#lw $t0, 16($sp) # IdentifierExp at 18.18	 	
392#subu $sp, $sp, 8 # IdentifierExp at 18.18	 	
396#sw $s5, 4($sp) # IdentifierExp at 18.18 		
400#sw $t0, ($sp) # IdentifierExp at 18.18  	
404#jal printInt # Call at 18.9			
408#subu $sp, $sp, 4 # Super at 19.9 
412#sw $s2, ($sp) # Super at 19.9		 
416#subu $sp, $sp, 4 # StringLiteral at 19.18 	
420#la $t0, strLit_52 # StringLiteral at 19.18	
424#sw $t0, ($sp) # StringLiteral at 19.18			
428#jal printStr # Call at 19.9 	 
432#subu $sp, $sp, 4 # Super at 20.9	 
436#sw $s2, ($sp) # Super at 20.9		 
440#lw $t0, 16($sp) # IdentifierExp at 20.18  
444#subu $sp, $sp, 8 # IdentifierExp at 20.18		 
448#sw $s5, 4($sp) # IdentifierExp at 20.18 	 
452#sw $t0, ($sp) # IdentifierExp at 20.18 	 
456#jal printInt # Call at 20.9	
460#subu $sp, $sp, 4 # Super at 21.9   
464#sw $s2, ($sp) # Super at 21.9	 
468#subu $sp, $sp, 4 # StringLiteral at 21.18   
472#la $t0, strLit_60 # StringLiteral at 21.18 		
476#sw $t0, ($sp) # StringLiteral at 21.18  	
480#jal printStr # Call at 21.9  
484#subu $sp, $sp, 4 # Super at 22.9	
488#sw $s2, ($sp) # Super at 22.9   
492#lw $t0, 8($sp) # IdentifierExp at 22.18	 	
496#subu $sp, $sp, 8 # IdentifierExp at 22.18  	
500#sw $s5, 4($sp) # IdentifierExp at 22.18	  
504#sw $t0, ($sp) # IdentifierExp at 22.18			
508#jal printInt # Call at 22.9		
512#subu $sp, $sp, 4 # Super at 23.9	 	
516#sw $s2, ($sp) # Super at 23.9	 
520#subu $sp, $sp, 4 # StringLiteral at 23.18  	
524#la $t0, strLit_68 # StringLiteral at 23.18			
528#sw $t0, ($sp) # StringLiteral at 23.18		
532#jal printStr # Call at 23.9		 
536#subu $sp, $sp, 4 # Super at 24.9 		
540#sw $s2, ($sp) # Super at 24.9 	
544#lw $t0, 8($sp) # IdentifierExp at 24.18 	
548#subu $sp, $sp, 8 # IdentifierExp at 24.18			
552#sw $s5, 4($sp) # IdentifierExp at 24.18 		
556#sw $t0, ($sp) # IdentifierExp at 24.18 
560#jal printInt # Call at 24.9			
564#subu $sp, $sp, 4 # Super at 25.9  
568#sw $s2, ($sp) # Super at 25.9	 
572#subu $sp, $sp, 4 # StringLiteral at 25.18		
576#la $t0, strLit_76 # StringLiteral at 25.18	  
580#sw $t0, ($sp) # StringLiteral at 25.18 	 
584#jal printStr # Call at 25.9  
588#subu $sp, $sp, 4 # Super at 26.9  
592#sw $s2, ($sp) # Super at 26.9	 	
596#lw $t0, 8($sp) # IdentifierExp at 26.18 
600#subu $sp, $sp, 8 # IdentifierExp at 26.18	
604#sw $s5, 4($sp) # IdentifierExp at 26.18  	
608#sw $t0, ($sp) # IdentifierExp at 26.18 		
612#jal printInt # Call at 26.9 	
616#subu $sp, $sp, 4 # Super at 27.9 	
620#sw $s2, ($sp) # Super at 27.9 		
624#subu $sp, $sp, 4 # StringLiteral at 27.18 		
628#la $t0, strLit_84 # StringLiteral at 27.18	 	
632#sw $t0, ($sp) # StringLiteral at 27.18  
636#jal printStr # Call at 27.9   
640#subu $sp, $sp, 4 # Super at 28.9	
644#sw $s2, ($sp) # Super at 28.9	  
648#lw $t0, 24($sp) # IdentifierExp at 28.18  
652#subu $sp, $sp, 8 # IdentifierExp at 28.18	 
656#sw $s5, 4($sp) # IdentifierExp at 28.18	  
660#sw $t0, ($sp) # IdentifierExp at 28.18   
664#lw $t0, 24($sp) # IdentifierExp at 28.22	 
668#subu $sp, $sp, 8 # IdentifierExp at 28.22	 
672#sw $s5, 4($sp) # IdentifierExp at 28.22 		
676#sw $t0, ($sp) # IdentifierExp at 28.22   
680#lw $t0, ($sp) # Minus at 28.20	 	
684#lw $t1, 8($sp) # Minus at 28.20		
688#subu $t0, $t1, $t0 # Minus at 28.20		 
692#addu $sp, $sp, 8 # Minus at 28.20		
696#sw $t0, ($sp) # Minus at 28.20 		
700#jal printInt # Call at 28.9	  
704#subu $sp, $sp, 4 # Super at 29.9		
708#sw $s2, ($sp) # Super at 29.9   
712#subu $sp, $sp, 4 # StringLiteral at 29.18 	 
716#la $t0, strLit_94 # StringLiteral at 29.18		
720#sw $t0, ($sp) # StringLiteral at 29.18  
724#jal printStr # Call at 29.9		
728#subu $sp, $sp, 4 # Super at 30.9 		
732#sw $s2, ($sp) # Super at 30.9	  
736#lw $t0, 24($sp) # IdentifierExp at 30.18	
740#subu $sp, $sp, 8 # IdentifierExp at 30.18	  
744#sw $s5, 4($sp) # IdentifierExp at 30.18   
748#sw $t0, ($sp) # IdentifierExp at 30.18 		
752#lw $t0, 24($sp) # IdentifierExp at 30.22 		
756#subu $sp, $sp, 8 # IdentifierExp at 30.22	 
760#sw $s5, 4($sp) # IdentifierExp at 30.22	 	
764#sw $t0, ($sp) # IdentifierExp at 30.22 
768#lw $t0, ($sp) # Minus at 30.20 	
772#lw $t1, 8($sp) # Minus at 30.20   
776#subu $t0, $t1, $t0 # Minus at 30.20	 	
780#addu $sp, $sp, 8 # Minus at 30.20  
784#sw $t0, ($sp) # Minus at 30.20 		
788#jal printInt # Call at 30.9	
792#subu $sp, $sp, 4 # Super at 31.9  
796#sw $s2, ($sp) # Super at 31.9 	 
800#subu $sp, $sp, 4 # StringLiteral at 31.18		 
804#la $t0, strLit_104 # StringLiteral at 31.18  	
808#sw $t0, ($sp) # StringLiteral at 31.18	  
812#jal printStr # Call at 31.9	  
816#subu $sp, $sp, 4 # Super at 32.9 	
820#sw $s2, ($sp) # Super at 32.9 		
824#lw $t0, 16($sp) # IdentifierExp at 32.18 	 
828#subu $sp, $sp, 8 # IdentifierExp at 32.18 		
832#sw $s5, 4($sp) # IdentifierExp at 32.18	 	
836#sw $t0, ($sp) # IdentifierExp at 32.18	 	
840#lw $t0, 32($sp) # IdentifierExp at 32.22 		
844#subu $sp, $sp, 8 # IdentifierExp at 32.22	
848#sw $s5, 4($sp) # IdentifierExp at 32.22			
852#sw $t0, ($sp) # IdentifierExp at 32.22		
856#lw $t0, ($sp) # Minus at 32.20	 
860#lw $t1, 8($sp) # Minus at 32.20 		
864#subu $t0, $t1, $t0 # Minus at 32.20 	 
868#addu $sp, $sp, 8 # Minus at 32.20 	 
872#sw $t0, ($sp) # Minus at 32.20			
876#jal printInt # Call at 32.9	 
880#subu $sp, $sp, 4 # Super at 33.9	 	
884#sw $s2, ($sp) # Super at 33.9   
888#subu $sp, $sp, 4 # StringLiteral at 33.18	 	
892#la $t0, strLit_114 # StringLiteral at 33.18 		
896#sw $t0, ($sp) # StringLiteral at 33.18   
900#jal printStr # Call at 33.9		
904#subu $sp, $sp, 4 # Super at 34.9	 
908#sw $s2, ($sp) # Super at 34.9 		
912#lw $t0, 16($sp) # IdentifierExp at 34.18	 	
916#subu $sp, $sp, 8 # IdentifierExp at 34.18 	
920#sw $s5, 4($sp) # IdentifierExp at 34.18  	
924#sw $t0, ($sp) # IdentifierExp at 34.18	 
928#lw $t0, 32($sp) # IdentifierExp at 34.22   
932#subu $sp, $sp, 8 # IdentifierExp at 34.22   
936#sw $s5, 4($sp) # IdentifierExp at 34.22 	 
940#sw $t0, ($sp) # IdentifierExp at 34.22			
944#lw $t0, ($sp) # Minus at 34.20		
948#lw $t1, 8($sp) # Minus at 34.20	  
952#subu $t0, $t1, $t0 # Minus at 34.20	  
956#addu $sp, $sp, 8 # Minus at 34.20	 	
960#sw $t0, ($sp) # Minus at 34.20   
964#jal printInt # Call at 34.9 	
968#subu $sp, $sp, 4 # Super at 35.9	 	
972#sw $s2, ($sp) # Super at 35.9 		
976#subu $sp, $sp, 4 # StringLiteral at 35.18  
980#la $t0, strLit_124 # StringLiteral at 35.18 	
984#sw $t0, ($sp) # StringLiteral at 35.18	 	
988#jal printStr # Call at 35.9	 
992#subu $sp, $sp, 4 # Super at 36.9   
996#sw $s2, ($sp) # Super at 36.9		
1000#lw $t0, 8($sp) # IdentifierExp at 36.18	
1004#subu $sp, $sp, 8 # IdentifierExp at 36.18	 	
1008#sw $s5, 4($sp) # IdentifierExp at 36.18	
1012#sw $t0, ($sp) # IdentifierExp at 36.18 	
1016#lw $t0, 32($sp) # IdentifierExp at 36.22	 	
1020#subu $sp, $sp, 8 # IdentifierExp at 36.22	 	
1024#sw $s5, 4($sp) # IdentifierExp at 36.22  
1028#sw $t0, ($sp) # IdentifierExp at 36.22	
1032#lw $t0, ($sp) # Plus at 36.20 	
1036#lw $t1, 8($sp) # Plus at 36.20	 	
1040#addu $t0, $t0, $t1 # Plus at 36.20 	
1044#addu $sp, $sp, 8 # Plus at 36.20  
1048#sw $t0, ($sp) # Plus at 36.20			
1052#lw $t0, 24($sp) # IdentifierExp at 36.26   
1056#subu $sp, $sp, 8 # IdentifierExp at 36.26	  
1060#sw $s5, 4($sp) # IdentifierExp at 36.26  	
1064#sw $t0, ($sp) # IdentifierExp at 36.26	
1068#lw $t0, ($sp) # Minus at 36.24	
1072#lw $t1, 8($sp) # Minus at 36.24 
1076#subu $t0, $t1, $t0 # Minus at 36.24			
1080#addu $sp, $sp, 8 # Minus at 36.24			
1084#sw $t0, ($sp) # Minus at 36.24 		
1088#jal printInt # Call at 36.9		
1092#subu $sp, $sp, 4 # Super at 37.9 	 
1096#sw $s2, ($sp) # Super at 37.9			
1100#subu $sp, $sp, 4 # StringLiteral at 37.18   
1104#la $t0, strLit_136 # StringLiteral at 37.18   
1108#sw $t0, ($sp) # StringLiteral at 37.18	 
1112#jal printStr # Call at 37.9	 
1116#subu $sp, $sp, 4 # Super at 38.9	  
1120#sw $s2, ($sp) # Super at 38.9  
1124#lw $t0, 16($sp) # IdentifierExp at 38.18 	 
1128#subu $sp, $sp, 8 # IdentifierExp at 38.18 		
1132#sw $s5, 4($sp) # IdentifierExp at 38.18 	 
1136#sw $t0, ($sp) # IdentifierExp at 38.18 	
1140#lw $t0, 32($sp) # IdentifierExp at 38.22	 	
1144#subu $sp, $sp, 8 # IdentifierExp at 38.22   
1148#sw $s5, 4($sp) # IdentifierExp at 38.22 		
1152#sw $t0, ($sp) # IdentifierExp at 38.22  	
1156#lw $t0, ($sp) # Minus at 38.20 	
1160#lw $t1, 8($sp) # Minus at 38.20 
1164#subu $t0, $t1, $t0 # Minus at 38.20 		
1168#addu $sp, $sp, 8 # Minus at 38.20		 
1172#sw $t0, ($sp) # Minus at 38.20  	
1176#lw $t0, 16($sp) # IdentifierExp at 38.26 
1180#subu $sp, $sp, 8 # IdentifierExp at 38.26 		
1184#sw $s5, 4($sp) # IdentifierExp at 38.26  
1188#sw $t0, ($sp) # IdentifierExp at 38.26 		
1192#lw $t0, ($sp) # Plus at 38.24		 
1196#lw $t1, 8($sp) # Plus at 38.24	 	
1200#addu $t0, $t0, $t1 # Plus at 38.24		 
1204#addu $sp, $sp, 8 # Plus at 38.24 		
1208#sw $t0, ($sp) # Plus at 38.24	 	
1212#jal printInt # Call at 38.9		
1216#subu $sp, $sp, 4 # Super at 39.9		 
1220#sw $s2, ($sp) # Super at 39.9  	
1224#subu $sp, $sp, 4 # StringLiteral at 39.18	 
1228#la $t0, strLit_148 # StringLiteral at 39.18 	 
1232#sw $t0, ($sp) # StringLiteral at 39.18 		
1236#jal printStr # Call at 39.9 
1240#subu $sp, $sp, 4 # Super at 41.9 		
1244#sw $s2, ($sp) # Super at 41.9  
1248#lw $t0, 4($sp) # IdentifierExp at 41.18 	 
1252#subu $sp, $sp, 4 # IdentifierExp at 41.18	
1256#sw $t0, ($sp) # IdentifierExp at 41.18	
1260#jal printStr # Call at 41.9 		
1264#subu $sp, $sp, 4 # Super at 42.9		
1268#sw $s2, ($sp) # Super at 42.9		 
1272#subu $sp, $sp, 4 # StringLiteral at 42.18 	 
1276#la $t0, strLit_156 # StringLiteral at 42.18   
1280#sw $t0, ($sp) # StringLiteral at 42.18		 
1284#jal printStr # Call at 42.9 
1288#subu $sp, $sp, 4 # Super at 43.9	 
1292#sw $s2, ($sp) # Super at 43.9		
1296#subu $sp, $sp, 4 # StringLiteral at 43.18		
1300#la $t0, strLit_160 # StringLiteral at 43.18	 	
1304#sw $t0, ($sp) # StringLiteral at 43.18   
1308#jal printStr # Call at 43.9   
1312#subu $sp, $sp, 4 # Super at 44.9		
1316#sw $s2, ($sp) # Super at 44.9 	
1320#subu $sp, $sp, 4 # StringLiteral at 44.18	 	
1324#la $t0, strLit_164 # StringLiteral at 44.18	 
1328#sw $t0, ($sp) # StringLiteral at 44.18	
1332#jal printStr # Call at 44.9			
1336#lw $ra, 32($sp) # MethodDeclVoid at 3.14	
1340#lw $s2, 4($sp) # MethodDeclVoid at 3.14  	
1344#addu $sp, $sp, 40 # MethodDeclVoid at 3.14		
1348#jr $ra # MethodDeclVoid at 3.14 	
###############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# status: reasonably debugged (allegedly)
###############################################################

	.text

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1352:readLine:
	
1352#	subu $sp,$sp,8 # allocate space for data tag, saving $ra
1356#	sw $ra, 4($sp) # save $ra
1360#	move $t1,$sp # save "original" sp

1364:  doRead:

	# read the character
1364#	jal readLogicalChar

	# if we have a 'return', read another character to check for
	# newline
1368#	subu $t2,$v0,13
1372#	bne $t2,$zero,notReturnRL
1376#	jal readLogicalChar
1380#	subu $t2,$v0,10 # check for newline
1384#	beq $t2,$zero,foundNewLine
1388#	sw $v0,lastCharRead # push back character into queue
1392#	j foundNewLine # go process the line

1396:  notReturnRL:

	# at this point, $v0 has our character

1396#	subu $t0,$v0,10
1400#	beq $t0,$zero,foundNewLine
1404#	blt $v0,$zero,foundEof
1405##...slt $at,$v0,$zero
1409##...bne $at,$zero,$+16

	# we have a character, so push it onto stack
1412#	subu $sp,$sp,4
1416#	sw $v0,($sp)

	# loop back up to get next character
1420#	j doRead

1424:  foundEof:
	# if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1424#	bne $t1,$sp foundNewLine

	# otherwise, we got end of file without having read any
  # new characters, so return null
1428#	sw $zero,8($sp) # return-value: null
1432#	j rlReturn # return

1436:  foundNewLine:

	# at this point, we have our newline (or end-of-file), and all space
        # on the stack above $t1 are characters to be put into the string.
        # That is therefore the number of data words to allocate (plus 1
        # more for the class-pointer)


	# set up GC tag and char-count on stack
1436#	subu $t0,$t1,$sp # number of chars we read (times 4)
1440#	srl $s6,$t0,2 # number of words on stack with chars
1444#	subu $sp,$sp,4 # push char-count ...
1448#	sw $s6,($sp) # ... onto stack
1452#	addu $t2,$t0,5 # GC tag, incl. for count-word
1456#	sw $t2,($t1) # store GC tag
	
	# allocate the appropriate Object
1460#	addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1464#	srl $s6,$s6,2 # data words in object
1468#	move $s7,$zero # # object words in object
1472#	jal newObject # allocate space
	
	# store header words
1476#	la $t0,CLASS_String
1480#	sw $t0,-12($s7) # store class tag (String) into object
1484#	lw $t2,4($sp) # char-count
1488#	sll $t1,$t2,2 # 4 times number of chars
1492#	subu $t2,$zero,$t2 # negative of char-count
1496#	sw $t2,-4($s7) # store negative char-count as header-word 2

	# set up pointers to various parts of stack and object
1500#	lw $t0,-8($s7) # data words in object
1504#	sll $t0,$t0,2 # data bytes in object
1508#	subu $t0,$s7,$t0 # place to store first character (plus 8)	
1512#	subu $t0,$t0,$t2 # place to store last character (plus 9)
1516#	addu $sp,$sp,8 # pop redundant object-pointer and count
1520#	addu $t1,$t1,$sp # first non-char spot on stack

	# at this point:
	#  $t0 points to the target-spot for the last character (plus 9)
	#  $t1 contains top spot on the stack not containing a char
	#  $sp points to the word with the last source character

	# copy the characters, popping each off the stack

1524#	beq $sp,$t1,doneCharCopy
1528:  charCopyLoop:
1528#	lw $t2,($sp)
1532#	sb $t2,-9($t0)
1536#	addu $sp,$sp,4
1540#	subu $t0,$t0,1
1544#	bne $sp,$t1,charCopyLoop
1548:  doneCharCopy:

	# put our pointer (the return value) on the eventual top stack
1548#	sw $s7,8($sp)
	
1552:  rlReturn:
	# restore return address and return
1552#	lw $ra,4($sp) # restore return address, ...
1556#	addu $sp,$sp,8 # ... by popping it (and this-pointer) off stack
1560#	jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1564:readInt:

	# save $ra by pushing onto stack
1564#	subu $sp,$sp,4
1568#	sw $ra,($sp)

1572:  riSkipWhiteLoop:
	# read a character
1572#	jal readLogicalChar

	# if character <= 32 ascii, check for whitespace; if not
	# whitespace, abort 
1576#	subu $t0,$v0,32
1580#	bgt $t0,$zero,nonWhite
1581##...slt $at,$zero,$t0
1585##...bne $at,$zero,$+44
1588#	beq $t0,$zero,riSkipWhiteLoop # start over if space
1592#	subu $t0,$v0,10
1596#	beq $t0,$zero,riSkipWhiteLoop # start over if newline
1600#	subu $t0,$v0,9
1604#	beq $t0,$zero,riSkipWhiteLoop # start over if tab
1608#	subu $t0,$v0,13
1612#	beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1616#	subu $t0,$v0,12
1620#	beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1624#	j badIntegerFormat # illegal integer char: abort program

1628:  nonWhite:
1628#	subu $t0,$v0,'-'
1632#	li $t4,1 # final multiplier
1636#	bne $t0,$zero,helpReadInt # go read
1640#	li $t4,-1 # -1 in final multiplier

	# read another character to make up for the '-'
1644#	jal readLogicalChar

1648:  helpReadInt:
1648#	li $t2,10
1652#	subu $t1,$v0,'0' # convert digit to 0-9 value
1656#	bgeu $t1,$t2,badIntegerFormat # abort if not digit
1657##...sltu $at,$t1,$t2
1661##...beq $at,$zero,$+2080
1664#	move $t3,$t1 #

	#### at this point, $t3 contains value of the first digit read,
	#### and $t2 contains the value 10

1668:  digitLoop:
	# loop invariants:
	# - $t3 contains the value of the number we've read so far
	# - $t2 contains the value 10

1668#	jal readLogicalChar # read next character
1672#	subu $t1,$v0,'0' # convert digit to 0-9 value
1676#	bgeu $t1,$t2,doneDigitLoop # abort if not digit
1677##...sltu $at,$t1,$t2
1681##...beq $at,$zero,$+20

1684#	mul $t3,$t3,$t2 # multiply old value by 10
1685##...mult $t3,$t2
1689##...mflo $t3
1692#	addu $t3,$t3,$t1 # add in value of new digit
1696#	j digitLoop

1700:  doneDigitLoop:

	# "push back" unused character into queue
1700#	sw $v0,lastCharRead

	# restore return address and overwrite it with return-val;
	# write dummy GC tag as second word of return-val
1704#	lw $ra,($sp)
1708#	mult $t3,$t4 # multiply to account for poss. minus sign
1712#	mflo $t3
1716#	sw $t3,($sp) # result
1720#	sw $s5,4($sp) # dummy GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
	
	# return
1724#	jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - this-pointer
# - return-value:
#   - ($sp) - value that was read
#   - 4($sp) - (dummy) GC tag
###################################################################
1728:readChar:

	# save $ra by pushing onto stack
1728#	subu $sp,$sp,4
1732#	sw $ra,($sp)

  	# read the character
1736#	jal readLogicalChar

	# restore return address; put value (and dummy GC tag),
	# replacing this-pointer saved return address
1740#	lw $ra,($sp)
1744#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
1748#	sw $v0,($sp)

	# return
1752#	jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - this-pointer
########################################################
1756:printStr:
	# check for null, printing "(null)", if so
1756#	lw $t0,($sp)
1760#	bne $t0,$zero,psNotNull

	# print "(null)"
1764#	la $a0,nullStr
1768#	li $v0,4
1772#	syscall
1776#	j donePrintStr
	
1780:  psNotNull:
	##### we have a non-null string #####
	# this means that:
	# - number of data words in object is in -8($t0)
	# - negative of number of characters in string is in -4($t0)
	# - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1780#	subu $t0,$t0,8
1784#	lw $t1,($t0) # word just beyond end of string
1788#	sll $t1,$t1,2
1792#	subu $t1,$t0,$t1 # first word in string
1796#	lw $t0,4($t0) # negative of string-length
1800#	subu $t0,$t1,$t0 # byte just beyond last char in string

	# print the chars in the string
1804#	beq $t0,$t1,donePrintStr
1808:  psLoop:
1808#	lb $a0,($t1) # next byte
1812#	li $v0,11 # code for printing char
1816#        syscall # print the char
1820#	addu $t1,$t1,1 # go to next char
1824#	blt $t1,$t0,psLoop
1825##...slt $at,$t1,$t0
1829##...bne $at,$zero,$-20

1832:  donePrintStr:
	# pop stack and return
1832#	addu $sp,$sp,8
1836#	jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - this-pointer
########################################################
1840:printInt:
	# pop value off stack, along with 'this'
1840#	lw $a0,($sp)
1844#	addu $sp,$sp,12

	# print it
1848#	li $v0,1 # code for print-int
1852#	syscall

	# return
1856#	jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - this-pointer
########################################################
1860:printBool:
	# pop value off stack, along with 'this'
1860#	lw $t0,($sp)
1864#	addu $sp,$sp,8

	# print either 'true' or 'false', depending on the value
1868#	la $a0,falseString
1872#	beq $t0,$zero,skipPB
1876#	la $a0,trueString
1880:  skipPB:
1880#	li $v0,4 # code for print-string
1884#	syscall

	# return
1888#	jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - (dummy) GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - (dummy) GC tag
#   - 16($sp) - str: string to take substring of
# - return value:
#  - ($sp) - substring
########################################################
1892:substring:

	# save $ra by pushing onto stack
1892#	subu $sp,$sp,4
1896#	sw $ra,($sp)

	# get string value off stack, test for null
1900#	lw $t0,20($sp)
1904#	beq $t0,$zero,nullPtrException

	# get both indices and string length, and ensure that
	#   0 <= n <= k <= length
1908#	lw $t0,-4($t0) # negative of string length
1912#	subu $t0,$zero,$t0 # string length
1916#	lw $t1,4($sp) # k
1920#	lw $t2,12($sp) # n
1924#	bgt $zero,$t2,strIndexOutOfBounds
1925##...slt $at,$t2,$zero
1929##...bne $at,$zero,$+1780
1932#	bgt $t2,$t1,strIndexOutOfBounds
1933##...slt $at,$t1,$t2
1937##...bne $at,$zero,$+1772
1940#	bgt $t1,$t0,strIndexOutOfBounds
1941##...slt $at,$t0,$t1
1945##...bne $at,$zero,$+1764

	# allocate memory
1948#	subu $s6,$t1,$t2 # # chars in target-string
1952#	addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1956#	srl $s6,$s6,2 # convert bytes-count to word-count
1960#	move $s7,$zero # (no object-bytes in string)
1964#	jal newObject

	# store "String" tag in object-type field
1968#	la $t0,CLASS_String
1972#	sw $t0,-12($s7)
	
	# store negative of count (=n-k) into object-length header-word
1976#	lw $t1,8($sp) # k
1980#	lw $t2,16($sp) # n
1984#	subu $t0,$t2,$t1 # value to store
1988#	sw $t0,-4($s7) # store value
	
	# store result in return-spot on stack
1992#	lw $t3,24($sp) # source string pointer
1996#	sw $s7,24($sp) # store final result in return-spot on stack
	
	# skip byte-copy loop if length is zero
2000#	beq $zero,$t0,doneSubCopyzz

	# get pointers set up in preparation for copy
2004#	lw $t4,-8($t3) # # data words in source string
2008#	sll $t4,$t4,2 # # data bytes in source string
2012#	subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2016#	addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2020#	subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2024#	lw $t2,-8($s7) # # data words in target string
2028#	sll $t2,$t2,2 # # data bytes in target string
2032#	subu $t2,$s7,$t2 # addr. of first target data byte (+8)
	
	############################################
	# at this point:
	# - we know that the string has a positive length
	# - $t3 contains 8 + address of the first source-byte
	# - $t1 contains 8 + limit-address of the first source-byte
	# - $t2 contains 8 + address first target byte
	############################################

	# copy the bytes from source to target
2036:  subCopyLoopzz:
2036#	lb $t4,-8($t3)
2040#	sb $t4,-8($t2)
2044#	addu $t2,$t2,1
2048#	addu $t3,$t3,1
2052#	blt $t3,$t1,subCopyLoopzz
2053##...slt $at,$t3,$t1
2057##...bne $at,$zero,$-20
	
2060:  doneSubCopyzz:
	# restore return address, store return value, pop stack
2060#	lw $ra,4($sp) # restore $ra
2064#	addu $sp,$sp,24 # pop stack
	
	# return
2068#	jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - the string
# - return-value:
#   - ($sp) - length of string
#   - 4($sp) - (dummy) GC tag
########################################################
2072:length:

	# get string pointer
2072#	lw $t0,($sp)
	
	# grow stack
2076#	subu $sp,$sp,4

	# store GC tag
2080#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# push length onto stack
2084#	lw $t0,-4($t0) # -length
2088#	subu $t0,$zero,$t0
2092#	sw $t0,($sp) #store length

	# return
2096#	jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - the first string
# - returns:
#   - ($sp) - pointer to concatenated string
########################################################
2100:concat:
 	# save $ra by pushing onto stack
2100#	subu $sp,$sp,4
2104#	sw $ra($sp)

	# get string pointers and check parameter for null
2108#	lw $t0,4($sp)
2112#	beq $t0,$zero,nullPtrException
2116#	lw $t1,8($sp)
	
	# get lengths of two strings; allocate object whose size
	# is their sum divided by 4 (rounded up) plus 1
2120#	lw $t0,-4($t0) # negative size of second object
2124#	lw $t1,-4($t1) # negative size of first object
2128#	addu $s6,$t0,$t1 # sum of negative sizes
2132#	sra $s6,$s6,2 # negative word-size of char part
2136#	subu $s6,$zero,$s6 # word size of char part
2140#	addu $s6,$s6,1 # data word size, including v-table word
2144#	move $s7,$zero
2148#	jal newObject

	# store "String" tag in object-type field
2152#	la $t0,CLASS_String
2156#	sw $t0,-12($s7)
	
	# pop rtnVal, $ra and both parameters off stack; push rtnVal
	# onto stack
2160#	lw $ra,4($sp) # return address
2164#	lw $t0,8($sp) # second object
2168#	lw $t1,12($sp) # first object
2172#	addu $sp,$sp,12 # pop
2176#	sw $s7,($sp) # store return value
	
	# get negative sizes; sum and store in new object size-field
2180#	lw $t2,-4($t0) # negative length of second object
2184#	lw $t3,-4($t1) # negative length of first object
2188#	addu $t4,$t2,$t3 # sum of negative lengths
2192#	sw $t4,-4($s7) # store sum as negated target-string length

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is pointer to first object
	# - $t2 is negated length of second object
	# - $t3 is negated length of first object
	# - $s7 is pointer to new object
	#########################################################

	# compute addresses for moving data from first string
2196#	lw $t4,-8($t1) # # data words in first string
2200#	sll $t4,$t4,2 # # data bytes in first string
2204#	subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2208#	lw $t4,-8($s7) # # data words in new string
2212#	sll $t4,$t4,2 # # data bytes in new string
2216#	subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2220#	beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2224#	subu $t3,$t1,$t3 # limit (+8) address for first string

	#########################################################
	# at this point:
	# - $t0 is pointer to second object
	# - $t1 is address (+8) of first byte in first object
	# - $t2 is negated length of second object
	# - $t3 is limit-address (+8) of data in first object
	# - $s7 is address (+8) of first byte in new object
	# - note: if data-length of first object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop1'
	#########################################################

	# copy the bytes from first source to target
2228:  concatLoop1zz:
2228#	lb $t4,-8($t1)
2232#	sb $t4,-8($s7)
2236#	addu $s7,$s7,1
2240#	addu $t1,$t1,1
2244#	blt $t1,$t3,concatLoop1zz
2245##...slt $at,$t1,$t3
2249##...bne $at,$zero,$-20
2252:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2252#    beq $zero,$t2,doneConcatLoop2zz

  	# compute addresses for moving data from second string
2256#	lw $t4,-8($t0) # # data words in second string
2260#	sll $t4,$t4,2 # # data bytes in second string
2264#	subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2268#	subu $t3,$t1,$t2 # limit (+8) address for second string

	#########################################################
	# at this point:
	# - $t1 is address (+8) of first byte in second object
	# - $t3 is limit-address (+8) of data in second object
	# - $s7 is address (+8) of next byte to write new object
	# - note: if data-length of second object is zero, then
	#   we skip over this part, and go to 'doneConcatLoop2'
	#########################################################

	# copy the bytes from first source to target
2272:  concatLoop2zz:
2272#	lb $t4,-8($t1)
2276#	sb $t4,-8($s7)
2280#	addu $s7,$s7,1
2284#	addu $t1,$t1,1
2288#	blt $t1,$t3,concatLoop2zz
2289##...slt $at,$t1,$t3
2293##...bne $at,$zero,$-20
2296:  doneConcatLoop2zz:
 
2296:  concatRtnzz:
	# return
2296#	jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - the string, str
# - returns:
#   - ($sp) - the character found
#   - 4($sp) - the dummy GC tag
########################################################
2300:charAt:
	# get string
2300#	lw $t0,8($sp)

	# check that index is in bounds
2304#	lw $t1,-4($t0) # negative of # data words in string
2308#	subu $t3,$zero,$t1 # # chars in string
2312#	lw $t2,($sp) # index
2316#	bgeu $t2,$t3,strIndexOutOfBounds
2317##...sltu $at,$t2,$t3
2321##...beq $at,$zero,$+1388

	# access element
2324#	lw $t1,-8($t0) # # data words in object
2328#	sll $t1,$t1,2 # - byte-offset from end of chars
2332#	subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2336#	addu $t0,$t0,$t1 # - address of our char, offset by 8
2340#	lb $t0,-8($t0) # our char

	# pop elements off stack, pushing rtnVal
2344#	addu $sp,$sp,4
2348#	sw $t0,($sp)
2352#	sw $s5,4($sp)
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING

	# return
2356#	jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the string representation of
#     the integer
########################################################
2360:intToString:

	# save return address on stack; allocate space for dummy GC tag
2360#	subu $sp,$sp,8
2364#	sw $ra,4($sp)

	# save current sp
2368#	move $t0,$sp

	# move constant 10 into $t3
2372#	li $t3,10

	# get argument, negate if negative
2376#	lw $t1,8($sp)
2380#	bge $t1,$zero,itsNonNegLoop
2381##...slt $at,$t1,$zero
2385##...beq $at,$zero,$+8
2388#	subu $t1,$zero,$t1

	# loop through, computing unsigned remainder by 10, and
	# storing digits on stack until we reach 0
2392:  itsNonNegLoop:
2392#	divu $t1,$t3
2396#	mflo $t1 # quotient
2400#	mfhi $t4 # remainder
2404#	addu $t4,$t4,'0' # turn remainder into digit
2408#	subu $sp,$sp,4
2412#	sw $t4,($sp) # push digit onto stack
2416#	bne $t1,$zero,itsNonNegLoop

	# push '-' if negative
2420#	lw $t4,8($t0)
2424#	bge $t4,$zero,itsSkipNeg
2425##...slt $at,$t4,$zero
2429##...beq $at,$zero,$+16
2432#	li $t4,'-'
2436#	subu $sp,$sp,4
2440#	sw $t4,($sp)
2444:  itsSkipNeg:

	################################################
	# At this point, all of our digits have been pushed
	# onto the stack.  $sp points to the first one;
	# $t0 contains the limit-pointer (into which we need to
	# write a GC tag).
	################################################

	# compute number of characters on stack (one word per character);
	# write GC tag onto stack; push char-count onto stack
2444#	subu $s6,$t0,$sp
2448#	addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed
2452#	sw $t3,($t0)
2456#	srl $s6,$s6,2
2460#	subu $sp,$sp,4
2464#	sw $s6,($sp)
	
	# allocate memory
2468#	addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2472#	srl $s6,$s6,2
2476#	move $s7,$zero # no "object" words in object
2480#	jal newObject

	# restore char-count; pop it and return value from 'newObject'
2484#	lw $t0,4($sp)
2488#	addu $sp,$sp,8

	# store "String" tag into class field
2492#	subu $s7,$s7,8 # address of header-1 word
2496#	la $t1,CLASS_String
2500#	sw $t1,-4($s7)
	
	# store negative of char-count into header-2 word
2504#	subu $t0,$zero,$t0
2508#	sw $t0,4($s7)

2512#	lw $t1,($s7) # number of data words in string
2516#	sll $t1,$t1,2 # number data bytes in string
2520#	subu $t1,$s7,$t1 # first location to store chars in string
2524#	subu $t0,$t1,$t0 # limit address for chars in string

	####################################################
	# at this point:
	# - $sp contains first source character address
	# - $t1 contains first target character address
	# - $t0 contains target-limit address
	####################################################

	# loop through and copy all elements as we pop them off the stack.
	# (In this case, we know that there is it least one.)
2528:  itsLoop:
2528#	lw $t2,($sp)
2532#	addu $sp,$sp,4
2536#	sb $t2,($t1)
2540#	addu $t1,$t1,1
2544#	bne $t1,$t0,itsLoop

	####################################################
	# At this point
	# - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
	# - 4($sp) contains return address
	####################################################

	# adjust stack, restore return address; return
2548#	lw $ra,4($sp)
2552#	addu $sp,$sp,16
2556#	addu $t0,$t0,15
2560#	and $t0,$t0,0xfffffffc
2561##...lui $at,65535
2565##...ori $at,$at,0xfffc
2569##...and $t0,$t0,$at
2572#	sw $t0,($sp)
2576#	jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - dummy GC tag
#   - 8($sp) - this-pointer
# - returns:
#   - ($sp) - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2580:intToChar:
	# save return address
2580#	subu $sp,$sp,4
2584#	sw $ra,($sp)

	# allocate object
2588#	li $s6,2
2592#	move $s7,$zero
2596#	jal newObject

	# restore $ra, get 'n', popping then and 'newObject' rtnVal
	# off stack
2600#	lw $ra,4($sp)
2604#	lw $t1,8($sp)
2608#	addu $sp,$sp,16

	# store "String" tag into class field
2612#	la $t0,CLASS_String
2616#	sw $t0,-12($s7)

	# store data in string
2620#	sb $t1,-16($s7)
	
	# store negative of size in header-word 2
2624#	li $t0,-1
2628#	sw $t0,-4($s7)

	# store string pointer (return val) on stack for return
2632#	sw $s7,($sp)

	# return
2636#	jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - first string
# - returns:
#   - ($sp) - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
#   - 4($sp) - (dummy) GC tag
########################################################
2640:compareTo:
	# get string pointers and check parameter for null
2640#	lw $t0,($sp) # second string
2644#	beq $t0,$zero,nullPtrException
2648#	lw $t1,4($sp) # first string
	
	# get (negatives of) respective byte-lengths
2652#	lw $t2,-4($t0) # negative length of second string
2656#	lw $t3,-4($t1) # negative length of first string

	# put tentative return value in $t5.
	# The tentative return value is the one that we will use if we get
	# to the end of the shorter string during our comparison-loop.
2660#	slt $t4,$t3,$t2
2664#	slt $t5,$t2,$t3
2668#	subu $t5,$t5,$t4
	
	# at this point:
	# - $t0 contains the pointer to the second string object
	# - $t1 contains the pointer to the first string object
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	# get begin-of-string addresses
2672#	lw $t2,-8($t0) # # data words in second string
2676#	lw $t3,-8($t1) # # data words in first string
2680#	sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2684#	sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2688#	subu $t0,$t0,$t2 # beginning of str1 address (+8)
2692#	subu $t1,$t1,$t3 # beginning of str2 address (+8)
	
	# put $t1-limit into $t2
2696#	beq $zero,$t5,skipStrCmpLenzz
2700#	move $t2,$t3
2704:  skipStrCmpLenzz:
2704#    add $t2,$t1,$t2
	
	# at this point:
	# - $t0 contains 8 plus the address of the first data-byte of str2
	# - $t1 contains 8 plus the address of the first data-byte of str1
	# - $t2 contains 8 plus the address of the last data-type of str1
	# - $t5 contains the value to return if the strings compare equal up
	#   to the length of the shortest word

	#######################################################
	# at this point, we have
	# - $t5 containing the tentative return-value
	# - $t1 containing address of first char in str2
	# - $t2 containing limit for $t1
	# - $t0 containing address of first char in str1
	#######################################################

	# loop through, until we find unequal words or we hit
	# our limit	
2708:  cmpLoopzz:
2708#	lw $t3,-8($t1) # word from str2
2712#	lw $t4,-8($t0) # word from str1
2716#	bne $t3,$t4,cmpNotEqualzz
2720#	addu $t1,$t1,4
2724#	addu $t0,$t0,4
2728#	bne $t1,$t2,cmpLoopzz

	# # got to the end of one string: go set up return
2732#	j cmpHitLimitzz

2736:  cmpNotEqualzz:
	# found unequal characters: return -1 or 1, depending on which is
	# greater
2736#	slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2740#	sll $t5,$t5,1 # 2 if str2 > str1, else 0
2744#	subu $t5,$t5,1 # 1 if str2 > str1, else -1
2748:  cmpHitLimitzz:
2748#	sw $t5,($sp) # store value
2752#	sw $s5,4($sp) # GC tag
	#lw $zero,4($sp)#**"" #--FOR MEMORY TAGGING
2756#	jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2760:readLogicalChar:

	# check if we already have a character
2760#	lw $v0,lastCharRead
2764#	li $t0,-2
2768#	beq $t0,$v0 doReadCh

	# we have our character from the buffer. Wipe out
	# buffer and return
2772#	sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2776#	jr $ra # return
	
2780:  doReadCh:
	# we need to actually read a character: read and return
2780#	li $v0,12 # use system call to read a character
2784#	syscall
2788#	jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = first header-word, which is -1 if it is a data-array
#      allocation, and is the number of data words in the object
#      otherwise
#    - $s7 - second header-word, which is the number of object
#      words in the object (unless $s6 is -1, in which case it
#      is the number of data words in the object
#    - it is illegal for $s6 to be less than -1 (this is not checked)
#    - it is illegal for $s7 to be less than 0 (this is checked)
#  - return-result:
#    - pushed onto the top of the stack
#    - also returned in $s7
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2792:newObject:
	# $s6 = # data words (or -1 if data-array allocation)
	#   - note: it is illegal for $s6 to be less than -1
	# $s7 = # object words (# data words if data-array allocation)
	# $ra = return address
	## on return, pointer to new memory is on
	##   top of stack, and also in $s7
	
	# abort if the object size is negative (this would be an array
	# allocation)
2792#	blt $s7,$zero arraySizeOutOfBounds
2793##...slt $at,$s7,$zero
2797##...bne $at,$zero,$+928

	# mark the fact that we have not yet GC'd for this allocation
2800#	move $t5,$zero

	###### TEMPORARY #######
	# for now, go a GC unconditionally, so that a full GC occurs
	# every time we allocate an object
	### let's not do that for now
	# j doGC

2804:  gcJoin:
	# Determine actual size of "before-header" portion.
	# If negative, it really means zero
2804#	move $t3,$s6
2808#	bge $t3,$zero,newSkip
2809##...slt $at,$t3,$zero
2813##...beq $at,$zero,$+8
2816#	move $t3,$zero

2820:  newSkip:

	# at this point:
	#  $s6 contains the first header word
	#  $s7 contains the second header word, which is also the
	#    after-header word count
	#  $t3 contains the before-header word count
	#  $t5 is zero iff we have not GC'd for this allocation

	# determine if we have enough memory available
2820#	addu $t0,$t3,$s7
2824#	sll $t0,$t0,2
2828#	addu $t0,$t0,8 # amount of memory needed
2832#	addu $t1,$t0,$s3
2836#	bgtu $t1,$s4,doGC
2837##...sltu $at,$s4,$t1
2841##...bne $at,$zero,$+56

	# at this point:
	#  $s3 points to beginning of segment, and
	#  $t1 points just past the end

	# zero out the memory
2844#	move $t2,$s3
2848:  zeroObjLoop:
2848#	sw $zero,($s3)
	#lw $zero,($s3)#**"" #--FOR MEMORY TAGGING	

2852#	addu $s3,4
2856#	bltu $s3,$t1,zeroObjLoop
2857##...sltu $at,$s3,$t1
2861##...bne $at,$zero,$-12

	# at this point:
	#  $s3 has been updated to point to the next free slot,
	#    which is also the point just past our object

	# compute pointer value and set up header-words
2864#	sll $t0,$s7,2    # number of post-header bytes
2868#	subu $t0,$s3,$t0 # pointer that we will return

	# store header-values
2872#	sw $s6,-8($t0)   # first header-word
	#lw $zero,-8($t0)#**"H1" #--FOR MEMORY TAGGING
2876#	sw $s7,-4($t0)   # second header-word
	#lw $zero,-4($t0)#**"H2" #--FOR MEMORY TAGGING
	
	# put return-value into $s7 and also push it onto top of stack
2880#	move $s7,$t0
2884#	subu $sp,$sp,4
2888#	sw $t0,($sp)

2892#	jr $ra
	
2896:  doGC:
	#####################################################
	# We need to do a garbage-collect
	#####################################################
 
         # print that we are doing a GC 
         #la $a0,gcMsg # prints message: "GC!" 
         #li $v0,4 # syscall-code for print-string 
         #syscall 
 	  
	# if we've already done a GC for this allocation, then
	# we are actually out heap-memory: abort program
2896#	bne $t5,$zero,outOfHeapMemory
	  
	# save $s2 (our only rooted register) on the stack
	# so that the garbage collector processes it
2900#	subu $sp,$sp,4
2904#	sw $s2,($sp)

	# set $s3 to the address of the new segment and the
	# end-limit of the new segment, respectively,
	# Also, update cur_seg to refer to the other segment
2908#	lw $t0,cur_seg
2912#	move $t7,$s4
2916#	la $t6,seg1_start
2917##...lui $t6,16
2921##...addiu $t6,$t6,4400
2924#	la $s3,seg0_start
2928#	la $s4,seg0_end
2929##...lui $s4,16
2933##...addiu $s4,$s4,4400
2936#	sw $zero,cur_seg
2940#	bne $t0,$zero,skipGc1
2944#	la $t6,seg0_start
2948#	la $s3,seg1_start
2949##...lui $s3,16
2953##...addiu $s3,$s3,4400
2956#	la $s4,seg1_end
2957##...lui $s4,32
2961##...addiu $s4,$s4,4400
2964#	sw $s5,cur_seg
2968:  skipGc1:
2968#	li $t5,-2
2972#	lw $t0,stack_bottom
2976#	subu $t0,4

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $t1,heapFudge
	#addu $t6,$t6,$t1
	#addu $t1,$t1,4
	#addu $s3,$s3,$t1 # fudge new heap pointer

	###############################################################
	# at this point:
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first address of the target space
	# - $s4 contains the limit address of the target space
	# - cur_seg has been updated to refer to the target space
	# - $t0 contains the address of the deepest stack element
	# - $sp contains the address of the top stack element
	# - $s2 is available for use, having been pushed onto the stack
	# - $t5 contains the value -2
	###############################################################


	###### begin outer loop to copy all stack-direct objects ######

2980:  gcStackCopyLoop:
2980#	lw $t1,($t0) # current stack element

	# test if we have a GC tag
2984#	sll $t2,$t1,31 # zero iff low bit was zero
2988#	bne $t2,$zero,gcBump # go skip data values if low bit not zero

	# bump stack-address pointer
2992#	subu $t0,$t0,4

	# if value is out of range (which includes null=0), and is
	# therefore does not refer to an object on the heap, just go
	# loop back and do the next one
2996#	bleu $t1,$t6,gcTestIterDone1
2997##...sltu $at,$t6,$t1
3001##...beq $at,$zero,$+148
3004#	bgtu $t1,$t7,gcTestIterDone1
3005##...sltu $at,$t7,$t1
3009##...bne $at,$zero,$+140

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3012#	lw $t2,-8($t1) # possible forwarding tag
3016#	bne $t2,$t5,gcNoForward1 # if not forwarding tag, go copy
3020#	lw $t2,-4($t1) # forwarding pointer: object's new address
3024#	sw $t2,4($t0) # update stack value
3028#	j gcTestIterDone1 # do next iteration

3032:  gcNoForward1:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	# compute the amount of space that is needed
3032#	bge $t2,$zero,gcSkip2
3033##...slt $at,$t2,$zero
3037##...beq $at,$zero,$+8
3040#	move $t2,$zero # set to zero if -1 (number of data words)

3044:  gcSkip2:
3044#	sll $t2,$t2,2
3048#	addu $t2,$t2,8
3052#	subu $t4,$t1,$t2 # address of first word of source
3056#	lw $t3,-4($t1) # number of object words (negative treated as zero)
3060#	bge $t3,$zero,gcH2Neg1
3061##...slt $at,$t3,$zero
3065##...beq $at,$zero,$+8
3068#	move $t3,$zero
3072:  gcH2Neg1:
3072#	sll $t3,$t3,2
3076#	addu $t3,$t3,$t1 # address one word past last word of source

3080#	addu $t2,$s3,$t2 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object (i.e., the address just beyond the object's header
	# - $t2 contains the pointer to the target object
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0-2
	#########################################################

	# swap first header word and first data word so that header
    # can be found by "trailing finger" in the target space
3084#	lw $s0,($t4)
3088#	lw $s1,-8($t1)
3092#	sw $s1,($t4)
3096#	sw $s0,-8($t1)
	
	# copy all source bytes to the target
3100:  gCinnerCopy1:
3100#	lw $s0,($t4)
3104#	sw $s0,($s3)
3108#	addu $t4,$t4,4
3112#	addu $s3,$s3,4
3116#	bltu $t4,$t3,gCinnerCopy1
3117##...sltu $at,$t4,$t3
3121##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3124#	sw $t5,-8($t1) # -2 in first header-slot
3128#	sw $t2,-4($t1) # forwarding pointer in second header-slot

	# update the stack slot with the address in the target space
3132#	sw $t2,4($t0)
	#lw $zero,-8($t2)#**"H1" #--FOR MEMORY TAGGING
	#lw $zero,-4($t2)#**"H2" #--FOR MEMORY TAGGING

	# go handle next stack slot (testing if done)
3136#	j gcTestIterDone1

3140:  gcBump:
	#### we have a GC tag.  Bytes to skip: tag value + 3.
3140#	subu $t0,$t0,$t1
3144#	subu $t0,$t0,3

3148:  gcTestIterDone1:
3148#	bgeu $t0,$sp,gcStackCopyLoop
3149##...sltu $at,$t0,$sp
3153##...beq $at,$zero,$-172

	###### end outer loop to copy all stack-direct objects ######

	#############################################################
	# We have finished processing the stack elements.  Now we need
	# to update elements in the heap itself. This may itself involve
	# moving additional objects
	#############################################################

	#########################################################
	# At this point:
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# We want to set things up so that in addition:
	# - $t0 is the "trailing finger", containing the address
	#   of the first slot in target space that we have yet
	#   to process.
	# Then during processing:
	# - $t1 will contain the contents of the heap slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# And when we're actually copying an object:
	# - $t2 will contain pointer to the target object
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - available for use: $s0
	##########################################################

	# set $t0 to be at the beginning of target-space
3156#	lw $t1,cur_seg
3160#	la $t0,seg0_start
3164#	beq $t1,$zero,gcSkip4
3168#	la $t0,seg1_start
3169##...lui $t0,16
3173##...addiu $t0,$t0,4400

	##################################
	# TEMPORARY HACK TO EXERCISE GC
	##################################
	#lw $s0,heapFudge
	#addu $s0,$s0,4
	#addu $t0,$t0,$s0
	#sw $s0,heapFudge

3176:  gcSkip4:

	# if there were no objects put into the heap during stack
	# processing, we're done, so go finish up
3176#	bgeu $t0,$s3,gcFinishUp
3177##...sltu $at,$t0,$s3
3181##...beq $at,$zero,$+256

	###### begin outer loop to copy all non-stack-direct objects ######

3184:  gcHeapCopyLoop:
	# check if we have a data array
3184#	lw $t1,($t0) # first header word for current object
3188#	bge $t1,$zero,gcNotDataArray # test for neg. num (actually -1)
3189##...slt $at,$t1,$zero
3193##...beq $at,$zero,$+24

	# We have a -1 header-word, which means this object has no pointers.
	# Skip over it and go loop to do next object.
3196#	lw $t1,4($t0) # data words
3200#	addu $t1,$t1,2 # add in # header words
3204#	sll $t1,$t1,2 # convert to byte-count
3208#	addu $t0,$t0,$t1 # skip over object
3212#	j gcTestIterDone2 # go do next object, if any

3216:  gcNotDataArray:
	# get data count for object; swap header-word with first word
	# of object so that they're back in the right place
3216#	sll $t2,$t1,2 # # data bytes
3220#	addu $t2,$t2,8 # to skip header word
3224#	addu $t2,$t0,$t2 # pointer to new object
3228#	lw $t3,-8($t2) # word to swap
3232#	sw $t1,-8($t2) # store header word
3236#	sw $t3,($t0) # restore first word of object

3240#	lw $t3,-4($t2) # # object words (negative treated as zero)
3244#	bge $t3,$zero,gcH2Neg2
3245##...slt $at,$t3,$zero
3249##...beq $at,$zero,$+8
3252#	move $t3,$zero
3256:  gcH2Neg2:
3256#	sll $t3,$t3,2 # # object bytes
3260#	move $t0,$t2 # address of first pointer in object
3264#	add $s1,$t2,$t3 # limit address for this object

	#####################################################
	# At this point, we have to "translate" all pointers,
	# starting at $t0 to (but not including) $s1
	#####################################################

	# if there are no pointer-slots (i.e., $t0=$s1), skip this
	# part
3268#	beq $t0,$s1,gcTestIterDone2
	
3272:  gcNextPointerInObject:
	# get pointer from object
3272#	lw $t1,($t0)

	# if value is out of range, and is therefore does not refer
	# to an object, just go loop back and do the next one
3276#	bleu $t1,$t6,gcGoNextPointerSlot
3277##...sltu $at,$t6,$t1
3281##...beq $at,$zero,$+136
3284#	bgtu $t1,$t7,gcGoNextPointerSlot
3285##...sltu $at,$t7,$t1
3289##...bne $at,$zero,$+128

	# if the object has already been moved, update the stack-value
	# via the forwarding pointer
3292#	lw $t8,-8($t1) # possible forwarding tag
3296#	bne $t8,$t5,gcNoForward2 # if not forwarding tag, go copy
3300#	lw $t8,-4($t1) # forwarding pointer: object's new address
3304#	sw $t8,($t0) # update pointer in object
3308#	j gcGoNextPointerSlot # do next iteration

3312:  gcNoForward2:
	#########################################################
	# we actually need to copy the object into the new space
	#########################################################

	#########################################################
	# At this point:
	# - $t0 contains the address of the heap-slot we're translating
	# - $t1 will contain the contents of the heap-slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $s3 contains the first unallocated address of the
	#   target space, which will also be the first address
	#   of the target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# Then during processing:
	# And when we're actually copying an object:
	# - $t3 will contain the limit address of the source object
	# - $t4 will contain the first address of the source object
	# - $s1 will contain the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $t8 will contain a pointer to the target object
	# - available for use: $s0, $t8, $t9
	##########################################################

	# compute the amount of space that is needed
3312#	bge $t8,$zero,gcSkip5
3313##...slt $at,$t8,$zero
3317##...beq $at,$zero,$+8
3320#	move $t8,$zero # set to zero if -1

3324:  gcSkip5:
3324#	sll $t8,$t8,2
3328#	addu $t8,$t8,8
3332#	subu $t4,$t1,$t8 # address of first word of source
3336#	lw $t3,-4($t1)
3340#	bge $t3,$zero,gcNoNeg
3341##...slt $at,$t3,$zero
3345##...beq $at,$zero,$+8
3348#	move $t3,$zero
3352:  gcNoNeg:
3352#	sll $t3,$t3,2
3356#	addu $t3,$t3,$t1 # address one word past last word of source

3360#	addu $t8,$s3,$t8 # pointer to target object

	#########################################################
	# At this point:
	# - $t0 contains the address of the stack slot we'll
	#   process next
	# - $t1 contains the contents of the stack slot we're
	#   currently working on, which is a pointer to the source
	#   object
	# - $t2 will contains pointer to the object we're in the
	#   middle of translating
	# - $t3 contains the limit address of the source object
	# - $t4 contains the first address of the source object
	# - $t5 contains the value -2	
	# - $t6 contains the first address of the source space
	# - $t7 contains the limit address of the source space
	# - $t8 contains the pointer to the target object
	# - $s1 contains the the limit address for the current
	#   object that tells where the pointers in the object end
	# - $s3 contains the first unallocated address of the
	#   target space, which is also the first address of the
	#   target object
	# - $s4 contains the limit address of the target space
	# - $s5 contains the value 5
	# - $s6-7 contain the original parameters to the call to
	#   'newObject'
	# - $sp contains the address of the top stack element
	# - available for use: $s0, $t9
	#########################################################

	# swap first header word and first data word so that header
        # can be found by "trailing finger"
3364#	lw $s0,($t4)
3368#	lw $t9,-8($t1)
3372#	sw $t9,($t4)
3376#	sw $s0,-8($t1)

	# copy all source bytes to the target
3380:  gCinnerCopy2:
3380#	lw $s0,($t4)
3384#	sw $s0,($s3)
3388#	addu $t4,$t4,4
3392#	addu $s3,$s3,4
3396#	bltu $t4,$t3,gCinnerCopy2
3397##...sltu $at,$t4,$t3
3401##...bne $at,$zero,$-20

	###########################################################
	# All bytes have been copied to the target space.  We still
	# need to:
	# - set up forwarding pointer in source object
	# - update the pointer in the current stack slot
	###########################################################

	# set up the forwarding pointer
3404#	sw $t5,-8($t1) # -2 in first header-slot
3408#	sw $t8,-4($t1) # forwarding pointer in second header-slot

	# update the heap-slot with the address in the target space
3412#	sw $t8,($t0)

3416:  gcGoNextPointerSlot:
	# bump $t0 to next slot in object; if not done, loop back
3416#	addu $t0,$t0,4
3420#	bltu $t0,$s1,gcNextPointerInObject
3421##...sltu $at,$t0,$s1
3425##...bne $at,$zero,$-152

3428:  gcTestIterDone2:
3428#	bltu $t0,$s3,gcHeapCopyLoop
3429##...sltu $at,$t0,$s3
3433##...bne $at,$zero,$-248

	###### end outer loop to copy all non-stack-direct objects ######

3436:  gcFinishUp:
	# restore $s2 to its updated value by popping off stack
3436#	lw $s2,($sp)
3440#	addu $sp,$sp,4

	# mark us as having already GC'd
3444#	move $t5,$s5

	# go try and allocate again
3448#	j gcJoin
	    

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3452:vm_init:

	# mark bottom of stack
3452#	sw $sp,stack_bottom
3456#"stack pointer"	move $sp,$sp#**"stack pointer"  #--FOR MEMORY TAGGING
	
	# set "this" pointer to be null, for now
3460#	move $s2,$zero
3464#"this pointer"	move $s2,$s2#**"this pointer"  #--FOR MEMORY TAGGING

	#set up the "five" register
3468#	li $s5,5
3472#"constant 5"	move $s5,$s5#**"constant 5"  #--FOR MEMORY TAGGING

3476#	la $s3,seg0_start
3480#"next-avail-heap"	move $s3,$s3#**"next-avail-heap"  #--FOR MEMORY TAGGING
3484#	la $s4,seg0_end
3485##...lui $s4,16
3489##...addiu $s4,$s4,4400
3492#"end-heap"	move $s4,$s4#**"end-heap"  #--FOR MEMORY TAGGING
	
	# return
3496#	jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3500:divide:
	# get parameters; abort if divisor zero
3500#	lw $t0,($sp)
3504#	lw $t1,8($sp)
3508#	beq $t0,$zero,divByZeroError
	
	# perform division
3512#	div $t1,$t0
3516#	mflo $t0

	# store result, adjust stack and return
3520#	addu $sp,$sp,8 # adjust stack
3524#	sw $t0,($sp) # store result
3528#	jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3532:remainder:
	# get parameters; abort if divisor zero
3532#	lw $t0,($sp)
3536#	lw $t1,8($sp)
3540#	beq $t0,$zero,divByZeroError
	
	# perform division
3544#	div $t1,$t0
3548#	mfhi $t0

	# store result, adjust stack and return
3552#	addu $sp,$sp,8 # adjust stack
3556#	sw $t0,($sp) # store result
3560#	jr $ra
	
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3564:checkCast:
	# get object, allow immediately if null
3564#	lw $t2,($sp)
3568#	beq $t2,$zero,checkCastReturn
	
	# get vtable address of object (using Object vtable
	# address for arrays)
3572#	lw $t3,-8($t2) # <= 0 if array
3576#	lw $t2,-12($t2) # vtable address (unless array)
3580#	bgt $t3,$zero,skipArrayCast
3581##...slt $at,$zero,$t3
3585##...bne $at,$zero,$+8
3588#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3592:  skipArrayCast:
3592#	bge $t2,$t1,castException
3593##...slt $at,$t2,$t1
3597##...beq $at,$zero,$+152
3600#	blt $t2,$t0,castException
3601##...slt $at,$t2,$t0
3605##...bne $at,$zero,$+144
	
	# return, leaving object unchanged on stack
3608:  checkCastReturn:	
3608#	jr $ra	
	
########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3612:instanceOf:
	# get object, go return false if null
3612#	lw $t2,($sp)
3616#	beq $t2,$zero,doneInstanceOf
	
	# get vtable address of object.  If it's an array
	# (which would be H1 <= 0), use vtable address for Object
3620#	lw $t3,-8($t2) # <= 0 if array
3624#	lw $t2,-12($t2) # vtable address (unless array)
3628#	bgt $t3,$zero,skipArrayInstanceOf
3629##...slt $at,$zero,$t3
3633##...bne $at,$zero,$+8
3636#	la $t2,CLASS_Object
	
	# get vtable address of object, abort if less than
	# lower limit or greater then or equal to higher
	# limit
3640:  skipArrayInstanceOf:
3640#	sge $t0,$t2,$t0
3641##...slt $t0,$t2,$t0
3645##...xori $t0,$t0,0x1
3648#	slt $t1,$t2,$t1
	
	# store the AND of the two conditions onto the stack; return
3652#	and $t2,$t0,$t1
3656:  doneInstanceOf: # if we reach here via branch, we know $t2=0
3656#	sw $t2,($sp)
3660#	jr $ra

###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3664:exitError:
	# assumes $a0 has pointer to null-terminated string

	# print the string
3664#	li $v0,4 # syscall-code for print-string
3668#	syscall
3672:exit:
	# print termination message
3672#	li $v0,4
3676#	la $a0,exitString
3680#	syscall

	# terminate execution
3684#	li $v0,10 #syscall-code for "exit"
3688#	syscall

3692:outOfHeapMemory:
3692#	la $a0,heapMemoryMsg
3696#	j exitError
3700:divByZeroError:
3700#	la $a0,divByZeroMsg
3704#	j exitError
3708:strIndexOutOfBounds:
3708#	la $a0,strIndexOutOfBoundsMsg
3712#	j exitError
3716:arrayIndexOutOfBounds:
3716#	la $a0,arrayIndexOutOfBoundsMsg
3720#	j exitError
3724:arraySizeOutOfBounds:
3724#	la $a0,arraySizeOutOfBoundsMsg
3728#	j exitError
3732:nullPtrException:
3732#	la $a0,nullPtrExceptionMsg
3736#	j exitError
3740:badIntegerFormat:
3740#	la $a0,badIntegerFormatMsg
3744#	j exitError
3748:castException:
3748#	la $a0,castExceptionMsg
3752#	j exitError

############## data section ################
	.data
	.align 2

4092:cur_seg:
	.word 0

4096:lastCharRead:
	.word -2 # -2 => no buffered character

4100:heapMemoryMsg:
	.asciiz "ERROR: out of heap memory\n"
4127:divByZeroMsg:
	.asciiz "ERROR: divide by zero\n"
4150:strIndexOutOfBoundsMsg:
	.asciiz "ERROR: string index out of bounds\n"
4185:arrayIndexOutOfBoundsMsg:
	.asciiz "ERROR: array index out of bounds\n"
4219:arraySizeOutOfBoundsMsg:
	.asciiz "ERROR: array size out of bounds\n"
4252:nullPtrExceptionMsg:
	.asciiz "ERROR: null-pointer exception\n"
4283:badIntegerFormatMsg:
	.asciiz "ERROR: attempt to read badly formatted integer\n"
4331:castExceptionMsg:
	.asciiz "ERROR: illegal cast\n"
4352:gcMsg: 
      .asciiz "\nGC!\n"

4358:nullStr:
	.asciiz "null"
4363:trueString:
	.asciiz "true"
4368:falseString:
	.asciiz "false"
4374:exitString:
	.asciiz "Program terminated.\n"
	
	.align 2
4396:stack_bottom:
	.word 0

#heapFudge: # temporary fudge amount to exercise GC
#	.word 0

4400:seg0_start:
	.space 0x100000
1052976:seg0_end:
1052976:seg1_start:
	.space 0x100000
2101552:seg1_end:



